# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'BackupScheduleSpec',
    'BackupScheduleSpecBackupTemplate',
    'BackupScheduleSpecBackupTemplateAffinity',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinity',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinity',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'BackupScheduleSpecBackupTemplateBr',
    'BackupScheduleSpecBackupTemplateDumpling',
    'BackupScheduleSpecBackupTemplateFrom',
    'BackupScheduleSpecBackupTemplateGcs',
    'BackupScheduleSpecBackupTemplateImagePullSecrets',
    'BackupScheduleSpecBackupTemplateResources',
    'BackupScheduleSpecBackupTemplateS3',
    'BackupScheduleSpecBackupTemplateTolerations',
    'BackupScheduleSpecImagePullSecrets',
    'BackupSpec',
    'BackupSpecAffinity',
    'BackupSpecAffinityNodeAffinity',
    'BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'BackupSpecAffinityPodAffinity',
    'BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'BackupSpecAffinityPodAntiAffinity',
    'BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'BackupSpecBr',
    'BackupSpecDumpling',
    'BackupSpecFrom',
    'BackupSpecGcs',
    'BackupSpecImagePullSecrets',
    'BackupSpecResources',
    'BackupSpecS3',
    'BackupSpecTolerations',
    'RestoreSpec',
    'RestoreSpecAffinity',
    'RestoreSpecAffinityNodeAffinity',
    'RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'RestoreSpecAffinityPodAffinity',
    'RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'RestoreSpecAffinityPodAntiAffinity',
    'RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'RestoreSpecBr',
    'RestoreSpecGcs',
    'RestoreSpecImagePullSecrets',
    'RestoreSpecResources',
    'RestoreSpecS3',
    'RestoreSpecTo',
    'RestoreSpecTolerations',
    'TidbClusterAutoScalerSpec',
    'TidbClusterAutoScalerSpecCluster',
    'TidbClusterAutoScalerSpecMonitor',
    'TidbClusterAutoScalerSpecTidb',
    'TidbClusterAutoScalerSpecTidbExternalEndpoint',
    'TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret',
    'TidbClusterAutoScalerSpecTikv',
    'TidbClusterAutoScalerSpecTikvExternalEndpoint',
    'TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret',
    'TidbClusterAutoScalerStatus',
    'TidbClusterAutoScalerStatusTidb',
    'TidbClusterAutoScalerStatusTidbMetrics',
    'TidbClusterAutoScalerStatusTikv',
    'TidbClusterAutoScalerStatusTikvMetrics',
    'TidbClusterSpec',
    'TidbClusterSpecAffinity',
    'TidbClusterSpecAffinityNodeAffinity',
    'TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecAffinityPodAffinity',
    'TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecAffinityPodAntiAffinity',
    'TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecDiscovery',
    'TidbClusterSpecHelper',
    'TidbClusterSpecImagePullSecrets',
    'TidbClusterSpecPd',
    'TidbClusterSpecPdAdditionalContainers',
    'TidbClusterSpecPdAdditionalContainersEnv',
    'TidbClusterSpecPdAdditionalContainersEnvFrom',
    'TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecPdAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecPdAdditionalContainersEnvValueFrom',
    'TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecPdAdditionalContainersLifecycle',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecPdAdditionalContainersLivenessProbe',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecPdAdditionalContainersPorts',
    'TidbClusterSpecPdAdditionalContainersReadinessProbe',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecPdAdditionalContainersResources',
    'TidbClusterSpecPdAdditionalContainersSecurityContext',
    'TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecPdAdditionalContainersStartupProbe',
    'TidbClusterSpecPdAdditionalContainersStartupProbeExec',
    'TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecPdAdditionalContainersVolumeDevices',
    'TidbClusterSpecPdAdditionalContainersVolumeMounts',
    'TidbClusterSpecPdAdditionalVolumes',
    'TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecPdAdditionalVolumesAzureDisk',
    'TidbClusterSpecPdAdditionalVolumesAzureFile',
    'TidbClusterSpecPdAdditionalVolumesCephfs',
    'TidbClusterSpecPdAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecPdAdditionalVolumesCinder',
    'TidbClusterSpecPdAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecPdAdditionalVolumesConfigMap',
    'TidbClusterSpecPdAdditionalVolumesConfigMapItems',
    'TidbClusterSpecPdAdditionalVolumesCsi',
    'TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecPdAdditionalVolumesDownwardAPI',
    'TidbClusterSpecPdAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecPdAdditionalVolumesEmptyDir',
    'TidbClusterSpecPdAdditionalVolumesFc',
    'TidbClusterSpecPdAdditionalVolumesFlexVolume',
    'TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecPdAdditionalVolumesFlocker',
    'TidbClusterSpecPdAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecPdAdditionalVolumesGitRepo',
    'TidbClusterSpecPdAdditionalVolumesGlusterfs',
    'TidbClusterSpecPdAdditionalVolumesHostPath',
    'TidbClusterSpecPdAdditionalVolumesIscsi',
    'TidbClusterSpecPdAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecPdAdditionalVolumesNfs',
    'TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecPdAdditionalVolumesPortworxVolume',
    'TidbClusterSpecPdAdditionalVolumesProjected',
    'TidbClusterSpecPdAdditionalVolumesProjectedSources',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecPdAdditionalVolumesQuobyte',
    'TidbClusterSpecPdAdditionalVolumesRbd',
    'TidbClusterSpecPdAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecPdAdditionalVolumesScaleIO',
    'TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecPdAdditionalVolumesSecret',
    'TidbClusterSpecPdAdditionalVolumesSecretItems',
    'TidbClusterSpecPdAdditionalVolumesStorageos',
    'TidbClusterSpecPdAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecPdAdditionalVolumesVsphereVolume',
    'TidbClusterSpecPdAffinity',
    'TidbClusterSpecPdAffinityNodeAffinity',
    'TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecPdAffinityPodAffinity',
    'TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecPdAffinityPodAntiAffinity',
    'TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecPdConfig',
    'TidbClusterSpecPdConfigDashboard',
    'TidbClusterSpecPdConfigLog',
    'TidbClusterSpecPdConfigLogFile',
    'TidbClusterSpecPdConfigMetric',
    'TidbClusterSpecPdConfigPd-Server',
    'TidbClusterSpecPdConfigReplication',
    'TidbClusterSpecPdConfigSchedule',
    'TidbClusterSpecPdConfigScheduleSchedulers-V2',
    'TidbClusterSpecPdConfigSecurity',
    'TidbClusterSpecPdEnv',
    'TidbClusterSpecPdEnvValueFrom',
    'TidbClusterSpecPdEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecPdEnvValueFromFieldRef',
    'TidbClusterSpecPdEnvValueFromResourceFieldRef',
    'TidbClusterSpecPdEnvValueFromSecretKeyRef',
    'TidbClusterSpecPdImagePullSecrets',
    'TidbClusterSpecPdPodSecurityContext',
    'TidbClusterSpecPdPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecPdPodSecurityContextSysctls',
    'TidbClusterSpecPdPodSecurityContextWindowsOptions',
    'TidbClusterSpecPdService',
    'TidbClusterSpecPdTolerations',
    'TidbClusterSpecPump',
    'TidbClusterSpecPumpAdditionalContainers',
    'TidbClusterSpecPumpAdditionalContainersEnv',
    'TidbClusterSpecPumpAdditionalContainersEnvFrom',
    'TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecPumpAdditionalContainersEnvValueFrom',
    'TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecPumpAdditionalContainersLifecycle',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbe',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecPumpAdditionalContainersPorts',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbe',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecPumpAdditionalContainersResources',
    'TidbClusterSpecPumpAdditionalContainersSecurityContext',
    'TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecPumpAdditionalContainersStartupProbe',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeExec',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecPumpAdditionalContainersVolumeDevices',
    'TidbClusterSpecPumpAdditionalContainersVolumeMounts',
    'TidbClusterSpecPumpAdditionalVolumes',
    'TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecPumpAdditionalVolumesAzureDisk',
    'TidbClusterSpecPumpAdditionalVolumesAzureFile',
    'TidbClusterSpecPumpAdditionalVolumesCephfs',
    'TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesCinder',
    'TidbClusterSpecPumpAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesConfigMap',
    'TidbClusterSpecPumpAdditionalVolumesConfigMapItems',
    'TidbClusterSpecPumpAdditionalVolumesCsi',
    'TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesDownwardAPI',
    'TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecPumpAdditionalVolumesEmptyDir',
    'TidbClusterSpecPumpAdditionalVolumesFc',
    'TidbClusterSpecPumpAdditionalVolumesFlexVolume',
    'TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesFlocker',
    'TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecPumpAdditionalVolumesGitRepo',
    'TidbClusterSpecPumpAdditionalVolumesGlusterfs',
    'TidbClusterSpecPumpAdditionalVolumesHostPath',
    'TidbClusterSpecPumpAdditionalVolumesIscsi',
    'TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesNfs',
    'TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecPumpAdditionalVolumesPortworxVolume',
    'TidbClusterSpecPumpAdditionalVolumesProjected',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSources',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecPumpAdditionalVolumesQuobyte',
    'TidbClusterSpecPumpAdditionalVolumesRbd',
    'TidbClusterSpecPumpAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesScaleIO',
    'TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesSecret',
    'TidbClusterSpecPumpAdditionalVolumesSecretItems',
    'TidbClusterSpecPumpAdditionalVolumesStorageos',
    'TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecPumpAdditionalVolumesVsphereVolume',
    'TidbClusterSpecPumpAffinity',
    'TidbClusterSpecPumpAffinityNodeAffinity',
    'TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecPumpAffinityPodAffinity',
    'TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecPumpAffinityPodAntiAffinity',
    'TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecPumpEnv',
    'TidbClusterSpecPumpEnvValueFrom',
    'TidbClusterSpecPumpEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecPumpEnvValueFromFieldRef',
    'TidbClusterSpecPumpEnvValueFromResourceFieldRef',
    'TidbClusterSpecPumpEnvValueFromSecretKeyRef',
    'TidbClusterSpecPumpImagePullSecrets',
    'TidbClusterSpecPumpPodSecurityContext',
    'TidbClusterSpecPumpPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecPumpPodSecurityContextSysctls',
    'TidbClusterSpecPumpPodSecurityContextWindowsOptions',
    'TidbClusterSpecPumpTolerations',
    'TidbClusterSpecTicdc',
    'TidbClusterSpecTicdcAdditionalContainers',
    'TidbClusterSpecTicdcAdditionalContainersEnv',
    'TidbClusterSpecTicdcAdditionalContainersEnvFrom',
    'TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecTicdcAdditionalContainersEnvValueFrom',
    'TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecTicdcAdditionalContainersLifecycle',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbe',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecTicdcAdditionalContainersPorts',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbe',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecTicdcAdditionalContainersResources',
    'TidbClusterSpecTicdcAdditionalContainersSecurityContext',
    'TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbe',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeExec',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecTicdcAdditionalContainersVolumeDevices',
    'TidbClusterSpecTicdcAdditionalContainersVolumeMounts',
    'TidbClusterSpecTicdcAdditionalVolumes',
    'TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecTicdcAdditionalVolumesAzureDisk',
    'TidbClusterSpecTicdcAdditionalVolumesAzureFile',
    'TidbClusterSpecTicdcAdditionalVolumesCephfs',
    'TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesCinder',
    'TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesConfigMap',
    'TidbClusterSpecTicdcAdditionalVolumesConfigMapItems',
    'TidbClusterSpecTicdcAdditionalVolumesCsi',
    'TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesDownwardAPI',
    'TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTicdcAdditionalVolumesEmptyDir',
    'TidbClusterSpecTicdcAdditionalVolumesFc',
    'TidbClusterSpecTicdcAdditionalVolumesFlexVolume',
    'TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesFlocker',
    'TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecTicdcAdditionalVolumesGitRepo',
    'TidbClusterSpecTicdcAdditionalVolumesGlusterfs',
    'TidbClusterSpecTicdcAdditionalVolumesHostPath',
    'TidbClusterSpecTicdcAdditionalVolumesIscsi',
    'TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesNfs',
    'TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecTicdcAdditionalVolumesPortworxVolume',
    'TidbClusterSpecTicdcAdditionalVolumesProjected',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSources',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecTicdcAdditionalVolumesQuobyte',
    'TidbClusterSpecTicdcAdditionalVolumesRbd',
    'TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesScaleIO',
    'TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesSecret',
    'TidbClusterSpecTicdcAdditionalVolumesSecretItems',
    'TidbClusterSpecTicdcAdditionalVolumesStorageos',
    'TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecTicdcAdditionalVolumesVsphereVolume',
    'TidbClusterSpecTicdcAffinity',
    'TidbClusterSpecTicdcAffinityNodeAffinity',
    'TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecTicdcAffinityPodAffinity',
    'TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTicdcAffinityPodAntiAffinity',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTicdcConfig',
    'TidbClusterSpecTicdcEnv',
    'TidbClusterSpecTicdcEnvValueFrom',
    'TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTicdcEnvValueFromFieldRef',
    'TidbClusterSpecTicdcEnvValueFromResourceFieldRef',
    'TidbClusterSpecTicdcEnvValueFromSecretKeyRef',
    'TidbClusterSpecTicdcImagePullSecrets',
    'TidbClusterSpecTicdcPodSecurityContext',
    'TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecTicdcPodSecurityContextSysctls',
    'TidbClusterSpecTicdcPodSecurityContextWindowsOptions',
    'TidbClusterSpecTicdcTolerations',
    'TidbClusterSpecTidb',
    'TidbClusterSpecTidbAdditionalContainers',
    'TidbClusterSpecTidbAdditionalContainersEnv',
    'TidbClusterSpecTidbAdditionalContainersEnvFrom',
    'TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecTidbAdditionalContainersEnvValueFrom',
    'TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecTidbAdditionalContainersLifecycle',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbe',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecTidbAdditionalContainersPorts',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbe',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecTidbAdditionalContainersResources',
    'TidbClusterSpecTidbAdditionalContainersSecurityContext',
    'TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecTidbAdditionalContainersStartupProbe',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeExec',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecTidbAdditionalContainersVolumeDevices',
    'TidbClusterSpecTidbAdditionalContainersVolumeMounts',
    'TidbClusterSpecTidbAdditionalVolumes',
    'TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecTidbAdditionalVolumesAzureDisk',
    'TidbClusterSpecTidbAdditionalVolumesAzureFile',
    'TidbClusterSpecTidbAdditionalVolumesCephfs',
    'TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesCinder',
    'TidbClusterSpecTidbAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesConfigMap',
    'TidbClusterSpecTidbAdditionalVolumesConfigMapItems',
    'TidbClusterSpecTidbAdditionalVolumesCsi',
    'TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesDownwardAPI',
    'TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTidbAdditionalVolumesEmptyDir',
    'TidbClusterSpecTidbAdditionalVolumesFc',
    'TidbClusterSpecTidbAdditionalVolumesFlexVolume',
    'TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesFlocker',
    'TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecTidbAdditionalVolumesGitRepo',
    'TidbClusterSpecTidbAdditionalVolumesGlusterfs',
    'TidbClusterSpecTidbAdditionalVolumesHostPath',
    'TidbClusterSpecTidbAdditionalVolumesIscsi',
    'TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesNfs',
    'TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecTidbAdditionalVolumesPortworxVolume',
    'TidbClusterSpecTidbAdditionalVolumesProjected',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSources',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecTidbAdditionalVolumesQuobyte',
    'TidbClusterSpecTidbAdditionalVolumesRbd',
    'TidbClusterSpecTidbAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesScaleIO',
    'TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesSecret',
    'TidbClusterSpecTidbAdditionalVolumesSecretItems',
    'TidbClusterSpecTidbAdditionalVolumesStorageos',
    'TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecTidbAdditionalVolumesVsphereVolume',
    'TidbClusterSpecTidbAffinity',
    'TidbClusterSpecTidbAffinityNodeAffinity',
    'TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecTidbAffinityPodAffinity',
    'TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTidbAffinityPodAntiAffinity',
    'TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTidbConfig',
    'TidbClusterSpecTidbConfigBinlog',
    'TidbClusterSpecTidbConfigExperimental',
    'TidbClusterSpecTidbConfigIsolation-Read',
    'TidbClusterSpecTidbConfigLog',
    'TidbClusterSpecTidbConfigLogFile',
    'TidbClusterSpecTidbConfigOpentracing',
    'TidbClusterSpecTidbConfigOpentracingReporter',
    'TidbClusterSpecTidbConfigOpentracingSampler',
    'TidbClusterSpecTidbConfigPerformance',
    'TidbClusterSpecTidbConfigPessimistic-Txn',
    'TidbClusterSpecTidbConfigPlugin',
    'TidbClusterSpecTidbConfigPrepared-Plan-Cache',
    'TidbClusterSpecTidbConfigProxy-Protocol',
    'TidbClusterSpecTidbConfigSecurity',
    'TidbClusterSpecTidbConfigStatus',
    'TidbClusterSpecTidbConfigStmt-Summary',
    'TidbClusterSpecTidbConfigTikv-Client',
    'TidbClusterSpecTidbConfigTxn-Local-Latches',
    'TidbClusterSpecTidbEnv',
    'TidbClusterSpecTidbEnvValueFrom',
    'TidbClusterSpecTidbEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTidbEnvValueFromFieldRef',
    'TidbClusterSpecTidbEnvValueFromResourceFieldRef',
    'TidbClusterSpecTidbEnvValueFromSecretKeyRef',
    'TidbClusterSpecTidbImagePullSecrets',
    'TidbClusterSpecTidbLifecycle',
    'TidbClusterSpecTidbLifecyclePostStart',
    'TidbClusterSpecTidbLifecyclePostStartExec',
    'TidbClusterSpecTidbLifecyclePostStartHttpGet',
    'TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecTidbLifecyclePostStartHttpGetPort',
    'TidbClusterSpecTidbLifecyclePostStartTcpSocket',
    'TidbClusterSpecTidbLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecTidbLifecyclePreStop',
    'TidbClusterSpecTidbLifecyclePreStopExec',
    'TidbClusterSpecTidbLifecyclePreStopHttpGet',
    'TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecTidbLifecyclePreStopHttpGetPort',
    'TidbClusterSpecTidbLifecyclePreStopTcpSocket',
    'TidbClusterSpecTidbLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecTidbPodSecurityContext',
    'TidbClusterSpecTidbPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecTidbPodSecurityContextSysctls',
    'TidbClusterSpecTidbPodSecurityContextWindowsOptions',
    'TidbClusterSpecTidbService',
    'TidbClusterSpecTidbSlowLogTailer',
    'TidbClusterSpecTidbTolerations',
    'TidbClusterSpecTiflash',
    'TidbClusterSpecTiflashAdditionalContainers',
    'TidbClusterSpecTiflashAdditionalContainersEnv',
    'TidbClusterSpecTiflashAdditionalContainersEnvFrom',
    'TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecTiflashAdditionalContainersEnvValueFrom',
    'TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecTiflashAdditionalContainersLifecycle',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbe',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecTiflashAdditionalContainersPorts',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbe',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecTiflashAdditionalContainersResources',
    'TidbClusterSpecTiflashAdditionalContainersSecurityContext',
    'TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbe',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeExec',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecTiflashAdditionalContainersVolumeDevices',
    'TidbClusterSpecTiflashAdditionalContainersVolumeMounts',
    'TidbClusterSpecTiflashAdditionalVolumes',
    'TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecTiflashAdditionalVolumesAzureDisk',
    'TidbClusterSpecTiflashAdditionalVolumesAzureFile',
    'TidbClusterSpecTiflashAdditionalVolumesCephfs',
    'TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesCinder',
    'TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesConfigMap',
    'TidbClusterSpecTiflashAdditionalVolumesConfigMapItems',
    'TidbClusterSpecTiflashAdditionalVolumesCsi',
    'TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesDownwardAPI',
    'TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTiflashAdditionalVolumesEmptyDir',
    'TidbClusterSpecTiflashAdditionalVolumesFc',
    'TidbClusterSpecTiflashAdditionalVolumesFlexVolume',
    'TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesFlocker',
    'TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecTiflashAdditionalVolumesGitRepo',
    'TidbClusterSpecTiflashAdditionalVolumesGlusterfs',
    'TidbClusterSpecTiflashAdditionalVolumesHostPath',
    'TidbClusterSpecTiflashAdditionalVolumesIscsi',
    'TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesNfs',
    'TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecTiflashAdditionalVolumesPortworxVolume',
    'TidbClusterSpecTiflashAdditionalVolumesProjected',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSources',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecTiflashAdditionalVolumesQuobyte',
    'TidbClusterSpecTiflashAdditionalVolumesRbd',
    'TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesScaleIO',
    'TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesSecret',
    'TidbClusterSpecTiflashAdditionalVolumesSecretItems',
    'TidbClusterSpecTiflashAdditionalVolumesStorageos',
    'TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecTiflashAdditionalVolumesVsphereVolume',
    'TidbClusterSpecTiflashAffinity',
    'TidbClusterSpecTiflashAffinityNodeAffinity',
    'TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecTiflashAffinityPodAffinity',
    'TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTiflashAffinityPodAntiAffinity',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTiflashConfig',
    'TidbClusterSpecTiflashConfigConfig',
    'TidbClusterSpecTiflashConfigConfigFlash',
    'TidbClusterSpecTiflashConfigConfigFlashFlash_cluster',
    'TidbClusterSpecTiflashConfigConfigLogger',
    'TidbClusterSpecTiflashEnv',
    'TidbClusterSpecTiflashEnvValueFrom',
    'TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTiflashEnvValueFromFieldRef',
    'TidbClusterSpecTiflashEnvValueFromResourceFieldRef',
    'TidbClusterSpecTiflashEnvValueFromSecretKeyRef',
    'TidbClusterSpecTiflashImagePullSecrets',
    'TidbClusterSpecTiflashLogTailer',
    'TidbClusterSpecTiflashPodSecurityContext',
    'TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecTiflashPodSecurityContextSysctls',
    'TidbClusterSpecTiflashPodSecurityContextWindowsOptions',
    'TidbClusterSpecTiflashStorageClaims',
    'TidbClusterSpecTiflashStorageClaimsResources',
    'TidbClusterSpecTiflashTolerations',
    'TidbClusterSpecTikv',
    'TidbClusterSpecTikvAdditionalContainers',
    'TidbClusterSpecTikvAdditionalContainersEnv',
    'TidbClusterSpecTikvAdditionalContainersEnvFrom',
    'TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef',
    'TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef',
    'TidbClusterSpecTikvAdditionalContainersEnvValueFrom',
    'TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef',
    'TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbClusterSpecTikvAdditionalContainersLifecycle',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStart',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStop',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbe',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeExec',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket',
    'TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbClusterSpecTikvAdditionalContainersPorts',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbe',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeExec',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket',
    'TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbClusterSpecTikvAdditionalContainersResources',
    'TidbClusterSpecTikvAdditionalContainersSecurityContext',
    'TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities',
    'TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions',
    'TidbClusterSpecTikvAdditionalContainersStartupProbe',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeExec',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket',
    'TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort',
    'TidbClusterSpecTikvAdditionalContainersVolumeDevices',
    'TidbClusterSpecTikvAdditionalContainersVolumeMounts',
    'TidbClusterSpecTikvAdditionalVolumes',
    'TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore',
    'TidbClusterSpecTikvAdditionalVolumesAzureDisk',
    'TidbClusterSpecTikvAdditionalVolumesAzureFile',
    'TidbClusterSpecTikvAdditionalVolumesCephfs',
    'TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesCinder',
    'TidbClusterSpecTikvAdditionalVolumesCinderSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesConfigMap',
    'TidbClusterSpecTikvAdditionalVolumesConfigMapItems',
    'TidbClusterSpecTikvAdditionalVolumesCsi',
    'TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesDownwardAPI',
    'TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems',
    'TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTikvAdditionalVolumesEmptyDir',
    'TidbClusterSpecTikvAdditionalVolumesFc',
    'TidbClusterSpecTikvAdditionalVolumesFlexVolume',
    'TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesFlocker',
    'TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk',
    'TidbClusterSpecTikvAdditionalVolumesGitRepo',
    'TidbClusterSpecTikvAdditionalVolumesGlusterfs',
    'TidbClusterSpecTikvAdditionalVolumesHostPath',
    'TidbClusterSpecTikvAdditionalVolumesIscsi',
    'TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesNfs',
    'TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim',
    'TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk',
    'TidbClusterSpecTikvAdditionalVolumesPortworxVolume',
    'TidbClusterSpecTikvAdditionalVolumesProjected',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSources',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems',
    'TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken',
    'TidbClusterSpecTikvAdditionalVolumesQuobyte',
    'TidbClusterSpecTikvAdditionalVolumesRbd',
    'TidbClusterSpecTikvAdditionalVolumesRbdSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesScaleIO',
    'TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesSecret',
    'TidbClusterSpecTikvAdditionalVolumesSecretItems',
    'TidbClusterSpecTikvAdditionalVolumesStorageos',
    'TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef',
    'TidbClusterSpecTikvAdditionalVolumesVsphereVolume',
    'TidbClusterSpecTikvAffinity',
    'TidbClusterSpecTikvAffinityNodeAffinity',
    'TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'TidbClusterSpecTikvAffinityPodAffinity',
    'TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTikvAffinityPodAntiAffinity',
    'TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'TidbClusterSpecTikvConfig',
    'TidbClusterSpecTikvConfigCoprocessor',
    'TidbClusterSpecTikvConfigGc',
    'TidbClusterSpecTikvConfigImport',
    'TidbClusterSpecTikvConfigPd',
    'TidbClusterSpecTikvConfigPessimistic-Txn',
    'TidbClusterSpecTikvConfigRaftdb',
    'TidbClusterSpecTikvConfigRaftdbDefaultcf',
    'TidbClusterSpecTikvConfigRaftdbDefaultcfTitan',
    'TidbClusterSpecTikvConfigRaftstore',
    'TidbClusterSpecTikvConfigReadpool',
    'TidbClusterSpecTikvConfigReadpoolCoprocessor',
    'TidbClusterSpecTikvConfigReadpoolStorage',
    'TidbClusterSpecTikvConfigReadpoolUnified',
    'TidbClusterSpecTikvConfigRocksdb',
    'TidbClusterSpecTikvConfigRocksdbDefaultcf',
    'TidbClusterSpecTikvConfigRocksdbDefaultcfTitan',
    'TidbClusterSpecTikvConfigRocksdbLockcf',
    'TidbClusterSpecTikvConfigRocksdbLockcfTitan',
    'TidbClusterSpecTikvConfigRocksdbRaftcf',
    'TidbClusterSpecTikvConfigRocksdbRaftcfTitan',
    'TidbClusterSpecTikvConfigRocksdbTitan',
    'TidbClusterSpecTikvConfigRocksdbWritecf',
    'TidbClusterSpecTikvConfigRocksdbWritecfTitan',
    'TidbClusterSpecTikvConfigSecurity',
    'TidbClusterSpecTikvConfigServer',
    'TidbClusterSpecTikvConfigStorage',
    'TidbClusterSpecTikvConfigStorageBlock-Cache',
    'TidbClusterSpecTikvEnv',
    'TidbClusterSpecTikvEnvValueFrom',
    'TidbClusterSpecTikvEnvValueFromConfigMapKeyRef',
    'TidbClusterSpecTikvEnvValueFromFieldRef',
    'TidbClusterSpecTikvEnvValueFromResourceFieldRef',
    'TidbClusterSpecTikvEnvValueFromSecretKeyRef',
    'TidbClusterSpecTikvImagePullSecrets',
    'TidbClusterSpecTikvPodSecurityContext',
    'TidbClusterSpecTikvPodSecurityContextSeLinuxOptions',
    'TidbClusterSpecTikvPodSecurityContextSysctls',
    'TidbClusterSpecTikvPodSecurityContextWindowsOptions',
    'TidbClusterSpecTikvTolerations',
    'TidbClusterSpecTolerations',
    'TidbInitializerSpec',
    'TidbInitializerSpecCluster',
    'TidbInitializerSpecImagePullSecrets',
    'TidbInitializerSpecResources',
    'TidbMonitorSpec',
    'TidbMonitorSpecAdditionalContainers',
    'TidbMonitorSpecAdditionalContainersEnv',
    'TidbMonitorSpecAdditionalContainersEnvFrom',
    'TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef',
    'TidbMonitorSpecAdditionalContainersEnvFromSecretRef',
    'TidbMonitorSpecAdditionalContainersEnvValueFrom',
    'TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef',
    'TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef',
    'TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef',
    'TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef',
    'TidbMonitorSpecAdditionalContainersLifecycle',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStart',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartExec',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket',
    'TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStop',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopExec',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket',
    'TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort',
    'TidbMonitorSpecAdditionalContainersLivenessProbe',
    'TidbMonitorSpecAdditionalContainersLivenessProbeExec',
    'TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet',
    'TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders',
    'TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort',
    'TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket',
    'TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort',
    'TidbMonitorSpecAdditionalContainersPorts',
    'TidbMonitorSpecAdditionalContainersReadinessProbe',
    'TidbMonitorSpecAdditionalContainersReadinessProbeExec',
    'TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet',
    'TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders',
    'TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort',
    'TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket',
    'TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort',
    'TidbMonitorSpecAdditionalContainersResources',
    'TidbMonitorSpecAdditionalContainersSecurityContext',
    'TidbMonitorSpecAdditionalContainersSecurityContextCapabilities',
    'TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions',
    'TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions',
    'TidbMonitorSpecAdditionalContainersStartupProbe',
    'TidbMonitorSpecAdditionalContainersStartupProbeExec',
    'TidbMonitorSpecAdditionalContainersStartupProbeHttpGet',
    'TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders',
    'TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort',
    'TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket',
    'TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort',
    'TidbMonitorSpecAdditionalContainersVolumeDevices',
    'TidbMonitorSpecAdditionalContainersVolumeMounts',
    'TidbMonitorSpecClusters',
    'TidbMonitorSpecImagePullSecrets',
    'TidbMonitorSpecTolerations',
]

@pulumi.output_type
class BackupScheduleSpec(dict):
    def __init__(__self__, *,
                 backup_template: 'outputs.BackupScheduleSpecBackupTemplate',
                 schedule: str,
                 image_pull_secrets: Optional[Sequence['outputs.BackupScheduleSpecImagePullSecrets']] = None,
                 max_backups: Optional[int] = None,
                 max_reserved_time: Optional[str] = None,
                 pause: Optional[bool] = None,
                 storage_class_name: Optional[str] = None,
                 storage_size: Optional[str] = None):
        pulumi.set(__self__, "backup_template", backup_template)
        pulumi.set(__self__, "schedule", schedule)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if max_reserved_time is not None:
            pulumi.set(__self__, "max_reserved_time", max_reserved_time)
        if pause is not None:
            pulumi.set(__self__, "pause", pause)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)

    @property
    @pulumi.getter(name="backupTemplate")
    def backup_template(self) -> 'outputs.BackupScheduleSpecBackupTemplate':
        return pulumi.get(self, "backup_template")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.BackupScheduleSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="maxBackups")
    def max_backups(self) -> Optional[int]:
        return pulumi.get(self, "max_backups")

    @property
    @pulumi.getter(name="maxReservedTime")
    def max_reserved_time(self) -> Optional[str]:
        return pulumi.get(self, "max_reserved_time")

    @property
    @pulumi.getter
    def pause(self) -> Optional[bool]:
        return pulumi.get(self, "pause")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[str]:
        return pulumi.get(self, "storage_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplate(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.BackupScheduleSpecBackupTemplateAffinity'] = None,
                 backup_type: Optional[str] = None,
                 br: Optional['outputs.BackupScheduleSpecBackupTemplateBr'] = None,
                 clean_data: Optional[bool] = None,
                 dumpling: Optional['outputs.BackupScheduleSpecBackupTemplateDumpling'] = None,
                 from_: Optional['outputs.BackupScheduleSpecBackupTemplateFrom'] = None,
                 gcs: Optional['outputs.BackupScheduleSpecBackupTemplateGcs'] = None,
                 image_pull_secrets: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateImagePullSecrets']] = None,
                 resources: Optional['outputs.BackupScheduleSpecBackupTemplateResources'] = None,
                 s3: Optional['outputs.BackupScheduleSpecBackupTemplateS3'] = None,
                 service_account: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 storage_size: Optional[str] = None,
                 tikv_gc_life_time: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateTolerations']] = None,
                 use_kms: Optional[bool] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if br is not None:
            pulumi.set(__self__, "br", br)
        if clean_data is not None:
            pulumi.set(__self__, "clean_data", clean_data)
        if dumpling is not None:
            pulumi.set(__self__, "dumpling", dumpling)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if gcs is not None:
            pulumi.set(__self__, "gcs", gcs)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if tikv_gc_life_time is not None:
            pulumi.set(__self__, "tikv_gc_life_time", tikv_gc_life_time)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if use_kms is not None:
            pulumi.set(__self__, "use_kms", use_kms)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def br(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateBr']:
        return pulumi.get(self, "br")

    @property
    @pulumi.getter(name="cleanData")
    def clean_data(self) -> Optional[bool]:
        return pulumi.get(self, "clean_data")

    @property
    @pulumi.getter
    def dumpling(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateDumpling']:
        return pulumi.get(self, "dumpling")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateFrom']:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[str]:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="tikvGCLifeTime")
    def tikv_gc_life_time(self) -> Optional[str]:
        return pulumi.get(self, "tikv_gc_life_time")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="useKMS")
    def use_kms(self) -> Optional[bool]:
        return pulumi.get(self, "use_kms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateBr(dict):
    def __init__(__self__, *,
                 cluster: str,
                 checksum: Optional[bool] = None,
                 cluster_namespace: Optional[str] = None,
                 concurrency: Optional[int] = None,
                 db: Optional[str] = None,
                 log_level: Optional[str] = None,
                 on_line: Optional[bool] = None,
                 rate_limit: Optional[int] = None,
                 send_cred_to_tikv: Optional[bool] = None,
                 status_addr: Optional[str] = None,
                 table: Optional[str] = None,
                 time_ago: Optional[str] = None):
        pulumi.set(__self__, "cluster", cluster)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if cluster_namespace is not None:
            pulumi.set(__self__, "cluster_namespace", cluster_namespace)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if on_line is not None:
            pulumi.set(__self__, "on_line", on_line)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if send_cred_to_tikv is not None:
            pulumi.set(__self__, "send_cred_to_tikv", send_cred_to_tikv)
        if status_addr is not None:
            pulumi.set(__self__, "status_addr", status_addr)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if time_ago is not None:
            pulumi.set(__self__, "time_ago", time_ago)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[bool]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="clusterNamespace")
    def cluster_namespace(self) -> Optional[str]:
        return pulumi.get(self, "cluster_namespace")

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def db(self) -> Optional[str]:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="onLine")
    def on_line(self) -> Optional[bool]:
        return pulumi.get(self, "on_line")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[int]:
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter(name="sendCredToTikv")
    def send_cred_to_tikv(self) -> Optional[bool]:
        return pulumi.get(self, "send_cred_to_tikv")

    @property
    @pulumi.getter(name="statusAddr")
    def status_addr(self) -> Optional[str]:
        return pulumi.get(self, "status_addr")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="timeAgo")
    def time_ago(self) -> Optional[str]:
        return pulumi.get(self, "time_ago")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateDumpling(dict):
    def __init__(__self__, *,
                 options: Optional[Sequence[str]] = None,
                 table_filter: Optional[Sequence[str]] = None):
        if options is not None:
            pulumi.set(__self__, "options", options)
        if table_filter is not None:
            pulumi.set(__self__, "table_filter", table_filter)

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="tableFilter")
    def table_filter(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "table_filter")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateFrom(dict):
    def __init__(__self__, *,
                 host: str,
                 secret_name: str,
                 port: Optional[int] = None,
                 tls_client_secret_name: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret_name", secret_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls_client_secret_name is not None:
            pulumi.set(__self__, "tls_client_secret_name", tls_client_secret_name)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsClientSecretName")
    def tls_client_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_secret_name")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateGcs(dict):
    def __init__(__self__, *,
                 project_id: str,
                 secret_name: str,
                 bucket: Optional[str] = None,
                 bucket_acl: Optional[str] = None,
                 location: Optional[str] = None,
                 object_acl: Optional[str] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "secret_name", secret_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_acl is not None:
            pulumi.set(__self__, "bucket_acl", bucket_acl)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if object_acl is not None:
            pulumi.set(__self__, "object_acl", object_acl)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketAcl")
    def bucket_acl(self) -> Optional[str]:
        return pulumi.get(self, "bucket_acl")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="objectAcl")
    def object_acl(self) -> Optional[str]:
        return pulumi.get(self, "object_acl")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateS3(dict):
    def __init__(__self__, *,
                 provider: str,
                 acl: Optional[str] = None,
                 bucket: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 options: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 sse: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "provider", provider)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if sse is not None:
            pulumi.set(__self__, "sse", sse)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def acl(self) -> Optional[str]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def sse(self) -> Optional[str]:
        return pulumi.get(self, "sse")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecBackupTemplateTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupScheduleSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.BackupSpecAffinity'] = None,
                 backup_type: Optional[str] = None,
                 br: Optional['outputs.BackupSpecBr'] = None,
                 clean_data: Optional[bool] = None,
                 dumpling: Optional['outputs.BackupSpecDumpling'] = None,
                 from_: Optional['outputs.BackupSpecFrom'] = None,
                 gcs: Optional['outputs.BackupSpecGcs'] = None,
                 image_pull_secrets: Optional[Sequence['outputs.BackupSpecImagePullSecrets']] = None,
                 resources: Optional['outputs.BackupSpecResources'] = None,
                 s3: Optional['outputs.BackupSpecS3'] = None,
                 service_account: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 storage_size: Optional[str] = None,
                 tikv_gc_life_time: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.BackupSpecTolerations']] = None,
                 use_kms: Optional[bool] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if br is not None:
            pulumi.set(__self__, "br", br)
        if clean_data is not None:
            pulumi.set(__self__, "clean_data", clean_data)
        if dumpling is not None:
            pulumi.set(__self__, "dumpling", dumpling)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if gcs is not None:
            pulumi.set(__self__, "gcs", gcs)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if tikv_gc_life_time is not None:
            pulumi.set(__self__, "tikv_gc_life_time", tikv_gc_life_time)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if use_kms is not None:
            pulumi.set(__self__, "use_kms", use_kms)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.BackupSpecAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def br(self) -> Optional['outputs.BackupSpecBr']:
        return pulumi.get(self, "br")

    @property
    @pulumi.getter(name="cleanData")
    def clean_data(self) -> Optional[bool]:
        return pulumi.get(self, "clean_data")

    @property
    @pulumi.getter
    def dumpling(self) -> Optional['outputs.BackupSpecDumpling']:
        return pulumi.get(self, "dumpling")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional['outputs.BackupSpecFrom']:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.BackupSpecGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.BackupSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.BackupSpecResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.BackupSpecS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[str]:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="tikvGCLifeTime")
    def tikv_gc_life_time(self) -> Optional[str]:
        return pulumi.get(self, "tikv_gc_life_time")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.BackupSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="useKMS")
    def use_kms(self) -> Optional[bool]:
        return pulumi.get(self, "use_kms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.BackupSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.BackupSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.BackupSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.BackupSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.BackupSpecAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.BackupSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecBr(dict):
    def __init__(__self__, *,
                 cluster: str,
                 checksum: Optional[bool] = None,
                 cluster_namespace: Optional[str] = None,
                 concurrency: Optional[int] = None,
                 db: Optional[str] = None,
                 log_level: Optional[str] = None,
                 on_line: Optional[bool] = None,
                 rate_limit: Optional[int] = None,
                 send_cred_to_tikv: Optional[bool] = None,
                 status_addr: Optional[str] = None,
                 table: Optional[str] = None,
                 time_ago: Optional[str] = None):
        pulumi.set(__self__, "cluster", cluster)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if cluster_namespace is not None:
            pulumi.set(__self__, "cluster_namespace", cluster_namespace)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if on_line is not None:
            pulumi.set(__self__, "on_line", on_line)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if send_cred_to_tikv is not None:
            pulumi.set(__self__, "send_cred_to_tikv", send_cred_to_tikv)
        if status_addr is not None:
            pulumi.set(__self__, "status_addr", status_addr)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if time_ago is not None:
            pulumi.set(__self__, "time_ago", time_ago)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[bool]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="clusterNamespace")
    def cluster_namespace(self) -> Optional[str]:
        return pulumi.get(self, "cluster_namespace")

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def db(self) -> Optional[str]:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="onLine")
    def on_line(self) -> Optional[bool]:
        return pulumi.get(self, "on_line")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[int]:
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter(name="sendCredToTikv")
    def send_cred_to_tikv(self) -> Optional[bool]:
        return pulumi.get(self, "send_cred_to_tikv")

    @property
    @pulumi.getter(name="statusAddr")
    def status_addr(self) -> Optional[str]:
        return pulumi.get(self, "status_addr")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="timeAgo")
    def time_ago(self) -> Optional[str]:
        return pulumi.get(self, "time_ago")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecDumpling(dict):
    def __init__(__self__, *,
                 options: Optional[Sequence[str]] = None,
                 table_filter: Optional[Sequence[str]] = None):
        if options is not None:
            pulumi.set(__self__, "options", options)
        if table_filter is not None:
            pulumi.set(__self__, "table_filter", table_filter)

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="tableFilter")
    def table_filter(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "table_filter")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecFrom(dict):
    def __init__(__self__, *,
                 host: str,
                 secret_name: str,
                 port: Optional[int] = None,
                 tls_client_secret_name: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret_name", secret_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls_client_secret_name is not None:
            pulumi.set(__self__, "tls_client_secret_name", tls_client_secret_name)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsClientSecretName")
    def tls_client_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_secret_name")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecGcs(dict):
    def __init__(__self__, *,
                 project_id: str,
                 secret_name: str,
                 bucket: Optional[str] = None,
                 bucket_acl: Optional[str] = None,
                 location: Optional[str] = None,
                 object_acl: Optional[str] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "secret_name", secret_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_acl is not None:
            pulumi.set(__self__, "bucket_acl", bucket_acl)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if object_acl is not None:
            pulumi.set(__self__, "object_acl", object_acl)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketAcl")
    def bucket_acl(self) -> Optional[str]:
        return pulumi.get(self, "bucket_acl")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="objectAcl")
    def object_acl(self) -> Optional[str]:
        return pulumi.get(self, "object_acl")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecS3(dict):
    def __init__(__self__, *,
                 provider: str,
                 acl: Optional[str] = None,
                 bucket: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 options: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 sse: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "provider", provider)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if sse is not None:
            pulumi.set(__self__, "sse", sse)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def acl(self) -> Optional[str]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def sse(self) -> Optional[str]:
        return pulumi.get(self, "sse")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.RestoreSpecAffinity'] = None,
                 backup_type: Optional[str] = None,
                 br: Optional['outputs.RestoreSpecBr'] = None,
                 gcs: Optional['outputs.RestoreSpecGcs'] = None,
                 image_pull_secrets: Optional[Sequence['outputs.RestoreSpecImagePullSecrets']] = None,
                 resources: Optional['outputs.RestoreSpecResources'] = None,
                 s3: Optional['outputs.RestoreSpecS3'] = None,
                 service_account: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 storage_size: Optional[str] = None,
                 tikv_gc_life_time: Optional[str] = None,
                 to: Optional['outputs.RestoreSpecTo'] = None,
                 tolerations: Optional[Sequence['outputs.RestoreSpecTolerations']] = None,
                 use_kms: Optional[bool] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if br is not None:
            pulumi.set(__self__, "br", br)
        if gcs is not None:
            pulumi.set(__self__, "gcs", gcs)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if tikv_gc_life_time is not None:
            pulumi.set(__self__, "tikv_gc_life_time", tikv_gc_life_time)
        if to is not None:
            pulumi.set(__self__, "to", to)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if use_kms is not None:
            pulumi.set(__self__, "use_kms", use_kms)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.RestoreSpecAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def br(self) -> Optional['outputs.RestoreSpecBr']:
        return pulumi.get(self, "br")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.RestoreSpecGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.RestoreSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.RestoreSpecResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.RestoreSpecS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[str]:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="tikvGCLifeTime")
    def tikv_gc_life_time(self) -> Optional[str]:
        return pulumi.get(self, "tikv_gc_life_time")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.RestoreSpecTo']:
        return pulumi.get(self, "to")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.RestoreSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="useKMS")
    def use_kms(self) -> Optional[bool]:
        return pulumi.get(self, "use_kms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.RestoreSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.RestoreSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.RestoreSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.RestoreSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.RestoreSpecAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.RestoreSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecBr(dict):
    def __init__(__self__, *,
                 cluster: str,
                 checksum: Optional[bool] = None,
                 cluster_namespace: Optional[str] = None,
                 concurrency: Optional[int] = None,
                 db: Optional[str] = None,
                 log_level: Optional[str] = None,
                 on_line: Optional[bool] = None,
                 rate_limit: Optional[int] = None,
                 send_cred_to_tikv: Optional[bool] = None,
                 status_addr: Optional[str] = None,
                 table: Optional[str] = None,
                 time_ago: Optional[str] = None):
        pulumi.set(__self__, "cluster", cluster)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if cluster_namespace is not None:
            pulumi.set(__self__, "cluster_namespace", cluster_namespace)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if on_line is not None:
            pulumi.set(__self__, "on_line", on_line)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if send_cred_to_tikv is not None:
            pulumi.set(__self__, "send_cred_to_tikv", send_cred_to_tikv)
        if status_addr is not None:
            pulumi.set(__self__, "status_addr", status_addr)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if time_ago is not None:
            pulumi.set(__self__, "time_ago", time_ago)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[bool]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="clusterNamespace")
    def cluster_namespace(self) -> Optional[str]:
        return pulumi.get(self, "cluster_namespace")

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter
    def db(self) -> Optional[str]:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="onLine")
    def on_line(self) -> Optional[bool]:
        return pulumi.get(self, "on_line")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[int]:
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter(name="sendCredToTikv")
    def send_cred_to_tikv(self) -> Optional[bool]:
        return pulumi.get(self, "send_cred_to_tikv")

    @property
    @pulumi.getter(name="statusAddr")
    def status_addr(self) -> Optional[str]:
        return pulumi.get(self, "status_addr")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="timeAgo")
    def time_ago(self) -> Optional[str]:
        return pulumi.get(self, "time_ago")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecGcs(dict):
    def __init__(__self__, *,
                 project_id: str,
                 secret_name: str,
                 bucket: Optional[str] = None,
                 bucket_acl: Optional[str] = None,
                 location: Optional[str] = None,
                 object_acl: Optional[str] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "secret_name", secret_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_acl is not None:
            pulumi.set(__self__, "bucket_acl", bucket_acl)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if object_acl is not None:
            pulumi.set(__self__, "object_acl", object_acl)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketAcl")
    def bucket_acl(self) -> Optional[str]:
        return pulumi.get(self, "bucket_acl")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="objectAcl")
    def object_acl(self) -> Optional[str]:
        return pulumi.get(self, "object_acl")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecS3(dict):
    def __init__(__self__, *,
                 provider: str,
                 acl: Optional[str] = None,
                 bucket: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 options: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 prefix: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 sse: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "provider", provider)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if sse is not None:
            pulumi.set(__self__, "sse", sse)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def acl(self) -> Optional[str]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def sse(self) -> Optional[str]:
        return pulumi.get(self, "sse")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecTo(dict):
    def __init__(__self__, *,
                 host: str,
                 secret_name: str,
                 port: Optional[int] = None,
                 tls_client_secret_name: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret_name", secret_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls_client_secret_name is not None:
            pulumi.set(__self__, "tls_client_secret_name", tls_client_secret_name)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsClientSecretName")
    def tls_client_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_secret_name")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RestoreSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpec(dict):
    def __init__(__self__, *,
                 cluster: 'outputs.TidbClusterAutoScalerSpecCluster',
                 metrics_url: Optional[str] = None,
                 monitor: Optional['outputs.TidbClusterAutoScalerSpecMonitor'] = None,
                 tidb: Optional['outputs.TidbClusterAutoScalerSpecTidb'] = None,
                 tikv: Optional['outputs.TidbClusterAutoScalerSpecTikv'] = None):
        pulumi.set(__self__, "cluster", cluster)
        if metrics_url is not None:
            pulumi.set(__self__, "metrics_url", metrics_url)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if tidb is not None:
            pulumi.set(__self__, "tidb", tidb)
        if tikv is not None:
            pulumi.set(__self__, "tikv", tikv)

    @property
    @pulumi.getter
    def cluster(self) -> 'outputs.TidbClusterAutoScalerSpecCluster':
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="metricsUrl")
    def metrics_url(self) -> Optional[str]:
        return pulumi.get(self, "metrics_url")

    @property
    @pulumi.getter
    def monitor(self) -> Optional['outputs.TidbClusterAutoScalerSpecMonitor']:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def tidb(self) -> Optional['outputs.TidbClusterAutoScalerSpecTidb']:
        return pulumi.get(self, "tidb")

    @property
    @pulumi.getter
    def tikv(self) -> Optional['outputs.TidbClusterAutoScalerSpecTikv']:
        return pulumi.get(self, "tikv")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecCluster(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecMonitor(dict):
    def __init__(__self__, *,
                 name: str,
                 grafana_enabled: Optional[bool] = None,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if grafana_enabled is not None:
            pulumi.set(__self__, "grafana_enabled", grafana_enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="grafanaEnabled")
    def grafana_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "grafana_enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTidb(dict):
    def __init__(__self__, *,
                 max_replicas: int,
                 external_endpoint: Optional['outputs.TidbClusterAutoScalerSpecTidbExternalEndpoint'] = None,
                 metrics: Optional[Sequence[Any]] = None,
                 metrics_time_duration: Optional[str] = None,
                 min_replicas: Optional[int] = None,
                 scale_in_interval_seconds: Optional[int] = None,
                 scale_out_interval_seconds: Optional[int] = None):
        pulumi.set(__self__, "max_replicas", max_replicas)
        if external_endpoint is not None:
            pulumi.set(__self__, "external_endpoint", external_endpoint)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if metrics_time_duration is not None:
            pulumi.set(__self__, "metrics_time_duration", metrics_time_duration)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if scale_in_interval_seconds is not None:
            pulumi.set(__self__, "scale_in_interval_seconds", scale_in_interval_seconds)
        if scale_out_interval_seconds is not None:
            pulumi.set(__self__, "scale_out_interval_seconds", scale_out_interval_seconds)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="externalEndpoint")
    def external_endpoint(self) -> Optional['outputs.TidbClusterAutoScalerSpecTidbExternalEndpoint']:
        return pulumi.get(self, "external_endpoint")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="metricsTimeDuration")
    def metrics_time_duration(self) -> Optional[str]:
        return pulumi.get(self, "metrics_time_duration")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="scaleInIntervalSeconds")
    def scale_in_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "scale_in_interval_seconds")

    @property
    @pulumi.getter(name="scaleOutIntervalSeconds")
    def scale_out_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "scale_out_interval_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTidbExternalEndpoint(dict):
    def __init__(__self__, *,
                 host: str,
                 path: str,
                 port: int,
                 tls_secret: Optional['outputs.TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret'] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional['outputs.TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret']:
        return pulumi.get(self, "tls_secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTikv(dict):
    def __init__(__self__, *,
                 max_replicas: int,
                 external_endpoint: Optional['outputs.TidbClusterAutoScalerSpecTikvExternalEndpoint'] = None,
                 metrics: Optional[Sequence[Any]] = None,
                 metrics_time_duration: Optional[str] = None,
                 min_replicas: Optional[int] = None,
                 scale_in_interval_seconds: Optional[int] = None,
                 scale_out_interval_seconds: Optional[int] = None):
        pulumi.set(__self__, "max_replicas", max_replicas)
        if external_endpoint is not None:
            pulumi.set(__self__, "external_endpoint", external_endpoint)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if metrics_time_duration is not None:
            pulumi.set(__self__, "metrics_time_duration", metrics_time_duration)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if scale_in_interval_seconds is not None:
            pulumi.set(__self__, "scale_in_interval_seconds", scale_in_interval_seconds)
        if scale_out_interval_seconds is not None:
            pulumi.set(__self__, "scale_out_interval_seconds", scale_out_interval_seconds)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="externalEndpoint")
    def external_endpoint(self) -> Optional['outputs.TidbClusterAutoScalerSpecTikvExternalEndpoint']:
        return pulumi.get(self, "external_endpoint")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="metricsTimeDuration")
    def metrics_time_duration(self) -> Optional[str]:
        return pulumi.get(self, "metrics_time_duration")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="scaleInIntervalSeconds")
    def scale_in_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "scale_in_interval_seconds")

    @property
    @pulumi.getter(name="scaleOutIntervalSeconds")
    def scale_out_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "scale_out_interval_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTikvExternalEndpoint(dict):
    def __init__(__self__, *,
                 host: str,
                 path: str,
                 port: int,
                 tls_secret: Optional['outputs.TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret'] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional['outputs.TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret']:
        return pulumi.get(self, "tls_secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerStatus(dict):
    def __init__(__self__, *,
                 tidb: Optional['outputs.TidbClusterAutoScalerStatusTidb'] = None,
                 tikv: Optional['outputs.TidbClusterAutoScalerStatusTikv'] = None):
        if tidb is not None:
            pulumi.set(__self__, "tidb", tidb)
        if tikv is not None:
            pulumi.set(__self__, "tikv", tikv)

    @property
    @pulumi.getter
    def tidb(self) -> Optional['outputs.TidbClusterAutoScalerStatusTidb']:
        return pulumi.get(self, "tidb")

    @property
    @pulumi.getter
    def tikv(self) -> Optional['outputs.TidbClusterAutoScalerStatusTikv']:
        return pulumi.get(self, "tikv")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerStatusTidb(dict):
    def __init__(__self__, *,
                 current_replicas: int,
                 last_auto_scaling_timestamp: Optional[str] = None,
                 metrics: Optional[Sequence['outputs.TidbClusterAutoScalerStatusTidbMetrics']] = None,
                 recommended_replicas: Optional[int] = None):
        pulumi.set(__self__, "current_replicas", current_replicas)
        if last_auto_scaling_timestamp is not None:
            pulumi.set(__self__, "last_auto_scaling_timestamp", last_auto_scaling_timestamp)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if recommended_replicas is not None:
            pulumi.set(__self__, "recommended_replicas", recommended_replicas)

    @property
    @pulumi.getter(name="currentReplicas")
    def current_replicas(self) -> int:
        return pulumi.get(self, "current_replicas")

    @property
    @pulumi.getter(name="lastAutoScalingTimestamp")
    def last_auto_scaling_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "last_auto_scaling_timestamp")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.TidbClusterAutoScalerStatusTidbMetrics']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="recommendedReplicas")
    def recommended_replicas(self) -> Optional[int]:
        return pulumi.get(self, "recommended_replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerStatusTidbMetrics(dict):
    def __init__(__self__, *,
                 name: str,
                 available_storage: Optional[str] = None,
                 baseline_available_storage: Optional[str] = None,
                 capacity_storage: Optional[str] = None,
                 current_value: Optional[str] = None,
                 storage_pressure: Optional[bool] = None,
                 storage_pressure_start_time: Optional[str] = None,
                 threshold_value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if available_storage is not None:
            pulumi.set(__self__, "available_storage", available_storage)
        if baseline_available_storage is not None:
            pulumi.set(__self__, "baseline_available_storage", baseline_available_storage)
        if capacity_storage is not None:
            pulumi.set(__self__, "capacity_storage", capacity_storage)
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if storage_pressure is not None:
            pulumi.set(__self__, "storage_pressure", storage_pressure)
        if storage_pressure_start_time is not None:
            pulumi.set(__self__, "storage_pressure_start_time", storage_pressure_start_time)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="availableStorage")
    def available_storage(self) -> Optional[str]:
        return pulumi.get(self, "available_storage")

    @property
    @pulumi.getter(name="baselineAvailableStorage")
    def baseline_available_storage(self) -> Optional[str]:
        return pulumi.get(self, "baseline_available_storage")

    @property
    @pulumi.getter(name="capacityStorage")
    def capacity_storage(self) -> Optional[str]:
        return pulumi.get(self, "capacity_storage")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="storagePressure")
    def storage_pressure(self) -> Optional[bool]:
        return pulumi.get(self, "storage_pressure")

    @property
    @pulumi.getter(name="storagePressureStartTime")
    def storage_pressure_start_time(self) -> Optional[str]:
        return pulumi.get(self, "storage_pressure_start_time")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[str]:
        return pulumi.get(self, "threshold_value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerStatusTikv(dict):
    def __init__(__self__, *,
                 current_replicas: int,
                 last_auto_scaling_timestamp: Optional[str] = None,
                 metrics: Optional[Sequence['outputs.TidbClusterAutoScalerStatusTikvMetrics']] = None,
                 recommended_replicas: Optional[int] = None):
        pulumi.set(__self__, "current_replicas", current_replicas)
        if last_auto_scaling_timestamp is not None:
            pulumi.set(__self__, "last_auto_scaling_timestamp", last_auto_scaling_timestamp)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if recommended_replicas is not None:
            pulumi.set(__self__, "recommended_replicas", recommended_replicas)

    @property
    @pulumi.getter(name="currentReplicas")
    def current_replicas(self) -> int:
        return pulumi.get(self, "current_replicas")

    @property
    @pulumi.getter(name="lastAutoScalingTimestamp")
    def last_auto_scaling_timestamp(self) -> Optional[str]:
        return pulumi.get(self, "last_auto_scaling_timestamp")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.TidbClusterAutoScalerStatusTikvMetrics']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="recommendedReplicas")
    def recommended_replicas(self) -> Optional[int]:
        return pulumi.get(self, "recommended_replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterAutoScalerStatusTikvMetrics(dict):
    def __init__(__self__, *,
                 name: str,
                 available_storage: Optional[str] = None,
                 baseline_available_storage: Optional[str] = None,
                 capacity_storage: Optional[str] = None,
                 current_value: Optional[str] = None,
                 storage_pressure: Optional[bool] = None,
                 storage_pressure_start_time: Optional[str] = None,
                 threshold_value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if available_storage is not None:
            pulumi.set(__self__, "available_storage", available_storage)
        if baseline_available_storage is not None:
            pulumi.set(__self__, "baseline_available_storage", baseline_available_storage)
        if capacity_storage is not None:
            pulumi.set(__self__, "capacity_storage", capacity_storage)
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if storage_pressure is not None:
            pulumi.set(__self__, "storage_pressure", storage_pressure)
        if storage_pressure_start_time is not None:
            pulumi.set(__self__, "storage_pressure_start_time", storage_pressure_start_time)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="availableStorage")
    def available_storage(self) -> Optional[str]:
        return pulumi.get(self, "available_storage")

    @property
    @pulumi.getter(name="baselineAvailableStorage")
    def baseline_available_storage(self) -> Optional[str]:
        return pulumi.get(self, "baseline_available_storage")

    @property
    @pulumi.getter(name="capacityStorage")
    def capacity_storage(self) -> Optional[str]:
        return pulumi.get(self, "capacity_storage")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="storagePressure")
    def storage_pressure(self) -> Optional[bool]:
        return pulumi.get(self, "storage_pressure")

    @property
    @pulumi.getter(name="storagePressureStartTime")
    def storage_pressure_start_time(self) -> Optional[str]:
        return pulumi.get(self, "storage_pressure_start_time")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[str]:
        return pulumi.get(self, "threshold_value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpec(dict):
    def __init__(__self__, *,
                 pd: 'outputs.TidbClusterSpecPd',
                 tidb: 'outputs.TidbClusterSpecTidb',
                 tikv: 'outputs.TidbClusterSpecTikv',
                 affinity: Optional['outputs.TidbClusterSpecAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 config_update_strategy: Optional[str] = None,
                 discovery: Optional['outputs.TidbClusterSpecDiscovery'] = None,
                 enable_dynamic_configuration: Optional[bool] = None,
                 enable_pv_reclaim: Optional[bool] = None,
                 helper: Optional['outputs.TidbClusterSpecHelper'] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecImagePullSecrets']] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 paused: Optional[bool] = None,
                 priority_class_name: Optional[str] = None,
                 pump: Optional['outputs.TidbClusterSpecPump'] = None,
                 pv_reclaim_policy: Optional[str] = None,
                 scheduler_name: Optional[str] = None,
                 ticdc: Optional['outputs.TidbClusterSpecTicdc'] = None,
                 tiflash: Optional['outputs.TidbClusterSpecTiflash'] = None,
                 timezone: Optional[str] = None,
                 tls_cluster: Optional[Any] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "pd", pd)
        pulumi.set(__self__, "tidb", tidb)
        pulumi.set(__self__, "tikv", tikv)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if discovery is not None:
            pulumi.set(__self__, "discovery", discovery)
        if enable_dynamic_configuration is not None:
            pulumi.set(__self__, "enable_dynamic_configuration", enable_dynamic_configuration)
        if enable_pv_reclaim is not None:
            pulumi.set(__self__, "enable_pv_reclaim", enable_pv_reclaim)
        if helper is not None:
            pulumi.set(__self__, "helper", helper)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if pump is not None:
            pulumi.set(__self__, "pump", pump)
        if pv_reclaim_policy is not None:
            pulumi.set(__self__, "pv_reclaim_policy", pv_reclaim_policy)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if ticdc is not None:
            pulumi.set(__self__, "ticdc", ticdc)
        if tiflash is not None:
            pulumi.set(__self__, "tiflash", tiflash)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tls_cluster is not None:
            pulumi.set(__self__, "tls_cluster", tls_cluster)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def pd(self) -> 'outputs.TidbClusterSpecPd':
        return pulumi.get(self, "pd")

    @property
    @pulumi.getter
    def tidb(self) -> 'outputs.TidbClusterSpecTidb':
        return pulumi.get(self, "tidb")

    @property
    @pulumi.getter
    def tikv(self) -> 'outputs.TidbClusterSpecTikv':
        return pulumi.get(self, "tikv")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter
    def discovery(self) -> Optional['outputs.TidbClusterSpecDiscovery']:
        return pulumi.get(self, "discovery")

    @property
    @pulumi.getter(name="enableDynamicConfiguration")
    def enable_dynamic_configuration(self) -> Optional[bool]:
        return pulumi.get(self, "enable_dynamic_configuration")

    @property
    @pulumi.getter(name="enablePVReclaim")
    def enable_pv_reclaim(self) -> Optional[bool]:
        return pulumi.get(self, "enable_pv_reclaim")

    @property
    @pulumi.getter
    def helper(self) -> Optional['outputs.TidbClusterSpecHelper']:
        return pulumi.get(self, "helper")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def paused(self) -> Optional[bool]:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def pump(self) -> Optional['outputs.TidbClusterSpecPump']:
        return pulumi.get(self, "pump")

    @property
    @pulumi.getter(name="pvReclaimPolicy")
    def pv_reclaim_policy(self) -> Optional[str]:
        return pulumi.get(self, "pv_reclaim_policy")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter
    def ticdc(self) -> Optional['outputs.TidbClusterSpecTicdc']:
        return pulumi.get(self, "ticdc")

    @property
    @pulumi.getter
    def tiflash(self) -> Optional['outputs.TidbClusterSpecTiflash']:
        return pulumi.get(self, "tiflash")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="tlsCluster")
    def tls_cluster(self) -> Optional[Any]:
        return pulumi.get(self, "tls_cluster")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecDiscovery(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecHelper(dict):
    def __init__(__self__, *,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPd(dict):
    def __init__(__self__, *,
                 replicas: int,
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecPdAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 config: Optional['outputs.TidbClusterSpecPdConfig'] = None,
                 config_update_strategy: Optional[str] = None,
                 data_sub_dir: Optional[str] = None,
                 enable_dashboard_internal_proxy: Optional[bool] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecPdEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecPdImagePullSecrets']] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 max_failover_count: Optional[int] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecPdPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 service: Optional['outputs.TidbClusterSpecPdService'] = None,
                 storage_class_name: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tls_client_secret_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecPdTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if data_sub_dir is not None:
            pulumi.set(__self__, "data_sub_dir", data_sub_dir)
        if enable_dashboard_internal_proxy is not None:
            pulumi.set(__self__, "enable_dashboard_internal_proxy", enable_dashboard_internal_proxy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if max_failover_count is not None:
            pulumi.set(__self__, "max_failover_count", max_failover_count)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tls_client_secret_name is not None:
            pulumi.set(__self__, "tls_client_secret_name", tls_client_secret_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecPdAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecPdConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter(name="dataSubDir")
    def data_sub_dir(self) -> Optional[str]:
        return pulumi.get(self, "data_sub_dir")

    @property
    @pulumi.getter(name="enableDashboardInternalProxy")
    def enable_dashboard_internal_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "enable_dashboard_internal_proxy")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecPdEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecPdImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="maxFailoverCount")
    def max_failover_count(self) -> Optional[int]:
        return pulumi.get(self, "max_failover_count")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecPdPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.TidbClusterSpecPdService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter(name="tlsClientSecretName")
    def tls_client_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_secret_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecPdTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecPdAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecPdAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecPdAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecPdAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecPdAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecPdAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecPdAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecPdAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecPdAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecPdAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecPdAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecPdAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecPdAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecPdAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecPdAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecPdAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecPdAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecPdAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecPdAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPdAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPdAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecPdAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecPdAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecPdAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfig(dict):
    def __init__(__self__, *,
                 auto_compaction_mode: Optional[str] = None,
                 auto_compaction_retention_v2: Optional[str] = None,
                 cluster_version: Optional[str] = None,
                 dashboard: Optional['outputs.TidbClusterSpecPdConfigDashboard'] = None,
                 election_interval: Optional[str] = None,
                 enable_grpc_gateway: Optional[bool] = None,
                 enable_prevote: Optional[bool] = None,
                 force_new_cluster: Optional[bool] = None,
                 label_property: Optional[Mapping[str, Any]] = None,
                 lease: Optional[int] = None,
                 log: Optional['outputs.TidbClusterSpecPdConfigLog'] = None,
                 log_file: Optional[str] = None,
                 log_level: Optional[str] = None,
                 metric: Optional['outputs.TidbClusterSpecPdConfigMetric'] = None,
                 namespace: Optional[Mapping[str, Any]] = None,
                 namespace_classifier: Optional[str] = None,
                 pd_server: Optional['outputs.TidbClusterSpecPdConfigPd-Server'] = None,
                 quota_backend_bytes: Optional[str] = None,
                 replication: Optional['outputs.TidbClusterSpecPdConfigReplication'] = None,
                 schedule: Optional['outputs.TidbClusterSpecPdConfigSchedule'] = None,
                 security: Optional['outputs.TidbClusterSpecPdConfigSecurity'] = None,
                 tikv_interval: Optional[str] = None,
                 tso_save_interval: Optional[str] = None):
        if auto_compaction_mode is not None:
            pulumi.set(__self__, "auto_compaction_mode", auto_compaction_mode)
        if auto_compaction_retention_v2 is not None:
            pulumi.set(__self__, "auto_compaction_retention_v2", auto_compaction_retention_v2)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if election_interval is not None:
            pulumi.set(__self__, "election_interval", election_interval)
        if enable_grpc_gateway is not None:
            pulumi.set(__self__, "enable_grpc_gateway", enable_grpc_gateway)
        if enable_prevote is not None:
            pulumi.set(__self__, "enable_prevote", enable_prevote)
        if force_new_cluster is not None:
            pulumi.set(__self__, "force_new_cluster", force_new_cluster)
        if label_property is not None:
            pulumi.set(__self__, "label_property", label_property)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if namespace_classifier is not None:
            pulumi.set(__self__, "namespace_classifier", namespace_classifier)
        if pd_server is not None:
            pulumi.set(__self__, "pd_server", pd_server)
        if quota_backend_bytes is not None:
            pulumi.set(__self__, "quota_backend_bytes", quota_backend_bytes)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tikv_interval is not None:
            pulumi.set(__self__, "tikv_interval", tikv_interval)
        if tso_save_interval is not None:
            pulumi.set(__self__, "tso_save_interval", tso_save_interval)

    @property
    @pulumi.getter(name="auto-compaction-mode")
    def auto_compaction_mode(self) -> Optional[str]:
        return pulumi.get(self, "auto_compaction_mode")

    @property
    @pulumi.getter(name="auto-compaction-retention-v2")
    def auto_compaction_retention_v2(self) -> Optional[str]:
        return pulumi.get(self, "auto_compaction_retention_v2")

    @property
    @pulumi.getter(name="cluster-version")
    def cluster_version(self) -> Optional[str]:
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter
    def dashboard(self) -> Optional['outputs.TidbClusterSpecPdConfigDashboard']:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter(name="election-interval")
    def election_interval(self) -> Optional[str]:
        return pulumi.get(self, "election_interval")

    @property
    @pulumi.getter(name="enable-grpc-gateway")
    def enable_grpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "enable_grpc_gateway")

    @property
    @pulumi.getter(name="enable-prevote")
    def enable_prevote(self) -> Optional[bool]:
        return pulumi.get(self, "enable_prevote")

    @property
    @pulumi.getter(name="force-new-cluster")
    def force_new_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "force_new_cluster")

    @property
    @pulumi.getter(name="label-property")
    def label_property(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "label_property")

    @property
    @pulumi.getter
    def lease(self) -> Optional[int]:
        return pulumi.get(self, "lease")

    @property
    @pulumi.getter
    def log(self) -> Optional['outputs.TidbClusterSpecPdConfigLog']:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="log-file")
    def log_file(self) -> Optional[str]:
        return pulumi.get(self, "log_file")

    @property
    @pulumi.getter(name="log-level")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def metric(self) -> Optional['outputs.TidbClusterSpecPdConfigMetric']:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespace-classifier")
    def namespace_classifier(self) -> Optional[str]:
        return pulumi.get(self, "namespace_classifier")

    @property
    @pulumi.getter(name="pd-server")
    def pd_server(self) -> Optional['outputs.TidbClusterSpecPdConfigPd-Server']:
        return pulumi.get(self, "pd_server")

    @property
    @pulumi.getter(name="quota-backend-bytes")
    def quota_backend_bytes(self) -> Optional[str]:
        return pulumi.get(self, "quota_backend_bytes")

    @property
    @pulumi.getter
    def replication(self) -> Optional['outputs.TidbClusterSpecPdConfigReplication']:
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.TidbClusterSpecPdConfigSchedule']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.TidbClusterSpecPdConfigSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="tikv-interval")
    def tikv_interval(self) -> Optional[str]:
        return pulumi.get(self, "tikv_interval")

    @property
    @pulumi.getter(name="tso-save-interval")
    def tso_save_interval(self) -> Optional[str]:
        return pulumi.get(self, "tso_save_interval")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigDashboard(dict):
    def __init__(__self__, *,
                 disable_telemetry: Optional[bool] = None,
                 internal_proxy: Optional[bool] = None,
                 public_path_prefix: Optional[str] = None,
                 tidb_cacert_path: Optional[str] = None,
                 tidb_cert_path: Optional[str] = None,
                 tidb_key_path: Optional[str] = None):
        if disable_telemetry is not None:
            pulumi.set(__self__, "disable_telemetry", disable_telemetry)
        if internal_proxy is not None:
            pulumi.set(__self__, "internal_proxy", internal_proxy)
        if public_path_prefix is not None:
            pulumi.set(__self__, "public_path_prefix", public_path_prefix)
        if tidb_cacert_path is not None:
            pulumi.set(__self__, "tidb_cacert_path", tidb_cacert_path)
        if tidb_cert_path is not None:
            pulumi.set(__self__, "tidb_cert_path", tidb_cert_path)
        if tidb_key_path is not None:
            pulumi.set(__self__, "tidb_key_path", tidb_key_path)

    @property
    @pulumi.getter(name="disable-telemetry")
    def disable_telemetry(self) -> Optional[bool]:
        return pulumi.get(self, "disable_telemetry")

    @property
    @pulumi.getter(name="internal-proxy")
    def internal_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "internal_proxy")

    @property
    @pulumi.getter(name="public-path-prefix")
    def public_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "public_path_prefix")

    @property
    @pulumi.getter(name="tidb-cacert-path")
    def tidb_cacert_path(self) -> Optional[str]:
        return pulumi.get(self, "tidb_cacert_path")

    @property
    @pulumi.getter(name="tidb-cert-path")
    def tidb_cert_path(self) -> Optional[str]:
        return pulumi.get(self, "tidb_cert_path")

    @property
    @pulumi.getter(name="tidb-key-path")
    def tidb_key_path(self) -> Optional[str]:
        return pulumi.get(self, "tidb_key_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigLog(dict):
    def __init__(__self__, *,
                 development: Optional[bool] = None,
                 disable_caller: Optional[bool] = None,
                 disable_error_verbose: Optional[bool] = None,
                 disable_stacktrace: Optional[bool] = None,
                 disable_timestamp: Optional[bool] = None,
                 file: Optional['outputs.TidbClusterSpecPdConfigLogFile'] = None,
                 format: Optional[str] = None,
                 level: Optional[str] = None):
        if development is not None:
            pulumi.set(__self__, "development", development)
        if disable_caller is not None:
            pulumi.set(__self__, "disable_caller", disable_caller)
        if disable_error_verbose is not None:
            pulumi.set(__self__, "disable_error_verbose", disable_error_verbose)
        if disable_stacktrace is not None:
            pulumi.set(__self__, "disable_stacktrace", disable_stacktrace)
        if disable_timestamp is not None:
            pulumi.set(__self__, "disable_timestamp", disable_timestamp)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def development(self) -> Optional[bool]:
        return pulumi.get(self, "development")

    @property
    @pulumi.getter(name="disable-caller")
    def disable_caller(self) -> Optional[bool]:
        return pulumi.get(self, "disable_caller")

    @property
    @pulumi.getter(name="disable-error-verbose")
    def disable_error_verbose(self) -> Optional[bool]:
        return pulumi.get(self, "disable_error_verbose")

    @property
    @pulumi.getter(name="disable-stacktrace")
    def disable_stacktrace(self) -> Optional[bool]:
        return pulumi.get(self, "disable_stacktrace")

    @property
    @pulumi.getter(name="disable-timestamp")
    def disable_timestamp(self) -> Optional[bool]:
        return pulumi.get(self, "disable_timestamp")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.TidbClusterSpecPdConfigLogFile']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigLogFile(dict):
    def __init__(__self__, *,
                 filename: Optional[str] = None,
                 log_rotate: Optional[bool] = None,
                 max_backups: Optional[int] = None,
                 max_days: Optional[int] = None,
                 max_size: Optional[int] = None):
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if log_rotate is not None:
            pulumi.set(__self__, "log_rotate", log_rotate)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if max_days is not None:
            pulumi.set(__self__, "max_days", max_days)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="log-rotate")
    def log_rotate(self) -> Optional[bool]:
        return pulumi.get(self, "log_rotate")

    @property
    @pulumi.getter(name="max-backups")
    def max_backups(self) -> Optional[int]:
        return pulumi.get(self, "max_backups")

    @property
    @pulumi.getter(name="max-days")
    def max_days(self) -> Optional[int]:
        return pulumi.get(self, "max_days")

    @property
    @pulumi.getter(name="max-size")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigMetric(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 interval: Optional[str] = None,
                 job: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if job is not None:
            pulumi.set(__self__, "job", job)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def job(self) -> Optional[str]:
        return pulumi.get(self, "job")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigPd-Server(dict):
    def __init__(__self__, *,
                 metric_storage: Optional[str] = None,
                 use_region_storage: Optional[str] = None):
        if metric_storage is not None:
            pulumi.set(__self__, "metric_storage", metric_storage)
        if use_region_storage is not None:
            pulumi.set(__self__, "use_region_storage", use_region_storage)

    @property
    @pulumi.getter(name="metric-storage")
    def metric_storage(self) -> Optional[str]:
        return pulumi.get(self, "metric_storage")

    @property
    @pulumi.getter(name="use-region-storage")
    def use_region_storage(self) -> Optional[str]:
        return pulumi.get(self, "use_region_storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigReplication(dict):
    def __init__(__self__, *,
                 enable_placement_rules: Optional[str] = None,
                 max_replicas: Optional[int] = None,
                 strictly_match_label: Optional[str] = None):
        if enable_placement_rules is not None:
            pulumi.set(__self__, "enable_placement_rules", enable_placement_rules)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if strictly_match_label is not None:
            pulumi.set(__self__, "strictly_match_label", strictly_match_label)

    @property
    @pulumi.getter(name="enable-placement-rules")
    def enable_placement_rules(self) -> Optional[str]:
        return pulumi.get(self, "enable_placement_rules")

    @property
    @pulumi.getter(name="max-replicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="strictly-match-label")
    def strictly_match_label(self) -> Optional[str]:
        return pulumi.get(self, "strictly_match_label")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigSchedule(dict):
    def __init__(__self__, *,
                 disable_location_replacement: Optional[str] = None,
                 disable_make_up_replica: Optional[str] = None,
                 disable_namespace_relocation: Optional[str] = None,
                 disable_raft_learner: Optional[str] = None,
                 disable_remove_down_replica: Optional[str] = None,
                 disable_remove_extra_replica: Optional[str] = None,
                 disable_replace_offline_replica: Optional[str] = None,
                 enable_cross_table_merge: Optional[str] = None,
                 enable_one_way_merge: Optional[str] = None,
                 high_space_ratio: Optional[float] = None,
                 hot_region_cache_hits_threshold: Optional[int] = None,
                 hot_region_schedule_limit: Optional[int] = None,
                 leader_schedule_limit: Optional[int] = None,
                 low_space_ratio: Optional[float] = None,
                 max_merge_region_keys: Optional[int] = None,
                 max_merge_region_size: Optional[int] = None,
                 max_pending_peer_count: Optional[int] = None,
                 max_snapshot_count: Optional[int] = None,
                 max_store_down_time: Optional[str] = None,
                 merge_schedule_limit: Optional[int] = None,
                 patrol_region_interval: Optional[str] = None,
                 region_schedule_limit: Optional[int] = None,
                 replica_schedule_limit: Optional[int] = None,
                 schedulers_payload: Optional[Mapping[str, Any]] = None,
                 schedulers_v2: Optional[Sequence['outputs.TidbClusterSpecPdConfigScheduleSchedulers-V2']] = None,
                 split_merge_interval: Optional[str] = None,
                 tolerant_size_ratio: Optional[float] = None):
        if disable_location_replacement is not None:
            pulumi.set(__self__, "disable_location_replacement", disable_location_replacement)
        if disable_make_up_replica is not None:
            pulumi.set(__self__, "disable_make_up_replica", disable_make_up_replica)
        if disable_namespace_relocation is not None:
            pulumi.set(__self__, "disable_namespace_relocation", disable_namespace_relocation)
        if disable_raft_learner is not None:
            pulumi.set(__self__, "disable_raft_learner", disable_raft_learner)
        if disable_remove_down_replica is not None:
            pulumi.set(__self__, "disable_remove_down_replica", disable_remove_down_replica)
        if disable_remove_extra_replica is not None:
            pulumi.set(__self__, "disable_remove_extra_replica", disable_remove_extra_replica)
        if disable_replace_offline_replica is not None:
            pulumi.set(__self__, "disable_replace_offline_replica", disable_replace_offline_replica)
        if enable_cross_table_merge is not None:
            pulumi.set(__self__, "enable_cross_table_merge", enable_cross_table_merge)
        if enable_one_way_merge is not None:
            pulumi.set(__self__, "enable_one_way_merge", enable_one_way_merge)
        if high_space_ratio is not None:
            pulumi.set(__self__, "high_space_ratio", high_space_ratio)
        if hot_region_cache_hits_threshold is not None:
            pulumi.set(__self__, "hot_region_cache_hits_threshold", hot_region_cache_hits_threshold)
        if hot_region_schedule_limit is not None:
            pulumi.set(__self__, "hot_region_schedule_limit", hot_region_schedule_limit)
        if leader_schedule_limit is not None:
            pulumi.set(__self__, "leader_schedule_limit", leader_schedule_limit)
        if low_space_ratio is not None:
            pulumi.set(__self__, "low_space_ratio", low_space_ratio)
        if max_merge_region_keys is not None:
            pulumi.set(__self__, "max_merge_region_keys", max_merge_region_keys)
        if max_merge_region_size is not None:
            pulumi.set(__self__, "max_merge_region_size", max_merge_region_size)
        if max_pending_peer_count is not None:
            pulumi.set(__self__, "max_pending_peer_count", max_pending_peer_count)
        if max_snapshot_count is not None:
            pulumi.set(__self__, "max_snapshot_count", max_snapshot_count)
        if max_store_down_time is not None:
            pulumi.set(__self__, "max_store_down_time", max_store_down_time)
        if merge_schedule_limit is not None:
            pulumi.set(__self__, "merge_schedule_limit", merge_schedule_limit)
        if patrol_region_interval is not None:
            pulumi.set(__self__, "patrol_region_interval", patrol_region_interval)
        if region_schedule_limit is not None:
            pulumi.set(__self__, "region_schedule_limit", region_schedule_limit)
        if replica_schedule_limit is not None:
            pulumi.set(__self__, "replica_schedule_limit", replica_schedule_limit)
        if schedulers_payload is not None:
            pulumi.set(__self__, "schedulers_payload", schedulers_payload)
        if schedulers_v2 is not None:
            pulumi.set(__self__, "schedulers_v2", schedulers_v2)
        if split_merge_interval is not None:
            pulumi.set(__self__, "split_merge_interval", split_merge_interval)
        if tolerant_size_ratio is not None:
            pulumi.set(__self__, "tolerant_size_ratio", tolerant_size_ratio)

    @property
    @pulumi.getter(name="disable-location-replacement")
    def disable_location_replacement(self) -> Optional[str]:
        return pulumi.get(self, "disable_location_replacement")

    @property
    @pulumi.getter(name="disable-make-up-replica")
    def disable_make_up_replica(self) -> Optional[str]:
        return pulumi.get(self, "disable_make_up_replica")

    @property
    @pulumi.getter(name="disable-namespace-relocation")
    def disable_namespace_relocation(self) -> Optional[str]:
        return pulumi.get(self, "disable_namespace_relocation")

    @property
    @pulumi.getter(name="disable-raft-learner")
    def disable_raft_learner(self) -> Optional[str]:
        return pulumi.get(self, "disable_raft_learner")

    @property
    @pulumi.getter(name="disable-remove-down-replica")
    def disable_remove_down_replica(self) -> Optional[str]:
        return pulumi.get(self, "disable_remove_down_replica")

    @property
    @pulumi.getter(name="disable-remove-extra-replica")
    def disable_remove_extra_replica(self) -> Optional[str]:
        return pulumi.get(self, "disable_remove_extra_replica")

    @property
    @pulumi.getter(name="disable-replace-offline-replica")
    def disable_replace_offline_replica(self) -> Optional[str]:
        return pulumi.get(self, "disable_replace_offline_replica")

    @property
    @pulumi.getter(name="enable-cross-table-merge")
    def enable_cross_table_merge(self) -> Optional[str]:
        return pulumi.get(self, "enable_cross_table_merge")

    @property
    @pulumi.getter(name="enable-one-way-merge")
    def enable_one_way_merge(self) -> Optional[str]:
        return pulumi.get(self, "enable_one_way_merge")

    @property
    @pulumi.getter(name="high-space-ratio")
    def high_space_ratio(self) -> Optional[float]:
        return pulumi.get(self, "high_space_ratio")

    @property
    @pulumi.getter(name="hot-region-cache-hits-threshold")
    def hot_region_cache_hits_threshold(self) -> Optional[int]:
        return pulumi.get(self, "hot_region_cache_hits_threshold")

    @property
    @pulumi.getter(name="hot-region-schedule-limit")
    def hot_region_schedule_limit(self) -> Optional[int]:
        return pulumi.get(self, "hot_region_schedule_limit")

    @property
    @pulumi.getter(name="leader-schedule-limit")
    def leader_schedule_limit(self) -> Optional[int]:
        return pulumi.get(self, "leader_schedule_limit")

    @property
    @pulumi.getter(name="low-space-ratio")
    def low_space_ratio(self) -> Optional[float]:
        return pulumi.get(self, "low_space_ratio")

    @property
    @pulumi.getter(name="max-merge-region-keys")
    def max_merge_region_keys(self) -> Optional[int]:
        return pulumi.get(self, "max_merge_region_keys")

    @property
    @pulumi.getter(name="max-merge-region-size")
    def max_merge_region_size(self) -> Optional[int]:
        return pulumi.get(self, "max_merge_region_size")

    @property
    @pulumi.getter(name="max-pending-peer-count")
    def max_pending_peer_count(self) -> Optional[int]:
        return pulumi.get(self, "max_pending_peer_count")

    @property
    @pulumi.getter(name="max-snapshot-count")
    def max_snapshot_count(self) -> Optional[int]:
        return pulumi.get(self, "max_snapshot_count")

    @property
    @pulumi.getter(name="max-store-down-time")
    def max_store_down_time(self) -> Optional[str]:
        return pulumi.get(self, "max_store_down_time")

    @property
    @pulumi.getter(name="merge-schedule-limit")
    def merge_schedule_limit(self) -> Optional[int]:
        return pulumi.get(self, "merge_schedule_limit")

    @property
    @pulumi.getter(name="patrol-region-interval")
    def patrol_region_interval(self) -> Optional[str]:
        return pulumi.get(self, "patrol_region_interval")

    @property
    @pulumi.getter(name="region-schedule-limit")
    def region_schedule_limit(self) -> Optional[int]:
        return pulumi.get(self, "region_schedule_limit")

    @property
    @pulumi.getter(name="replica-schedule-limit")
    def replica_schedule_limit(self) -> Optional[int]:
        return pulumi.get(self, "replica_schedule_limit")

    @property
    @pulumi.getter(name="schedulers-payload")
    def schedulers_payload(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "schedulers_payload")

    @property
    @pulumi.getter(name="schedulers-v2")
    def schedulers_v2(self) -> Optional[Sequence['outputs.TidbClusterSpecPdConfigScheduleSchedulers-V2']]:
        return pulumi.get(self, "schedulers_v2")

    @property
    @pulumi.getter(name="split-merge-interval")
    def split_merge_interval(self) -> Optional[str]:
        return pulumi.get(self, "split_merge_interval")

    @property
    @pulumi.getter(name="tolerant-size-ratio")
    def tolerant_size_ratio(self) -> Optional[float]:
        return pulumi.get(self, "tolerant_size_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigScheduleSchedulers-V2(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 disable: Optional[bool] = None,
                 type: Optional[str] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def disable(self) -> Optional[bool]:
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdConfigSecurity(dict):
    def __init__(__self__, *,
                 cacert_path: Optional[str] = None,
                 cert_path: Optional[str] = None,
                 key_path: Optional[str] = None):
        if cacert_path is not None:
            pulumi.set(__self__, "cacert_path", cacert_path)
        if cert_path is not None:
            pulumi.set(__self__, "cert_path", cert_path)
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)

    @property
    @pulumi.getter(name="cacert-path")
    def cacert_path(self) -> Optional[str]:
        return pulumi.get(self, "cacert_path")

    @property
    @pulumi.getter(name="cert-path")
    def cert_path(self) -> Optional[str]:
        return pulumi.get(self, "cert_path")

    @property
    @pulumi.getter(name="key-path")
    def key_path(self) -> Optional[str]:
        return pulumi.get(self, "key_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecPdEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecPdEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecPdEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecPdEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPdEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecPdEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecPdEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPdEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPdEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecPdEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecPdPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecPdPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecPdPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecPdPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecPdPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecPdPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdService(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 cluster_ip: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 port_name: Optional[str] = None,
                 type: Optional[str] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[str]:
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPdTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPump(dict):
    def __init__(__self__, *,
                 replicas: int,
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecPumpAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 config: Optional[Mapping[str, Any]] = None,
                 config_update_strategy: Optional[str] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecPumpEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecPumpImagePullSecrets']] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecPumpPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecPumpTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecPumpAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecPumpPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecPumpAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecPumpAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecPumpAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecPumpAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecPumpEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecPumpEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecPumpEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecPumpEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecPumpEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecPumpEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecPumpEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecPumpEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecPumpEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecPumpEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecPumpPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecPumpPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecPumpPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecPumpPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecPumpPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecPumpPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecPumpTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdc(dict):
    def __init__(__self__, *,
                 replicas: int,
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecTicdcAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 config: Optional['outputs.TidbClusterSpecTicdcConfig'] = None,
                 config_update_strategy: Optional[str] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTicdcEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecTicdcImagePullSecrets']] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecTicdcPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecTicdcTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecTicdcAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecTicdcConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecTicdcPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecTicdcAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcConfig(dict):
    def __init__(__self__, *,
                 gc_ttl: Optional[int] = None,
                 log_file: Optional[str] = None,
                 log_level: Optional[str] = None,
                 timezone: Optional[str] = None):
        if gc_ttl is not None:
            pulumi.set(__self__, "gc_ttl", gc_ttl)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="gcTTL")
    def gc_ttl(self) -> Optional[int]:
        return pulumi.get(self, "gc_ttl")

    @property
    @pulumi.getter(name="logFile")
    def log_file(self) -> Optional[str]:
        return pulumi.get(self, "log_file")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTicdcEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTicdcEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTicdcEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTicdcEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTicdcEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTicdcEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTicdcEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecTicdcPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTicdcPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecTicdcPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTicdcPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTicdcTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidb(dict):
    def __init__(__self__, *,
                 replicas: int,
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecTidbAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 binlog_enabled: Optional[bool] = None,
                 config: Optional['outputs.TidbClusterSpecTidbConfig'] = None,
                 config_update_strategy: Optional[str] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTidbEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecTidbImagePullSecrets']] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecTidbLifecycle'] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 max_failover_count: Optional[int] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 plugins: Optional[Sequence[str]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecTidbPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 separate_slow_log: Optional[bool] = None,
                 service: Optional['outputs.TidbClusterSpecTidbService'] = None,
                 slow_log_tailer: Optional['outputs.TidbClusterSpecTidbSlowLogTailer'] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tls_client: Optional[Any] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecTidbTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if binlog_enabled is not None:
            pulumi.set(__self__, "binlog_enabled", binlog_enabled)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if max_failover_count is not None:
            pulumi.set(__self__, "max_failover_count", max_failover_count)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if separate_slow_log is not None:
            pulumi.set(__self__, "separate_slow_log", separate_slow_log)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if slow_log_tailer is not None:
            pulumi.set(__self__, "slow_log_tailer", slow_log_tailer)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tls_client is not None:
            pulumi.set(__self__, "tls_client", tls_client)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecTidbAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter(name="binlogEnabled")
    def binlog_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "binlog_enabled")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecTidbConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecTidbLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="maxFailoverCount")
    def max_failover_count(self) -> Optional[int]:
        return pulumi.get(self, "max_failover_count")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecTidbPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="separateSlowLog")
    def separate_slow_log(self) -> Optional[bool]:
        return pulumi.get(self, "separate_slow_log")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.TidbClusterSpecTidbService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="slowLogTailer")
    def slow_log_tailer(self) -> Optional['outputs.TidbClusterSpecTidbSlowLogTailer']:
        return pulumi.get(self, "slow_log_tailer")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter(name="tlsClient")
    def tls_client(self) -> Optional[Any]:
        return pulumi.get(self, "tls_client")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecTidbAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecTidbAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecTidbAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecTidbAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfig(dict):
    def __init__(__self__, *,
                 alter_primary_key: Optional[bool] = None,
                 binlog: Optional['outputs.TidbClusterSpecTidbConfigBinlog'] = None,
                 check_mb4_value_in_utf8: Optional[bool] = None,
                 compatible_kill_query: Optional[bool] = None,
                 cors: Optional[str] = None,
                 delay_clean_table_lock: Optional[int] = None,
                 enable_batch_dml: Optional[bool] = None,
                 enable_dynamic_config: Optional[bool] = None,
                 enable_streaming: Optional[bool] = None,
                 enable_table_lock: Optional[bool] = None,
                 enable_telemetry: Optional[bool] = None,
                 experimental: Optional['outputs.TidbClusterSpecTidbConfigExperimental'] = None,
                 isolation_read: Optional['outputs.TidbClusterSpecTidbConfigIsolation-Read'] = None,
                 lease: Optional[str] = None,
                 log: Optional['outputs.TidbClusterSpecTidbConfigLog'] = None,
                 lower_case_table_names: Optional[int] = None,
                 max_server_connections: Optional[int] = None,
                 mem_quota_query: Optional[int] = None,
                 new_collations_enabled_on_first_bootstrap: Optional[bool] = None,
                 oom_action: Optional[str] = None,
                 oom_use_tmp_storage: Optional[bool] = None,
                 opentracing: Optional['outputs.TidbClusterSpecTidbConfigOpentracing'] = None,
                 performance: Optional['outputs.TidbClusterSpecTidbConfigPerformance'] = None,
                 pessimistic_txn: Optional['outputs.TidbClusterSpecTidbConfigPessimistic-Txn'] = None,
                 plugin: Optional['outputs.TidbClusterSpecTidbConfigPlugin'] = None,
                 prepared_plan_cache: Optional['outputs.TidbClusterSpecTidbConfigPrepared-Plan-Cache'] = None,
                 proxy_protocol: Optional['outputs.TidbClusterSpecTidbConfigProxy-Protocol'] = None,
                 repair_mode: Optional[bool] = None,
                 repair_table_list: Optional[Sequence[str]] = None,
                 run_ddl: Optional[bool] = None,
                 security: Optional['outputs.TidbClusterSpecTidbConfigSecurity'] = None,
                 socket: Optional[str] = None,
                 split_region_max_num: Optional[int] = None,
                 split_table: Optional[bool] = None,
                 status: Optional['outputs.TidbClusterSpecTidbConfigStatus'] = None,
                 stmt_summary: Optional['outputs.TidbClusterSpecTidbConfigStmt-Summary'] = None,
                 tikv_client: Optional['outputs.TidbClusterSpecTidbConfigTikv-Client'] = None,
                 tmp_storage_path: Optional[str] = None,
                 tmp_storage_quota: Optional[int] = None,
                 token_limit: Optional[int] = None,
                 treat_old_version_utf8_as_utf8mb4: Optional[bool] = None,
                 txn_local_latches: Optional['outputs.TidbClusterSpecTidbConfigTxn-Local-Latches'] = None):
        if alter_primary_key is not None:
            pulumi.set(__self__, "alter_primary_key", alter_primary_key)
        if binlog is not None:
            pulumi.set(__self__, "binlog", binlog)
        if check_mb4_value_in_utf8 is not None:
            pulumi.set(__self__, "check_mb4_value_in_utf8", check_mb4_value_in_utf8)
        if compatible_kill_query is not None:
            pulumi.set(__self__, "compatible_kill_query", compatible_kill_query)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if delay_clean_table_lock is not None:
            pulumi.set(__self__, "delay_clean_table_lock", delay_clean_table_lock)
        if enable_batch_dml is not None:
            pulumi.set(__self__, "enable_batch_dml", enable_batch_dml)
        if enable_dynamic_config is not None:
            pulumi.set(__self__, "enable_dynamic_config", enable_dynamic_config)
        if enable_streaming is not None:
            pulumi.set(__self__, "enable_streaming", enable_streaming)
        if enable_table_lock is not None:
            pulumi.set(__self__, "enable_table_lock", enable_table_lock)
        if enable_telemetry is not None:
            pulumi.set(__self__, "enable_telemetry", enable_telemetry)
        if experimental is not None:
            pulumi.set(__self__, "experimental", experimental)
        if isolation_read is not None:
            pulumi.set(__self__, "isolation_read", isolation_read)
        if lease is not None:
            pulumi.set(__self__, "lease", lease)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if lower_case_table_names is not None:
            pulumi.set(__self__, "lower_case_table_names", lower_case_table_names)
        if max_server_connections is not None:
            pulumi.set(__self__, "max_server_connections", max_server_connections)
        if mem_quota_query is not None:
            pulumi.set(__self__, "mem_quota_query", mem_quota_query)
        if new_collations_enabled_on_first_bootstrap is not None:
            pulumi.set(__self__, "new_collations_enabled_on_first_bootstrap", new_collations_enabled_on_first_bootstrap)
        if oom_action is not None:
            pulumi.set(__self__, "oom_action", oom_action)
        if oom_use_tmp_storage is not None:
            pulumi.set(__self__, "oom_use_tmp_storage", oom_use_tmp_storage)
        if opentracing is not None:
            pulumi.set(__self__, "opentracing", opentracing)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if pessimistic_txn is not None:
            pulumi.set(__self__, "pessimistic_txn", pessimistic_txn)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if prepared_plan_cache is not None:
            pulumi.set(__self__, "prepared_plan_cache", prepared_plan_cache)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if repair_mode is not None:
            pulumi.set(__self__, "repair_mode", repair_mode)
        if repair_table_list is not None:
            pulumi.set(__self__, "repair_table_list", repair_table_list)
        if run_ddl is not None:
            pulumi.set(__self__, "run_ddl", run_ddl)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if socket is not None:
            pulumi.set(__self__, "socket", socket)
        if split_region_max_num is not None:
            pulumi.set(__self__, "split_region_max_num", split_region_max_num)
        if split_table is not None:
            pulumi.set(__self__, "split_table", split_table)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stmt_summary is not None:
            pulumi.set(__self__, "stmt_summary", stmt_summary)
        if tikv_client is not None:
            pulumi.set(__self__, "tikv_client", tikv_client)
        if tmp_storage_path is not None:
            pulumi.set(__self__, "tmp_storage_path", tmp_storage_path)
        if tmp_storage_quota is not None:
            pulumi.set(__self__, "tmp_storage_quota", tmp_storage_quota)
        if token_limit is not None:
            pulumi.set(__self__, "token_limit", token_limit)
        if treat_old_version_utf8_as_utf8mb4 is not None:
            pulumi.set(__self__, "treat_old_version_utf8_as_utf8mb4", treat_old_version_utf8_as_utf8mb4)
        if txn_local_latches is not None:
            pulumi.set(__self__, "txn_local_latches", txn_local_latches)

    @property
    @pulumi.getter(name="alter-primary-key")
    def alter_primary_key(self) -> Optional[bool]:
        return pulumi.get(self, "alter_primary_key")

    @property
    @pulumi.getter
    def binlog(self) -> Optional['outputs.TidbClusterSpecTidbConfigBinlog']:
        return pulumi.get(self, "binlog")

    @property
    @pulumi.getter(name="check-mb4-value-in-utf8")
    def check_mb4_value_in_utf8(self) -> Optional[bool]:
        return pulumi.get(self, "check_mb4_value_in_utf8")

    @property
    @pulumi.getter(name="compatible-kill-query")
    def compatible_kill_query(self) -> Optional[bool]:
        return pulumi.get(self, "compatible_kill_query")

    @property
    @pulumi.getter
    def cors(self) -> Optional[str]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="delay-clean-table-lock")
    def delay_clean_table_lock(self) -> Optional[int]:
        return pulumi.get(self, "delay_clean_table_lock")

    @property
    @pulumi.getter(name="enable-batch-dml")
    def enable_batch_dml(self) -> Optional[bool]:
        return pulumi.get(self, "enable_batch_dml")

    @property
    @pulumi.getter(name="enable-dynamic-config")
    def enable_dynamic_config(self) -> Optional[bool]:
        return pulumi.get(self, "enable_dynamic_config")

    @property
    @pulumi.getter(name="enable-streaming")
    def enable_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_streaming")

    @property
    @pulumi.getter(name="enable-table-lock")
    def enable_table_lock(self) -> Optional[bool]:
        return pulumi.get(self, "enable_table_lock")

    @property
    @pulumi.getter(name="enable-telemetry")
    def enable_telemetry(self) -> Optional[bool]:
        return pulumi.get(self, "enable_telemetry")

    @property
    @pulumi.getter
    def experimental(self) -> Optional['outputs.TidbClusterSpecTidbConfigExperimental']:
        return pulumi.get(self, "experimental")

    @property
    @pulumi.getter(name="isolation-read")
    def isolation_read(self) -> Optional['outputs.TidbClusterSpecTidbConfigIsolation-Read']:
        return pulumi.get(self, "isolation_read")

    @property
    @pulumi.getter
    def lease(self) -> Optional[str]:
        return pulumi.get(self, "lease")

    @property
    @pulumi.getter
    def log(self) -> Optional['outputs.TidbClusterSpecTidbConfigLog']:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="lower-case-table-names")
    def lower_case_table_names(self) -> Optional[int]:
        return pulumi.get(self, "lower_case_table_names")

    @property
    @pulumi.getter(name="max-server-connections")
    def max_server_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_server_connections")

    @property
    @pulumi.getter(name="mem-quota-query")
    def mem_quota_query(self) -> Optional[int]:
        return pulumi.get(self, "mem_quota_query")

    @property
    @pulumi.getter
    def new_collations_enabled_on_first_bootstrap(self) -> Optional[bool]:
        return pulumi.get(self, "new_collations_enabled_on_first_bootstrap")

    @property
    @pulumi.getter(name="oom-action")
    def oom_action(self) -> Optional[str]:
        return pulumi.get(self, "oom_action")

    @property
    @pulumi.getter(name="oom-use-tmp-storage")
    def oom_use_tmp_storage(self) -> Optional[bool]:
        return pulumi.get(self, "oom_use_tmp_storage")

    @property
    @pulumi.getter
    def opentracing(self) -> Optional['outputs.TidbClusterSpecTidbConfigOpentracing']:
        return pulumi.get(self, "opentracing")

    @property
    @pulumi.getter
    def performance(self) -> Optional['outputs.TidbClusterSpecTidbConfigPerformance']:
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter(name="pessimistic-txn")
    def pessimistic_txn(self) -> Optional['outputs.TidbClusterSpecTidbConfigPessimistic-Txn']:
        return pulumi.get(self, "pessimistic_txn")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.TidbClusterSpecTidbConfigPlugin']:
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="prepared-plan-cache")
    def prepared_plan_cache(self) -> Optional['outputs.TidbClusterSpecTidbConfigPrepared-Plan-Cache']:
        return pulumi.get(self, "prepared_plan_cache")

    @property
    @pulumi.getter(name="proxy-protocol")
    def proxy_protocol(self) -> Optional['outputs.TidbClusterSpecTidbConfigProxy-Protocol']:
        return pulumi.get(self, "proxy_protocol")

    @property
    @pulumi.getter(name="repair-mode")
    def repair_mode(self) -> Optional[bool]:
        return pulumi.get(self, "repair_mode")

    @property
    @pulumi.getter(name="repair-table-list")
    def repair_table_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repair_table_list")

    @property
    @pulumi.getter(name="run-ddl")
    def run_ddl(self) -> Optional[bool]:
        return pulumi.get(self, "run_ddl")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.TidbClusterSpecTidbConfigSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def socket(self) -> Optional[str]:
        return pulumi.get(self, "socket")

    @property
    @pulumi.getter(name="split-region-max-num")
    def split_region_max_num(self) -> Optional[int]:
        return pulumi.get(self, "split_region_max_num")

    @property
    @pulumi.getter(name="split-table")
    def split_table(self) -> Optional[bool]:
        return pulumi.get(self, "split_table")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.TidbClusterSpecTidbConfigStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stmt-summary")
    def stmt_summary(self) -> Optional['outputs.TidbClusterSpecTidbConfigStmt-Summary']:
        return pulumi.get(self, "stmt_summary")

    @property
    @pulumi.getter(name="tikv-client")
    def tikv_client(self) -> Optional['outputs.TidbClusterSpecTidbConfigTikv-Client']:
        return pulumi.get(self, "tikv_client")

    @property
    @pulumi.getter(name="tmp-storage-path")
    def tmp_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "tmp_storage_path")

    @property
    @pulumi.getter(name="tmp-storage-quota")
    def tmp_storage_quota(self) -> Optional[int]:
        return pulumi.get(self, "tmp_storage_quota")

    @property
    @pulumi.getter(name="token-limit")
    def token_limit(self) -> Optional[int]:
        return pulumi.get(self, "token_limit")

    @property
    @pulumi.getter(name="treat-old-version-utf8-as-utf8mb4")
    def treat_old_version_utf8_as_utf8mb4(self) -> Optional[bool]:
        return pulumi.get(self, "treat_old_version_utf8_as_utf8mb4")

    @property
    @pulumi.getter(name="txn-local-latches")
    def txn_local_latches(self) -> Optional['outputs.TidbClusterSpecTidbConfigTxn-Local-Latches']:
        return pulumi.get(self, "txn_local_latches")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigBinlog(dict):
    def __init__(__self__, *,
                 binlog_socket: Optional[str] = None,
                 enable: Optional[bool] = None,
                 ignore_error: Optional[bool] = None,
                 strategy: Optional[str] = None,
                 write_timeout: Optional[str] = None):
        if binlog_socket is not None:
            pulumi.set(__self__, "binlog_socket", binlog_socket)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if ignore_error is not None:
            pulumi.set(__self__, "ignore_error", ignore_error)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if write_timeout is not None:
            pulumi.set(__self__, "write_timeout", write_timeout)

    @property
    @pulumi.getter(name="binlog-socket")
    def binlog_socket(self) -> Optional[str]:
        return pulumi.get(self, "binlog_socket")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="ignore-error")
    def ignore_error(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_error")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter(name="write-timeout")
    def write_timeout(self) -> Optional[str]:
        return pulumi.get(self, "write_timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigExperimental(dict):
    def __init__(__self__, *,
                 allow_auto_random: Optional[bool] = None,
                 allow_expression_index: Optional[bool] = None):
        if allow_auto_random is not None:
            pulumi.set(__self__, "allow_auto_random", allow_auto_random)
        if allow_expression_index is not None:
            pulumi.set(__self__, "allow_expression_index", allow_expression_index)

    @property
    @pulumi.getter(name="allow-auto-random")
    def allow_auto_random(self) -> Optional[bool]:
        return pulumi.get(self, "allow_auto_random")

    @property
    @pulumi.getter(name="allow-expression-index")
    def allow_expression_index(self) -> Optional[bool]:
        return pulumi.get(self, "allow_expression_index")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigIsolation-Read(dict):
    def __init__(__self__, *,
                 engines: Optional[Sequence[str]] = None):
        if engines is not None:
            pulumi.set(__self__, "engines", engines)

    @property
    @pulumi.getter
    def engines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "engines")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigLog(dict):
    def __init__(__self__, *,
                 disable_timestamp: Optional[bool] = None,
                 enable_error_stack: Optional[bool] = None,
                 enable_slow_log: Optional[bool] = None,
                 enable_timestamp: Optional[bool] = None,
                 expensive_threshold: Optional[int] = None,
                 file: Optional['outputs.TidbClusterSpecTidbConfigLogFile'] = None,
                 format: Optional[str] = None,
                 level: Optional[str] = None,
                 query_log_max_len: Optional[int] = None,
                 record_plan_in_slow_log: Optional[int] = None,
                 slow_query_file: Optional[str] = None,
                 slow_threshold: Optional[int] = None):
        if disable_timestamp is not None:
            pulumi.set(__self__, "disable_timestamp", disable_timestamp)
        if enable_error_stack is not None:
            pulumi.set(__self__, "enable_error_stack", enable_error_stack)
        if enable_slow_log is not None:
            pulumi.set(__self__, "enable_slow_log", enable_slow_log)
        if enable_timestamp is not None:
            pulumi.set(__self__, "enable_timestamp", enable_timestamp)
        if expensive_threshold is not None:
            pulumi.set(__self__, "expensive_threshold", expensive_threshold)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if query_log_max_len is not None:
            pulumi.set(__self__, "query_log_max_len", query_log_max_len)
        if record_plan_in_slow_log is not None:
            pulumi.set(__self__, "record_plan_in_slow_log", record_plan_in_slow_log)
        if slow_query_file is not None:
            pulumi.set(__self__, "slow_query_file", slow_query_file)
        if slow_threshold is not None:
            pulumi.set(__self__, "slow_threshold", slow_threshold)

    @property
    @pulumi.getter(name="disable-timestamp")
    def disable_timestamp(self) -> Optional[bool]:
        return pulumi.get(self, "disable_timestamp")

    @property
    @pulumi.getter(name="enable-error-stack")
    def enable_error_stack(self) -> Optional[bool]:
        return pulumi.get(self, "enable_error_stack")

    @property
    @pulumi.getter(name="enable-slow-log")
    def enable_slow_log(self) -> Optional[bool]:
        return pulumi.get(self, "enable_slow_log")

    @property
    @pulumi.getter(name="enable-timestamp")
    def enable_timestamp(self) -> Optional[bool]:
        return pulumi.get(self, "enable_timestamp")

    @property
    @pulumi.getter(name="expensive-threshold")
    def expensive_threshold(self) -> Optional[int]:
        return pulumi.get(self, "expensive_threshold")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.TidbClusterSpecTidbConfigLogFile']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="query-log-max-len")
    def query_log_max_len(self) -> Optional[int]:
        return pulumi.get(self, "query_log_max_len")

    @property
    @pulumi.getter(name="record-plan-in-slow-log")
    def record_plan_in_slow_log(self) -> Optional[int]:
        return pulumi.get(self, "record_plan_in_slow_log")

    @property
    @pulumi.getter(name="slow-query-file")
    def slow_query_file(self) -> Optional[str]:
        return pulumi.get(self, "slow_query_file")

    @property
    @pulumi.getter(name="slow-threshold")
    def slow_threshold(self) -> Optional[int]:
        return pulumi.get(self, "slow_threshold")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigLogFile(dict):
    def __init__(__self__, *,
                 filename: Optional[str] = None,
                 log_rotate: Optional[bool] = None,
                 max_backups: Optional[int] = None,
                 max_days: Optional[int] = None,
                 max_size: Optional[int] = None):
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if log_rotate is not None:
            pulumi.set(__self__, "log_rotate", log_rotate)
        if max_backups is not None:
            pulumi.set(__self__, "max_backups", max_backups)
        if max_days is not None:
            pulumi.set(__self__, "max_days", max_days)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="log-rotate")
    def log_rotate(self) -> Optional[bool]:
        return pulumi.get(self, "log_rotate")

    @property
    @pulumi.getter(name="max-backups")
    def max_backups(self) -> Optional[int]:
        return pulumi.get(self, "max_backups")

    @property
    @pulumi.getter(name="max-days")
    def max_days(self) -> Optional[int]:
        return pulumi.get(self, "max_days")

    @property
    @pulumi.getter(name="max-size")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigOpentracing(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 reporter: Optional['outputs.TidbClusterSpecTidbConfigOpentracingReporter'] = None,
                 rpc_metrics: Optional[bool] = None,
                 sampler: Optional['outputs.TidbClusterSpecTidbConfigOpentracingSampler'] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if reporter is not None:
            pulumi.set(__self__, "reporter", reporter)
        if rpc_metrics is not None:
            pulumi.set(__self__, "rpc_metrics", rpc_metrics)
        if sampler is not None:
            pulumi.set(__self__, "sampler", sampler)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def reporter(self) -> Optional['outputs.TidbClusterSpecTidbConfigOpentracingReporter']:
        return pulumi.get(self, "reporter")

    @property
    @pulumi.getter(name="rpc-metrics")
    def rpc_metrics(self) -> Optional[bool]:
        return pulumi.get(self, "rpc_metrics")

    @property
    @pulumi.getter
    def sampler(self) -> Optional['outputs.TidbClusterSpecTidbConfigOpentracingSampler']:
        return pulumi.get(self, "sampler")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigOpentracingReporter(dict):
    def __init__(__self__, *,
                 buffer_flush_interval: Optional[int] = None,
                 local_agent_host_port: Optional[str] = None,
                 log_spans: Optional[bool] = None,
                 queue_size: Optional[int] = None):
        if buffer_flush_interval is not None:
            pulumi.set(__self__, "buffer_flush_interval", buffer_flush_interval)
        if local_agent_host_port is not None:
            pulumi.set(__self__, "local_agent_host_port", local_agent_host_port)
        if log_spans is not None:
            pulumi.set(__self__, "log_spans", log_spans)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter(name="buffer-flush-interval")
    def buffer_flush_interval(self) -> Optional[int]:
        return pulumi.get(self, "buffer_flush_interval")

    @property
    @pulumi.getter(name="local-agent-host-port")
    def local_agent_host_port(self) -> Optional[str]:
        return pulumi.get(self, "local_agent_host_port")

    @property
    @pulumi.getter(name="log-spans")
    def log_spans(self) -> Optional[bool]:
        return pulumi.get(self, "log_spans")

    @property
    @pulumi.getter(name="queue-size")
    def queue_size(self) -> Optional[int]:
        return pulumi.get(self, "queue_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigOpentracingSampler(dict):
    def __init__(__self__, *,
                 max_operations: Optional[int] = None,
                 param: Optional[float] = None,
                 sampling_refresh_interval: Optional[int] = None,
                 sampling_server_url: Optional[str] = None,
                 type: Optional[str] = None):
        if max_operations is not None:
            pulumi.set(__self__, "max_operations", max_operations)
        if param is not None:
            pulumi.set(__self__, "param", param)
        if sampling_refresh_interval is not None:
            pulumi.set(__self__, "sampling_refresh_interval", sampling_refresh_interval)
        if sampling_server_url is not None:
            pulumi.set(__self__, "sampling_server_url", sampling_server_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="max-operations")
    def max_operations(self) -> Optional[int]:
        return pulumi.get(self, "max_operations")

    @property
    @pulumi.getter
    def param(self) -> Optional[float]:
        return pulumi.get(self, "param")

    @property
    @pulumi.getter(name="sampling-refresh-interval")
    def sampling_refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "sampling_refresh_interval")

    @property
    @pulumi.getter(name="sampling-server-url")
    def sampling_server_url(self) -> Optional[str]:
        return pulumi.get(self, "sampling_server_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigPerformance(dict):
    def __init__(__self__, *,
                 agg_push_down_join: Optional[bool] = None,
                 bind_info_lease: Optional[str] = None,
                 committer_concurrency: Optional[int] = None,
                 cross_join: Optional[bool] = None,
                 feedback_probability: Optional[float] = None,
                 force_priority: Optional[str] = None,
                 max_memory: Optional[int] = None,
                 max_procs: Optional[int] = None,
                 max_txn_ttl: Optional[int] = None,
                 pseudo_estimate_ratio: Optional[float] = None,
                 query_feedback_limit: Optional[int] = None,
                 run_auto_analyze: Optional[bool] = None,
                 stats_lease: Optional[str] = None,
                 stmt_count_limit: Optional[int] = None,
                 tcp_keep_alive: Optional[bool] = None,
                 txn_entry_count_limit: Optional[int] = None,
                 txn_total_size_limit: Optional[int] = None):
        if agg_push_down_join is not None:
            pulumi.set(__self__, "agg_push_down_join", agg_push_down_join)
        if bind_info_lease is not None:
            pulumi.set(__self__, "bind_info_lease", bind_info_lease)
        if committer_concurrency is not None:
            pulumi.set(__self__, "committer_concurrency", committer_concurrency)
        if cross_join is not None:
            pulumi.set(__self__, "cross_join", cross_join)
        if feedback_probability is not None:
            pulumi.set(__self__, "feedback_probability", feedback_probability)
        if force_priority is not None:
            pulumi.set(__self__, "force_priority", force_priority)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if max_procs is not None:
            pulumi.set(__self__, "max_procs", max_procs)
        if max_txn_ttl is not None:
            pulumi.set(__self__, "max_txn_ttl", max_txn_ttl)
        if pseudo_estimate_ratio is not None:
            pulumi.set(__self__, "pseudo_estimate_ratio", pseudo_estimate_ratio)
        if query_feedback_limit is not None:
            pulumi.set(__self__, "query_feedback_limit", query_feedback_limit)
        if run_auto_analyze is not None:
            pulumi.set(__self__, "run_auto_analyze", run_auto_analyze)
        if stats_lease is not None:
            pulumi.set(__self__, "stats_lease", stats_lease)
        if stmt_count_limit is not None:
            pulumi.set(__self__, "stmt_count_limit", stmt_count_limit)
        if tcp_keep_alive is not None:
            pulumi.set(__self__, "tcp_keep_alive", tcp_keep_alive)
        if txn_entry_count_limit is not None:
            pulumi.set(__self__, "txn_entry_count_limit", txn_entry_count_limit)
        if txn_total_size_limit is not None:
            pulumi.set(__self__, "txn_total_size_limit", txn_total_size_limit)

    @property
    @pulumi.getter(name="agg-push-down-join")
    def agg_push_down_join(self) -> Optional[bool]:
        return pulumi.get(self, "agg_push_down_join")

    @property
    @pulumi.getter(name="bind-info-lease")
    def bind_info_lease(self) -> Optional[str]:
        return pulumi.get(self, "bind_info_lease")

    @property
    @pulumi.getter(name="committer-concurrency")
    def committer_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "committer_concurrency")

    @property
    @pulumi.getter(name="cross-join")
    def cross_join(self) -> Optional[bool]:
        return pulumi.get(self, "cross_join")

    @property
    @pulumi.getter(name="feedback-probability")
    def feedback_probability(self) -> Optional[float]:
        return pulumi.get(self, "feedback_probability")

    @property
    @pulumi.getter(name="force-priority")
    def force_priority(self) -> Optional[str]:
        return pulumi.get(self, "force_priority")

    @property
    @pulumi.getter(name="max-memory")
    def max_memory(self) -> Optional[int]:
        return pulumi.get(self, "max_memory")

    @property
    @pulumi.getter(name="max-procs")
    def max_procs(self) -> Optional[int]:
        return pulumi.get(self, "max_procs")

    @property
    @pulumi.getter(name="max-txn-ttl")
    def max_txn_ttl(self) -> Optional[int]:
        return pulumi.get(self, "max_txn_ttl")

    @property
    @pulumi.getter(name="pseudo-estimate-ratio")
    def pseudo_estimate_ratio(self) -> Optional[float]:
        return pulumi.get(self, "pseudo_estimate_ratio")

    @property
    @pulumi.getter(name="query-feedback-limit")
    def query_feedback_limit(self) -> Optional[int]:
        return pulumi.get(self, "query_feedback_limit")

    @property
    @pulumi.getter(name="run-auto-analyze")
    def run_auto_analyze(self) -> Optional[bool]:
        return pulumi.get(self, "run_auto_analyze")

    @property
    @pulumi.getter(name="stats-lease")
    def stats_lease(self) -> Optional[str]:
        return pulumi.get(self, "stats_lease")

    @property
    @pulumi.getter(name="stmt-count-limit")
    def stmt_count_limit(self) -> Optional[int]:
        return pulumi.get(self, "stmt_count_limit")

    @property
    @pulumi.getter(name="tcp-keep-alive")
    def tcp_keep_alive(self) -> Optional[bool]:
        return pulumi.get(self, "tcp_keep_alive")

    @property
    @pulumi.getter(name="txn-entry-count-limit")
    def txn_entry_count_limit(self) -> Optional[int]:
        return pulumi.get(self, "txn_entry_count_limit")

    @property
    @pulumi.getter(name="txn-total-size-limit")
    def txn_total_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "txn_total_size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigPessimistic-Txn(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 max_retry_count: Optional[int] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if max_retry_count is not None:
            pulumi.set(__self__, "max_retry_count", max_retry_count)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="max-retry-count")
    def max_retry_count(self) -> Optional[int]:
        return pulumi.get(self, "max_retry_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigPlugin(dict):
    def __init__(__self__, *,
                 dir: Optional[str] = None,
                 load: Optional[str] = None):
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if load is not None:
            pulumi.set(__self__, "load", load)

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def load(self) -> Optional[str]:
        return pulumi.get(self, "load")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigPrepared-Plan-Cache(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 memory_guard_ratio: Optional[float] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if memory_guard_ratio is not None:
            pulumi.set(__self__, "memory_guard_ratio", memory_guard_ratio)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="memory-guard-ratio")
    def memory_guard_ratio(self) -> Optional[float]:
        return pulumi.get(self, "memory_guard_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigProxy-Protocol(dict):
    def __init__(__self__, *,
                 header_timeout: Optional[int] = None,
                 networks: Optional[str] = None):
        if header_timeout is not None:
            pulumi.set(__self__, "header_timeout", header_timeout)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="header-timeout")
    def header_timeout(self) -> Optional[int]:
        return pulumi.get(self, "header_timeout")

    @property
    @pulumi.getter
    def networks(self) -> Optional[str]:
        return pulumi.get(self, "networks")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigSecurity(dict):
    def __init__(__self__, *,
                 cluster_ssl_ca: Optional[str] = None,
                 cluster_ssl_cert: Optional[str] = None,
                 cluster_ssl_key: Optional[str] = None,
                 skip_grant_table: Optional[bool] = None,
                 ssl_ca: Optional[str] = None,
                 ssl_cert: Optional[str] = None,
                 ssl_key: Optional[str] = None):
        if cluster_ssl_ca is not None:
            pulumi.set(__self__, "cluster_ssl_ca", cluster_ssl_ca)
        if cluster_ssl_cert is not None:
            pulumi.set(__self__, "cluster_ssl_cert", cluster_ssl_cert)
        if cluster_ssl_key is not None:
            pulumi.set(__self__, "cluster_ssl_key", cluster_ssl_key)
        if skip_grant_table is not None:
            pulumi.set(__self__, "skip_grant_table", skip_grant_table)
        if ssl_ca is not None:
            pulumi.set(__self__, "ssl_ca", ssl_ca)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)

    @property
    @pulumi.getter(name="cluster-ssl-ca")
    def cluster_ssl_ca(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ssl_ca")

    @property
    @pulumi.getter(name="cluster-ssl-cert")
    def cluster_ssl_cert(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ssl_cert")

    @property
    @pulumi.getter(name="cluster-ssl-key")
    def cluster_ssl_key(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ssl_key")

    @property
    @pulumi.getter(name="skip-grant-table")
    def skip_grant_table(self) -> Optional[bool]:
        return pulumi.get(self, "skip_grant_table")

    @property
    @pulumi.getter(name="ssl-ca")
    def ssl_ca(self) -> Optional[str]:
        return pulumi.get(self, "ssl_ca")

    @property
    @pulumi.getter(name="ssl-cert")
    def ssl_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="ssl-key")
    def ssl_key(self) -> Optional[str]:
        return pulumi.get(self, "ssl_key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigStatus(dict):
    def __init__(__self__, *,
                 metrics_addr: Optional[str] = None,
                 metrics_interval: Optional[int] = None,
                 record_db_qps: Optional[bool] = None,
                 report_status: Optional[bool] = None):
        if metrics_addr is not None:
            pulumi.set(__self__, "metrics_addr", metrics_addr)
        if metrics_interval is not None:
            pulumi.set(__self__, "metrics_interval", metrics_interval)
        if record_db_qps is not None:
            pulumi.set(__self__, "record_db_qps", record_db_qps)
        if report_status is not None:
            pulumi.set(__self__, "report_status", report_status)

    @property
    @pulumi.getter(name="metrics-addr")
    def metrics_addr(self) -> Optional[str]:
        return pulumi.get(self, "metrics_addr")

    @property
    @pulumi.getter(name="metrics-interval")
    def metrics_interval(self) -> Optional[int]:
        return pulumi.get(self, "metrics_interval")

    @property
    @pulumi.getter(name="record-db-qps")
    def record_db_qps(self) -> Optional[bool]:
        return pulumi.get(self, "record_db_qps")

    @property
    @pulumi.getter(name="report-status")
    def report_status(self) -> Optional[bool]:
        return pulumi.get(self, "report_status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigStmt-Summary(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 enable_internal_query: Optional[bool] = None,
                 history_size: Optional[int] = None,
                 max_sql_length: Optional[int] = None,
                 max_stmt_count: Optional[int] = None,
                 refresh_interval: Optional[int] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_internal_query is not None:
            pulumi.set(__self__, "enable_internal_query", enable_internal_query)
        if history_size is not None:
            pulumi.set(__self__, "history_size", history_size)
        if max_sql_length is not None:
            pulumi.set(__self__, "max_sql_length", max_sql_length)
        if max_stmt_count is not None:
            pulumi.set(__self__, "max_stmt_count", max_stmt_count)
        if refresh_interval is not None:
            pulumi.set(__self__, "refresh_interval", refresh_interval)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="enable-internal-query")
    def enable_internal_query(self) -> Optional[bool]:
        return pulumi.get(self, "enable_internal_query")

    @property
    @pulumi.getter(name="history-size")
    def history_size(self) -> Optional[int]:
        return pulumi.get(self, "history_size")

    @property
    @pulumi.getter(name="max-sql-length")
    def max_sql_length(self) -> Optional[int]:
        return pulumi.get(self, "max_sql_length")

    @property
    @pulumi.getter(name="max-stmt-count")
    def max_stmt_count(self) -> Optional[int]:
        return pulumi.get(self, "max_stmt_count")

    @property
    @pulumi.getter(name="refresh-interval")
    def refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "refresh_interval")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigTikv-Client(dict):
    def __init__(__self__, *,
                 batch_wait_size: Optional[int] = None,
                 commit_timeout: Optional[str] = None,
                 copr_cache: Optional[Any] = None,
                 grpc_connection_count: Optional[int] = None,
                 grpc_keepalive_time: Optional[int] = None,
                 grpc_keepalive_timeout: Optional[int] = None,
                 max_batch_size: Optional[int] = None,
                 max_batch_wait_time: Optional[int] = None,
                 max_txn_time_use: Optional[int] = None,
                 overload_threshold: Optional[int] = None,
                 region_cache_ttl: Optional[int] = None,
                 store_limit: Optional[int] = None,
                 store_liveness_timeout: Optional[str] = None):
        if batch_wait_size is not None:
            pulumi.set(__self__, "batch_wait_size", batch_wait_size)
        if commit_timeout is not None:
            pulumi.set(__self__, "commit_timeout", commit_timeout)
        if copr_cache is not None:
            pulumi.set(__self__, "copr_cache", copr_cache)
        if grpc_connection_count is not None:
            pulumi.set(__self__, "grpc_connection_count", grpc_connection_count)
        if grpc_keepalive_time is not None:
            pulumi.set(__self__, "grpc_keepalive_time", grpc_keepalive_time)
        if grpc_keepalive_timeout is not None:
            pulumi.set(__self__, "grpc_keepalive_timeout", grpc_keepalive_timeout)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if max_batch_wait_time is not None:
            pulumi.set(__self__, "max_batch_wait_time", max_batch_wait_time)
        if max_txn_time_use is not None:
            pulumi.set(__self__, "max_txn_time_use", max_txn_time_use)
        if overload_threshold is not None:
            pulumi.set(__self__, "overload_threshold", overload_threshold)
        if region_cache_ttl is not None:
            pulumi.set(__self__, "region_cache_ttl", region_cache_ttl)
        if store_limit is not None:
            pulumi.set(__self__, "store_limit", store_limit)
        if store_liveness_timeout is not None:
            pulumi.set(__self__, "store_liveness_timeout", store_liveness_timeout)

    @property
    @pulumi.getter(name="batch-wait-size")
    def batch_wait_size(self) -> Optional[int]:
        return pulumi.get(self, "batch_wait_size")

    @property
    @pulumi.getter(name="commit-timeout")
    def commit_timeout(self) -> Optional[str]:
        return pulumi.get(self, "commit_timeout")

    @property
    @pulumi.getter(name="copr-cache")
    def copr_cache(self) -> Optional[Any]:
        return pulumi.get(self, "copr_cache")

    @property
    @pulumi.getter(name="grpc-connection-count")
    def grpc_connection_count(self) -> Optional[int]:
        return pulumi.get(self, "grpc_connection_count")

    @property
    @pulumi.getter(name="grpc-keepalive-time")
    def grpc_keepalive_time(self) -> Optional[int]:
        return pulumi.get(self, "grpc_keepalive_time")

    @property
    @pulumi.getter(name="grpc-keepalive-timeout")
    def grpc_keepalive_timeout(self) -> Optional[int]:
        return pulumi.get(self, "grpc_keepalive_timeout")

    @property
    @pulumi.getter(name="max-batch-size")
    def max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter(name="max-batch-wait-time")
    def max_batch_wait_time(self) -> Optional[int]:
        return pulumi.get(self, "max_batch_wait_time")

    @property
    @pulumi.getter(name="max-txn-time-use")
    def max_txn_time_use(self) -> Optional[int]:
        return pulumi.get(self, "max_txn_time_use")

    @property
    @pulumi.getter(name="overload-threshold")
    def overload_threshold(self) -> Optional[int]:
        return pulumi.get(self, "overload_threshold")

    @property
    @pulumi.getter(name="region-cache-ttl")
    def region_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "region_cache_ttl")

    @property
    @pulumi.getter(name="store-limit")
    def store_limit(self) -> Optional[int]:
        return pulumi.get(self, "store_limit")

    @property
    @pulumi.getter(name="store-liveness-timeout")
    def store_liveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "store_liveness_timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbConfigTxn-Local-Latches(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTidbEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTidbEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTidbEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTidbEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTidbEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTidbEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTidbEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTidbEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTidbEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTidbEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecTidbLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecTidbLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTidbLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTidbLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTidbLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTidbLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTidbLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTidbLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTidbPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecTidbPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTidbPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTidbPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecTidbPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTidbPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbService(dict):
    def __init__(__self__, *,
                 expose_status: Optional[bool] = None,
                 external_traffic_policy: Optional[str] = None):
        if expose_status is not None:
            pulumi.set(__self__, "expose_status", expose_status)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)

    @property
    @pulumi.getter(name="exposeStatus")
    def expose_status(self) -> Optional[bool]:
        return pulumi.get(self, "expose_status")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbSlowLogTailer(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTidbTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflash(dict):
    def __init__(__self__, *,
                 replicas: int,
                 storage_claims: Sequence['outputs.TidbClusterSpecTiflashStorageClaims'],
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecTiflashAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 config: Optional['outputs.TidbClusterSpecTiflashConfig'] = None,
                 config_update_strategy: Optional[str] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTiflashEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecTiflashImagePullSecrets']] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 log_tailer: Optional['outputs.TidbClusterSpecTiflashLogTailer'] = None,
                 max_failover_count: Optional[int] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecTiflashPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 privileged: Optional[bool] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecTiflashTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "storage_claims", storage_claims)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if log_tailer is not None:
            pulumi.set(__self__, "log_tailer", log_tailer)
        if max_failover_count is not None:
            pulumi.set(__self__, "max_failover_count", max_failover_count)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="storageClaims")
    def storage_claims(self) -> Sequence['outputs.TidbClusterSpecTiflashStorageClaims']:
        return pulumi.get(self, "storage_claims")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecTiflashAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecTiflashConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="logTailer")
    def log_tailer(self) -> Optional['outputs.TidbClusterSpecTiflashLogTailer']:
        return pulumi.get(self, "log_tailer")

    @property
    @pulumi.getter(name="maxFailoverCount")
    def max_failover_count(self) -> Optional[int]:
        return pulumi.get(self, "max_failover_count")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecTiflashPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecTiflashAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashConfig(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.TidbClusterSpecTiflashConfigConfig'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecTiflashConfigConfig']:
        return pulumi.get(self, "config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashConfigConfig(dict):
    def __init__(__self__, *,
                 flash: Optional['outputs.TidbClusterSpecTiflashConfigConfigFlash'] = None,
                 logger: Optional['outputs.TidbClusterSpecTiflashConfigConfigLogger'] = None,
                 mark_cache_size: Optional[int] = None,
                 minmax_index_cache_size: Optional[int] = None,
                 path_realtime_mode: Optional[bool] = None):
        if flash is not None:
            pulumi.set(__self__, "flash", flash)
        if logger is not None:
            pulumi.set(__self__, "logger", logger)
        if mark_cache_size is not None:
            pulumi.set(__self__, "mark_cache_size", mark_cache_size)
        if minmax_index_cache_size is not None:
            pulumi.set(__self__, "minmax_index_cache_size", minmax_index_cache_size)
        if path_realtime_mode is not None:
            pulumi.set(__self__, "path_realtime_mode", path_realtime_mode)

    @property
    @pulumi.getter
    def flash(self) -> Optional['outputs.TidbClusterSpecTiflashConfigConfigFlash']:
        return pulumi.get(self, "flash")

    @property
    @pulumi.getter
    def logger(self) -> Optional['outputs.TidbClusterSpecTiflashConfigConfigLogger']:
        return pulumi.get(self, "logger")

    @property
    @pulumi.getter
    def mark_cache_size(self) -> Optional[int]:
        return pulumi.get(self, "mark_cache_size")

    @property
    @pulumi.getter
    def minmax_index_cache_size(self) -> Optional[int]:
        return pulumi.get(self, "minmax_index_cache_size")

    @property
    @pulumi.getter
    def path_realtime_mode(self) -> Optional[bool]:
        return pulumi.get(self, "path_realtime_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashConfigConfigFlash(dict):
    def __init__(__self__, *,
                 compact_log_min_period: Optional[int] = None,
                 flash_cluster: Optional['outputs.TidbClusterSpecTiflashConfigConfigFlashFlash_cluster'] = None,
                 overlap_threshold: Optional[float] = None):
        if compact_log_min_period is not None:
            pulumi.set(__self__, "compact_log_min_period", compact_log_min_period)
        if flash_cluster is not None:
            pulumi.set(__self__, "flash_cluster", flash_cluster)
        if overlap_threshold is not None:
            pulumi.set(__self__, "overlap_threshold", overlap_threshold)

    @property
    @pulumi.getter
    def compact_log_min_period(self) -> Optional[int]:
        return pulumi.get(self, "compact_log_min_period")

    @property
    @pulumi.getter
    def flash_cluster(self) -> Optional['outputs.TidbClusterSpecTiflashConfigConfigFlashFlash_cluster']:
        return pulumi.get(self, "flash_cluster")

    @property
    @pulumi.getter
    def overlap_threshold(self) -> Optional[float]:
        return pulumi.get(self, "overlap_threshold")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashConfigConfigFlashFlash_cluster(dict):
    def __init__(__self__, *,
                 master_ttl: Optional[int] = None,
                 refresh_interval: Optional[int] = None,
                 update_rule_interval: Optional[int] = None):
        if master_ttl is not None:
            pulumi.set(__self__, "master_ttl", master_ttl)
        if refresh_interval is not None:
            pulumi.set(__self__, "refresh_interval", refresh_interval)
        if update_rule_interval is not None:
            pulumi.set(__self__, "update_rule_interval", update_rule_interval)

    @property
    @pulumi.getter
    def master_ttl(self) -> Optional[int]:
        return pulumi.get(self, "master_ttl")

    @property
    @pulumi.getter
    def refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "refresh_interval")

    @property
    @pulumi.getter
    def update_rule_interval(self) -> Optional[int]:
        return pulumi.get(self, "update_rule_interval")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashConfigConfigLogger(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 level: Optional[str] = None,
                 size: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTiflashEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTiflashEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTiflashEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTiflashEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTiflashEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTiflashEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTiflashEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashLogTailer(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecTiflashPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTiflashPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecTiflashPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTiflashPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashStorageClaims(dict):
    def __init__(__self__, *,
                 resources: Optional['outputs.TidbClusterSpecTiflashStorageClaimsResources'] = None,
                 storage_class_name: Optional[str] = None):
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecTiflashStorageClaimsResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashStorageClaimsResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTiflashTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikv(dict):
    def __init__(__self__, *,
                 replicas: int,
                 additional_containers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainers']] = None,
                 additional_volumes: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumes']] = None,
                 affinity: Optional['outputs.TidbClusterSpecTikvAffinity'] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 base_image: Optional[str] = None,
                 config: Optional['outputs.TidbClusterSpecTikvConfig'] = None,
                 config_update_strategy: Optional[str] = None,
                 data_sub_dir: Optional[str] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTikvEnv']] = None,
                 host_network: Optional[bool] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbClusterSpecTikvImagePullSecrets']] = None,
                 limits: Optional[Mapping[str, Any]] = None,
                 max_failover_count: Optional[int] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pod_security_context: Optional['outputs.TidbClusterSpecTikvPodSecurityContext'] = None,
                 priority_class_name: Optional[str] = None,
                 privileged: Optional[bool] = None,
                 requests: Optional[Mapping[str, Any]] = None,
                 scheduler_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.TidbClusterSpecTikvTolerations']] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "replicas", replicas)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if additional_volumes is not None:
            pulumi.set(__self__, "additional_volumes", additional_volumes)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_update_strategy is not None:
            pulumi.set(__self__, "config_update_strategy", config_update_strategy)
        if data_sub_dir is not None:
            pulumi.set(__self__, "data_sub_dir", data_sub_dir)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if max_failover_count is not None:
            pulumi.set(__self__, "max_failover_count", max_failover_count)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_security_context is not None:
            pulumi.set(__self__, "pod_security_context", pod_security_context)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="additionalVolumes")
    def additional_volumes(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumes']]:
        return pulumi.get(self, "additional_volumes")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.TidbClusterSpecTikvAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[str]:
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.TidbClusterSpecTikvConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configUpdateStrategy")
    def config_update_strategy(self) -> Optional[str]:
        return pulumi.get(self, "config_update_strategy")

    @property
    @pulumi.getter(name="dataSubDir")
    def data_sub_dir(self) -> Optional[str]:
        return pulumi.get(self, "data_sub_dir")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="maxFailoverCount")
    def max_failover_count(self) -> Optional[int]:
        return pulumi.get(self, "max_failover_count")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional['outputs.TidbClusterSpecTikvPodSecurityContext']:
        return pulumi.get(self, "pod_security_context")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbClusterSpecTikvAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCephfs'] = None,
                 cinder: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCinder'] = None,
                 config_map: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesConfigMap'] = None,
                 csi: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCsi'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesEmptyDir'] = None,
                 fc: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFc'] = None,
                 flex_volume: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesHostPath'] = None,
                 iscsi: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesIscsi'] = None,
                 nfs: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjected'] = None,
                 quobyte: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesQuobyte'] = None,
                 rbd: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesRbd'] = None,
                 scale_io: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesScaleIO'] = None,
                 secret: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesSecret'] = None,
                 storageos: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[Any] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[Any]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAdditionalVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAdditionalVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.TidbClusterSpecTikvAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.TidbClusterSpecTikvAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.TidbClusterSpecTikvAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfig(dict):
    def __init__(__self__, *,
                 coprocessor: Optional['outputs.TidbClusterSpecTikvConfigCoprocessor'] = None,
                 gc: Optional['outputs.TidbClusterSpecTikvConfigGc'] = None,
                 import_: Optional['outputs.TidbClusterSpecTikvConfigImport'] = None,
                 log_file: Optional[str] = None,
                 log_level: Optional[str] = None,
                 log_rotation_size: Optional[str] = None,
                 log_rotation_timespan: Optional[str] = None,
                 panic_when_unexpected_key_or_data: Optional[bool] = None,
                 pd: Optional['outputs.TidbClusterSpecTikvConfigPd'] = None,
                 pessimistic_txn: Optional['outputs.TidbClusterSpecTikvConfigPessimistic-Txn'] = None,
                 raftdb: Optional['outputs.TidbClusterSpecTikvConfigRaftdb'] = None,
                 raftstore: Optional['outputs.TidbClusterSpecTikvConfigRaftstore'] = None,
                 readpool: Optional['outputs.TidbClusterSpecTikvConfigReadpool'] = None,
                 refresh_config_interval: Optional[str] = None,
                 rocksdb: Optional['outputs.TidbClusterSpecTikvConfigRocksdb'] = None,
                 security: Optional['outputs.TidbClusterSpecTikvConfigSecurity'] = None,
                 server: Optional['outputs.TidbClusterSpecTikvConfigServer'] = None,
                 slow_log_file: Optional[str] = None,
                 slow_log_threshold: Optional[str] = None,
                 storage: Optional['outputs.TidbClusterSpecTikvConfigStorage'] = None):
        if coprocessor is not None:
            pulumi.set(__self__, "coprocessor", coprocessor)
        if gc is not None:
            pulumi.set(__self__, "gc", gc)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if log_file is not None:
            pulumi.set(__self__, "log_file", log_file)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if log_rotation_size is not None:
            pulumi.set(__self__, "log_rotation_size", log_rotation_size)
        if log_rotation_timespan is not None:
            pulumi.set(__self__, "log_rotation_timespan", log_rotation_timespan)
        if panic_when_unexpected_key_or_data is not None:
            pulumi.set(__self__, "panic_when_unexpected_key_or_data", panic_when_unexpected_key_or_data)
        if pd is not None:
            pulumi.set(__self__, "pd", pd)
        if pessimistic_txn is not None:
            pulumi.set(__self__, "pessimistic_txn", pessimistic_txn)
        if raftdb is not None:
            pulumi.set(__self__, "raftdb", raftdb)
        if raftstore is not None:
            pulumi.set(__self__, "raftstore", raftstore)
        if readpool is not None:
            pulumi.set(__self__, "readpool", readpool)
        if refresh_config_interval is not None:
            pulumi.set(__self__, "refresh_config_interval", refresh_config_interval)
        if rocksdb is not None:
            pulumi.set(__self__, "rocksdb", rocksdb)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if slow_log_file is not None:
            pulumi.set(__self__, "slow_log_file", slow_log_file)
        if slow_log_threshold is not None:
            pulumi.set(__self__, "slow_log_threshold", slow_log_threshold)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def coprocessor(self) -> Optional['outputs.TidbClusterSpecTikvConfigCoprocessor']:
        return pulumi.get(self, "coprocessor")

    @property
    @pulumi.getter
    def gc(self) -> Optional['outputs.TidbClusterSpecTikvConfigGc']:
        return pulumi.get(self, "gc")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional['outputs.TidbClusterSpecTikvConfigImport']:
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="log-file")
    def log_file(self) -> Optional[str]:
        return pulumi.get(self, "log_file")

    @property
    @pulumi.getter(name="log-level")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="log-rotation-size")
    def log_rotation_size(self) -> Optional[str]:
        return pulumi.get(self, "log_rotation_size")

    @property
    @pulumi.getter(name="log-rotation-timespan")
    def log_rotation_timespan(self) -> Optional[str]:
        return pulumi.get(self, "log_rotation_timespan")

    @property
    @pulumi.getter(name="panic-when-unexpected-key-or-data")
    def panic_when_unexpected_key_or_data(self) -> Optional[bool]:
        return pulumi.get(self, "panic_when_unexpected_key_or_data")

    @property
    @pulumi.getter
    def pd(self) -> Optional['outputs.TidbClusterSpecTikvConfigPd']:
        return pulumi.get(self, "pd")

    @property
    @pulumi.getter(name="pessimistic-txn")
    def pessimistic_txn(self) -> Optional['outputs.TidbClusterSpecTikvConfigPessimistic-Txn']:
        return pulumi.get(self, "pessimistic_txn")

    @property
    @pulumi.getter
    def raftdb(self) -> Optional['outputs.TidbClusterSpecTikvConfigRaftdb']:
        return pulumi.get(self, "raftdb")

    @property
    @pulumi.getter
    def raftstore(self) -> Optional['outputs.TidbClusterSpecTikvConfigRaftstore']:
        return pulumi.get(self, "raftstore")

    @property
    @pulumi.getter
    def readpool(self) -> Optional['outputs.TidbClusterSpecTikvConfigReadpool']:
        return pulumi.get(self, "readpool")

    @property
    @pulumi.getter(name="refresh-config-interval")
    def refresh_config_interval(self) -> Optional[str]:
        return pulumi.get(self, "refresh_config_interval")

    @property
    @pulumi.getter
    def rocksdb(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdb']:
        return pulumi.get(self, "rocksdb")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.TidbClusterSpecTikvConfigSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.TidbClusterSpecTikvConfigServer']:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slow-log-file")
    def slow_log_file(self) -> Optional[str]:
        return pulumi.get(self, "slow_log_file")

    @property
    @pulumi.getter(name="slow-log-threshold")
    def slow_log_threshold(self) -> Optional[str]:
        return pulumi.get(self, "slow_log_threshold")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.TidbClusterSpecTikvConfigStorage']:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigCoprocessor(dict):
    def __init__(__self__, *,
                 batch_split_limit: Optional[int] = None,
                 region_max_keys: Optional[int] = None,
                 region_max_size: Optional[str] = None,
                 region_split_keys: Optional[int] = None,
                 region_split_size: Optional[str] = None,
                 split_region_on_table: Optional[bool] = None):
        if batch_split_limit is not None:
            pulumi.set(__self__, "batch_split_limit", batch_split_limit)
        if region_max_keys is not None:
            pulumi.set(__self__, "region_max_keys", region_max_keys)
        if region_max_size is not None:
            pulumi.set(__self__, "region_max_size", region_max_size)
        if region_split_keys is not None:
            pulumi.set(__self__, "region_split_keys", region_split_keys)
        if region_split_size is not None:
            pulumi.set(__self__, "region_split_size", region_split_size)
        if split_region_on_table is not None:
            pulumi.set(__self__, "split_region_on_table", split_region_on_table)

    @property
    @pulumi.getter(name="batch-split-limit")
    def batch_split_limit(self) -> Optional[int]:
        return pulumi.get(self, "batch_split_limit")

    @property
    @pulumi.getter(name="region-max-keys")
    def region_max_keys(self) -> Optional[int]:
        return pulumi.get(self, "region_max_keys")

    @property
    @pulumi.getter(name="region-max-size")
    def region_max_size(self) -> Optional[str]:
        return pulumi.get(self, "region_max_size")

    @property
    @pulumi.getter(name="region-split-keys")
    def region_split_keys(self) -> Optional[int]:
        return pulumi.get(self, "region_split_keys")

    @property
    @pulumi.getter(name="region-split-size")
    def region_split_size(self) -> Optional[str]:
        return pulumi.get(self, "region_split_size")

    @property
    @pulumi.getter(name="split-region-on-table")
    def split_region_on_table(self) -> Optional[bool]:
        return pulumi.get(self, "split_region_on_table")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigGc(dict):
    def __init__(__self__, *,
                 _batch_keys: Optional[int] = None,
                 _max_write_bytes_per_sec: Optional[str] = None):
        if _batch_keys is not None:
            pulumi.set(__self__, "_batch_keys", _batch_keys)
        if _max_write_bytes_per_sec is not None:
            pulumi.set(__self__, "_max_write_bytes_per_sec", _max_write_bytes_per_sec)

    @property
    @pulumi.getter(name="\tbatch-keys")
    def _batch_keys(self) -> Optional[int]:
        return pulumi.get(self, "_batch_keys")

    @property
    @pulumi.getter(name="\tmax-write-bytes-per-sec")
    def _max_write_bytes_per_sec(self) -> Optional[str]:
        return pulumi.get(self, "_max_write_bytes_per_sec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigImport(dict):
    def __init__(__self__, *,
                 import_dir: Optional[str] = None,
                 max_open_engines: Optional[int] = None,
                 max_prepare_duration: Optional[str] = None,
                 num_import_jobs: Optional[int] = None,
                 num_import_sst_jobs: Optional[int] = None,
                 num_threads: Optional[int] = None,
                 region_split_size: Optional[str] = None,
                 stream_channel_window: Optional[int] = None,
                 upload_speed_limit: Optional[str] = None):
        if import_dir is not None:
            pulumi.set(__self__, "import_dir", import_dir)
        if max_open_engines is not None:
            pulumi.set(__self__, "max_open_engines", max_open_engines)
        if max_prepare_duration is not None:
            pulumi.set(__self__, "max_prepare_duration", max_prepare_duration)
        if num_import_jobs is not None:
            pulumi.set(__self__, "num_import_jobs", num_import_jobs)
        if num_import_sst_jobs is not None:
            pulumi.set(__self__, "num_import_sst_jobs", num_import_sst_jobs)
        if num_threads is not None:
            pulumi.set(__self__, "num_threads", num_threads)
        if region_split_size is not None:
            pulumi.set(__self__, "region_split_size", region_split_size)
        if stream_channel_window is not None:
            pulumi.set(__self__, "stream_channel_window", stream_channel_window)
        if upload_speed_limit is not None:
            pulumi.set(__self__, "upload_speed_limit", upload_speed_limit)

    @property
    @pulumi.getter(name="import-dir")
    def import_dir(self) -> Optional[str]:
        return pulumi.get(self, "import_dir")

    @property
    @pulumi.getter(name="max-open-engines")
    def max_open_engines(self) -> Optional[int]:
        return pulumi.get(self, "max_open_engines")

    @property
    @pulumi.getter(name="max-prepare-duration")
    def max_prepare_duration(self) -> Optional[str]:
        return pulumi.get(self, "max_prepare_duration")

    @property
    @pulumi.getter(name="num-import-jobs")
    def num_import_jobs(self) -> Optional[int]:
        return pulumi.get(self, "num_import_jobs")

    @property
    @pulumi.getter(name="num-import-sst-jobs")
    def num_import_sst_jobs(self) -> Optional[int]:
        return pulumi.get(self, "num_import_sst_jobs")

    @property
    @pulumi.getter(name="num-threads")
    def num_threads(self) -> Optional[int]:
        return pulumi.get(self, "num_threads")

    @property
    @pulumi.getter(name="region-split-size")
    def region_split_size(self) -> Optional[str]:
        return pulumi.get(self, "region_split_size")

    @property
    @pulumi.getter(name="stream-channel-window")
    def stream_channel_window(self) -> Optional[int]:
        return pulumi.get(self, "stream_channel_window")

    @property
    @pulumi.getter(name="upload-speed-limit")
    def upload_speed_limit(self) -> Optional[str]:
        return pulumi.get(self, "upload_speed_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigPd(dict):
    def __init__(__self__, *,
                 endpoints: Optional[Sequence[str]] = None,
                 retry_interval: Optional[str] = None,
                 retry_log_every: Optional[int] = None,
                 retry_max_count: Optional[int] = None):
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if retry_log_every is not None:
            pulumi.set(__self__, "retry_log_every", retry_log_every)
        if retry_max_count is not None:
            pulumi.set(__self__, "retry_max_count", retry_max_count)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="retry-interval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="retry-log-every")
    def retry_log_every(self) -> Optional[int]:
        return pulumi.get(self, "retry_log_every")

    @property
    @pulumi.getter(name="retry-max-count")
    def retry_max_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_max_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigPessimistic-Txn(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 pipelined: Optional[bool] = None,
                 wait_for_lock_timeout: Optional[str] = None,
                 wake_up_delay_duration: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if pipelined is not None:
            pulumi.set(__self__, "pipelined", pipelined)
        if wait_for_lock_timeout is not None:
            pulumi.set(__self__, "wait_for_lock_timeout", wait_for_lock_timeout)
        if wake_up_delay_duration is not None:
            pulumi.set(__self__, "wake_up_delay_duration", wake_up_delay_duration)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def pipelined(self) -> Optional[bool]:
        return pulumi.get(self, "pipelined")

    @property
    @pulumi.getter(name="wait-for-lock-timeout")
    def wait_for_lock_timeout(self) -> Optional[str]:
        return pulumi.get(self, "wait_for_lock_timeout")

    @property
    @pulumi.getter(name="wake-up-delay-duration")
    def wake_up_delay_duration(self) -> Optional[str]:
        return pulumi.get(self, "wake_up_delay_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRaftdb(dict):
    def __init__(__self__, *,
                 allow_concurrent_memtable_write: Optional[bool] = None,
                 bytes_per_sync: Optional[str] = None,
                 compaction_readahead_size: Optional[str] = None,
                 create_if_missing: Optional[bool] = None,
                 defaultcf: Optional['outputs.TidbClusterSpecTikvConfigRaftdbDefaultcf'] = None,
                 enable_pipelined_write: Optional[bool] = None,
                 enable_statistics: Optional[bool] = None,
                 info_log_dir: Optional[str] = None,
                 info_log_keep_log_file_num: Optional[int] = None,
                 info_log_max_size: Optional[str] = None,
                 info_log_roll_time: Optional[str] = None,
                 max_background_jobs: Optional[int] = None,
                 max_manifest_file_size: Optional[str] = None,
                 max_open_files: Optional[int] = None,
                 max_sub_compactions: Optional[int] = None,
                 max_total_wal_size: Optional[str] = None,
                 stats_dump_period: Optional[str] = None,
                 use_direct_io_for_flush_and_compaction: Optional[bool] = None,
                 wal_bytes_per_sync: Optional[str] = None,
                 wal_dir: Optional[str] = None,
                 wal_recovery_mode: Optional[str] = None,
                 wal_size_limit: Optional[str] = None,
                 wal_ttl_seconds: Optional[int] = None,
                 writable_file_max_buffer_size: Optional[str] = None):
        if allow_concurrent_memtable_write is not None:
            pulumi.set(__self__, "allow_concurrent_memtable_write", allow_concurrent_memtable_write)
        if bytes_per_sync is not None:
            pulumi.set(__self__, "bytes_per_sync", bytes_per_sync)
        if compaction_readahead_size is not None:
            pulumi.set(__self__, "compaction_readahead_size", compaction_readahead_size)
        if create_if_missing is not None:
            pulumi.set(__self__, "create_if_missing", create_if_missing)
        if defaultcf is not None:
            pulumi.set(__self__, "defaultcf", defaultcf)
        if enable_pipelined_write is not None:
            pulumi.set(__self__, "enable_pipelined_write", enable_pipelined_write)
        if enable_statistics is not None:
            pulumi.set(__self__, "enable_statistics", enable_statistics)
        if info_log_dir is not None:
            pulumi.set(__self__, "info_log_dir", info_log_dir)
        if info_log_keep_log_file_num is not None:
            pulumi.set(__self__, "info_log_keep_log_file_num", info_log_keep_log_file_num)
        if info_log_max_size is not None:
            pulumi.set(__self__, "info_log_max_size", info_log_max_size)
        if info_log_roll_time is not None:
            pulumi.set(__self__, "info_log_roll_time", info_log_roll_time)
        if max_background_jobs is not None:
            pulumi.set(__self__, "max_background_jobs", max_background_jobs)
        if max_manifest_file_size is not None:
            pulumi.set(__self__, "max_manifest_file_size", max_manifest_file_size)
        if max_open_files is not None:
            pulumi.set(__self__, "max_open_files", max_open_files)
        if max_sub_compactions is not None:
            pulumi.set(__self__, "max_sub_compactions", max_sub_compactions)
        if max_total_wal_size is not None:
            pulumi.set(__self__, "max_total_wal_size", max_total_wal_size)
        if stats_dump_period is not None:
            pulumi.set(__self__, "stats_dump_period", stats_dump_period)
        if use_direct_io_for_flush_and_compaction is not None:
            pulumi.set(__self__, "use_direct_io_for_flush_and_compaction", use_direct_io_for_flush_and_compaction)
        if wal_bytes_per_sync is not None:
            pulumi.set(__self__, "wal_bytes_per_sync", wal_bytes_per_sync)
        if wal_dir is not None:
            pulumi.set(__self__, "wal_dir", wal_dir)
        if wal_recovery_mode is not None:
            pulumi.set(__self__, "wal_recovery_mode", wal_recovery_mode)
        if wal_size_limit is not None:
            pulumi.set(__self__, "wal_size_limit", wal_size_limit)
        if wal_ttl_seconds is not None:
            pulumi.set(__self__, "wal_ttl_seconds", wal_ttl_seconds)
        if writable_file_max_buffer_size is not None:
            pulumi.set(__self__, "writable_file_max_buffer_size", writable_file_max_buffer_size)

    @property
    @pulumi.getter(name="allow-concurrent-memtable-write")
    def allow_concurrent_memtable_write(self) -> Optional[bool]:
        return pulumi.get(self, "allow_concurrent_memtable_write")

    @property
    @pulumi.getter(name="bytes-per-sync")
    def bytes_per_sync(self) -> Optional[str]:
        return pulumi.get(self, "bytes_per_sync")

    @property
    @pulumi.getter(name="compaction-readahead-size")
    def compaction_readahead_size(self) -> Optional[str]:
        return pulumi.get(self, "compaction_readahead_size")

    @property
    @pulumi.getter(name="create-if-missing")
    def create_if_missing(self) -> Optional[bool]:
        return pulumi.get(self, "create_if_missing")

    @property
    @pulumi.getter
    def defaultcf(self) -> Optional['outputs.TidbClusterSpecTikvConfigRaftdbDefaultcf']:
        return pulumi.get(self, "defaultcf")

    @property
    @pulumi.getter(name="enable-pipelined-write")
    def enable_pipelined_write(self) -> Optional[bool]:
        return pulumi.get(self, "enable_pipelined_write")

    @property
    @pulumi.getter(name="enable-statistics")
    def enable_statistics(self) -> Optional[bool]:
        return pulumi.get(self, "enable_statistics")

    @property
    @pulumi.getter(name="info-log-dir")
    def info_log_dir(self) -> Optional[str]:
        return pulumi.get(self, "info_log_dir")

    @property
    @pulumi.getter(name="info-log-keep-log-file-num")
    def info_log_keep_log_file_num(self) -> Optional[int]:
        return pulumi.get(self, "info_log_keep_log_file_num")

    @property
    @pulumi.getter(name="info-log-max-size")
    def info_log_max_size(self) -> Optional[str]:
        return pulumi.get(self, "info_log_max_size")

    @property
    @pulumi.getter(name="info-log-roll-time")
    def info_log_roll_time(self) -> Optional[str]:
        return pulumi.get(self, "info_log_roll_time")

    @property
    @pulumi.getter(name="max-background-jobs")
    def max_background_jobs(self) -> Optional[int]:
        return pulumi.get(self, "max_background_jobs")

    @property
    @pulumi.getter(name="max-manifest-file-size")
    def max_manifest_file_size(self) -> Optional[str]:
        return pulumi.get(self, "max_manifest_file_size")

    @property
    @pulumi.getter(name="max-open-files")
    def max_open_files(self) -> Optional[int]:
        return pulumi.get(self, "max_open_files")

    @property
    @pulumi.getter(name="max-sub-compactions")
    def max_sub_compactions(self) -> Optional[int]:
        return pulumi.get(self, "max_sub_compactions")

    @property
    @pulumi.getter(name="max-total-wal-size")
    def max_total_wal_size(self) -> Optional[str]:
        return pulumi.get(self, "max_total_wal_size")

    @property
    @pulumi.getter(name="stats-dump-period")
    def stats_dump_period(self) -> Optional[str]:
        return pulumi.get(self, "stats_dump_period")

    @property
    @pulumi.getter(name="use-direct-io-for-flush-and-compaction")
    def use_direct_io_for_flush_and_compaction(self) -> Optional[bool]:
        return pulumi.get(self, "use_direct_io_for_flush_and_compaction")

    @property
    @pulumi.getter(name="wal-bytes-per-sync")
    def wal_bytes_per_sync(self) -> Optional[str]:
        return pulumi.get(self, "wal_bytes_per_sync")

    @property
    @pulumi.getter(name="wal-dir")
    def wal_dir(self) -> Optional[str]:
        return pulumi.get(self, "wal_dir")

    @property
    @pulumi.getter(name="wal-recovery-mode")
    def wal_recovery_mode(self) -> Optional[str]:
        return pulumi.get(self, "wal_recovery_mode")

    @property
    @pulumi.getter(name="wal-size-limit")
    def wal_size_limit(self) -> Optional[str]:
        return pulumi.get(self, "wal_size_limit")

    @property
    @pulumi.getter(name="wal-ttl-seconds")
    def wal_ttl_seconds(self) -> Optional[int]:
        return pulumi.get(self, "wal_ttl_seconds")

    @property
    @pulumi.getter(name="writable-file-max-buffer-size")
    def writable_file_max_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "writable_file_max_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRaftdbDefaultcf(dict):
    def __init__(__self__, *,
                 block_based_bloom_filter: Optional[bool] = None,
                 block_cache_size: Optional[str] = None,
                 block_size: Optional[str] = None,
                 bloom_filter_bits_per_key: Optional[int] = None,
                 cache_index_and_filter_blocks: Optional[bool] = None,
                 compaction_pri: Optional[int] = None,
                 compaction_style: Optional[int] = None,
                 compression_per_level: Optional[Sequence[str]] = None,
                 disable_auto_compactions: Optional[bool] = None,
                 disable_block_cache: Optional[bool] = None,
                 dynamic_level_bytes: Optional[bool] = None,
                 enable_doubly_skiplist: Optional[bool] = None,
                 force_consistency_checks: Optional[bool] = None,
                 hard_pending_compaction_bytes_limit: Optional[str] = None,
                 level0_file_num_compaction_trigger: Optional[int] = None,
                 level0_slowdown_writes_trigger: Optional[int] = None,
                 level0_stop_writes_trigger: Optional[int] = None,
                 max_bytes_for_level_base: Optional[str] = None,
                 max_bytes_for_level_multiplier: Optional[int] = None,
                 max_compaction_bytes: Optional[str] = None,
                 max_write_buffer_number: Optional[int] = None,
                 min_write_buffer_number_to_merge: Optional[int] = None,
                 num_levels: Optional[int] = None,
                 optimize_filters_for_hits: Optional[bool] = None,
                 pin_l0_filter_and_index_blocks: Optional[bool] = None,
                 prop_keys_index_distance: Optional[int] = None,
                 prop_size_index_distance: Optional[int] = None,
                 read_amp_bytes_per_bit: Optional[int] = None,
                 soft_pending_compaction_bytes_limit: Optional[str] = None,
                 target_file_size_base: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRaftdbDefaultcfTitan'] = None,
                 use_bloom_filter: Optional[bool] = None,
                 whole_key_filtering: Optional[bool] = None,
                 write_buffer_size: Optional[str] = None):
        if block_based_bloom_filter is not None:
            pulumi.set(__self__, "block_based_bloom_filter", block_based_bloom_filter)
        if block_cache_size is not None:
            pulumi.set(__self__, "block_cache_size", block_cache_size)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if bloom_filter_bits_per_key is not None:
            pulumi.set(__self__, "bloom_filter_bits_per_key", bloom_filter_bits_per_key)
        if cache_index_and_filter_blocks is not None:
            pulumi.set(__self__, "cache_index_and_filter_blocks", cache_index_and_filter_blocks)
        if compaction_pri is not None:
            pulumi.set(__self__, "compaction_pri", compaction_pri)
        if compaction_style is not None:
            pulumi.set(__self__, "compaction_style", compaction_style)
        if compression_per_level is not None:
            pulumi.set(__self__, "compression_per_level", compression_per_level)
        if disable_auto_compactions is not None:
            pulumi.set(__self__, "disable_auto_compactions", disable_auto_compactions)
        if disable_block_cache is not None:
            pulumi.set(__self__, "disable_block_cache", disable_block_cache)
        if dynamic_level_bytes is not None:
            pulumi.set(__self__, "dynamic_level_bytes", dynamic_level_bytes)
        if enable_doubly_skiplist is not None:
            pulumi.set(__self__, "enable_doubly_skiplist", enable_doubly_skiplist)
        if force_consistency_checks is not None:
            pulumi.set(__self__, "force_consistency_checks", force_consistency_checks)
        if hard_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "hard_pending_compaction_bytes_limit", hard_pending_compaction_bytes_limit)
        if level0_file_num_compaction_trigger is not None:
            pulumi.set(__self__, "level0_file_num_compaction_trigger", level0_file_num_compaction_trigger)
        if level0_slowdown_writes_trigger is not None:
            pulumi.set(__self__, "level0_slowdown_writes_trigger", level0_slowdown_writes_trigger)
        if level0_stop_writes_trigger is not None:
            pulumi.set(__self__, "level0_stop_writes_trigger", level0_stop_writes_trigger)
        if max_bytes_for_level_base is not None:
            pulumi.set(__self__, "max_bytes_for_level_base", max_bytes_for_level_base)
        if max_bytes_for_level_multiplier is not None:
            pulumi.set(__self__, "max_bytes_for_level_multiplier", max_bytes_for_level_multiplier)
        if max_compaction_bytes is not None:
            pulumi.set(__self__, "max_compaction_bytes", max_compaction_bytes)
        if max_write_buffer_number is not None:
            pulumi.set(__self__, "max_write_buffer_number", max_write_buffer_number)
        if min_write_buffer_number_to_merge is not None:
            pulumi.set(__self__, "min_write_buffer_number_to_merge", min_write_buffer_number_to_merge)
        if num_levels is not None:
            pulumi.set(__self__, "num_levels", num_levels)
        if optimize_filters_for_hits is not None:
            pulumi.set(__self__, "optimize_filters_for_hits", optimize_filters_for_hits)
        if pin_l0_filter_and_index_blocks is not None:
            pulumi.set(__self__, "pin_l0_filter_and_index_blocks", pin_l0_filter_and_index_blocks)
        if prop_keys_index_distance is not None:
            pulumi.set(__self__, "prop_keys_index_distance", prop_keys_index_distance)
        if prop_size_index_distance is not None:
            pulumi.set(__self__, "prop_size_index_distance", prop_size_index_distance)
        if read_amp_bytes_per_bit is not None:
            pulumi.set(__self__, "read_amp_bytes_per_bit", read_amp_bytes_per_bit)
        if soft_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "soft_pending_compaction_bytes_limit", soft_pending_compaction_bytes_limit)
        if target_file_size_base is not None:
            pulumi.set(__self__, "target_file_size_base", target_file_size_base)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_bloom_filter is not None:
            pulumi.set(__self__, "use_bloom_filter", use_bloom_filter)
        if whole_key_filtering is not None:
            pulumi.set(__self__, "whole_key_filtering", whole_key_filtering)
        if write_buffer_size is not None:
            pulumi.set(__self__, "write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="block-based-bloom-filter")
    def block_based_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "block_based_bloom_filter")

    @property
    @pulumi.getter(name="block-cache-size")
    def block_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "block_cache_size")

    @property
    @pulumi.getter(name="block-size")
    def block_size(self) -> Optional[str]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter(name="bloom-filter-bits-per-key")
    def bloom_filter_bits_per_key(self) -> Optional[int]:
        return pulumi.get(self, "bloom_filter_bits_per_key")

    @property
    @pulumi.getter(name="cache-index-and-filter-blocks")
    def cache_index_and_filter_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "cache_index_and_filter_blocks")

    @property
    @pulumi.getter(name="compaction-pri")
    def compaction_pri(self) -> Optional[int]:
        return pulumi.get(self, "compaction_pri")

    @property
    @pulumi.getter(name="compaction-style")
    def compaction_style(self) -> Optional[int]:
        return pulumi.get(self, "compaction_style")

    @property
    @pulumi.getter(name="compression-per-level")
    def compression_per_level(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compression_per_level")

    @property
    @pulumi.getter(name="disable-auto-compactions")
    def disable_auto_compactions(self) -> Optional[bool]:
        return pulumi.get(self, "disable_auto_compactions")

    @property
    @pulumi.getter(name="disable-block-cache")
    def disable_block_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_block_cache")

    @property
    @pulumi.getter(name="dynamic-level-bytes")
    def dynamic_level_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_level_bytes")

    @property
    @pulumi.getter(name="enable-doubly-skiplist")
    def enable_doubly_skiplist(self) -> Optional[bool]:
        return pulumi.get(self, "enable_doubly_skiplist")

    @property
    @pulumi.getter(name="force-consistency-checks")
    def force_consistency_checks(self) -> Optional[bool]:
        return pulumi.get(self, "force_consistency_checks")

    @property
    @pulumi.getter(name="hard-pending-compaction-bytes-limit")
    def hard_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "hard_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="level0-file-num-compaction-trigger")
    def level0_file_num_compaction_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_file_num_compaction_trigger")

    @property
    @pulumi.getter(name="level0-slowdown-writes-trigger")
    def level0_slowdown_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_slowdown_writes_trigger")

    @property
    @pulumi.getter(name="level0-stop-writes-trigger")
    def level0_stop_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_stop_writes_trigger")

    @property
    @pulumi.getter(name="max-bytes-for-level-base")
    def max_bytes_for_level_base(self) -> Optional[str]:
        return pulumi.get(self, "max_bytes_for_level_base")

    @property
    @pulumi.getter(name="max-bytes-for-level-multiplier")
    def max_bytes_for_level_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "max_bytes_for_level_multiplier")

    @property
    @pulumi.getter(name="max-compaction-bytes")
    def max_compaction_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_compaction_bytes")

    @property
    @pulumi.getter(name="max-write-buffer-number")
    def max_write_buffer_number(self) -> Optional[int]:
        return pulumi.get(self, "max_write_buffer_number")

    @property
    @pulumi.getter(name="min-write-buffer-number-to-merge")
    def min_write_buffer_number_to_merge(self) -> Optional[int]:
        return pulumi.get(self, "min_write_buffer_number_to_merge")

    @property
    @pulumi.getter(name="num-levels")
    def num_levels(self) -> Optional[int]:
        return pulumi.get(self, "num_levels")

    @property
    @pulumi.getter(name="optimize-filters-for-hits")
    def optimize_filters_for_hits(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_filters_for_hits")

    @property
    @pulumi.getter(name="pin-l0-filter-and-index-blocks")
    def pin_l0_filter_and_index_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "pin_l0_filter_and_index_blocks")

    @property
    @pulumi.getter(name="prop-keys-index-distance")
    def prop_keys_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_keys_index_distance")

    @property
    @pulumi.getter(name="prop-size-index-distance")
    def prop_size_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_size_index_distance")

    @property
    @pulumi.getter(name="read-amp-bytes-per-bit")
    def read_amp_bytes_per_bit(self) -> Optional[int]:
        return pulumi.get(self, "read_amp_bytes_per_bit")

    @property
    @pulumi.getter(name="soft-pending-compaction-bytes-limit")
    def soft_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "soft_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="target-file-size-base")
    def target_file_size_base(self) -> Optional[str]:
        return pulumi.get(self, "target_file_size_base")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRaftdbDefaultcfTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-bloom-filter")
    def use_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "use_bloom_filter")

    @property
    @pulumi.getter(name="whole-key-filtering")
    def whole_key_filtering(self) -> Optional[bool]:
        return pulumi.get(self, "whole_key_filtering")

    @property
    @pulumi.getter(name="write-buffer-size")
    def write_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "write_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRaftdbDefaultcfTitan(dict):
    def __init__(__self__, *,
                 blob_cache_size: Optional[str] = None,
                 blob_file_compression: Optional[str] = None,
                 blob_run_mode: Optional[str] = None,
                 discardable_ratio: Optional[float] = None,
                 gc_merge_rewrite: Optional[bool] = None,
                 level_merge: Optional[bool] = None,
                 max_gc_batch_size: Optional[str] = None,
                 merge_small_file_threshold: Optional[str] = None,
                 min_blob_size: Optional[str] = None,
                 min_gc_batch_size: Optional[str] = None,
                 sample_ratio: Optional[float] = None):
        if blob_cache_size is not None:
            pulumi.set(__self__, "blob_cache_size", blob_cache_size)
        if blob_file_compression is not None:
            pulumi.set(__self__, "blob_file_compression", blob_file_compression)
        if blob_run_mode is not None:
            pulumi.set(__self__, "blob_run_mode", blob_run_mode)
        if discardable_ratio is not None:
            pulumi.set(__self__, "discardable_ratio", discardable_ratio)
        if gc_merge_rewrite is not None:
            pulumi.set(__self__, "gc_merge_rewrite", gc_merge_rewrite)
        if level_merge is not None:
            pulumi.set(__self__, "level_merge", level_merge)
        if max_gc_batch_size is not None:
            pulumi.set(__self__, "max_gc_batch_size", max_gc_batch_size)
        if merge_small_file_threshold is not None:
            pulumi.set(__self__, "merge_small_file_threshold", merge_small_file_threshold)
        if min_blob_size is not None:
            pulumi.set(__self__, "min_blob_size", min_blob_size)
        if min_gc_batch_size is not None:
            pulumi.set(__self__, "min_gc_batch_size", min_gc_batch_size)
        if sample_ratio is not None:
            pulumi.set(__self__, "sample_ratio", sample_ratio)

    @property
    @pulumi.getter(name="blob-cache-size")
    def blob_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "blob_cache_size")

    @property
    @pulumi.getter(name="blob-file-compression")
    def blob_file_compression(self) -> Optional[str]:
        return pulumi.get(self, "blob_file_compression")

    @property
    @pulumi.getter(name="blob-run-mode")
    def blob_run_mode(self) -> Optional[str]:
        return pulumi.get(self, "blob_run_mode")

    @property
    @pulumi.getter(name="discardable-ratio")
    def discardable_ratio(self) -> Optional[float]:
        return pulumi.get(self, "discardable_ratio")

    @property
    @pulumi.getter(name="gc-merge-rewrite")
    def gc_merge_rewrite(self) -> Optional[bool]:
        return pulumi.get(self, "gc_merge_rewrite")

    @property
    @pulumi.getter
    def level_merge(self) -> Optional[bool]:
        return pulumi.get(self, "level_merge")

    @property
    @pulumi.getter(name="max-gc-batch-size")
    def max_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "max_gc_batch_size")

    @property
    @pulumi.getter(name="merge-small-file-threshold")
    def merge_small_file_threshold(self) -> Optional[str]:
        return pulumi.get(self, "merge_small_file_threshold")

    @property
    @pulumi.getter(name="min-blob-size")
    def min_blob_size(self) -> Optional[str]:
        return pulumi.get(self, "min_blob_size")

    @property
    @pulumi.getter(name="min-gc-batch-size")
    def min_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "min_gc_batch_size")

    @property
    @pulumi.getter(name="sample-ratio")
    def sample_ratio(self) -> Optional[float]:
        return pulumi.get(self, "sample_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRaftstore(dict):
    def __init__(__self__, *,
                 abnormal_leader_missing_duration: Optional[str] = None,
                 allow_remove_leader: Optional[bool] = None,
                 apply_early: Optional[bool] = None,
                 apply_max_batch_size: Optional[int] = None,
                 apply_pool_size: Optional[int] = None,
                 apply_yield_duration: Optional[str] = None,
                 clean_stale_peer_delay: Optional[str] = None,
                 cleanup_import_sst_interval: Optional[str] = None,
                 consistency_check_interval: Optional[str] = None,
                 dev_assert: Optional[bool] = None,
                 hibernate_regions: Optional[bool] = None,
                 leader_transfer_max_log_lag: Optional[int] = None,
                 lock_cf_compact_bytes_threshold: Optional[str] = None,
                 lock_cf_compact_interval: Optional[str] = None,
                 max_leader_missing_duration: Optional[str] = None,
                 max_peer_down_duration: Optional[str] = None,
                 merge_check_tick_interval: Optional[str] = None,
                 merge_max_log_gap: Optional[int] = None,
                 messages_per_tick: Optional[int] = None,
                 notify_capacity: Optional[int] = None,
                 pd_heartbeat_tick_interval: Optional[str] = None,
                 pd_store_heartbeat_tick_interval: Optional[str] = None,
                 peer_stale_state_check_interval: Optional[str] = None,
                 perf_level: Optional[int] = None,
                 prevote: Optional[bool] = None,
                 raft_base_tick_interval: Optional[str] = None,
                 raft_election_timeout_ticks: Optional[int] = None,
                 raft_entry_cache_life_time: Optional[str] = None,
                 raft_entry_max_size: Optional[str] = None,
                 raft_heartbeat_ticks: Optional[int] = None,
                 raft_log_gc_count_limit: Optional[int] = None,
                 raft_log_gc_size_limit: Optional[str] = None,
                 raft_log_gc_threshold: Optional[int] = None,
                 raft_log_gc_tick_interval: Optional[str] = None,
                 raft_max_inflight_msgs: Optional[int] = None,
                 raft_max_size_per_msg: Optional[str] = None,
                 raft_reject_transfer_leader_duration: Optional[str] = None,
                 raft_store_max_leader_lease: Optional[str] = None,
                 region_compact_check_interval: Optional[str] = None,
                 region_compact_check_step: Optional[int] = None,
                 region_compact_min_tombstones: Optional[int] = None,
                 region_compact_tombstones_percent: Optional[int] = None,
                 region_split_check_diff: Optional[str] = None,
                 report_region_flow_interval: Optional[str] = None,
                 right_derive_when_split: Optional[bool] = None,
                 snap_apply_batch_size: Optional[str] = None,
                 snap_gc_timeout: Optional[str] = None,
                 snap_mgr_gc_tick_interval: Optional[str] = None,
                 split_region_check_tick_interval: Optional[str] = None,
                 store_max_batch_size: Optional[int] = None,
                 store_pool_size: Optional[int] = None,
                 store_reschedule_duration: Optional[str] = None,
                 sync_log: Optional[bool] = None,
                 use_delete_range: Optional[bool] = None):
        if abnormal_leader_missing_duration is not None:
            pulumi.set(__self__, "abnormal_leader_missing_duration", abnormal_leader_missing_duration)
        if allow_remove_leader is not None:
            pulumi.set(__self__, "allow_remove_leader", allow_remove_leader)
        if apply_early is not None:
            pulumi.set(__self__, "apply_early", apply_early)
        if apply_max_batch_size is not None:
            pulumi.set(__self__, "apply_max_batch_size", apply_max_batch_size)
        if apply_pool_size is not None:
            pulumi.set(__self__, "apply_pool_size", apply_pool_size)
        if apply_yield_duration is not None:
            pulumi.set(__self__, "apply_yield_duration", apply_yield_duration)
        if clean_stale_peer_delay is not None:
            pulumi.set(__self__, "clean_stale_peer_delay", clean_stale_peer_delay)
        if cleanup_import_sst_interval is not None:
            pulumi.set(__self__, "cleanup_import_sst_interval", cleanup_import_sst_interval)
        if consistency_check_interval is not None:
            pulumi.set(__self__, "consistency_check_interval", consistency_check_interval)
        if dev_assert is not None:
            pulumi.set(__self__, "dev_assert", dev_assert)
        if hibernate_regions is not None:
            pulumi.set(__self__, "hibernate_regions", hibernate_regions)
        if leader_transfer_max_log_lag is not None:
            pulumi.set(__self__, "leader_transfer_max_log_lag", leader_transfer_max_log_lag)
        if lock_cf_compact_bytes_threshold is not None:
            pulumi.set(__self__, "lock_cf_compact_bytes_threshold", lock_cf_compact_bytes_threshold)
        if lock_cf_compact_interval is not None:
            pulumi.set(__self__, "lock_cf_compact_interval", lock_cf_compact_interval)
        if max_leader_missing_duration is not None:
            pulumi.set(__self__, "max_leader_missing_duration", max_leader_missing_duration)
        if max_peer_down_duration is not None:
            pulumi.set(__self__, "max_peer_down_duration", max_peer_down_duration)
        if merge_check_tick_interval is not None:
            pulumi.set(__self__, "merge_check_tick_interval", merge_check_tick_interval)
        if merge_max_log_gap is not None:
            pulumi.set(__self__, "merge_max_log_gap", merge_max_log_gap)
        if messages_per_tick is not None:
            pulumi.set(__self__, "messages_per_tick", messages_per_tick)
        if notify_capacity is not None:
            pulumi.set(__self__, "notify_capacity", notify_capacity)
        if pd_heartbeat_tick_interval is not None:
            pulumi.set(__self__, "pd_heartbeat_tick_interval", pd_heartbeat_tick_interval)
        if pd_store_heartbeat_tick_interval is not None:
            pulumi.set(__self__, "pd_store_heartbeat_tick_interval", pd_store_heartbeat_tick_interval)
        if peer_stale_state_check_interval is not None:
            pulumi.set(__self__, "peer_stale_state_check_interval", peer_stale_state_check_interval)
        if perf_level is not None:
            pulumi.set(__self__, "perf_level", perf_level)
        if prevote is not None:
            pulumi.set(__self__, "prevote", prevote)
        if raft_base_tick_interval is not None:
            pulumi.set(__self__, "raft_base_tick_interval", raft_base_tick_interval)
        if raft_election_timeout_ticks is not None:
            pulumi.set(__self__, "raft_election_timeout_ticks", raft_election_timeout_ticks)
        if raft_entry_cache_life_time is not None:
            pulumi.set(__self__, "raft_entry_cache_life_time", raft_entry_cache_life_time)
        if raft_entry_max_size is not None:
            pulumi.set(__self__, "raft_entry_max_size", raft_entry_max_size)
        if raft_heartbeat_ticks is not None:
            pulumi.set(__self__, "raft_heartbeat_ticks", raft_heartbeat_ticks)
        if raft_log_gc_count_limit is not None:
            pulumi.set(__self__, "raft_log_gc_count_limit", raft_log_gc_count_limit)
        if raft_log_gc_size_limit is not None:
            pulumi.set(__self__, "raft_log_gc_size_limit", raft_log_gc_size_limit)
        if raft_log_gc_threshold is not None:
            pulumi.set(__self__, "raft_log_gc_threshold", raft_log_gc_threshold)
        if raft_log_gc_tick_interval is not None:
            pulumi.set(__self__, "raft_log_gc_tick_interval", raft_log_gc_tick_interval)
        if raft_max_inflight_msgs is not None:
            pulumi.set(__self__, "raft_max_inflight_msgs", raft_max_inflight_msgs)
        if raft_max_size_per_msg is not None:
            pulumi.set(__self__, "raft_max_size_per_msg", raft_max_size_per_msg)
        if raft_reject_transfer_leader_duration is not None:
            pulumi.set(__self__, "raft_reject_transfer_leader_duration", raft_reject_transfer_leader_duration)
        if raft_store_max_leader_lease is not None:
            pulumi.set(__self__, "raft_store_max_leader_lease", raft_store_max_leader_lease)
        if region_compact_check_interval is not None:
            pulumi.set(__self__, "region_compact_check_interval", region_compact_check_interval)
        if region_compact_check_step is not None:
            pulumi.set(__self__, "region_compact_check_step", region_compact_check_step)
        if region_compact_min_tombstones is not None:
            pulumi.set(__self__, "region_compact_min_tombstones", region_compact_min_tombstones)
        if region_compact_tombstones_percent is not None:
            pulumi.set(__self__, "region_compact_tombstones_percent", region_compact_tombstones_percent)
        if region_split_check_diff is not None:
            pulumi.set(__self__, "region_split_check_diff", region_split_check_diff)
        if report_region_flow_interval is not None:
            pulumi.set(__self__, "report_region_flow_interval", report_region_flow_interval)
        if right_derive_when_split is not None:
            pulumi.set(__self__, "right_derive_when_split", right_derive_when_split)
        if snap_apply_batch_size is not None:
            pulumi.set(__self__, "snap_apply_batch_size", snap_apply_batch_size)
        if snap_gc_timeout is not None:
            pulumi.set(__self__, "snap_gc_timeout", snap_gc_timeout)
        if snap_mgr_gc_tick_interval is not None:
            pulumi.set(__self__, "snap_mgr_gc_tick_interval", snap_mgr_gc_tick_interval)
        if split_region_check_tick_interval is not None:
            pulumi.set(__self__, "split_region_check_tick_interval", split_region_check_tick_interval)
        if store_max_batch_size is not None:
            pulumi.set(__self__, "store_max_batch_size", store_max_batch_size)
        if store_pool_size is not None:
            pulumi.set(__self__, "store_pool_size", store_pool_size)
        if store_reschedule_duration is not None:
            pulumi.set(__self__, "store_reschedule_duration", store_reschedule_duration)
        if sync_log is not None:
            pulumi.set(__self__, "sync_log", sync_log)
        if use_delete_range is not None:
            pulumi.set(__self__, "use_delete_range", use_delete_range)

    @property
    @pulumi.getter(name="abnormal-leader-missing-duration")
    def abnormal_leader_missing_duration(self) -> Optional[str]:
        return pulumi.get(self, "abnormal_leader_missing_duration")

    @property
    @pulumi.getter(name="allow-remove-leader")
    def allow_remove_leader(self) -> Optional[bool]:
        return pulumi.get(self, "allow_remove_leader")

    @property
    @pulumi.getter(name="apply-early")
    def apply_early(self) -> Optional[bool]:
        return pulumi.get(self, "apply_early")

    @property
    @pulumi.getter(name="apply-max-batch-size")
    def apply_max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "apply_max_batch_size")

    @property
    @pulumi.getter(name="apply-pool-size")
    def apply_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "apply_pool_size")

    @property
    @pulumi.getter(name="apply-yield-duration")
    def apply_yield_duration(self) -> Optional[str]:
        return pulumi.get(self, "apply_yield_duration")

    @property
    @pulumi.getter(name="clean-stale-peer-delay")
    def clean_stale_peer_delay(self) -> Optional[str]:
        return pulumi.get(self, "clean_stale_peer_delay")

    @property
    @pulumi.getter(name="cleanup-import-sst-interval")
    def cleanup_import_sst_interval(self) -> Optional[str]:
        return pulumi.get(self, "cleanup_import_sst_interval")

    @property
    @pulumi.getter(name="consistency-check-interval")
    def consistency_check_interval(self) -> Optional[str]:
        return pulumi.get(self, "consistency_check_interval")

    @property
    @pulumi.getter(name="dev-assert")
    def dev_assert(self) -> Optional[bool]:
        return pulumi.get(self, "dev_assert")

    @property
    @pulumi.getter(name="hibernate-regions")
    def hibernate_regions(self) -> Optional[bool]:
        return pulumi.get(self, "hibernate_regions")

    @property
    @pulumi.getter(name="leader-transfer-max-log-lag")
    def leader_transfer_max_log_lag(self) -> Optional[int]:
        return pulumi.get(self, "leader_transfer_max_log_lag")

    @property
    @pulumi.getter(name="lock-cf-compact-bytes-threshold")
    def lock_cf_compact_bytes_threshold(self) -> Optional[str]:
        return pulumi.get(self, "lock_cf_compact_bytes_threshold")

    @property
    @pulumi.getter(name="lock-cf-compact-interval")
    def lock_cf_compact_interval(self) -> Optional[str]:
        return pulumi.get(self, "lock_cf_compact_interval")

    @property
    @pulumi.getter(name="max-leader-missing-duration")
    def max_leader_missing_duration(self) -> Optional[str]:
        return pulumi.get(self, "max_leader_missing_duration")

    @property
    @pulumi.getter(name="max-peer-down-duration")
    def max_peer_down_duration(self) -> Optional[str]:
        return pulumi.get(self, "max_peer_down_duration")

    @property
    @pulumi.getter(name="merge-check-tick-interval")
    def merge_check_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "merge_check_tick_interval")

    @property
    @pulumi.getter(name="merge-max-log-gap")
    def merge_max_log_gap(self) -> Optional[int]:
        return pulumi.get(self, "merge_max_log_gap")

    @property
    @pulumi.getter(name="messages-per-tick")
    def messages_per_tick(self) -> Optional[int]:
        return pulumi.get(self, "messages_per_tick")

    @property
    @pulumi.getter(name="notify-capacity")
    def notify_capacity(self) -> Optional[int]:
        return pulumi.get(self, "notify_capacity")

    @property
    @pulumi.getter(name="pd-heartbeat-tick-interval")
    def pd_heartbeat_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "pd_heartbeat_tick_interval")

    @property
    @pulumi.getter(name="pd-store-heartbeat-tick-interval")
    def pd_store_heartbeat_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "pd_store_heartbeat_tick_interval")

    @property
    @pulumi.getter(name="peer-stale-state-check-interval")
    def peer_stale_state_check_interval(self) -> Optional[str]:
        return pulumi.get(self, "peer_stale_state_check_interval")

    @property
    @pulumi.getter(name="perf-level")
    def perf_level(self) -> Optional[int]:
        return pulumi.get(self, "perf_level")

    @property
    @pulumi.getter
    def prevote(self) -> Optional[bool]:
        return pulumi.get(self, "prevote")

    @property
    @pulumi.getter(name="raft-base-tick-interval")
    def raft_base_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "raft_base_tick_interval")

    @property
    @pulumi.getter(name="raft-election-timeout-ticks")
    def raft_election_timeout_ticks(self) -> Optional[int]:
        return pulumi.get(self, "raft_election_timeout_ticks")

    @property
    @pulumi.getter(name="raft-entry-cache-life-time")
    def raft_entry_cache_life_time(self) -> Optional[str]:
        return pulumi.get(self, "raft_entry_cache_life_time")

    @property
    @pulumi.getter(name="raft-entry-max-size")
    def raft_entry_max_size(self) -> Optional[str]:
        return pulumi.get(self, "raft_entry_max_size")

    @property
    @pulumi.getter(name="raft-heartbeat-ticks")
    def raft_heartbeat_ticks(self) -> Optional[int]:
        return pulumi.get(self, "raft_heartbeat_ticks")

    @property
    @pulumi.getter(name="raft-log-gc-count-limit")
    def raft_log_gc_count_limit(self) -> Optional[int]:
        return pulumi.get(self, "raft_log_gc_count_limit")

    @property
    @pulumi.getter(name="raft-log-gc-size-limit")
    def raft_log_gc_size_limit(self) -> Optional[str]:
        return pulumi.get(self, "raft_log_gc_size_limit")

    @property
    @pulumi.getter(name="raft-log-gc-threshold")
    def raft_log_gc_threshold(self) -> Optional[int]:
        return pulumi.get(self, "raft_log_gc_threshold")

    @property
    @pulumi.getter(name="raft-log-gc-tick-interval")
    def raft_log_gc_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "raft_log_gc_tick_interval")

    @property
    @pulumi.getter(name="raft-max-inflight-msgs")
    def raft_max_inflight_msgs(self) -> Optional[int]:
        return pulumi.get(self, "raft_max_inflight_msgs")

    @property
    @pulumi.getter(name="raft-max-size-per-msg")
    def raft_max_size_per_msg(self) -> Optional[str]:
        return pulumi.get(self, "raft_max_size_per_msg")

    @property
    @pulumi.getter(name="raft-reject-transfer-leader-duration")
    def raft_reject_transfer_leader_duration(self) -> Optional[str]:
        return pulumi.get(self, "raft_reject_transfer_leader_duration")

    @property
    @pulumi.getter(name="raft-store-max-leader-lease")
    def raft_store_max_leader_lease(self) -> Optional[str]:
        return pulumi.get(self, "raft_store_max_leader_lease")

    @property
    @pulumi.getter(name="region-compact-check-interval")
    def region_compact_check_interval(self) -> Optional[str]:
        return pulumi.get(self, "region_compact_check_interval")

    @property
    @pulumi.getter(name="region-compact-check-step")
    def region_compact_check_step(self) -> Optional[int]:
        return pulumi.get(self, "region_compact_check_step")

    @property
    @pulumi.getter(name="region-compact-min-tombstones")
    def region_compact_min_tombstones(self) -> Optional[int]:
        return pulumi.get(self, "region_compact_min_tombstones")

    @property
    @pulumi.getter(name="region-compact-tombstones-percent")
    def region_compact_tombstones_percent(self) -> Optional[int]:
        return pulumi.get(self, "region_compact_tombstones_percent")

    @property
    @pulumi.getter(name="region-split-check-diff")
    def region_split_check_diff(self) -> Optional[str]:
        return pulumi.get(self, "region_split_check_diff")

    @property
    @pulumi.getter(name="report-region-flow-interval")
    def report_region_flow_interval(self) -> Optional[str]:
        return pulumi.get(self, "report_region_flow_interval")

    @property
    @pulumi.getter(name="right-derive-when-split")
    def right_derive_when_split(self) -> Optional[bool]:
        return pulumi.get(self, "right_derive_when_split")

    @property
    @pulumi.getter(name="snap-apply-batch-size")
    def snap_apply_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "snap_apply_batch_size")

    @property
    @pulumi.getter(name="snap-gc-timeout")
    def snap_gc_timeout(self) -> Optional[str]:
        return pulumi.get(self, "snap_gc_timeout")

    @property
    @pulumi.getter(name="snap-mgr-gc-tick-interval")
    def snap_mgr_gc_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "snap_mgr_gc_tick_interval")

    @property
    @pulumi.getter(name="split-region-check-tick-interval")
    def split_region_check_tick_interval(self) -> Optional[str]:
        return pulumi.get(self, "split_region_check_tick_interval")

    @property
    @pulumi.getter(name="store-max-batch-size")
    def store_max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "store_max_batch_size")

    @property
    @pulumi.getter(name="store-pool-size")
    def store_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "store_pool_size")

    @property
    @pulumi.getter(name="store-reschedule-duration")
    def store_reschedule_duration(self) -> Optional[str]:
        return pulumi.get(self, "store_reschedule_duration")

    @property
    @pulumi.getter(name="sync-log")
    def sync_log(self) -> Optional[bool]:
        return pulumi.get(self, "sync_log")

    @property
    @pulumi.getter(name="use-delete-range")
    def use_delete_range(self) -> Optional[bool]:
        return pulumi.get(self, "use_delete_range")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigReadpool(dict):
    def __init__(__self__, *,
                 coprocessor: Optional['outputs.TidbClusterSpecTikvConfigReadpoolCoprocessor'] = None,
                 storage: Optional['outputs.TidbClusterSpecTikvConfigReadpoolStorage'] = None,
                 unified: Optional['outputs.TidbClusterSpecTikvConfigReadpoolUnified'] = None):
        if coprocessor is not None:
            pulumi.set(__self__, "coprocessor", coprocessor)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if unified is not None:
            pulumi.set(__self__, "unified", unified)

    @property
    @pulumi.getter
    def coprocessor(self) -> Optional['outputs.TidbClusterSpecTikvConfigReadpoolCoprocessor']:
        return pulumi.get(self, "coprocessor")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.TidbClusterSpecTikvConfigReadpoolStorage']:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def unified(self) -> Optional['outputs.TidbClusterSpecTikvConfigReadpoolUnified']:
        return pulumi.get(self, "unified")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigReadpoolCoprocessor(dict):
    def __init__(__self__, *,
                 high_concurrency: Optional[int] = None,
                 low_concurrency: Optional[int] = None,
                 max_tasks_per_worker_high: Optional[int] = None,
                 max_tasks_per_worker_low: Optional[int] = None,
                 max_tasks_per_worker_normal: Optional[int] = None,
                 normal_concurrency: Optional[int] = None,
                 stack_size: Optional[str] = None,
                 use_unified_pool: Optional[bool] = None):
        if high_concurrency is not None:
            pulumi.set(__self__, "high_concurrency", high_concurrency)
        if low_concurrency is not None:
            pulumi.set(__self__, "low_concurrency", low_concurrency)
        if max_tasks_per_worker_high is not None:
            pulumi.set(__self__, "max_tasks_per_worker_high", max_tasks_per_worker_high)
        if max_tasks_per_worker_low is not None:
            pulumi.set(__self__, "max_tasks_per_worker_low", max_tasks_per_worker_low)
        if max_tasks_per_worker_normal is not None:
            pulumi.set(__self__, "max_tasks_per_worker_normal", max_tasks_per_worker_normal)
        if normal_concurrency is not None:
            pulumi.set(__self__, "normal_concurrency", normal_concurrency)
        if stack_size is not None:
            pulumi.set(__self__, "stack_size", stack_size)
        if use_unified_pool is not None:
            pulumi.set(__self__, "use_unified_pool", use_unified_pool)

    @property
    @pulumi.getter(name="high-concurrency")
    def high_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "high_concurrency")

    @property
    @pulumi.getter(name="low-concurrency")
    def low_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "low_concurrency")

    @property
    @pulumi.getter(name="max-tasks-per-worker-high")
    def max_tasks_per_worker_high(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_high")

    @property
    @pulumi.getter(name="max-tasks-per-worker-low")
    def max_tasks_per_worker_low(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_low")

    @property
    @pulumi.getter(name="max-tasks-per-worker-normal")
    def max_tasks_per_worker_normal(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_normal")

    @property
    @pulumi.getter(name="normal-concurrency")
    def normal_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "normal_concurrency")

    @property
    @pulumi.getter(name="stack-size")
    def stack_size(self) -> Optional[str]:
        return pulumi.get(self, "stack_size")

    @property
    @pulumi.getter(name="use-unified-pool")
    def use_unified_pool(self) -> Optional[bool]:
        return pulumi.get(self, "use_unified_pool")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigReadpoolStorage(dict):
    def __init__(__self__, *,
                 high_concurrency: Optional[int] = None,
                 low_concurrency: Optional[int] = None,
                 max_tasks_per_worker_high: Optional[int] = None,
                 max_tasks_per_worker_low: Optional[int] = None,
                 max_tasks_per_worker_normal: Optional[int] = None,
                 normal_concurrency: Optional[int] = None,
                 stack_size: Optional[str] = None,
                 use_unified_pool: Optional[bool] = None):
        if high_concurrency is not None:
            pulumi.set(__self__, "high_concurrency", high_concurrency)
        if low_concurrency is not None:
            pulumi.set(__self__, "low_concurrency", low_concurrency)
        if max_tasks_per_worker_high is not None:
            pulumi.set(__self__, "max_tasks_per_worker_high", max_tasks_per_worker_high)
        if max_tasks_per_worker_low is not None:
            pulumi.set(__self__, "max_tasks_per_worker_low", max_tasks_per_worker_low)
        if max_tasks_per_worker_normal is not None:
            pulumi.set(__self__, "max_tasks_per_worker_normal", max_tasks_per_worker_normal)
        if normal_concurrency is not None:
            pulumi.set(__self__, "normal_concurrency", normal_concurrency)
        if stack_size is not None:
            pulumi.set(__self__, "stack_size", stack_size)
        if use_unified_pool is not None:
            pulumi.set(__self__, "use_unified_pool", use_unified_pool)

    @property
    @pulumi.getter(name="high-concurrency")
    def high_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "high_concurrency")

    @property
    @pulumi.getter(name="low-concurrency")
    def low_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "low_concurrency")

    @property
    @pulumi.getter(name="max-tasks-per-worker-high")
    def max_tasks_per_worker_high(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_high")

    @property
    @pulumi.getter(name="max-tasks-per-worker-low")
    def max_tasks_per_worker_low(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_low")

    @property
    @pulumi.getter(name="max-tasks-per-worker-normal")
    def max_tasks_per_worker_normal(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker_normal")

    @property
    @pulumi.getter(name="normal-concurrency")
    def normal_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "normal_concurrency")

    @property
    @pulumi.getter(name="stack-size")
    def stack_size(self) -> Optional[str]:
        return pulumi.get(self, "stack_size")

    @property
    @pulumi.getter(name="use-unified-pool")
    def use_unified_pool(self) -> Optional[bool]:
        return pulumi.get(self, "use_unified_pool")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigReadpoolUnified(dict):
    def __init__(__self__, *,
                 max_tasks_per_worker: Optional[int] = None,
                 max_thread_count: Optional[int] = None,
                 min_thread_count: Optional[int] = None,
                 stack_size: Optional[str] = None):
        if max_tasks_per_worker is not None:
            pulumi.set(__self__, "max_tasks_per_worker", max_tasks_per_worker)
        if max_thread_count is not None:
            pulumi.set(__self__, "max_thread_count", max_thread_count)
        if min_thread_count is not None:
            pulumi.set(__self__, "min_thread_count", min_thread_count)
        if stack_size is not None:
            pulumi.set(__self__, "stack_size", stack_size)

    @property
    @pulumi.getter(name="max-tasks-per-worker")
    def max_tasks_per_worker(self) -> Optional[int]:
        return pulumi.get(self, "max_tasks_per_worker")

    @property
    @pulumi.getter(name="max-thread-count")
    def max_thread_count(self) -> Optional[int]:
        return pulumi.get(self, "max_thread_count")

    @property
    @pulumi.getter(name="min-thread-count")
    def min_thread_count(self) -> Optional[int]:
        return pulumi.get(self, "min_thread_count")

    @property
    @pulumi.getter(name="stack-size")
    def stack_size(self) -> Optional[str]:
        return pulumi.get(self, "stack_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdb(dict):
    def __init__(__self__, *,
                 auto_tuned: Optional[bool] = None,
                 bytes_per_sync: Optional[str] = None,
                 compaction_readahead_size: Optional[str] = None,
                 create_if_missing: Optional[bool] = None,
                 defaultcf: Optional['outputs.TidbClusterSpecTikvConfigRocksdbDefaultcf'] = None,
                 enable_pipelined_write: Optional[bool] = None,
                 enable_statistics: Optional[bool] = None,
                 info_log_dir: Optional[str] = None,
                 info_log_keep_log_file_num: Optional[int] = None,
                 info_log_max_size: Optional[str] = None,
                 info_log_roll_time: Optional[str] = None,
                 lockcf: Optional['outputs.TidbClusterSpecTikvConfigRocksdbLockcf'] = None,
                 max_background_jobs: Optional[int] = None,
                 max_manifest_file_size: Optional[str] = None,
                 max_open_files: Optional[int] = None,
                 max_sub_compactions: Optional[int] = None,
                 max_total_wal_size: Optional[str] = None,
                 raftcf: Optional['outputs.TidbClusterSpecTikvConfigRocksdbRaftcf'] = None,
                 rate_bytes_per_sec: Optional[str] = None,
                 rate_limiter_mode: Optional[int] = None,
                 stats_dump_period: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRocksdbTitan'] = None,
                 use_direct_io_for_flush_and_compaction: Optional[bool] = None,
                 wal_bytes_per_sync: Optional[str] = None,
                 wal_recovery_mode: Optional[int] = None,
                 wal_size_limit: Optional[str] = None,
                 wal_ttl_seconds: Optional[int] = None,
                 writable_file_max_buffer_size: Optional[str] = None,
                 writecf: Optional['outputs.TidbClusterSpecTikvConfigRocksdbWritecf'] = None):
        if auto_tuned is not None:
            pulumi.set(__self__, "auto_tuned", auto_tuned)
        if bytes_per_sync is not None:
            pulumi.set(__self__, "bytes_per_sync", bytes_per_sync)
        if compaction_readahead_size is not None:
            pulumi.set(__self__, "compaction_readahead_size", compaction_readahead_size)
        if create_if_missing is not None:
            pulumi.set(__self__, "create_if_missing", create_if_missing)
        if defaultcf is not None:
            pulumi.set(__self__, "defaultcf", defaultcf)
        if enable_pipelined_write is not None:
            pulumi.set(__self__, "enable_pipelined_write", enable_pipelined_write)
        if enable_statistics is not None:
            pulumi.set(__self__, "enable_statistics", enable_statistics)
        if info_log_dir is not None:
            pulumi.set(__self__, "info_log_dir", info_log_dir)
        if info_log_keep_log_file_num is not None:
            pulumi.set(__self__, "info_log_keep_log_file_num", info_log_keep_log_file_num)
        if info_log_max_size is not None:
            pulumi.set(__self__, "info_log_max_size", info_log_max_size)
        if info_log_roll_time is not None:
            pulumi.set(__self__, "info_log_roll_time", info_log_roll_time)
        if lockcf is not None:
            pulumi.set(__self__, "lockcf", lockcf)
        if max_background_jobs is not None:
            pulumi.set(__self__, "max_background_jobs", max_background_jobs)
        if max_manifest_file_size is not None:
            pulumi.set(__self__, "max_manifest_file_size", max_manifest_file_size)
        if max_open_files is not None:
            pulumi.set(__self__, "max_open_files", max_open_files)
        if max_sub_compactions is not None:
            pulumi.set(__self__, "max_sub_compactions", max_sub_compactions)
        if max_total_wal_size is not None:
            pulumi.set(__self__, "max_total_wal_size", max_total_wal_size)
        if raftcf is not None:
            pulumi.set(__self__, "raftcf", raftcf)
        if rate_bytes_per_sec is not None:
            pulumi.set(__self__, "rate_bytes_per_sec", rate_bytes_per_sec)
        if rate_limiter_mode is not None:
            pulumi.set(__self__, "rate_limiter_mode", rate_limiter_mode)
        if stats_dump_period is not None:
            pulumi.set(__self__, "stats_dump_period", stats_dump_period)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_direct_io_for_flush_and_compaction is not None:
            pulumi.set(__self__, "use_direct_io_for_flush_and_compaction", use_direct_io_for_flush_and_compaction)
        if wal_bytes_per_sync is not None:
            pulumi.set(__self__, "wal_bytes_per_sync", wal_bytes_per_sync)
        if wal_recovery_mode is not None:
            pulumi.set(__self__, "wal_recovery_mode", wal_recovery_mode)
        if wal_size_limit is not None:
            pulumi.set(__self__, "wal_size_limit", wal_size_limit)
        if wal_ttl_seconds is not None:
            pulumi.set(__self__, "wal_ttl_seconds", wal_ttl_seconds)
        if writable_file_max_buffer_size is not None:
            pulumi.set(__self__, "writable_file_max_buffer_size", writable_file_max_buffer_size)
        if writecf is not None:
            pulumi.set(__self__, "writecf", writecf)

    @property
    @pulumi.getter(name="auto-tuned")
    def auto_tuned(self) -> Optional[bool]:
        return pulumi.get(self, "auto_tuned")

    @property
    @pulumi.getter(name="bytes-per-sync")
    def bytes_per_sync(self) -> Optional[str]:
        return pulumi.get(self, "bytes_per_sync")

    @property
    @pulumi.getter(name="compaction-readahead-size")
    def compaction_readahead_size(self) -> Optional[str]:
        return pulumi.get(self, "compaction_readahead_size")

    @property
    @pulumi.getter(name="create-if-missing")
    def create_if_missing(self) -> Optional[bool]:
        return pulumi.get(self, "create_if_missing")

    @property
    @pulumi.getter
    def defaultcf(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbDefaultcf']:
        return pulumi.get(self, "defaultcf")

    @property
    @pulumi.getter(name="enable-pipelined-write")
    def enable_pipelined_write(self) -> Optional[bool]:
        return pulumi.get(self, "enable_pipelined_write")

    @property
    @pulumi.getter(name="enable-statistics")
    def enable_statistics(self) -> Optional[bool]:
        return pulumi.get(self, "enable_statistics")

    @property
    @pulumi.getter(name="info-log-dir")
    def info_log_dir(self) -> Optional[str]:
        return pulumi.get(self, "info_log_dir")

    @property
    @pulumi.getter(name="info-log-keep-log-file-num")
    def info_log_keep_log_file_num(self) -> Optional[int]:
        return pulumi.get(self, "info_log_keep_log_file_num")

    @property
    @pulumi.getter(name="info-log-max-size")
    def info_log_max_size(self) -> Optional[str]:
        return pulumi.get(self, "info_log_max_size")

    @property
    @pulumi.getter(name="info-log-roll-time")
    def info_log_roll_time(self) -> Optional[str]:
        return pulumi.get(self, "info_log_roll_time")

    @property
    @pulumi.getter
    def lockcf(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbLockcf']:
        return pulumi.get(self, "lockcf")

    @property
    @pulumi.getter(name="max-background-jobs")
    def max_background_jobs(self) -> Optional[int]:
        return pulumi.get(self, "max_background_jobs")

    @property
    @pulumi.getter(name="max-manifest-file-size")
    def max_manifest_file_size(self) -> Optional[str]:
        return pulumi.get(self, "max_manifest_file_size")

    @property
    @pulumi.getter(name="max-open-files")
    def max_open_files(self) -> Optional[int]:
        return pulumi.get(self, "max_open_files")

    @property
    @pulumi.getter(name="max-sub-compactions")
    def max_sub_compactions(self) -> Optional[int]:
        return pulumi.get(self, "max_sub_compactions")

    @property
    @pulumi.getter(name="max-total-wal-size")
    def max_total_wal_size(self) -> Optional[str]:
        return pulumi.get(self, "max_total_wal_size")

    @property
    @pulumi.getter
    def raftcf(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbRaftcf']:
        return pulumi.get(self, "raftcf")

    @property
    @pulumi.getter(name="rate-bytes-per-sec")
    def rate_bytes_per_sec(self) -> Optional[str]:
        return pulumi.get(self, "rate_bytes_per_sec")

    @property
    @pulumi.getter(name="rate-limiter-mode")
    def rate_limiter_mode(self) -> Optional[int]:
        return pulumi.get(self, "rate_limiter_mode")

    @property
    @pulumi.getter(name="stats-dump-period")
    def stats_dump_period(self) -> Optional[str]:
        return pulumi.get(self, "stats_dump_period")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-direct-io-for-flush-and-compaction")
    def use_direct_io_for_flush_and_compaction(self) -> Optional[bool]:
        return pulumi.get(self, "use_direct_io_for_flush_and_compaction")

    @property
    @pulumi.getter(name="wal-bytes-per-sync")
    def wal_bytes_per_sync(self) -> Optional[str]:
        return pulumi.get(self, "wal_bytes_per_sync")

    @property
    @pulumi.getter(name="wal-recovery-mode")
    def wal_recovery_mode(self) -> Optional[int]:
        return pulumi.get(self, "wal_recovery_mode")

    @property
    @pulumi.getter(name="wal-size-limit")
    def wal_size_limit(self) -> Optional[str]:
        return pulumi.get(self, "wal_size_limit")

    @property
    @pulumi.getter(name="wal-ttl-seconds")
    def wal_ttl_seconds(self) -> Optional[int]:
        return pulumi.get(self, "wal_ttl_seconds")

    @property
    @pulumi.getter(name="writable-file-max-buffer-size")
    def writable_file_max_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "writable_file_max_buffer_size")

    @property
    @pulumi.getter
    def writecf(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbWritecf']:
        return pulumi.get(self, "writecf")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbDefaultcf(dict):
    def __init__(__self__, *,
                 block_based_bloom_filter: Optional[bool] = None,
                 block_cache_size: Optional[str] = None,
                 block_size: Optional[str] = None,
                 bloom_filter_bits_per_key: Optional[int] = None,
                 cache_index_and_filter_blocks: Optional[bool] = None,
                 compaction_pri: Optional[int] = None,
                 compaction_style: Optional[int] = None,
                 compression_per_level: Optional[Sequence[str]] = None,
                 disable_auto_compactions: Optional[bool] = None,
                 disable_block_cache: Optional[bool] = None,
                 dynamic_level_bytes: Optional[bool] = None,
                 enable_doubly_skiplist: Optional[bool] = None,
                 force_consistency_checks: Optional[bool] = None,
                 hard_pending_compaction_bytes_limit: Optional[str] = None,
                 level0_file_num_compaction_trigger: Optional[int] = None,
                 level0_slowdown_writes_trigger: Optional[int] = None,
                 level0_stop_writes_trigger: Optional[int] = None,
                 max_bytes_for_level_base: Optional[str] = None,
                 max_bytes_for_level_multiplier: Optional[int] = None,
                 max_compaction_bytes: Optional[str] = None,
                 max_write_buffer_number: Optional[int] = None,
                 min_write_buffer_number_to_merge: Optional[int] = None,
                 num_levels: Optional[int] = None,
                 optimize_filters_for_hits: Optional[bool] = None,
                 pin_l0_filter_and_index_blocks: Optional[bool] = None,
                 prop_keys_index_distance: Optional[int] = None,
                 prop_size_index_distance: Optional[int] = None,
                 read_amp_bytes_per_bit: Optional[int] = None,
                 soft_pending_compaction_bytes_limit: Optional[str] = None,
                 target_file_size_base: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRocksdbDefaultcfTitan'] = None,
                 use_bloom_filter: Optional[bool] = None,
                 whole_key_filtering: Optional[bool] = None,
                 write_buffer_size: Optional[str] = None):
        if block_based_bloom_filter is not None:
            pulumi.set(__self__, "block_based_bloom_filter", block_based_bloom_filter)
        if block_cache_size is not None:
            pulumi.set(__self__, "block_cache_size", block_cache_size)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if bloom_filter_bits_per_key is not None:
            pulumi.set(__self__, "bloom_filter_bits_per_key", bloom_filter_bits_per_key)
        if cache_index_and_filter_blocks is not None:
            pulumi.set(__self__, "cache_index_and_filter_blocks", cache_index_and_filter_blocks)
        if compaction_pri is not None:
            pulumi.set(__self__, "compaction_pri", compaction_pri)
        if compaction_style is not None:
            pulumi.set(__self__, "compaction_style", compaction_style)
        if compression_per_level is not None:
            pulumi.set(__self__, "compression_per_level", compression_per_level)
        if disable_auto_compactions is not None:
            pulumi.set(__self__, "disable_auto_compactions", disable_auto_compactions)
        if disable_block_cache is not None:
            pulumi.set(__self__, "disable_block_cache", disable_block_cache)
        if dynamic_level_bytes is not None:
            pulumi.set(__self__, "dynamic_level_bytes", dynamic_level_bytes)
        if enable_doubly_skiplist is not None:
            pulumi.set(__self__, "enable_doubly_skiplist", enable_doubly_skiplist)
        if force_consistency_checks is not None:
            pulumi.set(__self__, "force_consistency_checks", force_consistency_checks)
        if hard_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "hard_pending_compaction_bytes_limit", hard_pending_compaction_bytes_limit)
        if level0_file_num_compaction_trigger is not None:
            pulumi.set(__self__, "level0_file_num_compaction_trigger", level0_file_num_compaction_trigger)
        if level0_slowdown_writes_trigger is not None:
            pulumi.set(__self__, "level0_slowdown_writes_trigger", level0_slowdown_writes_trigger)
        if level0_stop_writes_trigger is not None:
            pulumi.set(__self__, "level0_stop_writes_trigger", level0_stop_writes_trigger)
        if max_bytes_for_level_base is not None:
            pulumi.set(__self__, "max_bytes_for_level_base", max_bytes_for_level_base)
        if max_bytes_for_level_multiplier is not None:
            pulumi.set(__self__, "max_bytes_for_level_multiplier", max_bytes_for_level_multiplier)
        if max_compaction_bytes is not None:
            pulumi.set(__self__, "max_compaction_bytes", max_compaction_bytes)
        if max_write_buffer_number is not None:
            pulumi.set(__self__, "max_write_buffer_number", max_write_buffer_number)
        if min_write_buffer_number_to_merge is not None:
            pulumi.set(__self__, "min_write_buffer_number_to_merge", min_write_buffer_number_to_merge)
        if num_levels is not None:
            pulumi.set(__self__, "num_levels", num_levels)
        if optimize_filters_for_hits is not None:
            pulumi.set(__self__, "optimize_filters_for_hits", optimize_filters_for_hits)
        if pin_l0_filter_and_index_blocks is not None:
            pulumi.set(__self__, "pin_l0_filter_and_index_blocks", pin_l0_filter_and_index_blocks)
        if prop_keys_index_distance is not None:
            pulumi.set(__self__, "prop_keys_index_distance", prop_keys_index_distance)
        if prop_size_index_distance is not None:
            pulumi.set(__self__, "prop_size_index_distance", prop_size_index_distance)
        if read_amp_bytes_per_bit is not None:
            pulumi.set(__self__, "read_amp_bytes_per_bit", read_amp_bytes_per_bit)
        if soft_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "soft_pending_compaction_bytes_limit", soft_pending_compaction_bytes_limit)
        if target_file_size_base is not None:
            pulumi.set(__self__, "target_file_size_base", target_file_size_base)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_bloom_filter is not None:
            pulumi.set(__self__, "use_bloom_filter", use_bloom_filter)
        if whole_key_filtering is not None:
            pulumi.set(__self__, "whole_key_filtering", whole_key_filtering)
        if write_buffer_size is not None:
            pulumi.set(__self__, "write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="block-based-bloom-filter")
    def block_based_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "block_based_bloom_filter")

    @property
    @pulumi.getter(name="block-cache-size")
    def block_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "block_cache_size")

    @property
    @pulumi.getter(name="block-size")
    def block_size(self) -> Optional[str]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter(name="bloom-filter-bits-per-key")
    def bloom_filter_bits_per_key(self) -> Optional[int]:
        return pulumi.get(self, "bloom_filter_bits_per_key")

    @property
    @pulumi.getter(name="cache-index-and-filter-blocks")
    def cache_index_and_filter_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "cache_index_and_filter_blocks")

    @property
    @pulumi.getter(name="compaction-pri")
    def compaction_pri(self) -> Optional[int]:
        return pulumi.get(self, "compaction_pri")

    @property
    @pulumi.getter(name="compaction-style")
    def compaction_style(self) -> Optional[int]:
        return pulumi.get(self, "compaction_style")

    @property
    @pulumi.getter(name="compression-per-level")
    def compression_per_level(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compression_per_level")

    @property
    @pulumi.getter(name="disable-auto-compactions")
    def disable_auto_compactions(self) -> Optional[bool]:
        return pulumi.get(self, "disable_auto_compactions")

    @property
    @pulumi.getter(name="disable-block-cache")
    def disable_block_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_block_cache")

    @property
    @pulumi.getter(name="dynamic-level-bytes")
    def dynamic_level_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_level_bytes")

    @property
    @pulumi.getter(name="enable-doubly-skiplist")
    def enable_doubly_skiplist(self) -> Optional[bool]:
        return pulumi.get(self, "enable_doubly_skiplist")

    @property
    @pulumi.getter(name="force-consistency-checks")
    def force_consistency_checks(self) -> Optional[bool]:
        return pulumi.get(self, "force_consistency_checks")

    @property
    @pulumi.getter(name="hard-pending-compaction-bytes-limit")
    def hard_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "hard_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="level0-file-num-compaction-trigger")
    def level0_file_num_compaction_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_file_num_compaction_trigger")

    @property
    @pulumi.getter(name="level0-slowdown-writes-trigger")
    def level0_slowdown_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_slowdown_writes_trigger")

    @property
    @pulumi.getter(name="level0-stop-writes-trigger")
    def level0_stop_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_stop_writes_trigger")

    @property
    @pulumi.getter(name="max-bytes-for-level-base")
    def max_bytes_for_level_base(self) -> Optional[str]:
        return pulumi.get(self, "max_bytes_for_level_base")

    @property
    @pulumi.getter(name="max-bytes-for-level-multiplier")
    def max_bytes_for_level_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "max_bytes_for_level_multiplier")

    @property
    @pulumi.getter(name="max-compaction-bytes")
    def max_compaction_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_compaction_bytes")

    @property
    @pulumi.getter(name="max-write-buffer-number")
    def max_write_buffer_number(self) -> Optional[int]:
        return pulumi.get(self, "max_write_buffer_number")

    @property
    @pulumi.getter(name="min-write-buffer-number-to-merge")
    def min_write_buffer_number_to_merge(self) -> Optional[int]:
        return pulumi.get(self, "min_write_buffer_number_to_merge")

    @property
    @pulumi.getter(name="num-levels")
    def num_levels(self) -> Optional[int]:
        return pulumi.get(self, "num_levels")

    @property
    @pulumi.getter(name="optimize-filters-for-hits")
    def optimize_filters_for_hits(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_filters_for_hits")

    @property
    @pulumi.getter(name="pin-l0-filter-and-index-blocks")
    def pin_l0_filter_and_index_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "pin_l0_filter_and_index_blocks")

    @property
    @pulumi.getter(name="prop-keys-index-distance")
    def prop_keys_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_keys_index_distance")

    @property
    @pulumi.getter(name="prop-size-index-distance")
    def prop_size_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_size_index_distance")

    @property
    @pulumi.getter(name="read-amp-bytes-per-bit")
    def read_amp_bytes_per_bit(self) -> Optional[int]:
        return pulumi.get(self, "read_amp_bytes_per_bit")

    @property
    @pulumi.getter(name="soft-pending-compaction-bytes-limit")
    def soft_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "soft_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="target-file-size-base")
    def target_file_size_base(self) -> Optional[str]:
        return pulumi.get(self, "target_file_size_base")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbDefaultcfTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-bloom-filter")
    def use_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "use_bloom_filter")

    @property
    @pulumi.getter(name="whole-key-filtering")
    def whole_key_filtering(self) -> Optional[bool]:
        return pulumi.get(self, "whole_key_filtering")

    @property
    @pulumi.getter(name="write-buffer-size")
    def write_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "write_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbDefaultcfTitan(dict):
    def __init__(__self__, *,
                 blob_cache_size: Optional[str] = None,
                 blob_file_compression: Optional[str] = None,
                 blob_run_mode: Optional[str] = None,
                 discardable_ratio: Optional[float] = None,
                 gc_merge_rewrite: Optional[bool] = None,
                 level_merge: Optional[bool] = None,
                 max_gc_batch_size: Optional[str] = None,
                 merge_small_file_threshold: Optional[str] = None,
                 min_blob_size: Optional[str] = None,
                 min_gc_batch_size: Optional[str] = None,
                 sample_ratio: Optional[float] = None):
        if blob_cache_size is not None:
            pulumi.set(__self__, "blob_cache_size", blob_cache_size)
        if blob_file_compression is not None:
            pulumi.set(__self__, "blob_file_compression", blob_file_compression)
        if blob_run_mode is not None:
            pulumi.set(__self__, "blob_run_mode", blob_run_mode)
        if discardable_ratio is not None:
            pulumi.set(__self__, "discardable_ratio", discardable_ratio)
        if gc_merge_rewrite is not None:
            pulumi.set(__self__, "gc_merge_rewrite", gc_merge_rewrite)
        if level_merge is not None:
            pulumi.set(__self__, "level_merge", level_merge)
        if max_gc_batch_size is not None:
            pulumi.set(__self__, "max_gc_batch_size", max_gc_batch_size)
        if merge_small_file_threshold is not None:
            pulumi.set(__self__, "merge_small_file_threshold", merge_small_file_threshold)
        if min_blob_size is not None:
            pulumi.set(__self__, "min_blob_size", min_blob_size)
        if min_gc_batch_size is not None:
            pulumi.set(__self__, "min_gc_batch_size", min_gc_batch_size)
        if sample_ratio is not None:
            pulumi.set(__self__, "sample_ratio", sample_ratio)

    @property
    @pulumi.getter(name="blob-cache-size")
    def blob_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "blob_cache_size")

    @property
    @pulumi.getter(name="blob-file-compression")
    def blob_file_compression(self) -> Optional[str]:
        return pulumi.get(self, "blob_file_compression")

    @property
    @pulumi.getter(name="blob-run-mode")
    def blob_run_mode(self) -> Optional[str]:
        return pulumi.get(self, "blob_run_mode")

    @property
    @pulumi.getter(name="discardable-ratio")
    def discardable_ratio(self) -> Optional[float]:
        return pulumi.get(self, "discardable_ratio")

    @property
    @pulumi.getter(name="gc-merge-rewrite")
    def gc_merge_rewrite(self) -> Optional[bool]:
        return pulumi.get(self, "gc_merge_rewrite")

    @property
    @pulumi.getter
    def level_merge(self) -> Optional[bool]:
        return pulumi.get(self, "level_merge")

    @property
    @pulumi.getter(name="max-gc-batch-size")
    def max_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "max_gc_batch_size")

    @property
    @pulumi.getter(name="merge-small-file-threshold")
    def merge_small_file_threshold(self) -> Optional[str]:
        return pulumi.get(self, "merge_small_file_threshold")

    @property
    @pulumi.getter(name="min-blob-size")
    def min_blob_size(self) -> Optional[str]:
        return pulumi.get(self, "min_blob_size")

    @property
    @pulumi.getter(name="min-gc-batch-size")
    def min_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "min_gc_batch_size")

    @property
    @pulumi.getter(name="sample-ratio")
    def sample_ratio(self) -> Optional[float]:
        return pulumi.get(self, "sample_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbLockcf(dict):
    def __init__(__self__, *,
                 block_based_bloom_filter: Optional[bool] = None,
                 block_cache_size: Optional[str] = None,
                 block_size: Optional[str] = None,
                 bloom_filter_bits_per_key: Optional[int] = None,
                 cache_index_and_filter_blocks: Optional[bool] = None,
                 compaction_pri: Optional[int] = None,
                 compaction_style: Optional[int] = None,
                 compression_per_level: Optional[Sequence[str]] = None,
                 disable_auto_compactions: Optional[bool] = None,
                 disable_block_cache: Optional[bool] = None,
                 dynamic_level_bytes: Optional[bool] = None,
                 enable_doubly_skiplist: Optional[bool] = None,
                 force_consistency_checks: Optional[bool] = None,
                 hard_pending_compaction_bytes_limit: Optional[str] = None,
                 level0_file_num_compaction_trigger: Optional[int] = None,
                 level0_slowdown_writes_trigger: Optional[int] = None,
                 level0_stop_writes_trigger: Optional[int] = None,
                 max_bytes_for_level_base: Optional[str] = None,
                 max_bytes_for_level_multiplier: Optional[int] = None,
                 max_compaction_bytes: Optional[str] = None,
                 max_write_buffer_number: Optional[int] = None,
                 min_write_buffer_number_to_merge: Optional[int] = None,
                 num_levels: Optional[int] = None,
                 optimize_filters_for_hits: Optional[bool] = None,
                 pin_l0_filter_and_index_blocks: Optional[bool] = None,
                 prop_keys_index_distance: Optional[int] = None,
                 prop_size_index_distance: Optional[int] = None,
                 read_amp_bytes_per_bit: Optional[int] = None,
                 soft_pending_compaction_bytes_limit: Optional[str] = None,
                 target_file_size_base: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRocksdbLockcfTitan'] = None,
                 use_bloom_filter: Optional[bool] = None,
                 whole_key_filtering: Optional[bool] = None,
                 write_buffer_size: Optional[str] = None):
        if block_based_bloom_filter is not None:
            pulumi.set(__self__, "block_based_bloom_filter", block_based_bloom_filter)
        if block_cache_size is not None:
            pulumi.set(__self__, "block_cache_size", block_cache_size)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if bloom_filter_bits_per_key is not None:
            pulumi.set(__self__, "bloom_filter_bits_per_key", bloom_filter_bits_per_key)
        if cache_index_and_filter_blocks is not None:
            pulumi.set(__self__, "cache_index_and_filter_blocks", cache_index_and_filter_blocks)
        if compaction_pri is not None:
            pulumi.set(__self__, "compaction_pri", compaction_pri)
        if compaction_style is not None:
            pulumi.set(__self__, "compaction_style", compaction_style)
        if compression_per_level is not None:
            pulumi.set(__self__, "compression_per_level", compression_per_level)
        if disable_auto_compactions is not None:
            pulumi.set(__self__, "disable_auto_compactions", disable_auto_compactions)
        if disable_block_cache is not None:
            pulumi.set(__self__, "disable_block_cache", disable_block_cache)
        if dynamic_level_bytes is not None:
            pulumi.set(__self__, "dynamic_level_bytes", dynamic_level_bytes)
        if enable_doubly_skiplist is not None:
            pulumi.set(__self__, "enable_doubly_skiplist", enable_doubly_skiplist)
        if force_consistency_checks is not None:
            pulumi.set(__self__, "force_consistency_checks", force_consistency_checks)
        if hard_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "hard_pending_compaction_bytes_limit", hard_pending_compaction_bytes_limit)
        if level0_file_num_compaction_trigger is not None:
            pulumi.set(__self__, "level0_file_num_compaction_trigger", level0_file_num_compaction_trigger)
        if level0_slowdown_writes_trigger is not None:
            pulumi.set(__self__, "level0_slowdown_writes_trigger", level0_slowdown_writes_trigger)
        if level0_stop_writes_trigger is not None:
            pulumi.set(__self__, "level0_stop_writes_trigger", level0_stop_writes_trigger)
        if max_bytes_for_level_base is not None:
            pulumi.set(__self__, "max_bytes_for_level_base", max_bytes_for_level_base)
        if max_bytes_for_level_multiplier is not None:
            pulumi.set(__self__, "max_bytes_for_level_multiplier", max_bytes_for_level_multiplier)
        if max_compaction_bytes is not None:
            pulumi.set(__self__, "max_compaction_bytes", max_compaction_bytes)
        if max_write_buffer_number is not None:
            pulumi.set(__self__, "max_write_buffer_number", max_write_buffer_number)
        if min_write_buffer_number_to_merge is not None:
            pulumi.set(__self__, "min_write_buffer_number_to_merge", min_write_buffer_number_to_merge)
        if num_levels is not None:
            pulumi.set(__self__, "num_levels", num_levels)
        if optimize_filters_for_hits is not None:
            pulumi.set(__self__, "optimize_filters_for_hits", optimize_filters_for_hits)
        if pin_l0_filter_and_index_blocks is not None:
            pulumi.set(__self__, "pin_l0_filter_and_index_blocks", pin_l0_filter_and_index_blocks)
        if prop_keys_index_distance is not None:
            pulumi.set(__self__, "prop_keys_index_distance", prop_keys_index_distance)
        if prop_size_index_distance is not None:
            pulumi.set(__self__, "prop_size_index_distance", prop_size_index_distance)
        if read_amp_bytes_per_bit is not None:
            pulumi.set(__self__, "read_amp_bytes_per_bit", read_amp_bytes_per_bit)
        if soft_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "soft_pending_compaction_bytes_limit", soft_pending_compaction_bytes_limit)
        if target_file_size_base is not None:
            pulumi.set(__self__, "target_file_size_base", target_file_size_base)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_bloom_filter is not None:
            pulumi.set(__self__, "use_bloom_filter", use_bloom_filter)
        if whole_key_filtering is not None:
            pulumi.set(__self__, "whole_key_filtering", whole_key_filtering)
        if write_buffer_size is not None:
            pulumi.set(__self__, "write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="block-based-bloom-filter")
    def block_based_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "block_based_bloom_filter")

    @property
    @pulumi.getter(name="block-cache-size")
    def block_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "block_cache_size")

    @property
    @pulumi.getter(name="block-size")
    def block_size(self) -> Optional[str]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter(name="bloom-filter-bits-per-key")
    def bloom_filter_bits_per_key(self) -> Optional[int]:
        return pulumi.get(self, "bloom_filter_bits_per_key")

    @property
    @pulumi.getter(name="cache-index-and-filter-blocks")
    def cache_index_and_filter_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "cache_index_and_filter_blocks")

    @property
    @pulumi.getter(name="compaction-pri")
    def compaction_pri(self) -> Optional[int]:
        return pulumi.get(self, "compaction_pri")

    @property
    @pulumi.getter(name="compaction-style")
    def compaction_style(self) -> Optional[int]:
        return pulumi.get(self, "compaction_style")

    @property
    @pulumi.getter(name="compression-per-level")
    def compression_per_level(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compression_per_level")

    @property
    @pulumi.getter(name="disable-auto-compactions")
    def disable_auto_compactions(self) -> Optional[bool]:
        return pulumi.get(self, "disable_auto_compactions")

    @property
    @pulumi.getter(name="disable-block-cache")
    def disable_block_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_block_cache")

    @property
    @pulumi.getter(name="dynamic-level-bytes")
    def dynamic_level_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_level_bytes")

    @property
    @pulumi.getter(name="enable-doubly-skiplist")
    def enable_doubly_skiplist(self) -> Optional[bool]:
        return pulumi.get(self, "enable_doubly_skiplist")

    @property
    @pulumi.getter(name="force-consistency-checks")
    def force_consistency_checks(self) -> Optional[bool]:
        return pulumi.get(self, "force_consistency_checks")

    @property
    @pulumi.getter(name="hard-pending-compaction-bytes-limit")
    def hard_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "hard_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="level0-file-num-compaction-trigger")
    def level0_file_num_compaction_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_file_num_compaction_trigger")

    @property
    @pulumi.getter(name="level0-slowdown-writes-trigger")
    def level0_slowdown_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_slowdown_writes_trigger")

    @property
    @pulumi.getter(name="level0-stop-writes-trigger")
    def level0_stop_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_stop_writes_trigger")

    @property
    @pulumi.getter(name="max-bytes-for-level-base")
    def max_bytes_for_level_base(self) -> Optional[str]:
        return pulumi.get(self, "max_bytes_for_level_base")

    @property
    @pulumi.getter(name="max-bytes-for-level-multiplier")
    def max_bytes_for_level_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "max_bytes_for_level_multiplier")

    @property
    @pulumi.getter(name="max-compaction-bytes")
    def max_compaction_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_compaction_bytes")

    @property
    @pulumi.getter(name="max-write-buffer-number")
    def max_write_buffer_number(self) -> Optional[int]:
        return pulumi.get(self, "max_write_buffer_number")

    @property
    @pulumi.getter(name="min-write-buffer-number-to-merge")
    def min_write_buffer_number_to_merge(self) -> Optional[int]:
        return pulumi.get(self, "min_write_buffer_number_to_merge")

    @property
    @pulumi.getter(name="num-levels")
    def num_levels(self) -> Optional[int]:
        return pulumi.get(self, "num_levels")

    @property
    @pulumi.getter(name="optimize-filters-for-hits")
    def optimize_filters_for_hits(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_filters_for_hits")

    @property
    @pulumi.getter(name="pin-l0-filter-and-index-blocks")
    def pin_l0_filter_and_index_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "pin_l0_filter_and_index_blocks")

    @property
    @pulumi.getter(name="prop-keys-index-distance")
    def prop_keys_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_keys_index_distance")

    @property
    @pulumi.getter(name="prop-size-index-distance")
    def prop_size_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_size_index_distance")

    @property
    @pulumi.getter(name="read-amp-bytes-per-bit")
    def read_amp_bytes_per_bit(self) -> Optional[int]:
        return pulumi.get(self, "read_amp_bytes_per_bit")

    @property
    @pulumi.getter(name="soft-pending-compaction-bytes-limit")
    def soft_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "soft_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="target-file-size-base")
    def target_file_size_base(self) -> Optional[str]:
        return pulumi.get(self, "target_file_size_base")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbLockcfTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-bloom-filter")
    def use_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "use_bloom_filter")

    @property
    @pulumi.getter(name="whole-key-filtering")
    def whole_key_filtering(self) -> Optional[bool]:
        return pulumi.get(self, "whole_key_filtering")

    @property
    @pulumi.getter(name="write-buffer-size")
    def write_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "write_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbLockcfTitan(dict):
    def __init__(__self__, *,
                 blob_cache_size: Optional[str] = None,
                 blob_file_compression: Optional[str] = None,
                 blob_run_mode: Optional[str] = None,
                 discardable_ratio: Optional[float] = None,
                 gc_merge_rewrite: Optional[bool] = None,
                 level_merge: Optional[bool] = None,
                 max_gc_batch_size: Optional[str] = None,
                 merge_small_file_threshold: Optional[str] = None,
                 min_blob_size: Optional[str] = None,
                 min_gc_batch_size: Optional[str] = None,
                 sample_ratio: Optional[float] = None):
        if blob_cache_size is not None:
            pulumi.set(__self__, "blob_cache_size", blob_cache_size)
        if blob_file_compression is not None:
            pulumi.set(__self__, "blob_file_compression", blob_file_compression)
        if blob_run_mode is not None:
            pulumi.set(__self__, "blob_run_mode", blob_run_mode)
        if discardable_ratio is not None:
            pulumi.set(__self__, "discardable_ratio", discardable_ratio)
        if gc_merge_rewrite is not None:
            pulumi.set(__self__, "gc_merge_rewrite", gc_merge_rewrite)
        if level_merge is not None:
            pulumi.set(__self__, "level_merge", level_merge)
        if max_gc_batch_size is not None:
            pulumi.set(__self__, "max_gc_batch_size", max_gc_batch_size)
        if merge_small_file_threshold is not None:
            pulumi.set(__self__, "merge_small_file_threshold", merge_small_file_threshold)
        if min_blob_size is not None:
            pulumi.set(__self__, "min_blob_size", min_blob_size)
        if min_gc_batch_size is not None:
            pulumi.set(__self__, "min_gc_batch_size", min_gc_batch_size)
        if sample_ratio is not None:
            pulumi.set(__self__, "sample_ratio", sample_ratio)

    @property
    @pulumi.getter(name="blob-cache-size")
    def blob_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "blob_cache_size")

    @property
    @pulumi.getter(name="blob-file-compression")
    def blob_file_compression(self) -> Optional[str]:
        return pulumi.get(self, "blob_file_compression")

    @property
    @pulumi.getter(name="blob-run-mode")
    def blob_run_mode(self) -> Optional[str]:
        return pulumi.get(self, "blob_run_mode")

    @property
    @pulumi.getter(name="discardable-ratio")
    def discardable_ratio(self) -> Optional[float]:
        return pulumi.get(self, "discardable_ratio")

    @property
    @pulumi.getter(name="gc-merge-rewrite")
    def gc_merge_rewrite(self) -> Optional[bool]:
        return pulumi.get(self, "gc_merge_rewrite")

    @property
    @pulumi.getter
    def level_merge(self) -> Optional[bool]:
        return pulumi.get(self, "level_merge")

    @property
    @pulumi.getter(name="max-gc-batch-size")
    def max_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "max_gc_batch_size")

    @property
    @pulumi.getter(name="merge-small-file-threshold")
    def merge_small_file_threshold(self) -> Optional[str]:
        return pulumi.get(self, "merge_small_file_threshold")

    @property
    @pulumi.getter(name="min-blob-size")
    def min_blob_size(self) -> Optional[str]:
        return pulumi.get(self, "min_blob_size")

    @property
    @pulumi.getter(name="min-gc-batch-size")
    def min_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "min_gc_batch_size")

    @property
    @pulumi.getter(name="sample-ratio")
    def sample_ratio(self) -> Optional[float]:
        return pulumi.get(self, "sample_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbRaftcf(dict):
    def __init__(__self__, *,
                 block_based_bloom_filter: Optional[bool] = None,
                 block_cache_size: Optional[str] = None,
                 block_size: Optional[str] = None,
                 bloom_filter_bits_per_key: Optional[int] = None,
                 cache_index_and_filter_blocks: Optional[bool] = None,
                 compaction_pri: Optional[int] = None,
                 compaction_style: Optional[int] = None,
                 compression_per_level: Optional[Sequence[str]] = None,
                 disable_auto_compactions: Optional[bool] = None,
                 disable_block_cache: Optional[bool] = None,
                 dynamic_level_bytes: Optional[bool] = None,
                 enable_doubly_skiplist: Optional[bool] = None,
                 force_consistency_checks: Optional[bool] = None,
                 hard_pending_compaction_bytes_limit: Optional[str] = None,
                 level0_file_num_compaction_trigger: Optional[int] = None,
                 level0_slowdown_writes_trigger: Optional[int] = None,
                 level0_stop_writes_trigger: Optional[int] = None,
                 max_bytes_for_level_base: Optional[str] = None,
                 max_bytes_for_level_multiplier: Optional[int] = None,
                 max_compaction_bytes: Optional[str] = None,
                 max_write_buffer_number: Optional[int] = None,
                 min_write_buffer_number_to_merge: Optional[int] = None,
                 num_levels: Optional[int] = None,
                 optimize_filters_for_hits: Optional[bool] = None,
                 pin_l0_filter_and_index_blocks: Optional[bool] = None,
                 prop_keys_index_distance: Optional[int] = None,
                 prop_size_index_distance: Optional[int] = None,
                 read_amp_bytes_per_bit: Optional[int] = None,
                 soft_pending_compaction_bytes_limit: Optional[str] = None,
                 target_file_size_base: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRocksdbRaftcfTitan'] = None,
                 use_bloom_filter: Optional[bool] = None,
                 whole_key_filtering: Optional[bool] = None,
                 write_buffer_size: Optional[str] = None):
        if block_based_bloom_filter is not None:
            pulumi.set(__self__, "block_based_bloom_filter", block_based_bloom_filter)
        if block_cache_size is not None:
            pulumi.set(__self__, "block_cache_size", block_cache_size)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if bloom_filter_bits_per_key is not None:
            pulumi.set(__self__, "bloom_filter_bits_per_key", bloom_filter_bits_per_key)
        if cache_index_and_filter_blocks is not None:
            pulumi.set(__self__, "cache_index_and_filter_blocks", cache_index_and_filter_blocks)
        if compaction_pri is not None:
            pulumi.set(__self__, "compaction_pri", compaction_pri)
        if compaction_style is not None:
            pulumi.set(__self__, "compaction_style", compaction_style)
        if compression_per_level is not None:
            pulumi.set(__self__, "compression_per_level", compression_per_level)
        if disable_auto_compactions is not None:
            pulumi.set(__self__, "disable_auto_compactions", disable_auto_compactions)
        if disable_block_cache is not None:
            pulumi.set(__self__, "disable_block_cache", disable_block_cache)
        if dynamic_level_bytes is not None:
            pulumi.set(__self__, "dynamic_level_bytes", dynamic_level_bytes)
        if enable_doubly_skiplist is not None:
            pulumi.set(__self__, "enable_doubly_skiplist", enable_doubly_skiplist)
        if force_consistency_checks is not None:
            pulumi.set(__self__, "force_consistency_checks", force_consistency_checks)
        if hard_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "hard_pending_compaction_bytes_limit", hard_pending_compaction_bytes_limit)
        if level0_file_num_compaction_trigger is not None:
            pulumi.set(__self__, "level0_file_num_compaction_trigger", level0_file_num_compaction_trigger)
        if level0_slowdown_writes_trigger is not None:
            pulumi.set(__self__, "level0_slowdown_writes_trigger", level0_slowdown_writes_trigger)
        if level0_stop_writes_trigger is not None:
            pulumi.set(__self__, "level0_stop_writes_trigger", level0_stop_writes_trigger)
        if max_bytes_for_level_base is not None:
            pulumi.set(__self__, "max_bytes_for_level_base", max_bytes_for_level_base)
        if max_bytes_for_level_multiplier is not None:
            pulumi.set(__self__, "max_bytes_for_level_multiplier", max_bytes_for_level_multiplier)
        if max_compaction_bytes is not None:
            pulumi.set(__self__, "max_compaction_bytes", max_compaction_bytes)
        if max_write_buffer_number is not None:
            pulumi.set(__self__, "max_write_buffer_number", max_write_buffer_number)
        if min_write_buffer_number_to_merge is not None:
            pulumi.set(__self__, "min_write_buffer_number_to_merge", min_write_buffer_number_to_merge)
        if num_levels is not None:
            pulumi.set(__self__, "num_levels", num_levels)
        if optimize_filters_for_hits is not None:
            pulumi.set(__self__, "optimize_filters_for_hits", optimize_filters_for_hits)
        if pin_l0_filter_and_index_blocks is not None:
            pulumi.set(__self__, "pin_l0_filter_and_index_blocks", pin_l0_filter_and_index_blocks)
        if prop_keys_index_distance is not None:
            pulumi.set(__self__, "prop_keys_index_distance", prop_keys_index_distance)
        if prop_size_index_distance is not None:
            pulumi.set(__self__, "prop_size_index_distance", prop_size_index_distance)
        if read_amp_bytes_per_bit is not None:
            pulumi.set(__self__, "read_amp_bytes_per_bit", read_amp_bytes_per_bit)
        if soft_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "soft_pending_compaction_bytes_limit", soft_pending_compaction_bytes_limit)
        if target_file_size_base is not None:
            pulumi.set(__self__, "target_file_size_base", target_file_size_base)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_bloom_filter is not None:
            pulumi.set(__self__, "use_bloom_filter", use_bloom_filter)
        if whole_key_filtering is not None:
            pulumi.set(__self__, "whole_key_filtering", whole_key_filtering)
        if write_buffer_size is not None:
            pulumi.set(__self__, "write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="block-based-bloom-filter")
    def block_based_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "block_based_bloom_filter")

    @property
    @pulumi.getter(name="block-cache-size")
    def block_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "block_cache_size")

    @property
    @pulumi.getter(name="block-size")
    def block_size(self) -> Optional[str]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter(name="bloom-filter-bits-per-key")
    def bloom_filter_bits_per_key(self) -> Optional[int]:
        return pulumi.get(self, "bloom_filter_bits_per_key")

    @property
    @pulumi.getter(name="cache-index-and-filter-blocks")
    def cache_index_and_filter_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "cache_index_and_filter_blocks")

    @property
    @pulumi.getter(name="compaction-pri")
    def compaction_pri(self) -> Optional[int]:
        return pulumi.get(self, "compaction_pri")

    @property
    @pulumi.getter(name="compaction-style")
    def compaction_style(self) -> Optional[int]:
        return pulumi.get(self, "compaction_style")

    @property
    @pulumi.getter(name="compression-per-level")
    def compression_per_level(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compression_per_level")

    @property
    @pulumi.getter(name="disable-auto-compactions")
    def disable_auto_compactions(self) -> Optional[bool]:
        return pulumi.get(self, "disable_auto_compactions")

    @property
    @pulumi.getter(name="disable-block-cache")
    def disable_block_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_block_cache")

    @property
    @pulumi.getter(name="dynamic-level-bytes")
    def dynamic_level_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_level_bytes")

    @property
    @pulumi.getter(name="enable-doubly-skiplist")
    def enable_doubly_skiplist(self) -> Optional[bool]:
        return pulumi.get(self, "enable_doubly_skiplist")

    @property
    @pulumi.getter(name="force-consistency-checks")
    def force_consistency_checks(self) -> Optional[bool]:
        return pulumi.get(self, "force_consistency_checks")

    @property
    @pulumi.getter(name="hard-pending-compaction-bytes-limit")
    def hard_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "hard_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="level0-file-num-compaction-trigger")
    def level0_file_num_compaction_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_file_num_compaction_trigger")

    @property
    @pulumi.getter(name="level0-slowdown-writes-trigger")
    def level0_slowdown_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_slowdown_writes_trigger")

    @property
    @pulumi.getter(name="level0-stop-writes-trigger")
    def level0_stop_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_stop_writes_trigger")

    @property
    @pulumi.getter(name="max-bytes-for-level-base")
    def max_bytes_for_level_base(self) -> Optional[str]:
        return pulumi.get(self, "max_bytes_for_level_base")

    @property
    @pulumi.getter(name="max-bytes-for-level-multiplier")
    def max_bytes_for_level_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "max_bytes_for_level_multiplier")

    @property
    @pulumi.getter(name="max-compaction-bytes")
    def max_compaction_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_compaction_bytes")

    @property
    @pulumi.getter(name="max-write-buffer-number")
    def max_write_buffer_number(self) -> Optional[int]:
        return pulumi.get(self, "max_write_buffer_number")

    @property
    @pulumi.getter(name="min-write-buffer-number-to-merge")
    def min_write_buffer_number_to_merge(self) -> Optional[int]:
        return pulumi.get(self, "min_write_buffer_number_to_merge")

    @property
    @pulumi.getter(name="num-levels")
    def num_levels(self) -> Optional[int]:
        return pulumi.get(self, "num_levels")

    @property
    @pulumi.getter(name="optimize-filters-for-hits")
    def optimize_filters_for_hits(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_filters_for_hits")

    @property
    @pulumi.getter(name="pin-l0-filter-and-index-blocks")
    def pin_l0_filter_and_index_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "pin_l0_filter_and_index_blocks")

    @property
    @pulumi.getter(name="prop-keys-index-distance")
    def prop_keys_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_keys_index_distance")

    @property
    @pulumi.getter(name="prop-size-index-distance")
    def prop_size_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_size_index_distance")

    @property
    @pulumi.getter(name="read-amp-bytes-per-bit")
    def read_amp_bytes_per_bit(self) -> Optional[int]:
        return pulumi.get(self, "read_amp_bytes_per_bit")

    @property
    @pulumi.getter(name="soft-pending-compaction-bytes-limit")
    def soft_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "soft_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="target-file-size-base")
    def target_file_size_base(self) -> Optional[str]:
        return pulumi.get(self, "target_file_size_base")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbRaftcfTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-bloom-filter")
    def use_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "use_bloom_filter")

    @property
    @pulumi.getter(name="whole-key-filtering")
    def whole_key_filtering(self) -> Optional[bool]:
        return pulumi.get(self, "whole_key_filtering")

    @property
    @pulumi.getter(name="write-buffer-size")
    def write_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "write_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbRaftcfTitan(dict):
    def __init__(__self__, *,
                 blob_cache_size: Optional[str] = None,
                 blob_file_compression: Optional[str] = None,
                 blob_run_mode: Optional[str] = None,
                 discardable_ratio: Optional[float] = None,
                 gc_merge_rewrite: Optional[bool] = None,
                 level_merge: Optional[bool] = None,
                 max_gc_batch_size: Optional[str] = None,
                 merge_small_file_threshold: Optional[str] = None,
                 min_blob_size: Optional[str] = None,
                 min_gc_batch_size: Optional[str] = None,
                 sample_ratio: Optional[float] = None):
        if blob_cache_size is not None:
            pulumi.set(__self__, "blob_cache_size", blob_cache_size)
        if blob_file_compression is not None:
            pulumi.set(__self__, "blob_file_compression", blob_file_compression)
        if blob_run_mode is not None:
            pulumi.set(__self__, "blob_run_mode", blob_run_mode)
        if discardable_ratio is not None:
            pulumi.set(__self__, "discardable_ratio", discardable_ratio)
        if gc_merge_rewrite is not None:
            pulumi.set(__self__, "gc_merge_rewrite", gc_merge_rewrite)
        if level_merge is not None:
            pulumi.set(__self__, "level_merge", level_merge)
        if max_gc_batch_size is not None:
            pulumi.set(__self__, "max_gc_batch_size", max_gc_batch_size)
        if merge_small_file_threshold is not None:
            pulumi.set(__self__, "merge_small_file_threshold", merge_small_file_threshold)
        if min_blob_size is not None:
            pulumi.set(__self__, "min_blob_size", min_blob_size)
        if min_gc_batch_size is not None:
            pulumi.set(__self__, "min_gc_batch_size", min_gc_batch_size)
        if sample_ratio is not None:
            pulumi.set(__self__, "sample_ratio", sample_ratio)

    @property
    @pulumi.getter(name="blob-cache-size")
    def blob_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "blob_cache_size")

    @property
    @pulumi.getter(name="blob-file-compression")
    def blob_file_compression(self) -> Optional[str]:
        return pulumi.get(self, "blob_file_compression")

    @property
    @pulumi.getter(name="blob-run-mode")
    def blob_run_mode(self) -> Optional[str]:
        return pulumi.get(self, "blob_run_mode")

    @property
    @pulumi.getter(name="discardable-ratio")
    def discardable_ratio(self) -> Optional[float]:
        return pulumi.get(self, "discardable_ratio")

    @property
    @pulumi.getter(name="gc-merge-rewrite")
    def gc_merge_rewrite(self) -> Optional[bool]:
        return pulumi.get(self, "gc_merge_rewrite")

    @property
    @pulumi.getter
    def level_merge(self) -> Optional[bool]:
        return pulumi.get(self, "level_merge")

    @property
    @pulumi.getter(name="max-gc-batch-size")
    def max_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "max_gc_batch_size")

    @property
    @pulumi.getter(name="merge-small-file-threshold")
    def merge_small_file_threshold(self) -> Optional[str]:
        return pulumi.get(self, "merge_small_file_threshold")

    @property
    @pulumi.getter(name="min-blob-size")
    def min_blob_size(self) -> Optional[str]:
        return pulumi.get(self, "min_blob_size")

    @property
    @pulumi.getter(name="min-gc-batch-size")
    def min_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "min_gc_batch_size")

    @property
    @pulumi.getter(name="sample-ratio")
    def sample_ratio(self) -> Optional[float]:
        return pulumi.get(self, "sample_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbTitan(dict):
    def __init__(__self__, *,
                 dirname: Optional[str] = None,
                 disable_gc: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 max_background_gc: Optional[int] = None,
                 purge_obsolete_files_period: Optional[str] = None):
        if dirname is not None:
            pulumi.set(__self__, "dirname", dirname)
        if disable_gc is not None:
            pulumi.set(__self__, "disable_gc", disable_gc)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_background_gc is not None:
            pulumi.set(__self__, "max_background_gc", max_background_gc)
        if purge_obsolete_files_period is not None:
            pulumi.set(__self__, "purge_obsolete_files_period", purge_obsolete_files_period)

    @property
    @pulumi.getter
    def dirname(self) -> Optional[str]:
        return pulumi.get(self, "dirname")

    @property
    @pulumi.getter(name="disable-gc")
    def disable_gc(self) -> Optional[bool]:
        return pulumi.get(self, "disable_gc")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="max-background-gc")
    def max_background_gc(self) -> Optional[int]:
        return pulumi.get(self, "max_background_gc")

    @property
    @pulumi.getter(name="purge-obsolete-files-period")
    def purge_obsolete_files_period(self) -> Optional[str]:
        return pulumi.get(self, "purge_obsolete_files_period")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbWritecf(dict):
    def __init__(__self__, *,
                 block_based_bloom_filter: Optional[bool] = None,
                 block_cache_size: Optional[str] = None,
                 block_size: Optional[str] = None,
                 bloom_filter_bits_per_key: Optional[int] = None,
                 cache_index_and_filter_blocks: Optional[bool] = None,
                 compaction_pri: Optional[int] = None,
                 compaction_style: Optional[int] = None,
                 compression_per_level: Optional[Sequence[str]] = None,
                 disable_auto_compactions: Optional[bool] = None,
                 disable_block_cache: Optional[bool] = None,
                 dynamic_level_bytes: Optional[bool] = None,
                 enable_doubly_skiplist: Optional[bool] = None,
                 force_consistency_checks: Optional[bool] = None,
                 hard_pending_compaction_bytes_limit: Optional[str] = None,
                 level0_file_num_compaction_trigger: Optional[int] = None,
                 level0_slowdown_writes_trigger: Optional[int] = None,
                 level0_stop_writes_trigger: Optional[int] = None,
                 max_bytes_for_level_base: Optional[str] = None,
                 max_bytes_for_level_multiplier: Optional[int] = None,
                 max_compaction_bytes: Optional[str] = None,
                 max_write_buffer_number: Optional[int] = None,
                 min_write_buffer_number_to_merge: Optional[int] = None,
                 num_levels: Optional[int] = None,
                 optimize_filters_for_hits: Optional[bool] = None,
                 pin_l0_filter_and_index_blocks: Optional[bool] = None,
                 prop_keys_index_distance: Optional[int] = None,
                 prop_size_index_distance: Optional[int] = None,
                 read_amp_bytes_per_bit: Optional[int] = None,
                 soft_pending_compaction_bytes_limit: Optional[str] = None,
                 target_file_size_base: Optional[str] = None,
                 titan: Optional['outputs.TidbClusterSpecTikvConfigRocksdbWritecfTitan'] = None,
                 use_bloom_filter: Optional[bool] = None,
                 whole_key_filtering: Optional[bool] = None,
                 write_buffer_size: Optional[str] = None):
        if block_based_bloom_filter is not None:
            pulumi.set(__self__, "block_based_bloom_filter", block_based_bloom_filter)
        if block_cache_size is not None:
            pulumi.set(__self__, "block_cache_size", block_cache_size)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if bloom_filter_bits_per_key is not None:
            pulumi.set(__self__, "bloom_filter_bits_per_key", bloom_filter_bits_per_key)
        if cache_index_and_filter_blocks is not None:
            pulumi.set(__self__, "cache_index_and_filter_blocks", cache_index_and_filter_blocks)
        if compaction_pri is not None:
            pulumi.set(__self__, "compaction_pri", compaction_pri)
        if compaction_style is not None:
            pulumi.set(__self__, "compaction_style", compaction_style)
        if compression_per_level is not None:
            pulumi.set(__self__, "compression_per_level", compression_per_level)
        if disable_auto_compactions is not None:
            pulumi.set(__self__, "disable_auto_compactions", disable_auto_compactions)
        if disable_block_cache is not None:
            pulumi.set(__self__, "disable_block_cache", disable_block_cache)
        if dynamic_level_bytes is not None:
            pulumi.set(__self__, "dynamic_level_bytes", dynamic_level_bytes)
        if enable_doubly_skiplist is not None:
            pulumi.set(__self__, "enable_doubly_skiplist", enable_doubly_skiplist)
        if force_consistency_checks is not None:
            pulumi.set(__self__, "force_consistency_checks", force_consistency_checks)
        if hard_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "hard_pending_compaction_bytes_limit", hard_pending_compaction_bytes_limit)
        if level0_file_num_compaction_trigger is not None:
            pulumi.set(__self__, "level0_file_num_compaction_trigger", level0_file_num_compaction_trigger)
        if level0_slowdown_writes_trigger is not None:
            pulumi.set(__self__, "level0_slowdown_writes_trigger", level0_slowdown_writes_trigger)
        if level0_stop_writes_trigger is not None:
            pulumi.set(__self__, "level0_stop_writes_trigger", level0_stop_writes_trigger)
        if max_bytes_for_level_base is not None:
            pulumi.set(__self__, "max_bytes_for_level_base", max_bytes_for_level_base)
        if max_bytes_for_level_multiplier is not None:
            pulumi.set(__self__, "max_bytes_for_level_multiplier", max_bytes_for_level_multiplier)
        if max_compaction_bytes is not None:
            pulumi.set(__self__, "max_compaction_bytes", max_compaction_bytes)
        if max_write_buffer_number is not None:
            pulumi.set(__self__, "max_write_buffer_number", max_write_buffer_number)
        if min_write_buffer_number_to_merge is not None:
            pulumi.set(__self__, "min_write_buffer_number_to_merge", min_write_buffer_number_to_merge)
        if num_levels is not None:
            pulumi.set(__self__, "num_levels", num_levels)
        if optimize_filters_for_hits is not None:
            pulumi.set(__self__, "optimize_filters_for_hits", optimize_filters_for_hits)
        if pin_l0_filter_and_index_blocks is not None:
            pulumi.set(__self__, "pin_l0_filter_and_index_blocks", pin_l0_filter_and_index_blocks)
        if prop_keys_index_distance is not None:
            pulumi.set(__self__, "prop_keys_index_distance", prop_keys_index_distance)
        if prop_size_index_distance is not None:
            pulumi.set(__self__, "prop_size_index_distance", prop_size_index_distance)
        if read_amp_bytes_per_bit is not None:
            pulumi.set(__self__, "read_amp_bytes_per_bit", read_amp_bytes_per_bit)
        if soft_pending_compaction_bytes_limit is not None:
            pulumi.set(__self__, "soft_pending_compaction_bytes_limit", soft_pending_compaction_bytes_limit)
        if target_file_size_base is not None:
            pulumi.set(__self__, "target_file_size_base", target_file_size_base)
        if titan is not None:
            pulumi.set(__self__, "titan", titan)
        if use_bloom_filter is not None:
            pulumi.set(__self__, "use_bloom_filter", use_bloom_filter)
        if whole_key_filtering is not None:
            pulumi.set(__self__, "whole_key_filtering", whole_key_filtering)
        if write_buffer_size is not None:
            pulumi.set(__self__, "write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="block-based-bloom-filter")
    def block_based_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "block_based_bloom_filter")

    @property
    @pulumi.getter(name="block-cache-size")
    def block_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "block_cache_size")

    @property
    @pulumi.getter(name="block-size")
    def block_size(self) -> Optional[str]:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter(name="bloom-filter-bits-per-key")
    def bloom_filter_bits_per_key(self) -> Optional[int]:
        return pulumi.get(self, "bloom_filter_bits_per_key")

    @property
    @pulumi.getter(name="cache-index-and-filter-blocks")
    def cache_index_and_filter_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "cache_index_and_filter_blocks")

    @property
    @pulumi.getter(name="compaction-pri")
    def compaction_pri(self) -> Optional[int]:
        return pulumi.get(self, "compaction_pri")

    @property
    @pulumi.getter(name="compaction-style")
    def compaction_style(self) -> Optional[int]:
        return pulumi.get(self, "compaction_style")

    @property
    @pulumi.getter(name="compression-per-level")
    def compression_per_level(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compression_per_level")

    @property
    @pulumi.getter(name="disable-auto-compactions")
    def disable_auto_compactions(self) -> Optional[bool]:
        return pulumi.get(self, "disable_auto_compactions")

    @property
    @pulumi.getter(name="disable-block-cache")
    def disable_block_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_block_cache")

    @property
    @pulumi.getter(name="dynamic-level-bytes")
    def dynamic_level_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_level_bytes")

    @property
    @pulumi.getter(name="enable-doubly-skiplist")
    def enable_doubly_skiplist(self) -> Optional[bool]:
        return pulumi.get(self, "enable_doubly_skiplist")

    @property
    @pulumi.getter(name="force-consistency-checks")
    def force_consistency_checks(self) -> Optional[bool]:
        return pulumi.get(self, "force_consistency_checks")

    @property
    @pulumi.getter(name="hard-pending-compaction-bytes-limit")
    def hard_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "hard_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="level0-file-num-compaction-trigger")
    def level0_file_num_compaction_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_file_num_compaction_trigger")

    @property
    @pulumi.getter(name="level0-slowdown-writes-trigger")
    def level0_slowdown_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_slowdown_writes_trigger")

    @property
    @pulumi.getter(name="level0-stop-writes-trigger")
    def level0_stop_writes_trigger(self) -> Optional[int]:
        return pulumi.get(self, "level0_stop_writes_trigger")

    @property
    @pulumi.getter(name="max-bytes-for-level-base")
    def max_bytes_for_level_base(self) -> Optional[str]:
        return pulumi.get(self, "max_bytes_for_level_base")

    @property
    @pulumi.getter(name="max-bytes-for-level-multiplier")
    def max_bytes_for_level_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "max_bytes_for_level_multiplier")

    @property
    @pulumi.getter(name="max-compaction-bytes")
    def max_compaction_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_compaction_bytes")

    @property
    @pulumi.getter(name="max-write-buffer-number")
    def max_write_buffer_number(self) -> Optional[int]:
        return pulumi.get(self, "max_write_buffer_number")

    @property
    @pulumi.getter(name="min-write-buffer-number-to-merge")
    def min_write_buffer_number_to_merge(self) -> Optional[int]:
        return pulumi.get(self, "min_write_buffer_number_to_merge")

    @property
    @pulumi.getter(name="num-levels")
    def num_levels(self) -> Optional[int]:
        return pulumi.get(self, "num_levels")

    @property
    @pulumi.getter(name="optimize-filters-for-hits")
    def optimize_filters_for_hits(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_filters_for_hits")

    @property
    @pulumi.getter(name="pin-l0-filter-and-index-blocks")
    def pin_l0_filter_and_index_blocks(self) -> Optional[bool]:
        return pulumi.get(self, "pin_l0_filter_and_index_blocks")

    @property
    @pulumi.getter(name="prop-keys-index-distance")
    def prop_keys_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_keys_index_distance")

    @property
    @pulumi.getter(name="prop-size-index-distance")
    def prop_size_index_distance(self) -> Optional[int]:
        return pulumi.get(self, "prop_size_index_distance")

    @property
    @pulumi.getter(name="read-amp-bytes-per-bit")
    def read_amp_bytes_per_bit(self) -> Optional[int]:
        return pulumi.get(self, "read_amp_bytes_per_bit")

    @property
    @pulumi.getter(name="soft-pending-compaction-bytes-limit")
    def soft_pending_compaction_bytes_limit(self) -> Optional[str]:
        return pulumi.get(self, "soft_pending_compaction_bytes_limit")

    @property
    @pulumi.getter(name="target-file-size-base")
    def target_file_size_base(self) -> Optional[str]:
        return pulumi.get(self, "target_file_size_base")

    @property
    @pulumi.getter
    def titan(self) -> Optional['outputs.TidbClusterSpecTikvConfigRocksdbWritecfTitan']:
        return pulumi.get(self, "titan")

    @property
    @pulumi.getter(name="use-bloom-filter")
    def use_bloom_filter(self) -> Optional[bool]:
        return pulumi.get(self, "use_bloom_filter")

    @property
    @pulumi.getter(name="whole-key-filtering")
    def whole_key_filtering(self) -> Optional[bool]:
        return pulumi.get(self, "whole_key_filtering")

    @property
    @pulumi.getter(name="write-buffer-size")
    def write_buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "write_buffer_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigRocksdbWritecfTitan(dict):
    def __init__(__self__, *,
                 blob_cache_size: Optional[str] = None,
                 blob_file_compression: Optional[str] = None,
                 blob_run_mode: Optional[str] = None,
                 discardable_ratio: Optional[float] = None,
                 gc_merge_rewrite: Optional[bool] = None,
                 level_merge: Optional[bool] = None,
                 max_gc_batch_size: Optional[str] = None,
                 merge_small_file_threshold: Optional[str] = None,
                 min_blob_size: Optional[str] = None,
                 min_gc_batch_size: Optional[str] = None,
                 sample_ratio: Optional[float] = None):
        if blob_cache_size is not None:
            pulumi.set(__self__, "blob_cache_size", blob_cache_size)
        if blob_file_compression is not None:
            pulumi.set(__self__, "blob_file_compression", blob_file_compression)
        if blob_run_mode is not None:
            pulumi.set(__self__, "blob_run_mode", blob_run_mode)
        if discardable_ratio is not None:
            pulumi.set(__self__, "discardable_ratio", discardable_ratio)
        if gc_merge_rewrite is not None:
            pulumi.set(__self__, "gc_merge_rewrite", gc_merge_rewrite)
        if level_merge is not None:
            pulumi.set(__self__, "level_merge", level_merge)
        if max_gc_batch_size is not None:
            pulumi.set(__self__, "max_gc_batch_size", max_gc_batch_size)
        if merge_small_file_threshold is not None:
            pulumi.set(__self__, "merge_small_file_threshold", merge_small_file_threshold)
        if min_blob_size is not None:
            pulumi.set(__self__, "min_blob_size", min_blob_size)
        if min_gc_batch_size is not None:
            pulumi.set(__self__, "min_gc_batch_size", min_gc_batch_size)
        if sample_ratio is not None:
            pulumi.set(__self__, "sample_ratio", sample_ratio)

    @property
    @pulumi.getter(name="blob-cache-size")
    def blob_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "blob_cache_size")

    @property
    @pulumi.getter(name="blob-file-compression")
    def blob_file_compression(self) -> Optional[str]:
        return pulumi.get(self, "blob_file_compression")

    @property
    @pulumi.getter(name="blob-run-mode")
    def blob_run_mode(self) -> Optional[str]:
        return pulumi.get(self, "blob_run_mode")

    @property
    @pulumi.getter(name="discardable-ratio")
    def discardable_ratio(self) -> Optional[float]:
        return pulumi.get(self, "discardable_ratio")

    @property
    @pulumi.getter(name="gc-merge-rewrite")
    def gc_merge_rewrite(self) -> Optional[bool]:
        return pulumi.get(self, "gc_merge_rewrite")

    @property
    @pulumi.getter
    def level_merge(self) -> Optional[bool]:
        return pulumi.get(self, "level_merge")

    @property
    @pulumi.getter(name="max-gc-batch-size")
    def max_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "max_gc_batch_size")

    @property
    @pulumi.getter(name="merge-small-file-threshold")
    def merge_small_file_threshold(self) -> Optional[str]:
        return pulumi.get(self, "merge_small_file_threshold")

    @property
    @pulumi.getter(name="min-blob-size")
    def min_blob_size(self) -> Optional[str]:
        return pulumi.get(self, "min_blob_size")

    @property
    @pulumi.getter(name="min-gc-batch-size")
    def min_gc_batch_size(self) -> Optional[str]:
        return pulumi.get(self, "min_gc_batch_size")

    @property
    @pulumi.getter(name="sample-ratio")
    def sample_ratio(self) -> Optional[float]:
        return pulumi.get(self, "sample_ratio")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigSecurity(dict):
    def __init__(__self__, *,
                 ca_path: Optional[str] = None,
                 cert_path: Optional[str] = None,
                 cipher_file: Optional[str] = None,
                 encryption: Optional[Any] = None,
                 key_path: Optional[str] = None,
                 override_ssl_target: Optional[str] = None):
        if ca_path is not None:
            pulumi.set(__self__, "ca_path", ca_path)
        if cert_path is not None:
            pulumi.set(__self__, "cert_path", cert_path)
        if cipher_file is not None:
            pulumi.set(__self__, "cipher_file", cipher_file)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)
        if override_ssl_target is not None:
            pulumi.set(__self__, "override_ssl_target", override_ssl_target)

    @property
    @pulumi.getter(name="ca-path")
    def ca_path(self) -> Optional[str]:
        return pulumi.get(self, "ca_path")

    @property
    @pulumi.getter(name="cert-path")
    def cert_path(self) -> Optional[str]:
        return pulumi.get(self, "cert_path")

    @property
    @pulumi.getter(name="cipher-file")
    def cipher_file(self) -> Optional[str]:
        return pulumi.get(self, "cipher_file")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[Any]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="key-path")
    def key_path(self) -> Optional[str]:
        return pulumi.get(self, "key_path")

    @property
    @pulumi.getter(name="override-ssl-target")
    def override_ssl_target(self) -> Optional[str]:
        return pulumi.get(self, "override_ssl_target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigServer(dict):
    def __init__(__self__, *,
                 concurrent_recv_snap_limit: Optional[int] = None,
                 concurrent_send_snap_limit: Optional[int] = None,
                 enable_request_batch: Optional[bool] = None,
                 end_point_batch_row_limit: Optional[int] = None,
                 end_point_enable_batch_if_possible: Optional[int] = None,
                 end_point_recursion_limit: Optional[int] = None,
                 end_point_request_max_handle_duration: Optional[str] = None,
                 end_point_stream_batch_row_limit: Optional[int] = None,
                 end_point_stream_channel_size: Optional[int] = None,
                 grpc_compression_type: Optional[str] = None,
                 grpc_concurrency: Optional[int] = None,
                 grpc_concurrent_stream: Optional[int] = None,
                 grpc_keepalive_time: Optional[str] = None,
                 grpc_keepalive_timeout: Optional[str] = None,
                 grpc_memory_pool_quota: Optional[str] = None,
                 grpc_raft_conn_num: Optional[int] = None,
                 grpc_stream_initial_window_size: Optional[str] = None,
                 heavy_load_threshold: Optional[int] = None,
                 heavy_load_wait_duration: Optional[str] = None,
                 labels: Optional[Mapping[str, Any]] = None,
                 request_batch_enable_cross_command: Optional[bool] = None,
                 request_batch_wait_duration: Optional[str] = None,
                 snap_max_total_size: Optional[str] = None,
                 snap_max_write_bytes_per_sec: Optional[str] = None,
                 stats_concurrency: Optional[int] = None,
                 status_thread_pool_size: Optional[str] = None):
        if concurrent_recv_snap_limit is not None:
            pulumi.set(__self__, "concurrent_recv_snap_limit", concurrent_recv_snap_limit)
        if concurrent_send_snap_limit is not None:
            pulumi.set(__self__, "concurrent_send_snap_limit", concurrent_send_snap_limit)
        if enable_request_batch is not None:
            pulumi.set(__self__, "enable_request_batch", enable_request_batch)
        if end_point_batch_row_limit is not None:
            pulumi.set(__self__, "end_point_batch_row_limit", end_point_batch_row_limit)
        if end_point_enable_batch_if_possible is not None:
            pulumi.set(__self__, "end_point_enable_batch_if_possible", end_point_enable_batch_if_possible)
        if end_point_recursion_limit is not None:
            pulumi.set(__self__, "end_point_recursion_limit", end_point_recursion_limit)
        if end_point_request_max_handle_duration is not None:
            pulumi.set(__self__, "end_point_request_max_handle_duration", end_point_request_max_handle_duration)
        if end_point_stream_batch_row_limit is not None:
            pulumi.set(__self__, "end_point_stream_batch_row_limit", end_point_stream_batch_row_limit)
        if end_point_stream_channel_size is not None:
            pulumi.set(__self__, "end_point_stream_channel_size", end_point_stream_channel_size)
        if grpc_compression_type is not None:
            pulumi.set(__self__, "grpc_compression_type", grpc_compression_type)
        if grpc_concurrency is not None:
            pulumi.set(__self__, "grpc_concurrency", grpc_concurrency)
        if grpc_concurrent_stream is not None:
            pulumi.set(__self__, "grpc_concurrent_stream", grpc_concurrent_stream)
        if grpc_keepalive_time is not None:
            pulumi.set(__self__, "grpc_keepalive_time", grpc_keepalive_time)
        if grpc_keepalive_timeout is not None:
            pulumi.set(__self__, "grpc_keepalive_timeout", grpc_keepalive_timeout)
        if grpc_memory_pool_quota is not None:
            pulumi.set(__self__, "grpc_memory_pool_quota", grpc_memory_pool_quota)
        if grpc_raft_conn_num is not None:
            pulumi.set(__self__, "grpc_raft_conn_num", grpc_raft_conn_num)
        if grpc_stream_initial_window_size is not None:
            pulumi.set(__self__, "grpc_stream_initial_window_size", grpc_stream_initial_window_size)
        if heavy_load_threshold is not None:
            pulumi.set(__self__, "heavy_load_threshold", heavy_load_threshold)
        if heavy_load_wait_duration is not None:
            pulumi.set(__self__, "heavy_load_wait_duration", heavy_load_wait_duration)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if request_batch_enable_cross_command is not None:
            pulumi.set(__self__, "request_batch_enable_cross_command", request_batch_enable_cross_command)
        if request_batch_wait_duration is not None:
            pulumi.set(__self__, "request_batch_wait_duration", request_batch_wait_duration)
        if snap_max_total_size is not None:
            pulumi.set(__self__, "snap_max_total_size", snap_max_total_size)
        if snap_max_write_bytes_per_sec is not None:
            pulumi.set(__self__, "snap_max_write_bytes_per_sec", snap_max_write_bytes_per_sec)
        if stats_concurrency is not None:
            pulumi.set(__self__, "stats_concurrency", stats_concurrency)
        if status_thread_pool_size is not None:
            pulumi.set(__self__, "status_thread_pool_size", status_thread_pool_size)

    @property
    @pulumi.getter(name="concurrent-recv-snap-limit")
    def concurrent_recv_snap_limit(self) -> Optional[int]:
        return pulumi.get(self, "concurrent_recv_snap_limit")

    @property
    @pulumi.getter(name="concurrent-send-snap-limit")
    def concurrent_send_snap_limit(self) -> Optional[int]:
        return pulumi.get(self, "concurrent_send_snap_limit")

    @property
    @pulumi.getter(name="enable-request-batch")
    def enable_request_batch(self) -> Optional[bool]:
        return pulumi.get(self, "enable_request_batch")

    @property
    @pulumi.getter(name="end-point-batch-row-limit")
    def end_point_batch_row_limit(self) -> Optional[int]:
        return pulumi.get(self, "end_point_batch_row_limit")

    @property
    @pulumi.getter(name="end-point-enable-batch-if-possible")
    def end_point_enable_batch_if_possible(self) -> Optional[int]:
        return pulumi.get(self, "end_point_enable_batch_if_possible")

    @property
    @pulumi.getter(name="end-point-recursion-limit")
    def end_point_recursion_limit(self) -> Optional[int]:
        return pulumi.get(self, "end_point_recursion_limit")

    @property
    @pulumi.getter(name="end-point-request-max-handle-duration")
    def end_point_request_max_handle_duration(self) -> Optional[str]:
        return pulumi.get(self, "end_point_request_max_handle_duration")

    @property
    @pulumi.getter(name="end-point-stream-batch-row-limit")
    def end_point_stream_batch_row_limit(self) -> Optional[int]:
        return pulumi.get(self, "end_point_stream_batch_row_limit")

    @property
    @pulumi.getter(name="end-point-stream-channel-size")
    def end_point_stream_channel_size(self) -> Optional[int]:
        return pulumi.get(self, "end_point_stream_channel_size")

    @property
    @pulumi.getter(name="grpc-compression-type")
    def grpc_compression_type(self) -> Optional[str]:
        return pulumi.get(self, "grpc_compression_type")

    @property
    @pulumi.getter(name="grpc-concurrency")
    def grpc_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "grpc_concurrency")

    @property
    @pulumi.getter(name="grpc-concurrent-stream")
    def grpc_concurrent_stream(self) -> Optional[int]:
        return pulumi.get(self, "grpc_concurrent_stream")

    @property
    @pulumi.getter(name="grpc-keepalive-time")
    def grpc_keepalive_time(self) -> Optional[str]:
        return pulumi.get(self, "grpc_keepalive_time")

    @property
    @pulumi.getter(name="grpc-keepalive-timeout")
    def grpc_keepalive_timeout(self) -> Optional[str]:
        return pulumi.get(self, "grpc_keepalive_timeout")

    @property
    @pulumi.getter(name="grpc-memory-pool-quota")
    def grpc_memory_pool_quota(self) -> Optional[str]:
        return pulumi.get(self, "grpc_memory_pool_quota")

    @property
    @pulumi.getter(name="grpc-raft-conn-num")
    def grpc_raft_conn_num(self) -> Optional[int]:
        return pulumi.get(self, "grpc_raft_conn_num")

    @property
    @pulumi.getter(name="grpc-stream-initial-window-size")
    def grpc_stream_initial_window_size(self) -> Optional[str]:
        return pulumi.get(self, "grpc_stream_initial_window_size")

    @property
    @pulumi.getter(name="heavy-load-threshold")
    def heavy_load_threshold(self) -> Optional[int]:
        return pulumi.get(self, "heavy_load_threshold")

    @property
    @pulumi.getter(name="heavy-load-wait-duration")
    def heavy_load_wait_duration(self) -> Optional[str]:
        return pulumi.get(self, "heavy_load_wait_duration")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="request-batch-enable-cross-command")
    def request_batch_enable_cross_command(self) -> Optional[bool]:
        return pulumi.get(self, "request_batch_enable_cross_command")

    @property
    @pulumi.getter(name="request-batch-wait-duration")
    def request_batch_wait_duration(self) -> Optional[str]:
        return pulumi.get(self, "request_batch_wait_duration")

    @property
    @pulumi.getter(name="snap-max-total-size")
    def snap_max_total_size(self) -> Optional[str]:
        return pulumi.get(self, "snap_max_total_size")

    @property
    @pulumi.getter(name="snap-max-write-bytes-per-sec")
    def snap_max_write_bytes_per_sec(self) -> Optional[str]:
        return pulumi.get(self, "snap_max_write_bytes_per_sec")

    @property
    @pulumi.getter(name="stats-concurrency")
    def stats_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "stats_concurrency")

    @property
    @pulumi.getter(name="status-thread-pool-size")
    def status_thread_pool_size(self) -> Optional[str]:
        return pulumi.get(self, "status_thread_pool_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigStorage(dict):
    def __init__(__self__, *,
                 block_cache: Optional['outputs.TidbClusterSpecTikvConfigStorageBlock-Cache'] = None,
                 max_key_size: Optional[int] = None,
                 reserve_space: Optional[str] = None,
                 scheduler_concurrency: Optional[int] = None,
                 scheduler_notify_capacity: Optional[int] = None,
                 scheduler_pending_write_threshold: Optional[str] = None,
                 scheduler_worker_pool_size: Optional[int] = None):
        if block_cache is not None:
            pulumi.set(__self__, "block_cache", block_cache)
        if max_key_size is not None:
            pulumi.set(__self__, "max_key_size", max_key_size)
        if reserve_space is not None:
            pulumi.set(__self__, "reserve_space", reserve_space)
        if scheduler_concurrency is not None:
            pulumi.set(__self__, "scheduler_concurrency", scheduler_concurrency)
        if scheduler_notify_capacity is not None:
            pulumi.set(__self__, "scheduler_notify_capacity", scheduler_notify_capacity)
        if scheduler_pending_write_threshold is not None:
            pulumi.set(__self__, "scheduler_pending_write_threshold", scheduler_pending_write_threshold)
        if scheduler_worker_pool_size is not None:
            pulumi.set(__self__, "scheduler_worker_pool_size", scheduler_worker_pool_size)

    @property
    @pulumi.getter(name="block-cache")
    def block_cache(self) -> Optional['outputs.TidbClusterSpecTikvConfigStorageBlock-Cache']:
        return pulumi.get(self, "block_cache")

    @property
    @pulumi.getter(name="max-key-size")
    def max_key_size(self) -> Optional[int]:
        return pulumi.get(self, "max_key_size")

    @property
    @pulumi.getter(name="reserve-space")
    def reserve_space(self) -> Optional[str]:
        return pulumi.get(self, "reserve_space")

    @property
    @pulumi.getter(name="scheduler-concurrency")
    def scheduler_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "scheduler_concurrency")

    @property
    @pulumi.getter(name="scheduler-notify-capacity")
    def scheduler_notify_capacity(self) -> Optional[int]:
        return pulumi.get(self, "scheduler_notify_capacity")

    @property
    @pulumi.getter(name="scheduler-pending-write-threshold")
    def scheduler_pending_write_threshold(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_pending_write_threshold")

    @property
    @pulumi.getter(name="scheduler-worker-pool-size")
    def scheduler_worker_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "scheduler_worker_pool_size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvConfigStorageBlock-Cache(dict):
    def __init__(__self__, *,
                 capacity: Optional[str] = None,
                 high_pri_pool_ratio: Optional[float] = None,
                 memory_allocator: Optional[str] = None,
                 num_shard_bits: Optional[int] = None,
                 shared: Optional[bool] = None,
                 strict_capacity_limit: Optional[bool] = None):
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if high_pri_pool_ratio is not None:
            pulumi.set(__self__, "high_pri_pool_ratio", high_pri_pool_ratio)
        if memory_allocator is not None:
            pulumi.set(__self__, "memory_allocator", memory_allocator)
        if num_shard_bits is not None:
            pulumi.set(__self__, "num_shard_bits", num_shard_bits)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if strict_capacity_limit is not None:
            pulumi.set(__self__, "strict_capacity_limit", strict_capacity_limit)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[str]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="high-pri-pool-ratio")
    def high_pri_pool_ratio(self) -> Optional[float]:
        return pulumi.get(self, "high_pri_pool_ratio")

    @property
    @pulumi.getter(name="memory-allocator")
    def memory_allocator(self) -> Optional[str]:
        return pulumi.get(self, "memory_allocator")

    @property
    @pulumi.getter(name="num-shard-bits")
    def num_shard_bits(self) -> Optional[int]:
        return pulumi.get(self, "num_shard_bits")

    @property
    @pulumi.getter
    def shared(self) -> Optional[bool]:
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter(name="strict-capacity-limit")
    def strict_capacity_limit(self) -> Optional[bool]:
        return pulumi.get(self, "strict_capacity_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbClusterSpecTikvEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbClusterSpecTikvEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbClusterSpecTikvEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbClusterSpecTikvEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbClusterSpecTikvEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbClusterSpecTikvEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbClusterSpecTikvEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbClusterSpecTikvEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbClusterSpecTikvEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbClusterSpecTikvEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvPodSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbClusterSpecTikvPodSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.TidbClusterSpecTikvPodSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.TidbClusterSpecTikvPodSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbClusterSpecTikvPodSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.TidbClusterSpecTikvPodSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbClusterSpecTikvPodSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvPodSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvPodSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvPodSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTikvTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbClusterSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbInitializerSpec(dict):
    def __init__(__self__, *,
                 cluster: 'outputs.TidbInitializerSpecCluster',
                 image: str,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbInitializerSpecImagePullSecrets']] = None,
                 init_sql: Optional[str] = None,
                 init_sql_config_map: Optional[str] = None,
                 password_secret: Optional[str] = None,
                 permit_host: Optional[str] = None,
                 resources: Optional['outputs.TidbInitializerSpecResources'] = None,
                 timezone: Optional[str] = None,
                 tls_client_secret_name: Optional[str] = None):
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_sql is not None:
            pulumi.set(__self__, "init_sql", init_sql)
        if init_sql_config_map is not None:
            pulumi.set(__self__, "init_sql_config_map", init_sql_config_map)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if permit_host is not None:
            pulumi.set(__self__, "permit_host", permit_host)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tls_client_secret_name is not None:
            pulumi.set(__self__, "tls_client_secret_name", tls_client_secret_name)

    @property
    @pulumi.getter
    def cluster(self) -> 'outputs.TidbInitializerSpecCluster':
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbInitializerSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="initSql")
    def init_sql(self) -> Optional[str]:
        return pulumi.get(self, "init_sql")

    @property
    @pulumi.getter(name="initSqlConfigMap")
    def init_sql_config_map(self) -> Optional[str]:
        return pulumi.get(self, "init_sql_config_map")

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[str]:
        return pulumi.get(self, "password_secret")

    @property
    @pulumi.getter(name="permitHost")
    def permit_host(self) -> Optional[str]:
        return pulumi.get(self, "permit_host")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbInitializerSpecResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="tlsClientSecretName")
    def tls_client_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbInitializerSpecCluster(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbInitializerSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbInitializerSpecResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpec(dict):
    def __init__(__self__, *,
                 clusters: Sequence['outputs.TidbMonitorSpecClusters'],
                 initializer: Any,
                 prometheus: Any,
                 reloader: Any,
                 additional_containers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainers']] = None,
                 alert_manager_rules_version: Optional[str] = None,
                 alertmanager_url: Optional[str] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 grafana: Optional[Any] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.TidbMonitorSpecImagePullSecrets']] = None,
                 kube_prometheus_url: Optional[str] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 persistent: Optional[bool] = None,
                 pv_reclaim_policy: Optional[str] = None,
                 storage: Optional[str] = None,
                 storage_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.TidbMonitorSpecTolerations']] = None):
        pulumi.set(__self__, "clusters", clusters)
        pulumi.set(__self__, "initializer", initializer)
        pulumi.set(__self__, "prometheus", prometheus)
        pulumi.set(__self__, "reloader", reloader)
        if additional_containers is not None:
            pulumi.set(__self__, "additional_containers", additional_containers)
        if alert_manager_rules_version is not None:
            pulumi.set(__self__, "alert_manager_rules_version", alert_manager_rules_version)
        if alertmanager_url is not None:
            pulumi.set(__self__, "alertmanager_url", alertmanager_url)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if kube_prometheus_url is not None:
            pulumi.set(__self__, "kube_prometheus_url", kube_prometheus_url)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if pv_reclaim_policy is not None:
            pulumi.set(__self__, "pv_reclaim_policy", pv_reclaim_policy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.TidbMonitorSpecClusters']:
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def initializer(self) -> Any:
        return pulumi.get(self, "initializer")

    @property
    @pulumi.getter
    def prometheus(self) -> Any:
        return pulumi.get(self, "prometheus")

    @property
    @pulumi.getter
    def reloader(self) -> Any:
        return pulumi.get(self, "reloader")

    @property
    @pulumi.getter(name="additionalContainers")
    def additional_containers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainers']]:
        return pulumi.get(self, "additional_containers")

    @property
    @pulumi.getter(name="alertManagerRulesVersion")
    def alert_manager_rules_version(self) -> Optional[str]:
        return pulumi.get(self, "alert_manager_rules_version")

    @property
    @pulumi.getter(name="alertmanagerURL")
    def alertmanager_url(self) -> Optional[str]:
        return pulumi.get(self, "alertmanager_url")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def grafana(self) -> Optional[Any]:
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.TidbMonitorSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="kubePrometheusURL")
    def kube_prometheus_url(self) -> Optional[str]:
        return pulumi.get(self, "kube_prometheus_url")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def persistent(self) -> Optional[bool]:
        return pulumi.get(self, "persistent")

    @property
    @pulumi.getter(name="pvReclaimPolicy")
    def pv_reclaim_policy(self) -> Optional[str]:
        return pulumi.get(self, "pv_reclaim_policy")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TidbMonitorSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersPorts']] = None,
                 readiness_probe: Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbe'] = None,
                 resources: Optional['outputs.TidbMonitorSpecAdditionalContainersResources'] = None,
                 security_context: Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[Any] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[Any]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, Any]] = None,
                 requests: Optional[Mapping[str, Any]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecAdditionalContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecClusters(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TidbMonitorSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



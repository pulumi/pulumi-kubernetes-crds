// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Pingcap.V1Alpha1
{

    public class TidbClusterSpecTikvConfigRaftstoreArgs : Pulumi.ResourceArgs
    {
        [Input("abnormal-leader-missing-duration")]
        public Input<string>? Abnormal-leader-missing-duration { get; set; }

        [Input("allow-remove-leader")]
        public Input<bool>? Allow-remove-leader { get; set; }

        [Input("apply-early")]
        public Input<bool>? Apply-early { get; set; }

        [Input("apply-max-batch-size")]
        public Input<int>? Apply-max-batch-size { get; set; }

        [Input("apply-pool-size")]
        public Input<int>? Apply-pool-size { get; set; }

        [Input("apply-yield-duration")]
        public Input<string>? Apply-yield-duration { get; set; }

        [Input("clean-stale-peer-delay")]
        public Input<string>? Clean-stale-peer-delay { get; set; }

        [Input("cleanup-import-sst-interval")]
        public Input<string>? Cleanup-import-sst-interval { get; set; }

        [Input("consistency-check-interval")]
        public Input<string>? Consistency-check-interval { get; set; }

        [Input("dev-assert")]
        public Input<bool>? Dev-assert { get; set; }

        [Input("hibernate-regions")]
        public Input<bool>? Hibernate-regions { get; set; }

        [Input("leader-transfer-max-log-lag")]
        public Input<int>? Leader-transfer-max-log-lag { get; set; }

        [Input("lock-cf-compact-bytes-threshold")]
        public Input<string>? Lock-cf-compact-bytes-threshold { get; set; }

        [Input("lock-cf-compact-interval")]
        public Input<string>? Lock-cf-compact-interval { get; set; }

        [Input("max-leader-missing-duration")]
        public Input<string>? Max-leader-missing-duration { get; set; }

        [Input("max-peer-down-duration")]
        public Input<string>? Max-peer-down-duration { get; set; }

        [Input("merge-check-tick-interval")]
        public Input<string>? Merge-check-tick-interval { get; set; }

        [Input("merge-max-log-gap")]
        public Input<int>? Merge-max-log-gap { get; set; }

        [Input("messages-per-tick")]
        public Input<int>? Messages-per-tick { get; set; }

        [Input("notify-capacity")]
        public Input<int>? Notify-capacity { get; set; }

        [Input("pd-heartbeat-tick-interval")]
        public Input<string>? Pd-heartbeat-tick-interval { get; set; }

        [Input("pd-store-heartbeat-tick-interval")]
        public Input<string>? Pd-store-heartbeat-tick-interval { get; set; }

        [Input("peer-stale-state-check-interval")]
        public Input<string>? Peer-stale-state-check-interval { get; set; }

        [Input("perf-level")]
        public Input<int>? Perf-level { get; set; }

        [Input("prevote")]
        public Input<bool>? Prevote { get; set; }

        [Input("raft-base-tick-interval")]
        public Input<string>? Raft-base-tick-interval { get; set; }

        [Input("raft-election-timeout-ticks")]
        public Input<int>? Raft-election-timeout-ticks { get; set; }

        [Input("raft-entry-cache-life-time")]
        public Input<string>? Raft-entry-cache-life-time { get; set; }

        [Input("raft-entry-max-size")]
        public Input<string>? Raft-entry-max-size { get; set; }

        [Input("raft-heartbeat-ticks")]
        public Input<int>? Raft-heartbeat-ticks { get; set; }

        [Input("raft-log-gc-count-limit")]
        public Input<int>? Raft-log-gc-count-limit { get; set; }

        [Input("raft-log-gc-size-limit")]
        public Input<string>? Raft-log-gc-size-limit { get; set; }

        [Input("raft-log-gc-threshold")]
        public Input<int>? Raft-log-gc-threshold { get; set; }

        [Input("raft-log-gc-tick-interval")]
        public Input<string>? Raft-log-gc-tick-interval { get; set; }

        [Input("raft-max-inflight-msgs")]
        public Input<int>? Raft-max-inflight-msgs { get; set; }

        [Input("raft-max-size-per-msg")]
        public Input<string>? Raft-max-size-per-msg { get; set; }

        [Input("raft-reject-transfer-leader-duration")]
        public Input<string>? Raft-reject-transfer-leader-duration { get; set; }

        [Input("raft-store-max-leader-lease")]
        public Input<string>? Raft-store-max-leader-lease { get; set; }

        [Input("region-compact-check-interval")]
        public Input<string>? Region-compact-check-interval { get; set; }

        [Input("region-compact-check-step")]
        public Input<int>? Region-compact-check-step { get; set; }

        [Input("region-compact-min-tombstones")]
        public Input<int>? Region-compact-min-tombstones { get; set; }

        [Input("region-compact-tombstones-percent")]
        public Input<int>? Region-compact-tombstones-percent { get; set; }

        [Input("region-split-check-diff")]
        public Input<string>? Region-split-check-diff { get; set; }

        [Input("report-region-flow-interval")]
        public Input<string>? Report-region-flow-interval { get; set; }

        [Input("right-derive-when-split")]
        public Input<bool>? Right-derive-when-split { get; set; }

        [Input("snap-apply-batch-size")]
        public Input<string>? Snap-apply-batch-size { get; set; }

        [Input("snap-gc-timeout")]
        public Input<string>? Snap-gc-timeout { get; set; }

        [Input("snap-mgr-gc-tick-interval")]
        public Input<string>? Snap-mgr-gc-tick-interval { get; set; }

        [Input("split-region-check-tick-interval")]
        public Input<string>? Split-region-check-tick-interval { get; set; }

        [Input("store-max-batch-size")]
        public Input<int>? Store-max-batch-size { get; set; }

        [Input("store-pool-size")]
        public Input<int>? Store-pool-size { get; set; }

        [Input("store-reschedule-duration")]
        public Input<string>? Store-reschedule-duration { get; set; }

        [Input("sync-log")]
        public Input<bool>? Sync-log { get; set; }

        [Input("use-delete-range")]
        public Input<bool>? Use-delete-range { get; set; }

        public TidbClusterSpecTikvConfigRaftstoreArgs()
        {
        }
    }
}

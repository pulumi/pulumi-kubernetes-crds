// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace pingcap {
    export namespace v1alpha1 {
        export interface BackupScheduleSpec {
            backupTemplate: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplate>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecImagePullSecrets>[]>;
            maxBackups?: pulumi.Input<number>;
            maxReservedTime?: pulumi.Input<string>;
            pause?: pulumi.Input<boolean>;
            schedule: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            storageSize?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplate {
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinity>;
            backupType?: pulumi.Input<string>;
            br?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateBr>;
            cleanData?: pulumi.Input<boolean>;
            dumpling?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateDumpling>;
            from?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateFrom>;
            gcs?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateGcs>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateImagePullSecrets>[]>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateResources>;
            s3?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateS3>;
            serviceAccount?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            storageSize?: pulumi.Input<string>;
            tikvGCLifeTime?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateTolerations>[]>;
            useKMS?: pulumi.Input<boolean>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupScheduleSpecBackupTemplateAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateBr {
            checksum?: pulumi.Input<boolean>;
            cluster: pulumi.Input<string>;
            clusterNamespace?: pulumi.Input<string>;
            concurrency?: pulumi.Input<number>;
            db?: pulumi.Input<string>;
            logLevel?: pulumi.Input<string>;
            onLine?: pulumi.Input<boolean>;
            rateLimit?: pulumi.Input<number>;
            sendCredToTikv?: pulumi.Input<boolean>;
            statusAddr?: pulumi.Input<string>;
            table?: pulumi.Input<string>;
            timeAgo?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateDumpling {
            options?: pulumi.Input<pulumi.Input<string>[]>;
            tableFilter?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupScheduleSpecBackupTemplateFrom {
            host: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            secretName: pulumi.Input<string>;
            tlsClientSecretName?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateGcs {
            bucket?: pulumi.Input<string>;
            bucketAcl?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            objectAcl?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            projectId: pulumi.Input<string>;
            secretName: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupScheduleSpecBackupTemplateS3 {
            acl?: pulumi.Input<string>;
            bucket?: pulumi.Input<string>;
            endpoint?: pulumi.Input<string>;
            options?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            provider: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            sse?: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecBackupTemplateTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface BackupScheduleSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface BackupSpec {
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinity>;
            backupType?: pulumi.Input<string>;
            br?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecBr>;
            cleanData?: pulumi.Input<boolean>;
            dumpling?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecDumpling>;
            from?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecFrom>;
            gcs?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecGcs>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecImagePullSecrets>[]>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecResources>;
            s3?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecS3>;
            serviceAccount?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            storageSize?: pulumi.Input<string>;
            tikvGCLifeTime?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecTolerations>[]>;
            useKMS?: pulumi.Input<boolean>;
        }

        export interface BackupSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinity>;
        }

        export interface BackupSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecBr {
            checksum?: pulumi.Input<boolean>;
            cluster: pulumi.Input<string>;
            clusterNamespace?: pulumi.Input<string>;
            concurrency?: pulumi.Input<number>;
            db?: pulumi.Input<string>;
            logLevel?: pulumi.Input<string>;
            onLine?: pulumi.Input<boolean>;
            rateLimit?: pulumi.Input<number>;
            sendCredToTikv?: pulumi.Input<boolean>;
            statusAddr?: pulumi.Input<string>;
            table?: pulumi.Input<string>;
            timeAgo?: pulumi.Input<string>;
        }

        export interface BackupSpecDumpling {
            options?: pulumi.Input<pulumi.Input<string>[]>;
            tableFilter?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecFrom {
            host: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            secretName: pulumi.Input<string>;
            tlsClientSecretName?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface BackupSpecGcs {
            bucket?: pulumi.Input<string>;
            bucketAcl?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            objectAcl?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            projectId: pulumi.Input<string>;
            secretName: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface BackupSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface BackupSpecResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface BackupSpecS3 {
            acl?: pulumi.Input<string>;
            bucket?: pulumi.Input<string>;
            endpoint?: pulumi.Input<string>;
            options?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            provider: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            sse?: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface BackupSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface RestoreSpec {
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinity>;
            backupType?: pulumi.Input<string>;
            br?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecBr>;
            gcs?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecGcs>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecImagePullSecrets>[]>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecResources>;
            s3?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecS3>;
            serviceAccount?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            storageSize?: pulumi.Input<string>;
            tikvGCLifeTime?: pulumi.Input<string>;
            to?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecTo>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecTolerations>[]>;
            useKMS?: pulumi.Input<boolean>;
        }

        export interface RestoreSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinity>;
        }

        export interface RestoreSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface RestoreSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface RestoreSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface RestoreSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface RestoreSpecBr {
            checksum?: pulumi.Input<boolean>;
            cluster: pulumi.Input<string>;
            clusterNamespace?: pulumi.Input<string>;
            concurrency?: pulumi.Input<number>;
            db?: pulumi.Input<string>;
            logLevel?: pulumi.Input<string>;
            onLine?: pulumi.Input<boolean>;
            rateLimit?: pulumi.Input<number>;
            sendCredToTikv?: pulumi.Input<boolean>;
            statusAddr?: pulumi.Input<string>;
            table?: pulumi.Input<string>;
            timeAgo?: pulumi.Input<string>;
        }

        export interface RestoreSpecGcs {
            bucket?: pulumi.Input<string>;
            bucketAcl?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            objectAcl?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            projectId: pulumi.Input<string>;
            secretName: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface RestoreSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface RestoreSpecResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface RestoreSpecS3 {
            acl?: pulumi.Input<string>;
            bucket?: pulumi.Input<string>;
            endpoint?: pulumi.Input<string>;
            options?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            prefix?: pulumi.Input<string>;
            provider: pulumi.Input<string>;
            region?: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            sse?: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
        }

        export interface RestoreSpecTo {
            host: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            secretName: pulumi.Input<string>;
            tlsClientSecretName?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface RestoreSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerSpec {
            cluster: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecCluster>;
            metricsUrl?: pulumi.Input<string>;
            monitor?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecMonitor>;
            tidb?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidb>;
            tikv?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikv>;
        }

        export interface TidbClusterAutoScalerSpecCluster {
            name: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerSpecMonitor {
            grafanaEnabled?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerSpecTidb {
            externalEndpoint?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpoint>;
            maxReplicas: pulumi.Input<number>;
            metrics?: pulumi.Input<any[]>;
            metricsTimeDuration?: pulumi.Input<string>;
            minReplicas?: pulumi.Input<number>;
            scaleInIntervalSeconds?: pulumi.Input<number>;
            scaleOutIntervalSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpoint {
            host: pulumi.Input<string>;
            path: pulumi.Input<string>;
            port: pulumi.Input<number>;
            tlsSecret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret>;
        }

        export interface TidbClusterAutoScalerSpecTidbExternalEndpointTlsSecret {
            name: pulumi.Input<string>;
            namespace: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerSpecTikv {
            externalEndpoint?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpoint>;
            maxReplicas: pulumi.Input<number>;
            metrics?: pulumi.Input<any[]>;
            metricsTimeDuration?: pulumi.Input<string>;
            minReplicas?: pulumi.Input<number>;
            scaleInIntervalSeconds?: pulumi.Input<number>;
            scaleOutIntervalSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpoint {
            host: pulumi.Input<string>;
            path: pulumi.Input<string>;
            port: pulumi.Input<number>;
            tlsSecret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret>;
        }

        export interface TidbClusterAutoScalerSpecTikvExternalEndpointTlsSecret {
            name: pulumi.Input<string>;
            namespace: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerStatus {
            tidb?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTidb>;
            tikv?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTikv>;
        }

        export interface TidbClusterAutoScalerStatusTidb {
            currentReplicas: pulumi.Input<number>;
            lastAutoScalingTimestamp?: pulumi.Input<string>;
            metrics?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTidbMetrics>[]>;
            recommendedReplicas?: pulumi.Input<number>;
        }

        export interface TidbClusterAutoScalerStatusTidbMetrics {
            availableStorage?: pulumi.Input<string>;
            baselineAvailableStorage?: pulumi.Input<string>;
            capacityStorage?: pulumi.Input<string>;
            currentValue?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            storagePressure?: pulumi.Input<boolean>;
            storagePressureStartTime?: pulumi.Input<string>;
            thresholdValue?: pulumi.Input<string>;
        }

        export interface TidbClusterAutoScalerStatusTikv {
            currentReplicas: pulumi.Input<number>;
            lastAutoScalingTimestamp?: pulumi.Input<string>;
            metrics?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterAutoScalerStatusTikvMetrics>[]>;
            recommendedReplicas?: pulumi.Input<number>;
        }

        export interface TidbClusterAutoScalerStatusTikvMetrics {
            availableStorage?: pulumi.Input<string>;
            baselineAvailableStorage?: pulumi.Input<string>;
            capacityStorage?: pulumi.Input<string>;
            currentValue?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            storagePressure?: pulumi.Input<boolean>;
            storagePressureStartTime?: pulumi.Input<string>;
            thresholdValue?: pulumi.Input<string>;
        }

        export interface TidbClusterSpec {
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            configUpdateStrategy?: pulumi.Input<string>;
            discovery?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecDiscovery>;
            enableDynamicConfiguration?: pulumi.Input<boolean>;
            enablePVReclaim?: pulumi.Input<boolean>;
            helper?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecHelper>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecImagePullSecrets>[]>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            paused?: pulumi.Input<boolean>;
            pd: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPd>;
            priorityClassName?: pulumi.Input<string>;
            pump?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPump>;
            pvReclaimPolicy?: pulumi.Input<string>;
            schedulerName?: pulumi.Input<string>;
            ticdc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdc>;
            tidb: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidb>;
            tiflash?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflash>;
            tikv: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikv>;
            timezone?: pulumi.Input<string>;
            tlsCluster?: any;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecDiscovery {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecHelper {
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPd {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfig>;
            configUpdateStrategy?: pulumi.Input<string>;
            dataSubDir?: pulumi.Input<string>;
            enableDashboardInternalProxy?: pulumi.Input<boolean>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdImagePullSecrets>[]>;
            limits?: pulumi.Input<{[key: string]: any}>;
            maxFailoverCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            service?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdService>;
            storageClassName?: pulumi.Input<string>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tlsClientSecretName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPdAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPdAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPdAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPdAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPdAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPdConfig {
            auto-compaction-mode?: pulumi.Input<string>;
            auto-compaction-retention-v2?: pulumi.Input<string>;
            cluster-version?: pulumi.Input<string>;
            dashboard?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigDashboard>;
            election-interval?: pulumi.Input<string>;
            enable-grpc-gateway?: pulumi.Input<boolean>;
            enable-prevote?: pulumi.Input<boolean>;
            force-new-cluster?: pulumi.Input<boolean>;
            label-property?: pulumi.Input<{[key: string]: any}>;
            lease?: pulumi.Input<number>;
            log?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigLog>;
            log-file?: pulumi.Input<string>;
            log-level?: pulumi.Input<string>;
            metric?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigMetric>;
            namespace?: pulumi.Input<{[key: string]: any}>;
            namespace-classifier?: pulumi.Input<string>;
            pd-server?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigPd-Server>;
            quota-backend-bytes?: pulumi.Input<string>;
            replication?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigReplication>;
            schedule?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigSchedule>;
            security?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigSecurity>;
            tikv-interval?: pulumi.Input<string>;
            tso-save-interval?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigDashboard {
            disable-telemetry?: pulumi.Input<boolean>;
            internal-proxy?: pulumi.Input<boolean>;
            public-path-prefix?: pulumi.Input<string>;
            tidb-cacert-path?: pulumi.Input<string>;
            tidb-cert-path?: pulumi.Input<string>;
            tidb-key-path?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigLog {
            development?: pulumi.Input<boolean>;
            disable-caller?: pulumi.Input<boolean>;
            disable-error-verbose?: pulumi.Input<boolean>;
            disable-stacktrace?: pulumi.Input<boolean>;
            disable-timestamp?: pulumi.Input<boolean>;
            file?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigLogFile>;
            format?: pulumi.Input<string>;
            level?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigLogFile {
            filename?: pulumi.Input<string>;
            log-rotate?: pulumi.Input<boolean>;
            max-backups?: pulumi.Input<number>;
            max-days?: pulumi.Input<number>;
            max-size?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdConfigMetric {
            address?: pulumi.Input<string>;
            interval?: pulumi.Input<string>;
            job?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigPd-Server {
            metric-storage?: pulumi.Input<string>;
            use-region-storage?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigReplication {
            enable-placement-rules?: pulumi.Input<string>;
            max-replicas?: pulumi.Input<number>;
            strictly-match-label?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigSchedule {
            disable-location-replacement?: pulumi.Input<string>;
            disable-make-up-replica?: pulumi.Input<string>;
            disable-namespace-relocation?: pulumi.Input<string>;
            disable-raft-learner?: pulumi.Input<string>;
            disable-remove-down-replica?: pulumi.Input<string>;
            disable-remove-extra-replica?: pulumi.Input<string>;
            disable-replace-offline-replica?: pulumi.Input<string>;
            enable-cross-table-merge?: pulumi.Input<string>;
            enable-one-way-merge?: pulumi.Input<string>;
            high-space-ratio?: pulumi.Input<number>;
            hot-region-cache-hits-threshold?: pulumi.Input<number>;
            hot-region-schedule-limit?: pulumi.Input<number>;
            leader-schedule-limit?: pulumi.Input<number>;
            low-space-ratio?: pulumi.Input<number>;
            max-merge-region-keys?: pulumi.Input<number>;
            max-merge-region-size?: pulumi.Input<number>;
            max-pending-peer-count?: pulumi.Input<number>;
            max-snapshot-count?: pulumi.Input<number>;
            max-store-down-time?: pulumi.Input<string>;
            merge-schedule-limit?: pulumi.Input<number>;
            patrol-region-interval?: pulumi.Input<string>;
            region-schedule-limit?: pulumi.Input<number>;
            replica-schedule-limit?: pulumi.Input<number>;
            schedulers-payload?: pulumi.Input<{[key: string]: any}>;
            schedulers-v2?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdConfigScheduleSchedulers-V2>[]>;
            split-merge-interval?: pulumi.Input<string>;
            tolerant-size-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPdConfigScheduleSchedulers-V2 {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            disable?: pulumi.Input<boolean>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdConfigSecurity {
            cacert-path?: pulumi.Input<string>;
            cert-path?: pulumi.Input<string>;
            key-path?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFrom>;
        }

        export interface TidbClusterSpecPdEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecPdEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPdImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPdPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecPdPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdService {
            annotations?: pulumi.Input<{[key: string]: any}>;
            clusterIP?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            portName?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPdTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPump {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            config?: pulumi.Input<{[key: string]: any}>;
            configUpdateStrategy?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpImagePullSecrets>[]>;
            limits?: pulumi.Input<{[key: string]: any}>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecPumpAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecPumpAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecPumpEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFrom>;
        }

        export interface TidbClusterSpecPumpEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecPumpEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecPumpImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecPumpPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecPumpPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecPumpTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdc {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcConfig>;
            configUpdateStrategy?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcImagePullSecrets>[]>;
            limits?: pulumi.Input<{[key: string]: any}>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            serviceAccount?: pulumi.Input<string>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTicdcAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTicdcAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTicdcConfig {
            gcTTL?: pulumi.Input<number>;
            logFile?: pulumi.Input<string>;
            logLevel?: pulumi.Input<string>;
            timezone?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFrom>;
        }

        export interface TidbClusterSpecTicdcEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTicdcEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTicdcImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTicdcPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTicdcTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidb {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            binlogEnabled?: pulumi.Input<boolean>;
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfig>;
            configUpdateStrategy?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbImagePullSecrets>[]>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecycle>;
            limits?: pulumi.Input<{[key: string]: any}>;
            maxFailoverCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            plugins?: pulumi.Input<pulumi.Input<string>[]>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            separateSlowLog?: pulumi.Input<boolean>;
            service?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbService>;
            slowLogTailer?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbSlowLogTailer>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tlsClient?: any;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTidbAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbConfig {
            alter-primary-key?: pulumi.Input<boolean>;
            binlog?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigBinlog>;
            check-mb4-value-in-utf8?: pulumi.Input<boolean>;
            compatible-kill-query?: pulumi.Input<boolean>;
            cors?: pulumi.Input<string>;
            delay-clean-table-lock?: pulumi.Input<number>;
            enable-batch-dml?: pulumi.Input<boolean>;
            enable-dynamic-config?: pulumi.Input<boolean>;
            enable-streaming?: pulumi.Input<boolean>;
            enable-table-lock?: pulumi.Input<boolean>;
            enable-telemetry?: pulumi.Input<boolean>;
            experimental?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigExperimental>;
            isolation-read?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigIsolation-Read>;
            lease?: pulumi.Input<string>;
            log?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigLog>;
            lower-case-table-names?: pulumi.Input<number>;
            max-server-connections?: pulumi.Input<number>;
            mem-quota-query?: pulumi.Input<number>;
            new_collations_enabled_on_first_bootstrap?: pulumi.Input<boolean>;
            oom-action?: pulumi.Input<string>;
            oom-use-tmp-storage?: pulumi.Input<boolean>;
            opentracing?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigOpentracing>;
            performance?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigPerformance>;
            pessimistic-txn?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigPessimistic-Txn>;
            plugin?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigPlugin>;
            prepared-plan-cache?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigPrepared-Plan-Cache>;
            proxy-protocol?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigProxy-Protocol>;
            repair-mode?: pulumi.Input<boolean>;
            repair-table-list?: pulumi.Input<pulumi.Input<string>[]>;
            run-ddl?: pulumi.Input<boolean>;
            security?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigSecurity>;
            socket?: pulumi.Input<string>;
            split-region-max-num?: pulumi.Input<number>;
            split-table?: pulumi.Input<boolean>;
            status?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigStatus>;
            stmt-summary?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigStmt-Summary>;
            tikv-client?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigTikv-Client>;
            tmp-storage-path?: pulumi.Input<string>;
            tmp-storage-quota?: pulumi.Input<number>;
            token-limit?: pulumi.Input<number>;
            treat-old-version-utf8-as-utf8mb4?: pulumi.Input<boolean>;
            txn-local-latches?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigTxn-Local-Latches>;
        }

        export interface TidbClusterSpecTidbConfigBinlog {
            binlog-socket?: pulumi.Input<string>;
            enable?: pulumi.Input<boolean>;
            ignore-error?: pulumi.Input<boolean>;
            strategy?: pulumi.Input<string>;
            write-timeout?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigExperimental {
            allow-auto-random?: pulumi.Input<boolean>;
            allow-expression-index?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbConfigIsolation-Read {
            engines?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbConfigLog {
            disable-timestamp?: pulumi.Input<boolean>;
            enable-error-stack?: pulumi.Input<boolean>;
            enable-slow-log?: pulumi.Input<boolean>;
            enable-timestamp?: pulumi.Input<boolean>;
            expensive-threshold?: pulumi.Input<number>;
            file?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigLogFile>;
            format?: pulumi.Input<string>;
            level?: pulumi.Input<string>;
            query-log-max-len?: pulumi.Input<number>;
            record-plan-in-slow-log?: pulumi.Input<number>;
            slow-query-file?: pulumi.Input<string>;
            slow-threshold?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigLogFile {
            filename?: pulumi.Input<string>;
            log-rotate?: pulumi.Input<boolean>;
            max-backups?: pulumi.Input<number>;
            max-days?: pulumi.Input<number>;
            max-size?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigOpentracing {
            enable?: pulumi.Input<boolean>;
            reporter?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigOpentracingReporter>;
            rpc-metrics?: pulumi.Input<boolean>;
            sampler?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbConfigOpentracingSampler>;
        }

        export interface TidbClusterSpecTidbConfigOpentracingReporter {
            buffer-flush-interval?: pulumi.Input<number>;
            local-agent-host-port?: pulumi.Input<string>;
            log-spans?: pulumi.Input<boolean>;
            queue-size?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigOpentracingSampler {
            max-operations?: pulumi.Input<number>;
            param?: pulumi.Input<number>;
            sampling-refresh-interval?: pulumi.Input<number>;
            sampling-server-url?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigPerformance {
            agg-push-down-join?: pulumi.Input<boolean>;
            bind-info-lease?: pulumi.Input<string>;
            committer-concurrency?: pulumi.Input<number>;
            cross-join?: pulumi.Input<boolean>;
            feedback-probability?: pulumi.Input<number>;
            force-priority?: pulumi.Input<string>;
            max-memory?: pulumi.Input<number>;
            max-procs?: pulumi.Input<number>;
            max-txn-ttl?: pulumi.Input<number>;
            pseudo-estimate-ratio?: pulumi.Input<number>;
            query-feedback-limit?: pulumi.Input<number>;
            run-auto-analyze?: pulumi.Input<boolean>;
            stats-lease?: pulumi.Input<string>;
            stmt-count-limit?: pulumi.Input<number>;
            tcp-keep-alive?: pulumi.Input<boolean>;
            txn-entry-count-limit?: pulumi.Input<number>;
            txn-total-size-limit?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigPessimistic-Txn {
            enable?: pulumi.Input<boolean>;
            max-retry-count?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigPlugin {
            dir?: pulumi.Input<string>;
            load?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigPrepared-Plan-Cache {
            capacity?: pulumi.Input<number>;
            enabled?: pulumi.Input<boolean>;
            memory-guard-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigProxy-Protocol {
            header-timeout?: pulumi.Input<number>;
            networks?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigSecurity {
            cluster-ssl-ca?: pulumi.Input<string>;
            cluster-ssl-cert?: pulumi.Input<string>;
            cluster-ssl-key?: pulumi.Input<string>;
            skip-grant-table?: pulumi.Input<boolean>;
            ssl-ca?: pulumi.Input<string>;
            ssl-cert?: pulumi.Input<string>;
            ssl-key?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigStatus {
            metrics-addr?: pulumi.Input<string>;
            metrics-interval?: pulumi.Input<number>;
            record-db-qps?: pulumi.Input<boolean>;
            report-status?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbConfigStmt-Summary {
            enable?: pulumi.Input<boolean>;
            enable-internal-query?: pulumi.Input<boolean>;
            history-size?: pulumi.Input<number>;
            max-sql-length?: pulumi.Input<number>;
            max-stmt-count?: pulumi.Input<number>;
            refresh-interval?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTidbConfigTikv-Client {
            batch-wait-size?: pulumi.Input<number>;
            commit-timeout?: pulumi.Input<string>;
            copr-cache?: any;
            grpc-connection-count?: pulumi.Input<number>;
            grpc-keepalive-time?: pulumi.Input<number>;
            grpc-keepalive-timeout?: pulumi.Input<number>;
            max-batch-size?: pulumi.Input<number>;
            max-batch-wait-time?: pulumi.Input<number>;
            max-txn-time-use?: pulumi.Input<number>;
            overload-threshold?: pulumi.Input<number>;
            region-cache-ttl?: pulumi.Input<number>;
            store-limit?: pulumi.Input<number>;
            store-liveness-timeout?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbConfigTxn-Local-Latches {
            capacity?: pulumi.Input<number>;
            enabled?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFrom>;
        }

        export interface TidbClusterSpecTidbEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTidbEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTidbImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStop>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecTidbLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecTidbLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecTidbLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecTidbLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecTidbPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTidbPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTidbPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbService {
            exposeStatus?: pulumi.Input<boolean>;
            externalTrafficPolicy?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTidbSlowLogTailer {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTidbTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflash {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfig>;
            configUpdateStrategy?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashImagePullSecrets>[]>;
            limits?: pulumi.Input<{[key: string]: any}>;
            logTailer?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashLogTailer>;
            maxFailoverCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            privileged?: pulumi.Input<boolean>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            serviceAccount?: pulumi.Input<string>;
            storageClaims: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageClaims>[]>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTiflashAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTiflashConfig {
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfigConfig>;
        }

        export interface TidbClusterSpecTiflashConfigConfig {
            flash?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfigConfigFlash>;
            logger?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfigConfigLogger>;
            mark_cache_size?: pulumi.Input<number>;
            minmax_index_cache_size?: pulumi.Input<number>;
            path_realtime_mode?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashConfigConfigFlash {
            compact_log_min_period?: pulumi.Input<number>;
            flash_cluster?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashConfigConfigFlashFlash_cluster>;
            overlap_threshold?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashConfigConfigFlashFlash_cluster {
            master_ttl?: pulumi.Input<number>;
            refresh_interval?: pulumi.Input<number>;
            update_rule_interval?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTiflashConfigConfigLogger {
            count?: pulumi.Input<number>;
            level?: pulumi.Input<string>;
            size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFrom>;
        }

        export interface TidbClusterSpecTiflashEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTiflashEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTiflashImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashLogTailer {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashStorageClaims {
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTiflashStorageClaimsResources>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTiflashStorageClaimsResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTiflashTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikv {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainers>[]>;
            additionalVolumes?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumes>[]>;
            affinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinity>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            baseImage?: pulumi.Input<string>;
            config?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfig>;
            configUpdateStrategy?: pulumi.Input<string>;
            dataSubDir?: pulumi.Input<string>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnv>[]>;
            hostNetwork?: pulumi.Input<boolean>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvImagePullSecrets>[]>;
            limits?: pulumi.Input<{[key: string]: any}>;
            maxFailoverCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            podSecurityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContext>;
            priorityClassName?: pulumi.Input<string>;
            privileged?: pulumi.Input<boolean>;
            replicas: pulumi.Input<number>;
            requests?: pulumi.Input<{[key: string]: any}>;
            schedulerName?: pulumi.Input<string>;
            serviceAccount?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvTolerations>[]>;
            version?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFrom>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbClusterSpecTikvAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCephfs>;
            cinder?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCinder>;
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesConfigMap>;
            csi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesEmptyDir>;
            fc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFc>;
            flexVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesIscsi>;
            name: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjected>;
            quobyte?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesScaleIO>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesSecret>;
            storageos?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesVsphereVolume>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName: pulumi.Input<string>;
            diskURI: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName: pulumi.Input<string>;
            shareName: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCephfs {
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCinderSecretRef>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCsi {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: any;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlexVolume {
            driver: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: any}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesGlusterfs {
            endpoints: pulumi.Input<string>;
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesHostPath {
            path: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef>;
            targetPortal: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesNfs {
            path: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPersistentVolumeClaim {
            claimName: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSources>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesRbd {
            fsType?: pulumi.Input<string>;
            image: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAdditionalVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAffinity {
            nodeAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinity>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbClusterSpecTikvAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbClusterSpecTikvConfig {
            coprocessor?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigCoprocessor>;
            gc?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigGc>;
            import?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigImport>;
            log-file?: pulumi.Input<string>;
            log-level?: pulumi.Input<string>;
            log-rotation-size?: pulumi.Input<string>;
            log-rotation-timespan?: pulumi.Input<string>;
            panic-when-unexpected-key-or-data?: pulumi.Input<boolean>;
            pd?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigPd>;
            pessimistic-txn?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigPessimistic-Txn>;
            raftdb?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRaftdb>;
            raftstore?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRaftstore>;
            readpool?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigReadpool>;
            refresh-config-interval?: pulumi.Input<string>;
            rocksdb?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdb>;
            security?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigSecurity>;
            server?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigServer>;
            slow-log-file?: pulumi.Input<string>;
            slow-log-threshold?: pulumi.Input<string>;
            storage?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigStorage>;
        }

        export interface TidbClusterSpecTikvConfigCoprocessor {
            batch-split-limit?: pulumi.Input<number>;
            region-max-keys?: pulumi.Input<number>;
            region-max-size?: pulumi.Input<string>;
            region-split-keys?: pulumi.Input<number>;
            region-split-size?: pulumi.Input<string>;
            split-region-on-table?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvConfigGc {
            	batch-keys?: pulumi.Input<number>;
            	max-write-bytes-per-sec?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigImport {
            import-dir?: pulumi.Input<string>;
            max-open-engines?: pulumi.Input<number>;
            max-prepare-duration?: pulumi.Input<string>;
            num-import-jobs?: pulumi.Input<number>;
            num-import-sst-jobs?: pulumi.Input<number>;
            num-threads?: pulumi.Input<number>;
            region-split-size?: pulumi.Input<string>;
            stream-channel-window?: pulumi.Input<number>;
            upload-speed-limit?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigPd {
            endpoints?: pulumi.Input<pulumi.Input<string>[]>;
            retry-interval?: pulumi.Input<string>;
            retry-log-every?: pulumi.Input<number>;
            retry-max-count?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigPessimistic-Txn {
            enabled?: pulumi.Input<boolean>;
            pipelined?: pulumi.Input<boolean>;
            wait-for-lock-timeout?: pulumi.Input<string>;
            wake-up-delay-duration?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRaftdb {
            allow-concurrent-memtable-write?: pulumi.Input<boolean>;
            bytes-per-sync?: pulumi.Input<string>;
            compaction-readahead-size?: pulumi.Input<string>;
            create-if-missing?: pulumi.Input<boolean>;
            defaultcf?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRaftdbDefaultcf>;
            enable-pipelined-write?: pulumi.Input<boolean>;
            enable-statistics?: pulumi.Input<boolean>;
            info-log-dir?: pulumi.Input<string>;
            info-log-keep-log-file-num?: pulumi.Input<number>;
            info-log-max-size?: pulumi.Input<string>;
            info-log-roll-time?: pulumi.Input<string>;
            max-background-jobs?: pulumi.Input<number>;
            max-manifest-file-size?: pulumi.Input<string>;
            max-open-files?: pulumi.Input<number>;
            max-sub-compactions?: pulumi.Input<number>;
            max-total-wal-size?: pulumi.Input<string>;
            stats-dump-period?: pulumi.Input<string>;
            use-direct-io-for-flush-and-compaction?: pulumi.Input<boolean>;
            wal-bytes-per-sync?: pulumi.Input<string>;
            wal-dir?: pulumi.Input<string>;
            wal-recovery-mode?: pulumi.Input<string>;
            wal-size-limit?: pulumi.Input<string>;
            wal-ttl-seconds?: pulumi.Input<number>;
            writable-file-max-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRaftdbDefaultcf {
            block-based-bloom-filter?: pulumi.Input<boolean>;
            block-cache-size?: pulumi.Input<string>;
            block-size?: pulumi.Input<string>;
            bloom-filter-bits-per-key?: pulumi.Input<number>;
            cache-index-and-filter-blocks?: pulumi.Input<boolean>;
            compaction-pri?: pulumi.Input<number>;
            compaction-style?: pulumi.Input<number>;
            compression-per-level?: pulumi.Input<pulumi.Input<string>[]>;
            disable-auto-compactions?: pulumi.Input<boolean>;
            disable-block-cache?: pulumi.Input<boolean>;
            dynamic-level-bytes?: pulumi.Input<boolean>;
            enable-doubly-skiplist?: pulumi.Input<boolean>;
            force-consistency-checks?: pulumi.Input<boolean>;
            hard-pending-compaction-bytes-limit?: pulumi.Input<string>;
            level0-file-num-compaction-trigger?: pulumi.Input<number>;
            level0-slowdown-writes-trigger?: pulumi.Input<number>;
            level0-stop-writes-trigger?: pulumi.Input<number>;
            max-bytes-for-level-base?: pulumi.Input<string>;
            max-bytes-for-level-multiplier?: pulumi.Input<number>;
            max-compaction-bytes?: pulumi.Input<string>;
            max-write-buffer-number?: pulumi.Input<number>;
            min-write-buffer-number-to-merge?: pulumi.Input<number>;
            num-levels?: pulumi.Input<number>;
            optimize-filters-for-hits?: pulumi.Input<boolean>;
            pin-l0-filter-and-index-blocks?: pulumi.Input<boolean>;
            prop-keys-index-distance?: pulumi.Input<number>;
            prop-size-index-distance?: pulumi.Input<number>;
            read-amp-bytes-per-bit?: pulumi.Input<number>;
            soft-pending-compaction-bytes-limit?: pulumi.Input<string>;
            target-file-size-base?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRaftdbDefaultcfTitan>;
            use-bloom-filter?: pulumi.Input<boolean>;
            whole-key-filtering?: pulumi.Input<boolean>;
            write-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRaftdbDefaultcfTitan {
            blob-cache-size?: pulumi.Input<string>;
            blob-file-compression?: pulumi.Input<string>;
            blob-run-mode?: pulumi.Input<string>;
            discardable-ratio?: pulumi.Input<number>;
            gc-merge-rewrite?: pulumi.Input<boolean>;
            level_merge?: pulumi.Input<boolean>;
            max-gc-batch-size?: pulumi.Input<string>;
            merge-small-file-threshold?: pulumi.Input<string>;
            min-blob-size?: pulumi.Input<string>;
            min-gc-batch-size?: pulumi.Input<string>;
            sample-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigRaftstore {
            abnormal-leader-missing-duration?: pulumi.Input<string>;
            allow-remove-leader?: pulumi.Input<boolean>;
            apply-early?: pulumi.Input<boolean>;
            apply-max-batch-size?: pulumi.Input<number>;
            apply-pool-size?: pulumi.Input<number>;
            apply-yield-duration?: pulumi.Input<string>;
            clean-stale-peer-delay?: pulumi.Input<string>;
            cleanup-import-sst-interval?: pulumi.Input<string>;
            consistency-check-interval?: pulumi.Input<string>;
            dev-assert?: pulumi.Input<boolean>;
            hibernate-regions?: pulumi.Input<boolean>;
            leader-transfer-max-log-lag?: pulumi.Input<number>;
            lock-cf-compact-bytes-threshold?: pulumi.Input<string>;
            lock-cf-compact-interval?: pulumi.Input<string>;
            max-leader-missing-duration?: pulumi.Input<string>;
            max-peer-down-duration?: pulumi.Input<string>;
            merge-check-tick-interval?: pulumi.Input<string>;
            merge-max-log-gap?: pulumi.Input<number>;
            messages-per-tick?: pulumi.Input<number>;
            notify-capacity?: pulumi.Input<number>;
            pd-heartbeat-tick-interval?: pulumi.Input<string>;
            pd-store-heartbeat-tick-interval?: pulumi.Input<string>;
            peer-stale-state-check-interval?: pulumi.Input<string>;
            perf-level?: pulumi.Input<number>;
            prevote?: pulumi.Input<boolean>;
            raft-base-tick-interval?: pulumi.Input<string>;
            raft-election-timeout-ticks?: pulumi.Input<number>;
            raft-entry-cache-life-time?: pulumi.Input<string>;
            raft-entry-max-size?: pulumi.Input<string>;
            raft-heartbeat-ticks?: pulumi.Input<number>;
            raft-log-gc-count-limit?: pulumi.Input<number>;
            raft-log-gc-size-limit?: pulumi.Input<string>;
            raft-log-gc-threshold?: pulumi.Input<number>;
            raft-log-gc-tick-interval?: pulumi.Input<string>;
            raft-max-inflight-msgs?: pulumi.Input<number>;
            raft-max-size-per-msg?: pulumi.Input<string>;
            raft-reject-transfer-leader-duration?: pulumi.Input<string>;
            raft-store-max-leader-lease?: pulumi.Input<string>;
            region-compact-check-interval?: pulumi.Input<string>;
            region-compact-check-step?: pulumi.Input<number>;
            region-compact-min-tombstones?: pulumi.Input<number>;
            region-compact-tombstones-percent?: pulumi.Input<number>;
            region-split-check-diff?: pulumi.Input<string>;
            report-region-flow-interval?: pulumi.Input<string>;
            right-derive-when-split?: pulumi.Input<boolean>;
            snap-apply-batch-size?: pulumi.Input<string>;
            snap-gc-timeout?: pulumi.Input<string>;
            snap-mgr-gc-tick-interval?: pulumi.Input<string>;
            split-region-check-tick-interval?: pulumi.Input<string>;
            store-max-batch-size?: pulumi.Input<number>;
            store-pool-size?: pulumi.Input<number>;
            store-reschedule-duration?: pulumi.Input<string>;
            sync-log?: pulumi.Input<boolean>;
            use-delete-range?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvConfigReadpool {
            coprocessor?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigReadpoolCoprocessor>;
            storage?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigReadpoolStorage>;
            unified?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigReadpoolUnified>;
        }

        export interface TidbClusterSpecTikvConfigReadpoolCoprocessor {
            high-concurrency?: pulumi.Input<number>;
            low-concurrency?: pulumi.Input<number>;
            max-tasks-per-worker-high?: pulumi.Input<number>;
            max-tasks-per-worker-low?: pulumi.Input<number>;
            max-tasks-per-worker-normal?: pulumi.Input<number>;
            normal-concurrency?: pulumi.Input<number>;
            stack-size?: pulumi.Input<string>;
            use-unified-pool?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvConfigReadpoolStorage {
            high-concurrency?: pulumi.Input<number>;
            low-concurrency?: pulumi.Input<number>;
            max-tasks-per-worker-high?: pulumi.Input<number>;
            max-tasks-per-worker-low?: pulumi.Input<number>;
            max-tasks-per-worker-normal?: pulumi.Input<number>;
            normal-concurrency?: pulumi.Input<number>;
            stack-size?: pulumi.Input<string>;
            use-unified-pool?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvConfigReadpoolUnified {
            max-tasks-per-worker?: pulumi.Input<number>;
            max-thread-count?: pulumi.Input<number>;
            min-thread-count?: pulumi.Input<number>;
            stack-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdb {
            auto-tuned?: pulumi.Input<boolean>;
            bytes-per-sync?: pulumi.Input<string>;
            compaction-readahead-size?: pulumi.Input<string>;
            create-if-missing?: pulumi.Input<boolean>;
            defaultcf?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbDefaultcf>;
            enable-pipelined-write?: pulumi.Input<boolean>;
            enable-statistics?: pulumi.Input<boolean>;
            info-log-dir?: pulumi.Input<string>;
            info-log-keep-log-file-num?: pulumi.Input<number>;
            info-log-max-size?: pulumi.Input<string>;
            info-log-roll-time?: pulumi.Input<string>;
            lockcf?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbLockcf>;
            max-background-jobs?: pulumi.Input<number>;
            max-manifest-file-size?: pulumi.Input<string>;
            max-open-files?: pulumi.Input<number>;
            max-sub-compactions?: pulumi.Input<number>;
            max-total-wal-size?: pulumi.Input<string>;
            raftcf?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbRaftcf>;
            rate-bytes-per-sec?: pulumi.Input<string>;
            rate-limiter-mode?: pulumi.Input<number>;
            stats-dump-period?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbTitan>;
            use-direct-io-for-flush-and-compaction?: pulumi.Input<boolean>;
            wal-bytes-per-sync?: pulumi.Input<string>;
            wal-recovery-mode?: pulumi.Input<number>;
            wal-size-limit?: pulumi.Input<string>;
            wal-ttl-seconds?: pulumi.Input<number>;
            writable-file-max-buffer-size?: pulumi.Input<string>;
            writecf?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbWritecf>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbDefaultcf {
            block-based-bloom-filter?: pulumi.Input<boolean>;
            block-cache-size?: pulumi.Input<string>;
            block-size?: pulumi.Input<string>;
            bloom-filter-bits-per-key?: pulumi.Input<number>;
            cache-index-and-filter-blocks?: pulumi.Input<boolean>;
            compaction-pri?: pulumi.Input<number>;
            compaction-style?: pulumi.Input<number>;
            compression-per-level?: pulumi.Input<pulumi.Input<string>[]>;
            disable-auto-compactions?: pulumi.Input<boolean>;
            disable-block-cache?: pulumi.Input<boolean>;
            dynamic-level-bytes?: pulumi.Input<boolean>;
            enable-doubly-skiplist?: pulumi.Input<boolean>;
            force-consistency-checks?: pulumi.Input<boolean>;
            hard-pending-compaction-bytes-limit?: pulumi.Input<string>;
            level0-file-num-compaction-trigger?: pulumi.Input<number>;
            level0-slowdown-writes-trigger?: pulumi.Input<number>;
            level0-stop-writes-trigger?: pulumi.Input<number>;
            max-bytes-for-level-base?: pulumi.Input<string>;
            max-bytes-for-level-multiplier?: pulumi.Input<number>;
            max-compaction-bytes?: pulumi.Input<string>;
            max-write-buffer-number?: pulumi.Input<number>;
            min-write-buffer-number-to-merge?: pulumi.Input<number>;
            num-levels?: pulumi.Input<number>;
            optimize-filters-for-hits?: pulumi.Input<boolean>;
            pin-l0-filter-and-index-blocks?: pulumi.Input<boolean>;
            prop-keys-index-distance?: pulumi.Input<number>;
            prop-size-index-distance?: pulumi.Input<number>;
            read-amp-bytes-per-bit?: pulumi.Input<number>;
            soft-pending-compaction-bytes-limit?: pulumi.Input<string>;
            target-file-size-base?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbDefaultcfTitan>;
            use-bloom-filter?: pulumi.Input<boolean>;
            whole-key-filtering?: pulumi.Input<boolean>;
            write-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbDefaultcfTitan {
            blob-cache-size?: pulumi.Input<string>;
            blob-file-compression?: pulumi.Input<string>;
            blob-run-mode?: pulumi.Input<string>;
            discardable-ratio?: pulumi.Input<number>;
            gc-merge-rewrite?: pulumi.Input<boolean>;
            level_merge?: pulumi.Input<boolean>;
            max-gc-batch-size?: pulumi.Input<string>;
            merge-small-file-threshold?: pulumi.Input<string>;
            min-blob-size?: pulumi.Input<string>;
            min-gc-batch-size?: pulumi.Input<string>;
            sample-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbLockcf {
            block-based-bloom-filter?: pulumi.Input<boolean>;
            block-cache-size?: pulumi.Input<string>;
            block-size?: pulumi.Input<string>;
            bloom-filter-bits-per-key?: pulumi.Input<number>;
            cache-index-and-filter-blocks?: pulumi.Input<boolean>;
            compaction-pri?: pulumi.Input<number>;
            compaction-style?: pulumi.Input<number>;
            compression-per-level?: pulumi.Input<pulumi.Input<string>[]>;
            disable-auto-compactions?: pulumi.Input<boolean>;
            disable-block-cache?: pulumi.Input<boolean>;
            dynamic-level-bytes?: pulumi.Input<boolean>;
            enable-doubly-skiplist?: pulumi.Input<boolean>;
            force-consistency-checks?: pulumi.Input<boolean>;
            hard-pending-compaction-bytes-limit?: pulumi.Input<string>;
            level0-file-num-compaction-trigger?: pulumi.Input<number>;
            level0-slowdown-writes-trigger?: pulumi.Input<number>;
            level0-stop-writes-trigger?: pulumi.Input<number>;
            max-bytes-for-level-base?: pulumi.Input<string>;
            max-bytes-for-level-multiplier?: pulumi.Input<number>;
            max-compaction-bytes?: pulumi.Input<string>;
            max-write-buffer-number?: pulumi.Input<number>;
            min-write-buffer-number-to-merge?: pulumi.Input<number>;
            num-levels?: pulumi.Input<number>;
            optimize-filters-for-hits?: pulumi.Input<boolean>;
            pin-l0-filter-and-index-blocks?: pulumi.Input<boolean>;
            prop-keys-index-distance?: pulumi.Input<number>;
            prop-size-index-distance?: pulumi.Input<number>;
            read-amp-bytes-per-bit?: pulumi.Input<number>;
            soft-pending-compaction-bytes-limit?: pulumi.Input<string>;
            target-file-size-base?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbLockcfTitan>;
            use-bloom-filter?: pulumi.Input<boolean>;
            whole-key-filtering?: pulumi.Input<boolean>;
            write-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbLockcfTitan {
            blob-cache-size?: pulumi.Input<string>;
            blob-file-compression?: pulumi.Input<string>;
            blob-run-mode?: pulumi.Input<string>;
            discardable-ratio?: pulumi.Input<number>;
            gc-merge-rewrite?: pulumi.Input<boolean>;
            level_merge?: pulumi.Input<boolean>;
            max-gc-batch-size?: pulumi.Input<string>;
            merge-small-file-threshold?: pulumi.Input<string>;
            min-blob-size?: pulumi.Input<string>;
            min-gc-batch-size?: pulumi.Input<string>;
            sample-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbRaftcf {
            block-based-bloom-filter?: pulumi.Input<boolean>;
            block-cache-size?: pulumi.Input<string>;
            block-size?: pulumi.Input<string>;
            bloom-filter-bits-per-key?: pulumi.Input<number>;
            cache-index-and-filter-blocks?: pulumi.Input<boolean>;
            compaction-pri?: pulumi.Input<number>;
            compaction-style?: pulumi.Input<number>;
            compression-per-level?: pulumi.Input<pulumi.Input<string>[]>;
            disable-auto-compactions?: pulumi.Input<boolean>;
            disable-block-cache?: pulumi.Input<boolean>;
            dynamic-level-bytes?: pulumi.Input<boolean>;
            enable-doubly-skiplist?: pulumi.Input<boolean>;
            force-consistency-checks?: pulumi.Input<boolean>;
            hard-pending-compaction-bytes-limit?: pulumi.Input<string>;
            level0-file-num-compaction-trigger?: pulumi.Input<number>;
            level0-slowdown-writes-trigger?: pulumi.Input<number>;
            level0-stop-writes-trigger?: pulumi.Input<number>;
            max-bytes-for-level-base?: pulumi.Input<string>;
            max-bytes-for-level-multiplier?: pulumi.Input<number>;
            max-compaction-bytes?: pulumi.Input<string>;
            max-write-buffer-number?: pulumi.Input<number>;
            min-write-buffer-number-to-merge?: pulumi.Input<number>;
            num-levels?: pulumi.Input<number>;
            optimize-filters-for-hits?: pulumi.Input<boolean>;
            pin-l0-filter-and-index-blocks?: pulumi.Input<boolean>;
            prop-keys-index-distance?: pulumi.Input<number>;
            prop-size-index-distance?: pulumi.Input<number>;
            read-amp-bytes-per-bit?: pulumi.Input<number>;
            soft-pending-compaction-bytes-limit?: pulumi.Input<string>;
            target-file-size-base?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbRaftcfTitan>;
            use-bloom-filter?: pulumi.Input<boolean>;
            whole-key-filtering?: pulumi.Input<boolean>;
            write-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbRaftcfTitan {
            blob-cache-size?: pulumi.Input<string>;
            blob-file-compression?: pulumi.Input<string>;
            blob-run-mode?: pulumi.Input<string>;
            discardable-ratio?: pulumi.Input<number>;
            gc-merge-rewrite?: pulumi.Input<boolean>;
            level_merge?: pulumi.Input<boolean>;
            max-gc-batch-size?: pulumi.Input<string>;
            merge-small-file-threshold?: pulumi.Input<string>;
            min-blob-size?: pulumi.Input<string>;
            min-gc-batch-size?: pulumi.Input<string>;
            sample-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbTitan {
            dirname?: pulumi.Input<string>;
            disable-gc?: pulumi.Input<boolean>;
            enabled?: pulumi.Input<boolean>;
            max-background-gc?: pulumi.Input<number>;
            purge-obsolete-files-period?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbWritecf {
            block-based-bloom-filter?: pulumi.Input<boolean>;
            block-cache-size?: pulumi.Input<string>;
            block-size?: pulumi.Input<string>;
            bloom-filter-bits-per-key?: pulumi.Input<number>;
            cache-index-and-filter-blocks?: pulumi.Input<boolean>;
            compaction-pri?: pulumi.Input<number>;
            compaction-style?: pulumi.Input<number>;
            compression-per-level?: pulumi.Input<pulumi.Input<string>[]>;
            disable-auto-compactions?: pulumi.Input<boolean>;
            disable-block-cache?: pulumi.Input<boolean>;
            dynamic-level-bytes?: pulumi.Input<boolean>;
            enable-doubly-skiplist?: pulumi.Input<boolean>;
            force-consistency-checks?: pulumi.Input<boolean>;
            hard-pending-compaction-bytes-limit?: pulumi.Input<string>;
            level0-file-num-compaction-trigger?: pulumi.Input<number>;
            level0-slowdown-writes-trigger?: pulumi.Input<number>;
            level0-stop-writes-trigger?: pulumi.Input<number>;
            max-bytes-for-level-base?: pulumi.Input<string>;
            max-bytes-for-level-multiplier?: pulumi.Input<number>;
            max-compaction-bytes?: pulumi.Input<string>;
            max-write-buffer-number?: pulumi.Input<number>;
            min-write-buffer-number-to-merge?: pulumi.Input<number>;
            num-levels?: pulumi.Input<number>;
            optimize-filters-for-hits?: pulumi.Input<boolean>;
            pin-l0-filter-and-index-blocks?: pulumi.Input<boolean>;
            prop-keys-index-distance?: pulumi.Input<number>;
            prop-size-index-distance?: pulumi.Input<number>;
            read-amp-bytes-per-bit?: pulumi.Input<number>;
            soft-pending-compaction-bytes-limit?: pulumi.Input<string>;
            target-file-size-base?: pulumi.Input<string>;
            titan?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigRocksdbWritecfTitan>;
            use-bloom-filter?: pulumi.Input<boolean>;
            whole-key-filtering?: pulumi.Input<boolean>;
            write-buffer-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigRocksdbWritecfTitan {
            blob-cache-size?: pulumi.Input<string>;
            blob-file-compression?: pulumi.Input<string>;
            blob-run-mode?: pulumi.Input<string>;
            discardable-ratio?: pulumi.Input<number>;
            gc-merge-rewrite?: pulumi.Input<boolean>;
            level_merge?: pulumi.Input<boolean>;
            max-gc-batch-size?: pulumi.Input<string>;
            merge-small-file-threshold?: pulumi.Input<string>;
            min-blob-size?: pulumi.Input<string>;
            min-gc-batch-size?: pulumi.Input<string>;
            sample-ratio?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigSecurity {
            ca-path?: pulumi.Input<string>;
            cert-path?: pulumi.Input<string>;
            cipher-file?: pulumi.Input<string>;
            encryption?: any;
            key-path?: pulumi.Input<string>;
            override-ssl-target?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigServer {
            concurrent-recv-snap-limit?: pulumi.Input<number>;
            concurrent-send-snap-limit?: pulumi.Input<number>;
            enable-request-batch?: pulumi.Input<boolean>;
            end-point-batch-row-limit?: pulumi.Input<number>;
            end-point-enable-batch-if-possible?: pulumi.Input<number>;
            end-point-recursion-limit?: pulumi.Input<number>;
            end-point-request-max-handle-duration?: pulumi.Input<string>;
            end-point-stream-batch-row-limit?: pulumi.Input<number>;
            end-point-stream-channel-size?: pulumi.Input<number>;
            grpc-compression-type?: pulumi.Input<string>;
            grpc-concurrency?: pulumi.Input<number>;
            grpc-concurrent-stream?: pulumi.Input<number>;
            grpc-keepalive-time?: pulumi.Input<string>;
            grpc-keepalive-timeout?: pulumi.Input<string>;
            grpc-memory-pool-quota?: pulumi.Input<string>;
            grpc-raft-conn-num?: pulumi.Input<number>;
            grpc-stream-initial-window-size?: pulumi.Input<string>;
            heavy-load-threshold?: pulumi.Input<number>;
            heavy-load-wait-duration?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: any}>;
            request-batch-enable-cross-command?: pulumi.Input<boolean>;
            request-batch-wait-duration?: pulumi.Input<string>;
            snap-max-total-size?: pulumi.Input<string>;
            snap-max-write-bytes-per-sec?: pulumi.Input<string>;
            stats-concurrency?: pulumi.Input<number>;
            status-thread-pool-size?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvConfigStorage {
            block-cache?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvConfigStorageBlock-Cache>;
            max-key-size?: pulumi.Input<number>;
            reserve-space?: pulumi.Input<string>;
            scheduler-concurrency?: pulumi.Input<number>;
            scheduler-notify-capacity?: pulumi.Input<number>;
            scheduler-pending-write-threshold?: pulumi.Input<string>;
            scheduler-worker-pool-size?: pulumi.Input<number>;
        }

        export interface TidbClusterSpecTikvConfigStorageBlock-Cache {
            capacity?: pulumi.Input<string>;
            high-pri-pool-ratio?: pulumi.Input<number>;
            memory-allocator?: pulumi.Input<string>;
            num-shard-bits?: pulumi.Input<number>;
            shared?: pulumi.Input<boolean>;
            strict-capacity-limit?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFrom>;
        }

        export interface TidbClusterSpecTikvEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvEnvValueFromSecretKeyRef>;
        }

        export interface TidbClusterSpecTikvEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbClusterSpecTikvImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvPodSecurityContext {
            fsGroup?: pulumi.Input<number>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextSeLinuxOptions>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbClusterSpecTikvPodSecurityContextWindowsOptions>;
        }

        export interface TidbClusterSpecTikvPodSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvPodSecurityContextSysctls {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvPodSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTikvTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbClusterSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface TidbInitializerSpec {
            cluster: pulumi.Input<inputs.pingcap.v1alpha1.TidbInitializerSpecCluster>;
            image: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbInitializerSpecImagePullSecrets>[]>;
            initSql?: pulumi.Input<string>;
            initSqlConfigMap?: pulumi.Input<string>;
            passwordSecret?: pulumi.Input<string>;
            permitHost?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbInitializerSpecResources>;
            timezone?: pulumi.Input<string>;
            tlsClientSecretName?: pulumi.Input<string>;
        }

        export interface TidbInitializerSpecCluster {
            name: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface TidbInitializerSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbInitializerSpecResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbMonitorSpec {
            additionalContainers?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainers>[]>;
            alertManagerRulesVersion?: pulumi.Input<string>;
            alertmanagerURL?: pulumi.Input<string>;
            annotations?: pulumi.Input<{[key: string]: any}>;
            clusters: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecClusters>[]>;
            grafana?: any;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecImagePullSecrets>[]>;
            initializer: any;
            kubePrometheusURL?: pulumi.Input<string>;
            nodeSelector?: pulumi.Input<{[key: string]: any}>;
            persistent?: pulumi.Input<boolean>;
            prometheus: any;
            pvReclaimPolicy?: pulumi.Input<string>;
            reloader: any;
            storage?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecTolerations>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainers {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            env?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnv>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFrom>[]>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            lifecycle?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecycle>;
            livenessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbe>;
            name: pulumi.Input<string>;
            ports?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersPorts>[]>;
            readinessProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbe>;
            resources?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersResources>;
            securityContext?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContext>;
            startupProbe?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbe>;
            stdin?: pulumi.Input<boolean>;
            stdinOnce?: pulumi.Input<boolean>;
            terminationMessagePath?: pulumi.Input<string>;
            terminationMessagePolicy?: pulumi.Input<string>;
            tty?: pulumi.Input<boolean>;
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersVolumeDevices>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersVolumeMounts>[]>;
            workingDir?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnv {
            name: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFrom>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFrom {
            configMapRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvFromSecretRef>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFromConfigMapRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvFromSecretRef {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFrom {
            configMapKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef>;
            fieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef>;
            resourceFieldRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef>;
            secretKeyRef?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromConfigMapKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: any;
            resource: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersEnvValueFromSecretKeyRef {
            key: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecycle {
            postStart?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStart>;
            preStop?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStop>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStart {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartHttpGetPort {
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePostStartTcpSocketPort {
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStop {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopExec>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopHttpGetPort {
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface TidbMonitorSpecAdditionalContainersLifecyclePreStopTcpSocketPort {
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeHttpGetPort {
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort>;
        }

        export interface TidbMonitorSpecAdditionalContainersLivenessProbeTcpSocketPort {
        }

        export interface TidbMonitorSpecAdditionalContainersPorts {
            containerPort: pulumi.Input<number>;
            hostIP?: pulumi.Input<string>;
            hostPort?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            protocol?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeHttpGetPort {
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort>;
        }

        export interface TidbMonitorSpecAdditionalContainersReadinessProbeTcpSocketPort {
        }

        export interface TidbMonitorSpecAdditionalContainersResources {
            limits?: pulumi.Input<{[key: string]: any}>;
            requests?: pulumi.Input<{[key: string]: any}>;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions>;
            windowsOptions?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions>;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbe {
            exec?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            httpGet?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort>;
            scheme?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeHttpGetHttpHeaders {
            name: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeHttpGetPort {
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeTcpSocket {
            host?: pulumi.Input<string>;
            port: pulumi.Input<inputs.pingcap.v1alpha1.TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort>;
        }

        export interface TidbMonitorSpecAdditionalContainersStartupProbeTcpSocketPort {
        }

        export interface TidbMonitorSpecAdditionalContainersVolumeDevices {
            devicePath: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecAdditionalContainersVolumeMounts {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecClusters {
            name: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface TidbMonitorSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }
    }
}

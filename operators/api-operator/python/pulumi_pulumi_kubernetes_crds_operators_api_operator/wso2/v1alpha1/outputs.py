# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'APISpec',
    'APISpecDefinition',
    'APISpecDefinitionInterceptors',
    'RateLimitingSpec',
    'RateLimitingSpecBandwidth',
    'RateLimitingSpecConditions',
    'RateLimitingSpecConditionsHeaderCondition',
    'RateLimitingSpecConditionsIpCondition',
    'RateLimitingSpecRequestCount',
    'SecuritySpec',
    'SecuritySpecSecurityConfig',
    'TargetEndpointSpec',
    'TargetEndpointSpecDeploy',
    'TargetEndpointSpecEndpointSecurity',
]

@pulumi.output_type
class APISpec(dict):
    def __init__(__self__, *,
                 definition: 'outputs.APISpecDefinition',
                 replicas: int,
                 mode: Optional[str] = None,
                 override: Optional[bool] = None,
                 update_time_stamp: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str mode: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "replicas", replicas)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if update_time_stamp is not None:
            pulumi.set(__self__, "update_time_stamp", update_time_stamp)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def definition(self) -> 'outputs.APISpecDefinition':
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def override(self) -> Optional[bool]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="updateTimeStamp")
    def update_time_stamp(self) -> Optional[str]:
        return pulumi.get(self, "update_time_stamp")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecDefinition(dict):
    def __init__(__self__, *,
                 swagger_configmap_names: Sequence[str],
                 interceptors: Optional['outputs.APISpecDefinitionInterceptors'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "swagger_configmap_names", swagger_configmap_names)
        if interceptors is not None:
            pulumi.set(__self__, "interceptors", interceptors)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="swaggerConfigmapNames")
    def swagger_configmap_names(self) -> Sequence[str]:
        return pulumi.get(self, "swagger_configmap_names")

    @property
    @pulumi.getter
    def interceptors(self) -> Optional['outputs.APISpecDefinitionInterceptors']:
        return pulumi.get(self, "interceptors")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecDefinitionInterceptors(dict):
    def __init__(__self__, *,
                 ballerina: Optional[Sequence[str]] = None,
                 java: Optional[Sequence[str]] = None):
        if ballerina is not None:
            pulumi.set(__self__, "ballerina", ballerina)
        if java is not None:
            pulumi.set(__self__, "java", java)

    @property
    @pulumi.getter
    def ballerina(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ballerina")

    @property
    @pulumi.getter
    def java(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "java")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpec(dict):
    def __init__(__self__, *,
                 request_count: 'outputs.RateLimitingSpecRequestCount',
                 time_unit: str,
                 type: str,
                 unit_time: int,
                 bandwidth: Optional['outputs.RateLimitingSpecBandwidth'] = None,
                 conditions: Optional['outputs.RateLimitingSpecConditions'] = None,
                 description: Optional[str] = None,
                 stop_on_quota_reach: Optional[bool] = None):
        pulumi.set(__self__, "request_count", request_count)
        pulumi.set(__self__, "time_unit", time_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_time", unit_time)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if stop_on_quota_reach is not None:
            pulumi.set(__self__, "stop_on_quota_reach", stop_on_quota_reach)

    @property
    @pulumi.getter(name="requestCount")
    def request_count(self) -> 'outputs.RateLimitingSpecRequestCount':
        return pulumi.get(self, "request_count")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> str:
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitTime")
    def unit_time(self) -> int:
        return pulumi.get(self, "unit_time")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional['outputs.RateLimitingSpecBandwidth']:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def conditions(self) -> Optional['outputs.RateLimitingSpecConditions']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="stopOnQuotaReach")
    def stop_on_quota_reach(self) -> Optional[bool]:
        return pulumi.get(self, "stop_on_quota_reach")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpecBandwidth(dict):
    def __init__(__self__, *,
                 data_amount: str,
                 data_unit: str):
        pulumi.set(__self__, "data_amount", data_amount)
        pulumi.set(__self__, "data_unit", data_unit)

    @property
    @pulumi.getter(name="dataAmount")
    def data_amount(self) -> str:
        return pulumi.get(self, "data_amount")

    @property
    @pulumi.getter(name="dataUnit")
    def data_unit(self) -> str:
        return pulumi.get(self, "data_unit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpecConditions(dict):
    def __init__(__self__, *,
                 header_condition: 'outputs.RateLimitingSpecConditionsHeaderCondition',
                 ip_condition: 'outputs.RateLimitingSpecConditionsIpCondition'):
        pulumi.set(__self__, "header_condition", header_condition)
        pulumi.set(__self__, "ip_condition", ip_condition)

    @property
    @pulumi.getter(name="headerCondition")
    def header_condition(self) -> 'outputs.RateLimitingSpecConditionsHeaderCondition':
        return pulumi.get(self, "header_condition")

    @property
    @pulumi.getter(name="ipCondition")
    def ip_condition(self) -> 'outputs.RateLimitingSpecConditionsIpCondition':
        return pulumi.get(self, "ip_condition")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpecConditionsHeaderCondition(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        return pulumi.get(self, "header_value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpecConditionsIpCondition(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 negation: bool,
                 specific_ip: str,
                 start_ip: str,
                 type: str):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "negation", negation)
        pulumi.set(__self__, "specific_ip", specific_ip)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def negation(self) -> bool:
        return pulumi.get(self, "negation")

    @property
    @pulumi.getter(name="specificIp")
    def specific_ip(self) -> str:
        return pulumi.get(self, "specific_ip")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RateLimitingSpecRequestCount(dict):
    def __init__(__self__, *,
                 limit: int):
        pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecuritySpec(dict):
    def __init__(__self__, *,
                 type: str,
                 security_config: Optional[Sequence['outputs.SecuritySpecSecurityConfig']] = None):
        """
        :param str type: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "type", type)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[Sequence['outputs.SecuritySpecSecurityConfig']]:
        return pulumi.get(self, "security_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SecuritySpecSecurityConfig(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 audience: Optional[str] = None,
                 certificate: Optional[str] = None,
                 credentials: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 issuer: Optional[str] = None,
                 validate_subscription: Optional[bool] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if validate_subscription is not None:
            pulumi.set(__self__, "validate_subscription", validate_subscription)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="validateSubscription")
    def validate_subscription(self) -> Optional[bool]:
        return pulumi.get(self, "validate_subscription")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetEndpointSpec(dict):
    def __init__(__self__, *,
                 deploy: 'outputs.TargetEndpointSpecDeploy',
                 port: int,
                 protocol: str,
                 target_port: int,
                 endpoint_name: Optional[str] = None,
                 endpoint_security: Optional['outputs.TargetEndpointSpecEndpointSecurity'] = None,
                 hostname: Optional[str] = None,
                 mode: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str type: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if endpoint_security is not None:
            pulumi.set(__self__, "endpoint_security", endpoint_security)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def deploy(self) -> 'outputs.TargetEndpointSpecDeploy':
        return pulumi.get(self, "deploy")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="endpointSecurity")
    def endpoint_security(self) -> Optional['outputs.TargetEndpointSpecEndpointSecurity']:
        return pulumi.get(self, "endpoint_security")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetEndpointSpecDeploy(dict):
    def __init__(__self__, *,
                 docker_image: str,
                 name: str,
                 cpu_limit: Optional[str] = None,
                 max_replicas: Optional[int] = None,
                 memory_limit: Optional[str] = None,
                 min_replicas: Optional[int] = None,
                 req_memory: Optional[str] = None,
                 request_cpu: Optional[str] = None):
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "name", name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if req_memory is not None:
            pulumi.set(__self__, "req_memory", req_memory)
        if request_cpu is not None:
            pulumi.set(__self__, "request_cpu", request_cpu)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[str]:
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[str]:
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="reqMemory")
    def req_memory(self) -> Optional[str]:
        return pulumi.get(self, "req_memory")

    @property
    @pulumi.getter(name="requestCPU")
    def request_cpu(self) -> Optional[str]:
        return pulumi.get(self, "request_cpu")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TargetEndpointSpecEndpointSecurity(dict):
    def __init__(__self__, *,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'APISpecArgs',
    'APISpecDefinitionArgs',
    'APISpecDefinitionInterceptorsArgs',
    'RateLimitingSpecArgs',
    'RateLimitingSpecBandwidthArgs',
    'RateLimitingSpecConditionsArgs',
    'RateLimitingSpecConditionsHeaderConditionArgs',
    'RateLimitingSpecConditionsIpConditionArgs',
    'RateLimitingSpecRequestCountArgs',
    'SecuritySpecArgs',
    'SecuritySpecSecurityConfigArgs',
    'TargetEndpointSpecArgs',
    'TargetEndpointSpecDeployArgs',
    'TargetEndpointSpecEndpointSecurityArgs',
]

@pulumi.input_type
class APISpecArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input['APISpecDefinitionArgs'],
                 replicas: pulumi.Input[int],
                 mode: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 update_time_stamp: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mode: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "replicas", replicas)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if update_time_stamp is not None:
            pulumi.set(__self__, "update_time_stamp", update_time_stamp)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input['APISpecDefinitionArgs']:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input['APISpecDefinitionArgs']):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="updateTimeStamp")
    def update_time_stamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time_stamp")

    @update_time_stamp.setter
    def update_time_stamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time_stamp", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class APISpecDefinitionArgs:
    def __init__(__self__, *,
                 swagger_configmap_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 interceptors: Optional[pulumi.Input['APISpecDefinitionInterceptorsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "swagger_configmap_names", swagger_configmap_names)
        if interceptors is not None:
            pulumi.set(__self__, "interceptors", interceptors)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="swaggerConfigmapNames")
    def swagger_configmap_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "swagger_configmap_names")

    @swagger_configmap_names.setter
    def swagger_configmap_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "swagger_configmap_names", value)

    @property
    @pulumi.getter
    def interceptors(self) -> Optional[pulumi.Input['APISpecDefinitionInterceptorsArgs']]:
        return pulumi.get(self, "interceptors")

    @interceptors.setter
    def interceptors(self, value: Optional[pulumi.Input['APISpecDefinitionInterceptorsArgs']]):
        pulumi.set(self, "interceptors", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class APISpecDefinitionInterceptorsArgs:
    def __init__(__self__, *,
                 ballerina: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 java: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ballerina is not None:
            pulumi.set(__self__, "ballerina", ballerina)
        if java is not None:
            pulumi.set(__self__, "java", java)

    @property
    @pulumi.getter
    def ballerina(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ballerina")

    @ballerina.setter
    def ballerina(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ballerina", value)

    @property
    @pulumi.getter
    def java(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "java")

    @java.setter
    def java(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "java", value)


@pulumi.input_type
class RateLimitingSpecArgs:
    def __init__(__self__, *,
                 request_count: pulumi.Input['RateLimitingSpecRequestCountArgs'],
                 time_unit: pulumi.Input[str],
                 type: pulumi.Input[str],
                 unit_time: pulumi.Input[int],
                 bandwidth: Optional[pulumi.Input['RateLimitingSpecBandwidthArgs']] = None,
                 conditions: Optional[pulumi.Input['RateLimitingSpecConditionsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 stop_on_quota_reach: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "request_count", request_count)
        pulumi.set(__self__, "time_unit", time_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_time", unit_time)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if stop_on_quota_reach is not None:
            pulumi.set(__self__, "stop_on_quota_reach", stop_on_quota_reach)

    @property
    @pulumi.getter(name="requestCount")
    def request_count(self) -> pulumi.Input['RateLimitingSpecRequestCountArgs']:
        return pulumi.get(self, "request_count")

    @request_count.setter
    def request_count(self, value: pulumi.Input['RateLimitingSpecRequestCountArgs']):
        pulumi.set(self, "request_count", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitTime")
    def unit_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unit_time")

    @unit_time.setter
    def unit_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "unit_time", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input['RateLimitingSpecBandwidthArgs']]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input['RateLimitingSpecBandwidthArgs']]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['RateLimitingSpecConditionsArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['RateLimitingSpecConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="stopOnQuotaReach")
    def stop_on_quota_reach(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stop_on_quota_reach")

    @stop_on_quota_reach.setter
    def stop_on_quota_reach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stop_on_quota_reach", value)


@pulumi.input_type
class RateLimitingSpecBandwidthArgs:
    def __init__(__self__, *,
                 data_amount: pulumi.Input[str],
                 data_unit: pulumi.Input[str]):
        pulumi.set(__self__, "data_amount", data_amount)
        pulumi.set(__self__, "data_unit", data_unit)

    @property
    @pulumi.getter(name="dataAmount")
    def data_amount(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_amount")

    @data_amount.setter
    def data_amount(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_amount", value)

    @property
    @pulumi.getter(name="dataUnit")
    def data_unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_unit")

    @data_unit.setter
    def data_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_unit", value)


@pulumi.input_type
class RateLimitingSpecConditionsArgs:
    def __init__(__self__, *,
                 header_condition: pulumi.Input['RateLimitingSpecConditionsHeaderConditionArgs'],
                 ip_condition: pulumi.Input['RateLimitingSpecConditionsIpConditionArgs']):
        pulumi.set(__self__, "header_condition", header_condition)
        pulumi.set(__self__, "ip_condition", ip_condition)

    @property
    @pulumi.getter(name="headerCondition")
    def header_condition(self) -> pulumi.Input['RateLimitingSpecConditionsHeaderConditionArgs']:
        return pulumi.get(self, "header_condition")

    @header_condition.setter
    def header_condition(self, value: pulumi.Input['RateLimitingSpecConditionsHeaderConditionArgs']):
        pulumi.set(self, "header_condition", value)

    @property
    @pulumi.getter(name="ipCondition")
    def ip_condition(self) -> pulumi.Input['RateLimitingSpecConditionsIpConditionArgs']:
        return pulumi.get(self, "ip_condition")

    @ip_condition.setter
    def ip_condition(self, value: pulumi.Input['RateLimitingSpecConditionsIpConditionArgs']):
        pulumi.set(self, "ip_condition", value)


@pulumi.input_type
class RateLimitingSpecConditionsHeaderConditionArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str]):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)


@pulumi.input_type
class RateLimitingSpecConditionsIpConditionArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 negation: pulumi.Input[bool],
                 specific_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "negation", negation)
        pulumi.set(__self__, "specific_ip", specific_ip)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def negation(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "negation")

    @negation.setter
    def negation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "negation", value)

    @property
    @pulumi.getter(name="specificIp")
    def specific_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "specific_ip")

    @specific_ip.setter
    def specific_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "specific_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RateLimitingSpecRequestCountArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int]):
        pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class SecuritySpecArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 security_config: Optional[pulumi.Input[Sequence[pulumi.Input['SecuritySpecSecurityConfigArgs']]]] = None):
        """
        :param pulumi.Input[str] type: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "type", type)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecuritySpecSecurityConfigArgs']]]]:
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecuritySpecSecurityConfigArgs']]]]):
        pulumi.set(self, "security_config", value)


@pulumi.input_type
class SecuritySpecSecurityConfigArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 validate_subscription: Optional[pulumi.Input[bool]] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if validate_subscription is not None:
            pulumi.set(__self__, "validate_subscription", validate_subscription)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="validateSubscription")
    def validate_subscription(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validate_subscription")

    @validate_subscription.setter
    def validate_subscription(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_subscription", value)


@pulumi.input_type
class TargetEndpointSpecArgs:
    def __init__(__self__, *,
                 deploy: pulumi.Input['TargetEndpointSpecDeployArgs'],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 target_port: pulumi.Input[int],
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 endpoint_security: Optional[pulumi.Input['TargetEndpointSpecEndpointSecurityArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if endpoint_security is not None:
            pulumi.set(__self__, "endpoint_security", endpoint_security)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def deploy(self) -> pulumi.Input['TargetEndpointSpecDeployArgs']:
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: pulumi.Input['TargetEndpointSpecDeployArgs']):
        pulumi.set(self, "deploy", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="endpointSecurity")
    def endpoint_security(self) -> Optional[pulumi.Input['TargetEndpointSpecEndpointSecurityArgs']]:
        return pulumi.get(self, "endpoint_security")

    @endpoint_security.setter
    def endpoint_security(self, value: Optional[pulumi.Input['TargetEndpointSpecEndpointSecurityArgs']]):
        pulumi.set(self, "endpoint_security", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TargetEndpointSpecDeployArgs:
    def __init__(__self__, *,
                 docker_image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 req_memory: Optional[pulumi.Input[str]] = None,
                 request_cpu: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "name", name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if req_memory is not None:
            pulumi.set(__self__, "req_memory", req_memory)
        if request_cpu is not None:
            pulumi.set(__self__, "request_cpu", request_cpu)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="reqMemory")
    def req_memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "req_memory")

    @req_memory.setter
    def req_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "req_memory", value)

    @property
    @pulumi.getter(name="requestCPU")
    def request_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_cpu")

    @request_cpu.setter
    def request_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_cpu", value)


@pulumi.input_type
class TargetEndpointSpecEndpointSecurityArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 type: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)



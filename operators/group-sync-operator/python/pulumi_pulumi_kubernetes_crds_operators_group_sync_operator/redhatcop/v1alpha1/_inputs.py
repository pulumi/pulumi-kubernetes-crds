# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GroupSyncSpecArgs',
    'GroupSyncSpecProvidersArgs',
    'GroupSyncSpecProvidersAzureArgs',
    'GroupSyncSpecProvidersAzureCredentialsSecretArgs',
    'GroupSyncSpecProvidersGithubArgs',
    'GroupSyncSpecProvidersGithubCaSecretArgs',
    'GroupSyncSpecProvidersGithubCredentialsSecretArgs',
    'GroupSyncSpecProvidersGitlabArgs',
    'GroupSyncSpecProvidersGitlabCaSecretArgs',
    'GroupSyncSpecProvidersGitlabCredentialsSecretArgs',
    'GroupSyncSpecProvidersKeycloakArgs',
    'GroupSyncSpecProvidersKeycloakCaSecretArgs',
    'GroupSyncSpecProvidersKeycloakCredentialsSecretArgs',
    'GroupSyncSpecProvidersLdapArgs',
    'GroupSyncSpecProvidersLdapActiveDirectoryArgs',
    'GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs',
    'GroupSyncSpecProvidersLdapCaSecretArgs',
    'GroupSyncSpecProvidersLdapCredentialsSecretArgs',
    'GroupSyncSpecProvidersLdapRfc2307Args',
    'GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs',
    'GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs',
    'GroupSyncStatusArgs',
    'GroupSyncStatusConditionsArgs',
]

@pulumi.input_type
class GroupSyncSpecArgs:
    def __init__(__self__, *,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncSpecProvidersArgs']]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        GroupSyncSpec defines the desired state of GroupSync
        :param pulumi.Input[Sequence[pulumi.Input['GroupSyncSpecProvidersArgs']]] providers: List of Providers that can be mounted by containers belonging to the pod.
        """
        if providers is not None:
            pulumi.set(__self__, "providers", providers)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncSpecProvidersArgs']]]]:
        """
        List of Providers that can be mounted by containers belonging to the pod.
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncSpecProvidersArgs']]]]):
        pulumi.set(self, "providers", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class GroupSyncSpecProvidersArgs:
    def __init__(__self__, *,
                 azure: Optional[pulumi.Input['GroupSyncSpecProvidersAzureArgs']] = None,
                 github: Optional[pulumi.Input['GroupSyncSpecProvidersGithubArgs']] = None,
                 gitlab: Optional[pulumi.Input['GroupSyncSpecProvidersGitlabArgs']] = None,
                 keycloak: Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakArgs']] = None,
                 ldap: Optional[pulumi.Input['GroupSyncSpecProvidersLdapArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Provider represents the container for a single provider
        :param pulumi.Input['GroupSyncSpecProvidersAzureArgs'] azure: Azure represents the Azure provider
        :param pulumi.Input['GroupSyncSpecProvidersGithubArgs'] github: GitHub represents the GitHub provider
        :param pulumi.Input['GroupSyncSpecProvidersGitlabArgs'] gitlab: GitLab represents the GitLab provider
        :param pulumi.Input['GroupSyncSpecProvidersKeycloakArgs'] keycloak: Keycloak represents the Keycloak provider
        :param pulumi.Input['GroupSyncSpecProvidersLdapArgs'] ldap: Ldap represents the LDAP provider
        :param pulumi.Input[str] name: Name represents the name of the provider
        """
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if keycloak is not None:
            pulumi.set(__self__, "keycloak", keycloak)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersAzureArgs']]:
        """
        Azure represents the Azure provider
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersGithubArgs']]:
        """
        GitHub represents the GitHub provider
        """
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersGithubArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersGitlabArgs']]:
        """
        GitLab represents the GitLab provider
        """
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def keycloak(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakArgs']]:
        """
        Keycloak represents the Keycloak provider
        """
        return pulumi.get(self, "keycloak")

    @keycloak.setter
    def keycloak(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakArgs']]):
        pulumi.set(self, "keycloak", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapArgs']]:
        """
        Ldap represents the LDAP provider
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapArgs']]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name represents the name of the provider
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GroupSyncSpecProvidersAzureArgs:
    def __init__(__self__, *,
                 credentials_secret: pulumi.Input['GroupSyncSpecProvidersAzureCredentialsSecretArgs'],
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Azure represents the Azure provider
        :param pulumi.Input['GroupSyncSpecProvidersAzureCredentialsSecretArgs'] credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups represents a filtered list of groups to synchronize
        :param pulumi.Input[bool] insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure
        :param pulumi.Input[str] url: URL is the location of the Azure platform
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> pulumi.Input['GroupSyncSpecProvidersAzureCredentialsSecretArgs']:
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        """
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: pulumi.Input['GroupSyncSpecProvidersAzureCredentialsSecretArgs']):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the location of the Azure platform
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GroupSyncSpecProvidersAzureCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersGithubArgs:
    def __init__(__self__, *,
                 credentials_secret: pulumi.Input['GroupSyncSpecProvidersGithubCredentialsSecretArgs'],
                 ca_secret: Optional[pulumi.Input['GroupSyncSpecProvidersGithubCaSecretArgs']] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        GitHub represents the GitHub provider
        :param pulumi.Input['GroupSyncSpecProvidersGithubCredentialsSecretArgs'] credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        :param pulumi.Input['GroupSyncSpecProvidersGithubCaSecretArgs'] ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        :param pulumi.Input[bool] insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab
        :param pulumi.Input[str] organization: Organization represents the location to source teams to synchronize
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams represents a filtered list of teams to synchronize
        :param pulumi.Input[str] url: URL is the location of the GitHub server
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> pulumi.Input['GroupSyncSpecProvidersGithubCredentialsSecretArgs']:
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        """
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: pulumi.Input['GroupSyncSpecProvidersGithubCredentialsSecretArgs']):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersGithubCaSecretArgs']]:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        """
        return pulumi.get(self, "ca_secret")

    @ca_secret.setter
    def ca_secret(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersGithubCaSecretArgs']]):
        pulumi.set(self, "ca_secret", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organization represents the location to source teams to synchronize
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams represents a filtered list of teams to synchronize
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the location of the GitHub server
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GroupSyncSpecProvidersGithubCaSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersGithubCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersGitlabArgs:
    def __init__(__self__, *,
                 credentials_secret: pulumi.Input['GroupSyncSpecProvidersGitlabCredentialsSecretArgs'],
                 ca_secret: Optional[pulumi.Input['GroupSyncSpecProvidersGitlabCaSecretArgs']] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        GitLab represents the GitLab provider
        :param pulumi.Input['GroupSyncSpecProvidersGitlabCredentialsSecretArgs'] credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        :param pulumi.Input['GroupSyncSpecProvidersGitlabCaSecretArgs'] ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups represents a filtered list of groups to synchronize
        :param pulumi.Input[bool] insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab
        :param pulumi.Input[str] url: URL is the location of the GitLub server
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> pulumi.Input['GroupSyncSpecProvidersGitlabCredentialsSecretArgs']:
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        """
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: pulumi.Input['GroupSyncSpecProvidersGitlabCredentialsSecretArgs']):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersGitlabCaSecretArgs']]:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        """
        return pulumi.get(self, "ca_secret")

    @ca_secret.setter
    def ca_secret(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersGitlabCaSecretArgs']]):
        pulumi.set(self, "ca_secret", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the location of the GitLub server
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GroupSyncSpecProvidersGitlabCaSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersGitlabCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersKeycloakArgs:
    def __init__(__self__, *,
                 credentials_secret: pulumi.Input['GroupSyncSpecProvidersKeycloakCredentialsSecretArgs'],
                 realm: pulumi.Input[str],
                 url: pulumi.Input[str],
                 ca_secret: Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakCaSecretArgs']] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 login_realm: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Keycloak represents the Keycloak provider
        :param pulumi.Input['GroupSyncSpecProvidersKeycloakCredentialsSecretArgs'] credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        :param pulumi.Input[str] realm: Realm is the realm containing the groups to synchronize against
        :param pulumi.Input[str] url: URL is the location of the Keycloak server
        :param pulumi.Input['GroupSyncSpecProvidersKeycloakCaSecretArgs'] ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups represents a filtered list of groups to synchronize
        :param pulumi.Input[bool] insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak
        :param pulumi.Input[str] login_realm: LoginRealm is the Keycloak realm to authenticate against
        :param pulumi.Input[str] scope: Scope represents the depth for which groups will be synchronized
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "url", url)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if login_realm is not None:
            pulumi.set(__self__, "login_realm", login_realm)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> pulumi.Input['GroupSyncSpecProvidersKeycloakCredentialsSecretArgs']:
        """
        CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        """
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: pulumi.Input['GroupSyncSpecProvidersKeycloakCredentialsSecretArgs']):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Realm is the realm containing the groups to synchronize against
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL is the location of the Keycloak server
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakCaSecretArgs']]:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        """
        return pulumi.get(self, "ca_secret")

    @ca_secret.setter
    def ca_secret(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersKeycloakCaSecretArgs']]):
        pulumi.set(self, "ca_secret", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="loginRealm")
    def login_realm(self) -> Optional[pulumi.Input[str]]:
        """
        LoginRealm is the Keycloak realm to authenticate against
        """
        return pulumi.get(self, "login_realm")

    @login_realm.setter
    def login_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_realm", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Scope represents the depth for which groups will be synchronized
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class GroupSyncSpecProvidersKeycloakCaSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersKeycloakCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 active_directory: Optional[pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryArgs']] = None,
                 augmented_active_directory: Optional[pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs']] = None,
                 blacklist: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ca_secret: Optional[pulumi.Input['GroupSyncSpecProvidersLdapCaSecretArgs']] = None,
                 credentials_secret: Optional[pulumi.Input['GroupSyncSpecProvidersLdapCredentialsSecretArgs']] = None,
                 group_uid_name_mapping: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 rfc2307: Optional[pulumi.Input['GroupSyncSpecProvidersLdapRfc2307Args']] = None,
                 whitelist: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Ldap represents the LDAP provider
        :param pulumi.Input[str] url: URL is the location of the LDAP Server
        :param pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryArgs'] active_directory: ActiveDirectoryConfig represents the configuration for Active Directory
        :param pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs'] augmented_active_directory: ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklist: Black represents a list of groups to not synchronize
        :param pulumi.Input['GroupSyncSpecProvidersLdapCaSecretArgs'] ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param pulumi.Input['GroupSyncSpecProvidersLdapCredentialsSecretArgs'] credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] group_uid_name_mapping: / LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names
        :param pulumi.Input[bool] insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP
        :param pulumi.Input['GroupSyncSpecProvidersLdapRfc2307Args'] rfc2307: RFC2307Config represents the configuration for a RFC2307 schema
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelist: Whitelist represents a list of groups to synchronize
        """
        pulumi.set(__self__, "url", url)
        if active_directory is not None:
            pulumi.set(__self__, "active_directory", active_directory)
        if augmented_active_directory is not None:
            pulumi.set(__self__, "augmented_active_directory", augmented_active_directory)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if group_uid_name_mapping is not None:
            pulumi.set(__self__, "group_uid_name_mapping", group_uid_name_mapping)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if rfc2307 is not None:
            pulumi.set(__self__, "rfc2307", rfc2307)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL is the location of the LDAP Server
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryArgs']]:
        """
        ActiveDirectoryConfig represents the configuration for Active Directory
        """
        return pulumi.get(self, "active_directory")

    @active_directory.setter
    def active_directory(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryArgs']]):
        pulumi.set(self, "active_directory", value)

    @property
    @pulumi.getter(name="augmentedActiveDirectory")
    def augmented_active_directory(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs']]:
        """
        ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        """
        return pulumi.get(self, "augmented_active_directory")

    @augmented_active_directory.setter
    def augmented_active_directory(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs']]):
        pulumi.set(self, "augmented_active_directory", value)

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Black represents a list of groups to not synchronize
        """
        return pulumi.get(self, "blacklist")

    @blacklist.setter
    def blacklist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blacklist", value)

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapCaSecretArgs']]:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        """
        return pulumi.get(self, "ca_secret")

    @ca_secret.setter
    def ca_secret(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapCaSecretArgs']]):
        pulumi.set(self, "ca_secret", value)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapCredentialsSecretArgs']]:
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        """
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapCredentialsSecretArgs']]):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter(name="groupUIDNameMapping")
    def group_uid_name_mapping(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        / LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names
        """
        return pulumi.get(self, "group_uid_name_mapping")

    @group_uid_name_mapping.setter
    def group_uid_name_mapping(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "group_uid_name_mapping", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def rfc2307(self) -> Optional[pulumi.Input['GroupSyncSpecProvidersLdapRfc2307Args']]:
        """
        RFC2307Config represents the configuration for a RFC2307 schema
        """
        return pulumi.get(self, "rfc2307")

    @rfc2307.setter
    def rfc2307(self, value: Optional[pulumi.Input['GroupSyncSpecProvidersLdapRfc2307Args']]):
        pulumi.set(self, "rfc2307", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Whitelist represents a list of groups to synchronize
        """
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelist", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapActiveDirectoryArgs:
    def __init__(__self__, *,
                 group_membership_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 user_name_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 users_query: pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs']):
        """
        ActiveDirectoryConfig represents the configuration for Active Directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        :param pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs'] users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "users_query", users_query)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        """
        return pulumi.get(self, "group_membership_attributes")

    @group_membership_attributes.setter
    def group_membership_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_membership_attributes", value)

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        """
        return pulumi.get(self, "user_name_attributes")

    @user_name_attributes.setter
    def user_name_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_name_attributes", value)

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs']:
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    @users_query.setter
    def users_query(self, value: pulumi.Input['GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs']):
        pulumi.set(self, "users_query", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 deref_aliases: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param pulumi.Input[str] base_dn: The DN of the branch of the directory where all searches should start from
        :param pulumi.Input[str] deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param pulumi.Input[str] filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param pulumi.Input[int] page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param pulumi.Input[str] scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param pulumi.Input[int] timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> pulumi.Input[str]:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @deref_aliases.setter
    def deref_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deref_aliases", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs:
    def __init__(__self__, *,
                 group_membership_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_name_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_uid_attribute: pulumi.Input[str],
                 groups_query: pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs'],
                 user_name_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 users_query: pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs']):
        """
        ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_name_attributes: GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        :param pulumi.Input[str] group_uid_attribute: GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        :param pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs'] groups_query: AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        :param pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs'] users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "group_name_attributes", group_name_attributes)
        pulumi.set(__self__, "group_uid_attribute", group_uid_attribute)
        pulumi.set(__self__, "groups_query", groups_query)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "users_query", users_query)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        """
        return pulumi.get(self, "group_membership_attributes")

    @group_membership_attributes.setter
    def group_membership_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_membership_attributes", value)

    @property
    @pulumi.getter(name="groupNameAttributes")
    def group_name_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        """
        return pulumi.get(self, "group_name_attributes")

    @group_name_attributes.setter
    def group_name_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_name_attributes", value)

    @property
    @pulumi.getter(name="groupUIDAttribute")
    def group_uid_attribute(self) -> pulumi.Input[str]:
        """
        GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        """
        return pulumi.get(self, "group_uid_attribute")

    @group_uid_attribute.setter
    def group_uid_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_uid_attribute", value)

    @property
    @pulumi.getter(name="groupsQuery")
    def groups_query(self) -> pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs']:
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        """
        return pulumi.get(self, "groups_query")

    @groups_query.setter
    def groups_query(self, value: pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs']):
        pulumi.set(self, "groups_query", value)

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        """
        return pulumi.get(self, "user_name_attributes")

    @user_name_attributes.setter
    def user_name_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_name_attributes", value)

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs']:
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    @users_query.setter
    def users_query(self, value: pulumi.Input['GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs']):
        pulumi.set(self, "users_query", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 deref_aliases: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param pulumi.Input[str] base_dn: The DN of the branch of the directory where all searches should start from
        :param pulumi.Input[str] deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param pulumi.Input[str] filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param pulumi.Input[int] page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param pulumi.Input[str] scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param pulumi.Input[int] timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> pulumi.Input[str]:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @deref_aliases.setter
    def deref_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deref_aliases", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 deref_aliases: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param pulumi.Input[str] base_dn: The DN of the branch of the directory where all searches should start from
        :param pulumi.Input[str] deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param pulumi.Input[str] filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param pulumi.Input[int] page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param pulumi.Input[str] scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param pulumi.Input[int] timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> pulumi.Input[str]:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @deref_aliases.setter
    def deref_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deref_aliases", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapCaSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        :param pulumi.Input[str] name: Name represents the name of the secret
        :param pulumi.Input[str] namespace: Namespace represents the namespace containing the secret
        :param pulumi.Input[str] key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapRfc2307Args:
    def __init__(__self__, *,
                 group_membership_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_name_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_uid_attribute: pulumi.Input[str],
                 groups_query: pulumi.Input['GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs'],
                 user_name_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 user_uid_attribute: pulumi.Input[str],
                 users_query: pulumi.Input['GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs'],
                 tolerate_member_not_found_errors: Optional[pulumi.Input[bool]] = None,
                 tolerate_member_out_of_scope_errors: Optional[pulumi.Input[bool]] = None):
        """
        RFC2307Config represents the configuration for a RFC2307 schema
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_name_attributes: GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        :param pulumi.Input[str] group_uid_attribute: GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        :param pulumi.Input['GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs'] groups_query: AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider
        :param pulumi.Input[str] user_uid_attribute: UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes
        :param pulumi.Input['GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs'] users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param pulumi.Input[bool] tolerate_member_not_found_errors: TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution.
        :param pulumi.Input[bool] tolerate_member_out_of_scope_errors: TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "group_name_attributes", group_name_attributes)
        pulumi.set(__self__, "group_uid_attribute", group_uid_attribute)
        pulumi.set(__self__, "groups_query", groups_query)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "user_uid_attribute", user_uid_attribute)
        pulumi.set(__self__, "users_query", users_query)
        if tolerate_member_not_found_errors is not None:
            pulumi.set(__self__, "tolerate_member_not_found_errors", tolerate_member_not_found_errors)
        if tolerate_member_out_of_scope_errors is not None:
            pulumi.set(__self__, "tolerate_member_out_of_scope_errors", tolerate_member_out_of_scope_errors)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute
        """
        return pulumi.get(self, "group_membership_attributes")

    @group_membership_attributes.setter
    def group_membership_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_membership_attributes", value)

    @property
    @pulumi.getter(name="groupNameAttributes")
    def group_name_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        """
        return pulumi.get(self, "group_name_attributes")

    @group_name_attributes.setter
    def group_name_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_name_attributes", value)

    @property
    @pulumi.getter(name="groupUIDAttribute")
    def group_uid_attribute(self) -> pulumi.Input[str]:
        """
        GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        """
        return pulumi.get(self, "group_uid_attribute")

    @group_uid_attribute.setter
    def group_uid_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_uid_attribute", value)

    @property
    @pulumi.getter(name="groupsQuery")
    def groups_query(self) -> pulumi.Input['GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs']:
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        """
        return pulumi.get(self, "groups_query")

    @groups_query.setter
    def groups_query(self, value: pulumi.Input['GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs']):
        pulumi.set(self, "groups_query", value)

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider
        """
        return pulumi.get(self, "user_name_attributes")

    @user_name_attributes.setter
    def user_name_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_name_attributes", value)

    @property
    @pulumi.getter(name="userUIDAttribute")
    def user_uid_attribute(self) -> pulumi.Input[str]:
        """
        UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes
        """
        return pulumi.get(self, "user_uid_attribute")

    @user_uid_attribute.setter
    def user_uid_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_uid_attribute", value)

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> pulumi.Input['GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs']:
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    @users_query.setter
    def users_query(self, value: pulumi.Input['GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs']):
        pulumi.set(self, "users_query", value)

    @property
    @pulumi.getter(name="tolerateMemberNotFoundErrors")
    def tolerate_member_not_found_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution.
        """
        return pulumi.get(self, "tolerate_member_not_found_errors")

    @tolerate_member_not_found_errors.setter
    def tolerate_member_not_found_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tolerate_member_not_found_errors", value)

    @property
    @pulumi.getter(name="tolerateMemberOutOfScopeErrors")
    def tolerate_member_out_of_scope_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution.
        """
        return pulumi.get(self, "tolerate_member_out_of_scope_errors")

    @tolerate_member_out_of_scope_errors.setter
    def tolerate_member_out_of_scope_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tolerate_member_out_of_scope_errors", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 deref_aliases: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param pulumi.Input[str] base_dn: The DN of the branch of the directory where all searches should start from
        :param pulumi.Input[str] deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param pulumi.Input[str] filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param pulumi.Input[int] page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param pulumi.Input[str] scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param pulumi.Input[int] timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> pulumi.Input[str]:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @deref_aliases.setter
    def deref_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deref_aliases", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 deref_aliases: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param pulumi.Input[str] base_dn: The DN of the branch of the directory where all searches should start from
        :param pulumi.Input[str] deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param pulumi.Input[str] filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param pulumi.Input[int] page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param pulumi.Input[str] scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param pulumi.Input[int] timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> pulumi.Input[str]:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @deref_aliases.setter
    def deref_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deref_aliases", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GroupSyncStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncStatusConditionsArgs']]]] = None,
                 last_sync_success_time: Optional[pulumi.Input[str]] = None):
        """
        GroupSyncStatus defines the observed state of GroupSync
        :param pulumi.Input[Sequence[pulumi.Input['GroupSyncStatusConditionsArgs']]] conditions: Conditions is a set of Condition instances.
        :param pulumi.Input[str] last_sync_success_time: LastSyncSuccessTime represents the time last synchronization completed successfully
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_sync_success_time is not None:
            pulumi.set(__self__, "last_sync_success_time", last_sync_success_time)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncStatusConditionsArgs']]]]:
        """
        Conditions is a set of Condition instances.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupSyncStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="lastSyncSuccessTime")
    def last_sync_success_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastSyncSuccessTime represents the time last synchronization completed successfully
        """
        return pulumi.get(self, "last_sync_success_time")

    @last_sync_success_time.setter
    def last_sync_success_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_sync_success_time", value)


@pulumi.input_type
class GroupSyncStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
         Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
        :param pulumi.Input[str] type: ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
                Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        :param pulumi.Input[str] reason: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
         Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



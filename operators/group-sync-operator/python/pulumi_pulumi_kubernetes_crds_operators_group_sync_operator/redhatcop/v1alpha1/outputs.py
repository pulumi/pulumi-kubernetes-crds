# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GroupSyncSpec',
    'GroupSyncSpecProviders',
    'GroupSyncSpecProvidersAzure',
    'GroupSyncSpecProvidersAzureCredentialsSecret',
    'GroupSyncSpecProvidersGithub',
    'GroupSyncSpecProvidersGithubCaSecret',
    'GroupSyncSpecProvidersGithubCredentialsSecret',
    'GroupSyncSpecProvidersGitlab',
    'GroupSyncSpecProvidersGitlabCaSecret',
    'GroupSyncSpecProvidersGitlabCredentialsSecret',
    'GroupSyncSpecProvidersKeycloak',
    'GroupSyncSpecProvidersKeycloakCaSecret',
    'GroupSyncSpecProvidersKeycloakCredentialsSecret',
    'GroupSyncSpecProvidersLdap',
    'GroupSyncSpecProvidersLdapActiveDirectory',
    'GroupSyncSpecProvidersLdapActiveDirectoryUsersQuery',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectory',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQuery',
    'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQuery',
    'GroupSyncSpecProvidersLdapCaSecret',
    'GroupSyncSpecProvidersLdapCredentialsSecret',
    'GroupSyncSpecProvidersLdapRfc2307',
    'GroupSyncSpecProvidersLdapRfc2307GroupsQuery',
    'GroupSyncSpecProvidersLdapRfc2307UsersQuery',
    'GroupSyncStatus',
    'GroupSyncStatusConditions',
]

@pulumi.output_type
class GroupSyncSpec(dict):
    """
    GroupSyncSpec defines the desired state of GroupSync
    """
    def __init__(__self__, *,
                 providers: Optional[Sequence['outputs.GroupSyncSpecProviders']] = None,
                 schedule: Optional[str] = None):
        """
        GroupSyncSpec defines the desired state of GroupSync
        :param Sequence['GroupSyncSpecProvidersArgs'] providers: List of Providers that can be mounted by containers belonging to the pod.
        """
        if providers is not None:
            pulumi.set(__self__, "providers", providers)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def providers(self) -> Optional[Sequence['outputs.GroupSyncSpecProviders']]:
        """
        List of Providers that can be mounted by containers belonging to the pod.
        """
        return pulumi.get(self, "providers")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProviders(dict):
    """
    Provider represents the container for a single provider
    """
    def __init__(__self__, *,
                 azure: Optional['outputs.GroupSyncSpecProvidersAzure'] = None,
                 github: Optional['outputs.GroupSyncSpecProvidersGithub'] = None,
                 gitlab: Optional['outputs.GroupSyncSpecProvidersGitlab'] = None,
                 keycloak: Optional['outputs.GroupSyncSpecProvidersKeycloak'] = None,
                 ldap: Optional['outputs.GroupSyncSpecProvidersLdap'] = None,
                 name: Optional[str] = None):
        """
        Provider represents the container for a single provider
        :param 'GroupSyncSpecProvidersAzureArgs' azure: Azure represents the Azure provider
        :param 'GroupSyncSpecProvidersGithubArgs' github: GitHub represents the GitHub provider
        :param 'GroupSyncSpecProvidersGitlabArgs' gitlab: GitLab represents the GitLab provider
        :param 'GroupSyncSpecProvidersKeycloakArgs' keycloak: Keycloak represents the Keycloak provider
        :param 'GroupSyncSpecProvidersLdapArgs' ldap: Ldap represents the LDAP provider
        :param str name: Name represents the name of the provider
        """
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if keycloak is not None:
            pulumi.set(__self__, "keycloak", keycloak)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.GroupSyncSpecProvidersAzure']:
        """
        Azure represents the Azure provider
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.GroupSyncSpecProvidersGithub']:
        """
        GitHub represents the GitHub provider
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.GroupSyncSpecProvidersGitlab']:
        """
        GitLab represents the GitLab provider
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter
    def keycloak(self) -> Optional['outputs.GroupSyncSpecProvidersKeycloak']:
        """
        Keycloak represents the Keycloak provider
        """
        return pulumi.get(self, "keycloak")

    @property
    @pulumi.getter
    def ldap(self) -> Optional['outputs.GroupSyncSpecProvidersLdap']:
        """
        Ldap represents the LDAP provider
        """
        return pulumi.get(self, "ldap")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name represents the name of the provider
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersAzure(dict):
    """
    Azure represents the Azure provider
    """
    def __init__(__self__, *,
                 credentials_secret: 'outputs.GroupSyncSpecProvidersAzureCredentialsSecret',
                 groups: Optional[Sequence[str]] = None,
                 insecure: Optional[bool] = None,
                 url: Optional[str] = None):
        """
        Azure represents the Azure provider
        :param 'GroupSyncSpecProvidersAzureCredentialsSecretArgs' credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        :param Sequence[str] groups: Groups represents a filtered list of groups to synchronize
        :param bool insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure
        :param str url: URL is the location of the Azure platform
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> 'outputs.GroupSyncSpecProvidersAzureCredentialsSecret':
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        """
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the location of the Azure platform
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersAzureCredentialsSecret(dict):
    """
    CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGithub(dict):
    """
    GitHub represents the GitHub provider
    """
    def __init__(__self__, *,
                 credentials_secret: 'outputs.GroupSyncSpecProvidersGithubCredentialsSecret',
                 ca_secret: Optional['outputs.GroupSyncSpecProvidersGithubCaSecret'] = None,
                 insecure: Optional[bool] = None,
                 organization: Optional[str] = None,
                 teams: Optional[Sequence[str]] = None,
                 url: Optional[str] = None):
        """
        GitHub represents the GitHub provider
        :param 'GroupSyncSpecProvidersGithubCredentialsSecretArgs' credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        :param 'GroupSyncSpecProvidersGithubCaSecretArgs' ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        :param bool insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab
        :param str organization: Organization represents the location to source teams to synchronize
        :param Sequence[str] teams: Teams represents a filtered list of teams to synchronize
        :param str url: URL is the location of the GitHub server
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> 'outputs.GroupSyncSpecProvidersGithubCredentialsSecret':
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        """
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional['outputs.GroupSyncSpecProvidersGithubCaSecret']:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        """
        return pulumi.get(self, "ca_secret")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        Organization represents the location to source teams to synchronize
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams represents a filtered list of teams to synchronize
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the location of the GitHub server
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGithubCaSecret(dict):
    """
    CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGithubCredentialsSecret(dict):
    """
    CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitHub server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGitlab(dict):
    """
    GitLab represents the GitLab provider
    """
    def __init__(__self__, *,
                 credentials_secret: 'outputs.GroupSyncSpecProvidersGitlabCredentialsSecret',
                 ca_secret: Optional['outputs.GroupSyncSpecProvidersGitlabCaSecret'] = None,
                 groups: Optional[Sequence[str]] = None,
                 insecure: Optional[bool] = None,
                 url: Optional[str] = None):
        """
        GitLab represents the GitLab provider
        :param 'GroupSyncSpecProvidersGitlabCredentialsSecretArgs' credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        :param 'GroupSyncSpecProvidersGitlabCaSecretArgs' ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param Sequence[str] groups: Groups represents a filtered list of groups to synchronize
        :param bool insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab
        :param str url: URL is the location of the GitLub server
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> 'outputs.GroupSyncSpecProvidersGitlabCredentialsSecret':
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        """
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional['outputs.GroupSyncSpecProvidersGitlabCaSecret']:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        """
        return pulumi.get(self, "ca_secret")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the location of the GitLub server
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGitlabCaSecret(dict):
    """
    CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersGitlabCredentialsSecret(dict):
    """
    CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the GitLab server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersKeycloak(dict):
    """
    Keycloak represents the Keycloak provider
    """
    def __init__(__self__, *,
                 credentials_secret: 'outputs.GroupSyncSpecProvidersKeycloakCredentialsSecret',
                 realm: str,
                 url: str,
                 ca_secret: Optional['outputs.GroupSyncSpecProvidersKeycloakCaSecret'] = None,
                 groups: Optional[Sequence[str]] = None,
                 insecure: Optional[bool] = None,
                 login_realm: Optional[str] = None,
                 scope: Optional[str] = None):
        """
        Keycloak represents the Keycloak provider
        :param 'GroupSyncSpecProvidersKeycloakCredentialsSecretArgs' credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        :param str realm: Realm is the realm containing the groups to synchronize against
        :param str url: URL is the location of the Keycloak server
        :param 'GroupSyncSpecProvidersKeycloakCaSecretArgs' ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        :param Sequence[str] groups: Groups represents a filtered list of groups to synchronize
        :param bool insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak
        :param str login_realm: LoginRealm is the Keycloak realm to authenticate against
        :param str scope: Scope represents the depth for which groups will be synchronized
        """
        pulumi.set(__self__, "credentials_secret", credentials_secret)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "url", url)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if login_realm is not None:
            pulumi.set(__self__, "login_realm", login_realm)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> 'outputs.GroupSyncSpecProvidersKeycloakCredentialsSecret':
        """
        CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        """
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter
    def realm(self) -> str:
        """
        Realm is the realm containing the groups to synchronize against
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is the location of the Keycloak server
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional['outputs.GroupSyncSpecProvidersKeycloakCaSecret']:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        """
        return pulumi.get(self, "ca_secret")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        Groups represents a filtered list of groups to synchronize
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter(name="loginRealm")
    def login_realm(self) -> Optional[str]:
        """
        LoginRealm is the Keycloak realm to authenticate against
        """
        return pulumi.get(self, "login_realm")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Scope represents the depth for which groups will be synchronized
        """
        return pulumi.get(self, "scope")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersKeycloakCaSecret(dict):
    """
    CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersKeycloakCredentialsSecret(dict):
    """
    CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdap(dict):
    """
    Ldap represents the LDAP provider
    """
    def __init__(__self__, *,
                 url: str,
                 active_directory: Optional['outputs.GroupSyncSpecProvidersLdapActiveDirectory'] = None,
                 augmented_active_directory: Optional['outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectory'] = None,
                 blacklist: Optional[Sequence[str]] = None,
                 ca_secret: Optional['outputs.GroupSyncSpecProvidersLdapCaSecret'] = None,
                 credentials_secret: Optional['outputs.GroupSyncSpecProvidersLdapCredentialsSecret'] = None,
                 group_uid_name_mapping: Optional[Mapping[str, str]] = None,
                 insecure: Optional[bool] = None,
                 rfc2307: Optional['outputs.GroupSyncSpecProvidersLdapRfc2307'] = None,
                 whitelist: Optional[Sequence[str]] = None):
        """
        Ldap represents the LDAP provider
        :param str url: URL is the location of the LDAP Server
        :param 'GroupSyncSpecProvidersLdapActiveDirectoryArgs' active_directory: ActiveDirectoryConfig represents the configuration for Active Directory
        :param 'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryArgs' augmented_active_directory: ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        :param Sequence[str] blacklist: Black represents a list of groups to not synchronize
        :param 'GroupSyncSpecProvidersLdapCaSecretArgs' ca_secret: CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param 'GroupSyncSpecProvidersLdapCredentialsSecretArgs' credentials_secret: CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        :param Mapping[str, str] group_uid_name_mapping: / LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names
        :param bool insecure: Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP
        :param 'GroupSyncSpecProvidersLdapRfc2307Args' rfc2307: RFC2307Config represents the configuration for a RFC2307 schema
        :param Sequence[str] whitelist: Whitelist represents a list of groups to synchronize
        """
        pulumi.set(__self__, "url", url)
        if active_directory is not None:
            pulumi.set(__self__, "active_directory", active_directory)
        if augmented_active_directory is not None:
            pulumi.set(__self__, "augmented_active_directory", augmented_active_directory)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if ca_secret is not None:
            pulumi.set(__self__, "ca_secret", ca_secret)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if group_uid_name_mapping is not None:
            pulumi.set(__self__, "group_uid_name_mapping", group_uid_name_mapping)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if rfc2307 is not None:
            pulumi.set(__self__, "rfc2307", rfc2307)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is the location of the LDAP Server
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> Optional['outputs.GroupSyncSpecProvidersLdapActiveDirectory']:
        """
        ActiveDirectoryConfig represents the configuration for Active Directory
        """
        return pulumi.get(self, "active_directory")

    @property
    @pulumi.getter(name="augmentedActiveDirectory")
    def augmented_active_directory(self) -> Optional['outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectory']:
        """
        ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        """
        return pulumi.get(self, "augmented_active_directory")

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[Sequence[str]]:
        """
        Black represents a list of groups to not synchronize
        """
        return pulumi.get(self, "blacklist")

    @property
    @pulumi.getter(name="caSecret")
    def ca_secret(self) -> Optional['outputs.GroupSyncSpecProvidersLdapCaSecret']:
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        """
        return pulumi.get(self, "ca_secret")

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional['outputs.GroupSyncSpecProvidersLdapCredentialsSecret']:
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        """
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter(name="groupUIDNameMapping")
    def group_uid_name_mapping(self) -> Optional[Mapping[str, str]]:
        """
        / LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names
        """
        return pulumi.get(self, "group_uid_name_mapping")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def rfc2307(self) -> Optional['outputs.GroupSyncSpecProvidersLdapRfc2307']:
        """
        RFC2307Config represents the configuration for a RFC2307 schema
        """
        return pulumi.get(self, "rfc2307")

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[Sequence[str]]:
        """
        Whitelist represents a list of groups to synchronize
        """
        return pulumi.get(self, "whitelist")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapActiveDirectory(dict):
    """
    ActiveDirectoryConfig represents the configuration for Active Directory
    """
    def __init__(__self__, *,
                 group_membership_attributes: Sequence[str],
                 user_name_attributes: Sequence[str],
                 users_query: 'outputs.GroupSyncSpecProvidersLdapActiveDirectoryUsersQuery'):
        """
        ActiveDirectoryConfig represents the configuration for Active Directory
        :param Sequence[str] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        :param Sequence[str] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        :param 'GroupSyncSpecProvidersLdapActiveDirectoryUsersQueryArgs' users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "users_query", users_query)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> Sequence[str]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        """
        return pulumi.get(self, "group_membership_attributes")

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> Sequence[str]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        """
        return pulumi.get(self, "user_name_attributes")

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> 'outputs.GroupSyncSpecProvidersLdapActiveDirectoryUsersQuery':
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapActiveDirectoryUsersQuery(dict):
    """
    AllUsersQuery holds the template for an LDAP query that returns user entries.
    """
    def __init__(__self__, *,
                 base_dn: str,
                 deref_aliases: Optional[str] = None,
                 filter: Optional[str] = None,
                 page_size: Optional[int] = None,
                 scope: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param str base_dn: The DN of the branch of the directory where all searches should start from
        :param str deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param str filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param int page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param str scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param int timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> str:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[str]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectory(dict):
    """
    ActiveDirectoryConfig represents the configuration for Augmented Active Directory
    """
    def __init__(__self__, *,
                 group_membership_attributes: Sequence[str],
                 group_name_attributes: Sequence[str],
                 group_uid_attribute: str,
                 groups_query: 'outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQuery',
                 user_name_attributes: Sequence[str],
                 users_query: 'outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQuery'):
        """
        ActiveDirectoryConfig represents the configuration for Augmented Active Directory
        :param Sequence[str] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        :param Sequence[str] group_name_attributes: GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        :param str group_uid_attribute: GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        :param 'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQueryArgs' groups_query: AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param Sequence[str] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        :param 'GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQueryArgs' users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "group_name_attributes", group_name_attributes)
        pulumi.set(__self__, "group_uid_attribute", group_uid_attribute)
        pulumi.set(__self__, "groups_query", groups_query)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "users_query", users_query)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> Sequence[str]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP user entry will be interpreted as the groups it is a member of
        """
        return pulumi.get(self, "group_membership_attributes")

    @property
    @pulumi.getter(name="groupNameAttributes")
    def group_name_attributes(self) -> Sequence[str]:
        """
        GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        """
        return pulumi.get(self, "group_name_attributes")

    @property
    @pulumi.getter(name="groupUIDAttribute")
    def group_uid_attribute(self) -> str:
        """
        GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        """
        return pulumi.get(self, "group_uid_attribute")

    @property
    @pulumi.getter(name="groupsQuery")
    def groups_query(self) -> 'outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQuery':
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        """
        return pulumi.get(self, "groups_query")

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> Sequence[str]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be interpreted as its OpenShift user name.
        """
        return pulumi.get(self, "user_name_attributes")

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> 'outputs.GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQuery':
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectoryGroupsQuery(dict):
    """
    AllGroupsQuery holds the template for an LDAP query that returns group entries.
    """
    def __init__(__self__, *,
                 base_dn: str,
                 deref_aliases: Optional[str] = None,
                 filter: Optional[str] = None,
                 page_size: Optional[int] = None,
                 scope: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param str base_dn: The DN of the branch of the directory where all searches should start from
        :param str deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param str filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param int page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param str scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param int timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> str:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[str]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapAugmentedActiveDirectoryUsersQuery(dict):
    """
    AllUsersQuery holds the template for an LDAP query that returns user entries.
    """
    def __init__(__self__, *,
                 base_dn: str,
                 deref_aliases: Optional[str] = None,
                 filter: Optional[str] = None,
                 page_size: Optional[int] = None,
                 scope: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param str base_dn: The DN of the branch of the directory where all searches should start from
        :param str deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param str filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param int page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param str scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param int timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> str:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[str]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapCaSecret(dict):
    """
    CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapCredentialsSecret(dict):
    """
    CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 key: Optional[str] = None):
        """
        CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP
        :param str name: Name represents the name of the secret
        :param str namespace: Namespace represents the namespace containing the secret
        :param str key: Key represents the specific key to reference from the secret
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name represents the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace represents the namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key represents the specific key to reference from the secret
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapRfc2307(dict):
    """
    RFC2307Config represents the configuration for a RFC2307 schema
    """
    def __init__(__self__, *,
                 group_membership_attributes: Sequence[str],
                 group_name_attributes: Sequence[str],
                 group_uid_attribute: str,
                 groups_query: 'outputs.GroupSyncSpecProvidersLdapRfc2307GroupsQuery',
                 user_name_attributes: Sequence[str],
                 user_uid_attribute: str,
                 users_query: 'outputs.GroupSyncSpecProvidersLdapRfc2307UsersQuery',
                 tolerate_member_not_found_errors: Optional[bool] = None,
                 tolerate_member_out_of_scope_errors: Optional[bool] = None):
        """
        RFC2307Config represents the configuration for a RFC2307 schema
        :param Sequence[str] group_membership_attributes: GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute
        :param Sequence[str] group_name_attributes: GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        :param str group_uid_attribute: GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        :param 'GroupSyncSpecProvidersLdapRfc2307GroupsQueryArgs' groups_query: AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param Sequence[str] user_name_attributes: UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider
        :param str user_uid_attribute: UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes
        :param 'GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs' users_query: AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param bool tolerate_member_not_found_errors: TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution.
        :param bool tolerate_member_out_of_scope_errors: TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution.
        """
        pulumi.set(__self__, "group_membership_attributes", group_membership_attributes)
        pulumi.set(__self__, "group_name_attributes", group_name_attributes)
        pulumi.set(__self__, "group_uid_attribute", group_uid_attribute)
        pulumi.set(__self__, "groups_query", groups_query)
        pulumi.set(__self__, "user_name_attributes", user_name_attributes)
        pulumi.set(__self__, "user_uid_attribute", user_uid_attribute)
        pulumi.set(__self__, "users_query", users_query)
        if tolerate_member_not_found_errors is not None:
            pulumi.set(__self__, "tolerate_member_not_found_errors", tolerate_member_not_found_errors)
        if tolerate_member_out_of_scope_errors is not None:
            pulumi.set(__self__, "tolerate_member_out_of_scope_errors", tolerate_member_out_of_scope_errors)

    @property
    @pulumi.getter(name="groupMembershipAttributes")
    def group_membership_attributes(self) -> Sequence[str]:
        """
        GroupMembershipAttributes defines which attributes on an LDAP group entry will be interpreted  as its members. The values contained in those attributes must be queryable by your UserUIDAttribute
        """
        return pulumi.get(self, "group_membership_attributes")

    @property
    @pulumi.getter(name="groupNameAttributes")
    def group_name_attributes(self) -> Sequence[str]:
        """
        GroupNameAttributes defines which attributes on an LDAP group entry will be interpreted as its name to use for an OpenShift group
        """
        return pulumi.get(self, "group_name_attributes")

    @property
    @pulumi.getter(name="groupUIDAttribute")
    def group_uid_attribute(self) -> str:
        """
        GroupUIDAttributes defines which attribute on an LDAP group entry will be interpreted as its unique identifier. (ldapGroupUID)
        """
        return pulumi.get(self, "group_uid_attribute")

    @property
    @pulumi.getter(name="groupsQuery")
    def groups_query(self) -> 'outputs.GroupSyncSpecProvidersLdapRfc2307GroupsQuery':
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        """
        return pulumi.get(self, "groups_query")

    @property
    @pulumi.getter(name="userNameAttributes")
    def user_name_attributes(self) -> Sequence[str]:
        """
        UserNameAttributes defines which attributes on an LDAP user entry will be used, in order, as its OpenShift user name. The first attribute with a non-empty value is used. This should match your PreferredUsername setting for your LDAPPasswordIdentityProvider
        """
        return pulumi.get(self, "user_name_attributes")

    @property
    @pulumi.getter(name="userUIDAttribute")
    def user_uid_attribute(self) -> str:
        """
        UserUIDAttribute defines which attribute on an LDAP user entry will be interpreted as its unique identifier. It must correspond to values that will be found from the GroupMembershipAttributes
        """
        return pulumi.get(self, "user_uid_attribute")

    @property
    @pulumi.getter(name="usersQuery")
    def users_query(self) -> 'outputs.GroupSyncSpecProvidersLdapRfc2307UsersQuery':
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        """
        return pulumi.get(self, "users_query")

    @property
    @pulumi.getter(name="tolerateMemberNotFoundErrors")
    def tolerate_member_not_found_errors(self) -> Optional[bool]:
        """
        TolerateMemberNotFoundErrors determines the behavior of the LDAP sync job when missing user entries are encountered. If 'true', an LDAP query for users that doesn't find any will be tolerated and an only and error will be logged. If 'false', the LDAP sync job will fail if a query for users doesn't find any. The default value is 'false'. Misconfigured LDAP sync jobs with this flag set to 'true' can cause group membership to be removed, so it is recommended to use this flag with caution.
        """
        return pulumi.get(self, "tolerate_member_not_found_errors")

    @property
    @pulumi.getter(name="tolerateMemberOutOfScopeErrors")
    def tolerate_member_out_of_scope_errors(self) -> Optional[bool]:
        """
        TolerateMemberOutOfScopeErrors determines the behavior of the LDAP sync job when out-of-scope user entries are encountered. If 'true', an LDAP query for a user that falls outside of the base DN given for the all user query will be tolerated and only an error will be logged. If 'false', the LDAP sync job will fail if a user query would search outside of the base DN specified by the all user query. Misconfigured LDAP sync jobs with this flag set to 'true' can result in groups missing users, so it is recommended to use this flag with caution.
        """
        return pulumi.get(self, "tolerate_member_out_of_scope_errors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapRfc2307GroupsQuery(dict):
    """
    AllGroupsQuery holds the template for an LDAP query that returns group entries.
    """
    def __init__(__self__, *,
                 base_dn: str,
                 deref_aliases: Optional[str] = None,
                 filter: Optional[str] = None,
                 page_size: Optional[int] = None,
                 scope: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        AllGroupsQuery holds the template for an LDAP query that returns group entries.
        :param str base_dn: The DN of the branch of the directory where all searches should start from
        :param str deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param str filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param int page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param str scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param int timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> str:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[str]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncSpecProvidersLdapRfc2307UsersQuery(dict):
    """
    AllUsersQuery holds the template for an LDAP query that returns user entries.
    """
    def __init__(__self__, *,
                 base_dn: str,
                 deref_aliases: Optional[str] = None,
                 filter: Optional[str] = None,
                 page_size: Optional[int] = None,
                 scope: Optional[str] = None,
                 timeout: Optional[int] = None):
        """
        AllUsersQuery holds the template for an LDAP query that returns user entries.
        :param str base_dn: The DN of the branch of the directory where all searches should start from
        :param str deref_aliases: The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        :param str filter: Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        :param int page_size: PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        :param str scope: The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        :param int timeout: TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        pulumi.set(__self__, "base_dn", base_dn)
        if deref_aliases is not None:
            pulumi.set(__self__, "deref_aliases", deref_aliases)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="baseDN")
    def base_dn(self) -> str:
        """
        The DN of the branch of the directory where all searches should start from
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="derefAliases")
    def deref_aliases(self) -> Optional[str]:
        """
        The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        """
        return pulumi.get(self, "deref_aliases")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        """
        PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        """
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        """
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncStatus(dict):
    """
    GroupSyncStatus defines the observed state of GroupSync
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.GroupSyncStatusConditions']] = None,
                 last_sync_success_time: Optional[str] = None):
        """
        GroupSyncStatus defines the observed state of GroupSync
        :param Sequence['GroupSyncStatusConditionsArgs'] conditions: Conditions is a set of Condition instances.
        :param str last_sync_success_time: LastSyncSuccessTime represents the time last synchronization completed successfully
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_sync_success_time is not None:
            pulumi.set(__self__, "last_sync_success_time", last_sync_success_time)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GroupSyncStatusConditions']]:
        """
        Conditions is a set of Condition instances.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="lastSyncSuccessTime")
    def last_sync_success_time(self) -> Optional[str]:
        """
        LastSyncSuccessTime represents the time last synchronization completed successfully
        """
        return pulumi.get(self, "last_sync_success_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupSyncStatusConditions(dict):
    """
    Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
     Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
         Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
        :param str type: ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
                Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        :param str reason: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
         Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



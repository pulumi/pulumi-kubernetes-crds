// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1
{

    /// <summary>
    /// AllUsersQuery holds the template for an LDAP query that returns user entries.
    /// </summary>
    public class GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DN of the branch of the directory where all searches should start from
        /// </summary>
        [Input("baseDN", required: true)]
        public Input<string> BaseDN { get; set; } = null!;

        /// <summary>
        /// The (optional) behavior of the search with regards to alisases. Can be: never:  never dereference aliases, search: only dereference in searching, base:   only dereference in finding the base object, always: always dereference Defaults to always dereferencing if not set
        /// </summary>
        [Input("derefAliases")]
        public Input<string>? DerefAliases { get; set; }

        /// <summary>
        /// Filter is a valid LDAP search filter that retrieves all relevant entries from the LDAP server with the base DN
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// PageSize is the maximum preferred page size, measured in LDAP entries. A page size of 0 means no paging will be done.
        /// </summary>
        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// The (optional) scope of the search. Can be: base: only the base object, one:  all object on the base level, sub:  the entire subtree Defaults to the entire subtree if not set
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// TimeLimit holds the limit of time in seconds that any request to the server can remain outstanding before the wait for a response is given up. If this is 0, no client-side limit is imposed
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public GroupSyncSpecProvidersLdapRfc2307UsersQueryArgs()
        {
        }
    }
}

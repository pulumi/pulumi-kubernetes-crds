# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ClusterInstallationSpecArgs',
    'ClusterInstallationSpecDatabaseArgs',
    'ClusterInstallationSpecElasticSearchArgs',
    'ClusterInstallationSpecMinioArgs',
    'ClusterInstallationStatusArgs',
]

@pulumi.input_type
class ClusterInstallationSpecArgs:
    def __init__(__self__, *,
                 ingress_name: pulumi.Input[str],
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 database: Optional[pulumi.Input['ClusterInstallationSpecDatabaseArgs']] = None,
                 elastic_search: Optional[pulumi.Input['ClusterInstallationSpecElasticSearchArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ingress_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 mattermost_license_secret: Optional[pulumi.Input[str]] = None,
                 minio: Optional[pulumi.Input['ClusterInstallationSpecMinioArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 service_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 use_service_load_balancer: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Specification of the desired behavior of the Mattermost cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
        :param pulumi.Input[str] ingress_name: IngressName defines the name to be used when creating the ingress rules
        :param pulumi.Input[Mapping[str, Any]] affinity: If specified, affinity will define the pod's scheduling constraints
        :param pulumi.Input[str] image: Image defines the ClusterInstallation Docker image.
        :param pulumi.Input[str] mattermost_license_secret: Secret that contains the mattermost license
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[int] replicas: Replicas defines the number of replicas to use for the Mattermost app servers. Setting this will override the number of replicas set by 'Size'.
        :param pulumi.Input[Mapping[str, Any]] resources: Defines the resource requests and limits for the Mattermost app server pods.
        :param pulumi.Input[str] size: Size defines the size of the ClusterInstallation. This is typically specified in number of users. This will set replica and resource requests/limits appropriately for the provided number of users. Accepted values are: 100users, 1000users, 5000users, 10000users, 250000users. Defaults to 5000users. Setting 'Replicas', 'Resources', 'Minio.Replicas', 'Minio.Resource', 'Database.Replicas', or 'Database.Resources' will override the values set by Size.
        :param pulumi.Input[str] version: Version defines the ClusterInstallation Docker image version.
        """
        pulumi.set(__self__, "ingress_name", ingress_name)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if elastic_search is not None:
            pulumi.set(__self__, "elastic_search", elastic_search)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ingress_annotations is not None:
            pulumi.set(__self__, "ingress_annotations", ingress_annotations)
        if mattermost_license_secret is not None:
            pulumi.set(__self__, "mattermost_license_secret", mattermost_license_secret)
        if minio is not None:
            pulumi.set(__self__, "minio", minio)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_annotations is not None:
            pulumi.set(__self__, "service_annotations", service_annotations)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if use_service_load_balancer is not None:
            pulumi.set(__self__, "use_service_load_balancer", use_service_load_balancer)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> pulumi.Input[str]:
        """
        IngressName defines the name to be used when creating the ingress rules
        """
        return pulumi.get(self, "ingress_name")

    @ingress_name.setter
    def ingress_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ingress_name", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        If specified, affinity will define the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['ClusterInstallationSpecDatabaseArgs']]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['ClusterInstallationSpecDatabaseArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="elasticSearch")
    def elastic_search(self) -> Optional[pulumi.Input['ClusterInstallationSpecElasticSearchArgs']]:
        return pulumi.get(self, "elastic_search")

    @elastic_search.setter
    def elastic_search(self, value: Optional[pulumi.Input['ClusterInstallationSpecElasticSearchArgs']]):
        pulumi.set(self, "elastic_search", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image defines the ClusterInstallation Docker image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="ingressAnnotations")
    def ingress_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "ingress_annotations")

    @ingress_annotations.setter
    def ingress_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ingress_annotations", value)

    @property
    @pulumi.getter(name="mattermostLicenseSecret")
    def mattermost_license_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret that contains the mattermost license
        """
        return pulumi.get(self, "mattermost_license_secret")

    @mattermost_license_secret.setter
    def mattermost_license_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mattermost_license_secret", value)

    @property
    @pulumi.getter
    def minio(self) -> Optional[pulumi.Input['ClusterInstallationSpecMinioArgs']]:
        return pulumi.get(self, "minio")

    @minio.setter
    def minio(self, value: Optional[pulumi.Input['ClusterInstallationSpecMinioArgs']]):
        pulumi.set(self, "minio", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Replicas defines the number of replicas to use for the Mattermost app servers. Setting this will override the number of replicas set by 'Size'.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defines the resource requests and limits for the Mattermost app server pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceAnnotations")
    def service_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "service_annotations")

    @service_annotations.setter
    def service_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_annotations", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size defines the size of the ClusterInstallation. This is typically specified in number of users. This will set replica and resource requests/limits appropriately for the provided number of users. Accepted values are: 100users, 1000users, 5000users, 10000users, 250000users. Defaults to 5000users. Setting 'Replicas', 'Resources', 'Minio.Replicas', 'Minio.Resource', 'Database.Replicas', or 'Database.Resources' will override the values set by Size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="useServiceLoadBalancer")
    def use_service_load_balancer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_service_load_balancer")

    @use_service_load_balancer.setter
    def use_service_load_balancer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_service_load_balancer", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version defines the ClusterInstallation Docker image version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterInstallationSpecDatabaseArgs:
    def __init__(__self__, *,
                 external_secret: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 storage_size: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_secret: If the user want to use an external DB. This can be inside the same k8s cluster or outside like AWS RDS.
        :param pulumi.Input[int] replicas: Defines the number of database replicas. For redundancy use at least 2 replicas. Setting this will override the number of replicas set by 'Size'.
        :param pulumi.Input[Mapping[str, Any]] resources: Defines the resource requests and limits for the database pods.
        :param pulumi.Input[str] storage_size: Defines the storage size for the database. ie 50Gi
        """
        if external_secret is not None:
            pulumi.set(__self__, "external_secret", external_secret)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="externalSecret")
    def external_secret(self) -> Optional[pulumi.Input[str]]:
        """
        If the user want to use an external DB. This can be inside the same k8s cluster or outside like AWS RDS.
        """
        return pulumi.get(self, "external_secret")

    @external_secret.setter
    def external_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_secret", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the number of database replicas. For redundancy use at least 2 replicas. Setting this will override the number of replicas set by 'Size'.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defines the resource requests and limits for the database pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the storage size for the database. ie 50Gi
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterInstallationSpecElasticSearchArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ClusterInstallationSpecMinioArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 storage_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] replicas: Defines the number of Minio replicas. Supply 1 to run Minio in standalone mode with no redundancy. Supply 4 or more to run Minio in distributed mode. Note that it is not possible to upgrade Minio from standalone to distributed mode. Setting this will override the number of replicas set by 'Size'. More info: https://docs.min.io/docs/distributed-minio-quickstart-guide.html
        :param pulumi.Input[Mapping[str, Any]] resources: Defines the resource requests and limits for the Minio pods.
        :param pulumi.Input[str] storage_size: Defines the storage size for Minio. ie 50Gi
        """
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the number of Minio replicas. Supply 1 to run Minio in standalone mode with no redundancy. Supply 4 or more to run Minio in distributed mode. Note that it is not possible to upgrade Minio from standalone to distributed mode. Setting this will override the number of replicas set by 'Size'. More info: https://docs.min.io/docs/distributed-minio-quickstart-guide.html
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defines the resource requests and limits for the Minio pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the storage size for Minio. ie 50Gi
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_size", value)


@pulumi.input_type
class ClusterInstallationStatusArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 updated_replicas: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Most recent observed status of the Mattermost cluster. Read-only. Not included when requesting from the apiserver, only from the Mattermost Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
        :param pulumi.Input[str] endpoint: The endpoint to access the Mattermost instance
        :param pulumi.Input[str] image: The image running on the pods in the Mattermost instance
        :param pulumi.Input[int] replicas: Total number of non-terminated pods targeted by this Mattermost deployment
        :param pulumi.Input[str] state: Represents the running state of the Mattermost instance
        :param pulumi.Input[int] updated_replicas: Total number of non-terminated pods targeted by this Mattermost deployment that are running with the desired image.
        :param pulumi.Input[str] version: The version currently running in the Mattermost instance
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if updated_replicas is not None:
            pulumi.set(__self__, "updated_replicas", updated_replicas)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access the Mattermost instance
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The image running on the pods in the Mattermost instance
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this Mattermost deployment
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Represents the running state of the Mattermost instance
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updatedReplicas")
    def updated_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this Mattermost deployment that are running with the desired image.
        """
        return pulumi.get(self, "updated_replicas")

    @updated_replicas.setter
    def updated_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_replicas", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version currently running in the Mattermost instance
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1
{

    [OutputType]
    public sealed class ClusterInstallationSpec
    {
        /// <summary>
        /// If specified, affinity will define the pod's scheduling constraints
        /// </summary>
        public readonly ImmutableDictionary<string, object> Affinity;
        public readonly Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecDatabase Database;
        public readonly Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecElasticSearch ElasticSearch;
        /// <summary>
        /// Image defines the ClusterInstallation Docker image.
        /// </summary>
        public readonly string Image;
        public readonly ImmutableDictionary<string, string> IngressAnnotations;
        /// <summary>
        /// IngressName defines the name to be used when creating the ingress rules
        /// </summary>
        public readonly string IngressName;
        /// <summary>
        /// Secret that contains the mattermost license
        /// </summary>
        public readonly string MattermostLicenseSecret;
        public readonly Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecMinio Minio;
        /// <summary>
        /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        /// </summary>
        public readonly ImmutableDictionary<string, string> NodeSelector;
        /// <summary>
        /// Replicas defines the number of replicas to use for the Mattermost app servers. Setting this will override the number of replicas set by 'Size'.
        /// </summary>
        public readonly int Replicas;
        /// <summary>
        /// Defines the resource requests and limits for the Mattermost app server pods.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Resources;
        public readonly ImmutableDictionary<string, string> ServiceAnnotations;
        /// <summary>
        /// Size defines the size of the ClusterInstallation. This is typically specified in number of users. This will set replica and resource requests/limits appropriately for the provided number of users. Accepted values are: 100users, 1000users, 5000users, 10000users, 250000users. Defaults to 5000users. Setting 'Replicas', 'Resources', 'Minio.Replicas', 'Minio.Resource', 'Database.Replicas', or 'Database.Resources' will override the values set by Size.
        /// </summary>
        public readonly string Size;
        public readonly bool UseServiceLoadBalancer;
        /// <summary>
        /// Version defines the ClusterInstallation Docker image version.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private ClusterInstallationSpec(
            ImmutableDictionary<string, object> affinity,

            Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecDatabase database,

            Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecElasticSearch elasticSearch,

            string image,

            ImmutableDictionary<string, string> ingressAnnotations,

            string ingressName,

            string mattermostLicenseSecret,

            Pulumi.Kubernetes.Types.Outputs.Mattermost.V1Alpha1.ClusterInstallationSpecMinio minio,

            ImmutableDictionary<string, string> nodeSelector,

            int replicas,

            ImmutableDictionary<string, object> resources,

            ImmutableDictionary<string, string> serviceAnnotations,

            string size,

            bool useServiceLoadBalancer,

            string version)
        {
            Affinity = affinity;
            Database = database;
            ElasticSearch = elasticSearch;
            Image = image;
            IngressAnnotations = ingressAnnotations;
            IngressName = ingressName;
            MattermostLicenseSecret = mattermostLicenseSecret;
            Minio = minio;
            NodeSelector = nodeSelector;
            Replicas = replicas;
            Resources = resources;
            ServiceAnnotations = serviceAnnotations;
            Size = size;
            UseServiceLoadBalancer = useServiceLoadBalancer;
            Version = version;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace apps {
    export namespace v1alpha1 {
        /**
         * NexusSpec defines the desired state of Nexus
         */
        export interface NexusSpec {
            /**
             * Full image tag name for this specific deployment Default: docker.io/sonatype/nexus3:latest
             */
            image?: pulumi.Input<string>;
            /**
             * Networking definition
             */
            networking?: pulumi.Input<inputs.apps.v1alpha1.NexusSpecNetworking>;
            /**
             * Persistence definition
             */
            persistence: pulumi.Input<inputs.apps.v1alpha1.NexusSpecPersistence>;
            /**
             * Number of pods replicas desired Default: 1
             */
            replicas: pulumi.Input<number>;
            /**
             * Defined Resources for the Nexus instance
             */
            resources?: pulumi.Input<inputs.apps.v1alpha1.NexusSpecResources>;
            /**
             * ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If you have access to Red Hat Container Catalog, turn this to true to use the certified image provided by Sonatype Default: false
             */
            useRedHatImage: pulumi.Input<boolean>;
        }

        /**
         * Networking definition
         */
        export interface NexusSpecNetworking {
            /**
             * Set to `true` to expose the Nexus application. Default to false.
             */
            expose?: pulumi.Input<boolean>;
            /**
             * Type of networking exposure: NodePort, Route or Ingress. Default to Route on OpenShift and Ingress on Kubernetes.
             */
            exposeAs?: pulumi.Input<string>;
            /**
             * Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
             */
            host?: pulumi.Input<string>;
            /**
             * NodePort defined in the exposed service. Required if exposed via NodePort.
             */
            nodePort?: pulumi.Input<number>;
            /**
             * TLS/SSL-related configuration
             */
            tls?: pulumi.Input<inputs.apps.v1alpha1.NexusSpecNetworkingTls>;
        }

        /**
         * TLS/SSL-related configuration
         */
        export interface NexusSpecNetworkingTls {
            /**
             * When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to false.
             */
            mandatory?: pulumi.Input<boolean>;
            /**
             * When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Persistence definition
         */
        export interface NexusSpecPersistence {
            /**
             * Flag to indicate if this instance will be persistent or not
             */
            persistent: pulumi.Input<boolean>;
            /**
             * StorageClass used by the managed PVC.
             */
            storageClass?: pulumi.Input<string>;
            /**
             * If persistent, the size of the Volume. Defaults: 10Gi
             */
            volumeSize?: pulumi.Input<string>;
        }

        /**
         * Defined Resources for the Nexus instance
         */
        export interface NexusSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.apps.v1alpha1.NexusSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.apps.v1alpha1.NexusSpecResourcesRequests>}>;
        }

        export interface NexusSpecResourcesLimits {
        }

        export interface NexusSpecResourcesRequests {
        }

        /**
         * NexusStatus defines the observed state of Nexus
         */
        export interface NexusStatus {
            /**
             * Condition status for the Nexus deployment
             */
            deploymentStatus?: pulumi.Input<inputs.apps.v1alpha1.NexusStatusDeploymentStatus>;
            /**
             * Route for external service access
             */
            nexusRoute?: pulumi.Input<string>;
            /**
             * Will be "OK" when all objects are created successfully
             */
            nexusStatus?: pulumi.Input<string>;
        }

        /**
         * Condition status for the Nexus deployment
         */
        export interface NexusStatusDeploymentStatus {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
             */
            collisionCount?: pulumi.Input<number>;
            /**
             * Represents the latest available observations of a deployment's current state.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.apps.v1alpha1.NexusStatusDeploymentStatusConditions>[]>;
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Total number of ready pods targeted by this deployment.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
             */
            replicas?: pulumi.Input<number>;
            /**
             * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * DeploymentCondition describes the state of a deployment at a certain point.
         */
        export interface NexusStatusDeploymentStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of deployment condition.
             */
            type: pulumi.Input<string>;
        }
    }
}

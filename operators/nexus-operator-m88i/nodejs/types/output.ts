// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace apps {
    export namespace v1alpha1 {
        /**
         * NexusSpec defines the desired state of Nexus
         */
        export interface NexusSpec {
            /**
             * Automatic updates configuration
             */
            automaticUpdate?: outputs.apps.v1alpha1.NexusSpecAutomaticUpdate;
            /**
             * GenerateRandomAdminPassword enables the random password generation. Defaults to `false`: the default password for a newly created instance is 'admin123', which should be changed in the first login. If set to `true`, you must use the automatically generated 'admin' password, stored in the container's file system at `/nexus-data/admin.password`. The operator uses the default credentials to create a user for itself to create default repositories. If set to `true`, the repositories won't be created since the operator won't fetch for the random password.
             */
            generateRandomAdminPassword?: boolean;
            /**
             * Full image tag name for this specific deployment. Will be ignored if `spec.useRedHatImage` is set to `true`. Default: docker.io/sonatype/nexus3:latest
             */
            image?: string;
            /**
             * The image pull policy for the Nexus image. If left blank behavior will be determined by the image tag (`Always` if "latest" and `IfNotPresent` otherwise). Possible values: `Always`, `IfNotPresent` or `Never`.
             */
            imagePullPolicy?: string;
            /**
             * LivenessProbe describes how the Nexus container liveness probe should work
             */
            livenessProbe?: outputs.apps.v1alpha1.NexusSpecLivenessProbe;
            /**
             * Networking definition
             */
            networking?: outputs.apps.v1alpha1.NexusSpecNetworking;
            /**
             * Persistence definition
             */
            persistence: outputs.apps.v1alpha1.NexusSpecPersistence;
            /**
             * ReadinessProbe describes how the Nexus container readiness probe should work
             */
            readinessProbe?: outputs.apps.v1alpha1.NexusSpecReadinessProbe;
            /**
             * Number of pod replicas desired. Defaults to 0.
             */
            replicas: number;
            /**
             * Defined Resources for the Nexus instance
             */
            resources?: outputs.apps.v1alpha1.NexusSpecResources;
            /**
             * ServerOperations describes the options for the operations performed on the deployed server instance
             */
            serverOperations?: outputs.apps.v1alpha1.NexusSpecServerOperations;
            /**
             * ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR (`metadata.name`).
             */
            serviceAccountName?: string;
            /**
             * If you have access to Red Hat Container Catalog, set this to `true` to use the certified image provided by Sonatype Defaults to `false`
             */
            useRedHatImage: boolean;
        }

        /**
         * Automatic updates configuration
         */
        export interface NexusSpecAutomaticUpdate {
            /**
             * Whether or not the Operator should perform automatic updates. Defaults to `false` (auto updates are enabled). Is set to `false` if `spec.image` is not empty and is different from the default community image.
             */
            disabled?: boolean;
            /**
             * The Nexus image minor version the deployment should stay in. If left blank and automatic updates are enabled the latest minor is set.
             */
            minorVersion?: number;
        }

        /**
         * LivenessProbe describes how the Nexus container liveness probe should work
         */
        export interface NexusSpecLivenessProbe {
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
             */
            timeoutSeconds?: number;
        }

        /**
         * Networking definition
         */
        export interface NexusSpecNetworking {
            /**
             * Set to `true` to expose the Nexus application. Defaults to `false`.
             */
            expose?: boolean;
            /**
             * Type of networking exposure: NodePort, Route or Ingress. Defaults to Route on OpenShift and Ingress on Kubernetes. Routes are only available on Openshift and Ingresses are only available on Kubernetes.
             */
            exposeAs?: string;
            /**
             * Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
             */
            host?: string;
            /**
             * NodePort defined in the exposed service. Required if exposed via NodePort.
             */
            nodePort?: number;
            /**
             * TLS/SSL-related configuration
             */
            tls?: outputs.apps.v1alpha1.NexusSpecNetworkingTls;
        }

        /**
         * TLS/SSL-related configuration
         */
        export interface NexusSpecNetworkingTls {
            /**
             * When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to `false`.
             */
            mandatory?: boolean;
            /**
             * When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
             */
            secretName?: string;
        }

        /**
         * Persistence definition
         */
        export interface NexusSpecPersistence {
            /**
             * Flag to indicate if this instance will be persistent or not
             */
            persistent: boolean;
            /**
             * StorageClass used by the managed PVC.
             */
            storageClass?: string;
            /**
             * If persistent, the size of the Volume. Defaults: 10Gi
             */
            volumeSize?: string;
        }

        /**
         * ReadinessProbe describes how the Nexus container readiness probe should work
         */
        export interface NexusSpecReadinessProbe {
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
             */
            timeoutSeconds?: number;
        }

        /**
         * Defined Resources for the Nexus instance
         */
        export interface NexusSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.apps.v1alpha1.NexusSpecResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.apps.v1alpha1.NexusSpecResourcesRequests};
        }

        export interface NexusSpecResourcesLimits {
        }

        export interface NexusSpecResourcesRequests {
        }

        /**
         * ServerOperations describes the options for the operations performed on the deployed server instance
         */
        export interface NexusSpecServerOperations {
            /**
             * DisableOperatorUserCreation disables the auto-creation of the `nexus-operator` user on the deployed server. This user performs all the operations on the server (such as creating the community repos). If disabled, the Operator will use the default `admin` user. Defaults to `false` (always create the user). Setting this to `true` is not recommended as it grants the Operator more privileges than it needs and it would not be possible to tell apart operations performed by the `admin` and the Operator.
             */
            disableOperatorUserCreation?: boolean;
            /**
             * DisableRepositoryCreation disables the auto-creation of Apache, JBoss and Red Hat repositories and their addition to the Maven Public group in this Nexus instance. Defaults to `false` (always try to create the repos). Set this to `true` to not create them. Only works if `spec.generateRandomAdminPassword` is `false`.
             */
            disableRepositoryCreation?: boolean;
        }

        /**
         * NexusStatus defines the observed state of Nexus
         */
        export interface NexusStatus {
            /**
             * Condition status for the Nexus deployment
             */
            deploymentStatus?: outputs.apps.v1alpha1.NexusStatusDeploymentStatus;
            /**
             * Route for external service access
             */
            nexusRoute?: string;
            /**
             * Will be "OK" when this Nexus instance is up
             */
            nexusStatus?: string;
            /**
             * Gives more information about a failure status
             */
            reason?: string;
            /**
             * ServerOperationsStatus describes the general status for the operations performed in the Nexus server instance
             */
            serverOperationsStatus?: outputs.apps.v1alpha1.NexusStatusServerOperationsStatus;
            /**
             * Conditions reached during an update
             */
            updateConditions?: string[];
        }

        /**
         * Condition status for the Nexus deployment
         */
        export interface NexusStatusDeploymentStatus {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: number;
            /**
             * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a deployment's current state.
             */
            conditions?: outputs.apps.v1alpha1.NexusStatusDeploymentStatusConditions[];
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: number;
            /**
             * Total number of ready pods targeted by this deployment.
             */
            readyReplicas?: number;
            /**
             * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
             */
            replicas?: number;
            /**
             * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
             */
            unavailableReplicas?: number;
            /**
             * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: number;
        }

        /**
         * DeploymentCondition describes the state of a deployment at a certain point.
         */
        export interface NexusStatusDeploymentStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of deployment condition.
             */
            type: string;
        }

        /**
         * ServerOperationsStatus describes the general status for the operations performed in the Nexus server instance
         */
        export interface NexusStatusServerOperationsStatus {
            communityRepositoriesCreated?: boolean;
            mavenCentralUpdated?: boolean;
            mavenPublicURL?: string;
            operatorUserCreated?: boolean;
            reason?: string;
            serverReady?: boolean;
        }
    }
}

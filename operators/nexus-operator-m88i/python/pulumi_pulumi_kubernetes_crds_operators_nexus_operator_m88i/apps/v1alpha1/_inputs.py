# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'NexusSpecArgs',
    'NexusSpecAutomaticUpdateArgs',
    'NexusSpecLivenessProbeArgs',
    'NexusSpecNetworkingArgs',
    'NexusSpecNetworkingTlsArgs',
    'NexusSpecPersistenceArgs',
    'NexusSpecReadinessProbeArgs',
    'NexusSpecResourcesArgs',
    'NexusSpecResourcesLimitsArgs',
    'NexusSpecResourcesRequestsArgs',
    'NexusSpecServerOperationsArgs',
    'NexusStatusArgs',
    'NexusStatusDeploymentStatusArgs',
    'NexusStatusDeploymentStatusConditionsArgs',
    'NexusStatusServerOperationsStatusArgs',
]

@pulumi.input_type
class NexusSpecArgs:
    def __init__(__self__, *,
                 persistence: pulumi.Input['NexusSpecPersistenceArgs'],
                 replicas: pulumi.Input[int],
                 use_red_hat_image: pulumi.Input[bool],
                 automatic_update: Optional[pulumi.Input['NexusSpecAutomaticUpdateArgs']] = None,
                 generate_random_admin_password: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 liveness_probe: Optional[pulumi.Input['NexusSpecLivenessProbeArgs']] = None,
                 networking: Optional[pulumi.Input['NexusSpecNetworkingArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['NexusSpecReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['NexusSpecResourcesArgs']] = None,
                 server_operations: Optional[pulumi.Input['NexusSpecServerOperationsArgs']] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None):
        """
        NexusSpec defines the desired state of Nexus
        :param pulumi.Input['NexusSpecPersistenceArgs'] persistence: Persistence definition
        :param pulumi.Input[int] replicas: Number of pod replicas desired. Defaults to 0.
        :param pulumi.Input[bool] use_red_hat_image: If you have access to Red Hat Container Catalog, set this to `true` to use the certified image provided by Sonatype Defaults to `false`
        :param pulumi.Input['NexusSpecAutomaticUpdateArgs'] automatic_update: Automatic updates configuration
        :param pulumi.Input[bool] generate_random_admin_password: GenerateRandomAdminPassword enables the random password generation. Defaults to `false`: the default password for a newly created instance is 'admin123', which should be changed in the first login. If set to `true`, you must use the automatically generated 'admin' password, stored in the container's file system at `/nexus-data/admin.password`. The operator uses the default credentials to create a user for itself to create default repositories. If set to `true`, the repositories won't be created since the operator won't fetch for the random password.
        :param pulumi.Input[str] image: Full image tag name for this specific deployment. Will be ignored if `spec.useRedHatImage` is set to `true`. Default: docker.io/sonatype/nexus3:latest
        :param pulumi.Input[str] image_pull_policy: The image pull policy for the Nexus image. If left blank behavior will be determined by the image tag (`Always` if "latest" and `IfNotPresent` otherwise). Possible values: `Always`, `IfNotPresent` or `Never`.
        :param pulumi.Input['NexusSpecLivenessProbeArgs'] liveness_probe: LivenessProbe describes how the Nexus container liveness probe should work
        :param pulumi.Input['NexusSpecNetworkingArgs'] networking: Networking definition
        :param pulumi.Input['NexusSpecReadinessProbeArgs'] readiness_probe: ReadinessProbe describes how the Nexus container readiness probe should work
        :param pulumi.Input['NexusSpecResourcesArgs'] resources: Defined Resources for the Nexus instance
        :param pulumi.Input['NexusSpecServerOperationsArgs'] server_operations: ServerOperations describes the options for the operations performed on the deployed server instance
        :param pulumi.Input[str] service_account_name: ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR (`metadata.name`).
        """
        pulumi.set(__self__, "persistence", persistence)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "use_red_hat_image", use_red_hat_image)
        if automatic_update is not None:
            pulumi.set(__self__, "automatic_update", automatic_update)
        if generate_random_admin_password is not None:
            pulumi.set(__self__, "generate_random_admin_password", generate_random_admin_password)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if server_operations is not None:
            pulumi.set(__self__, "server_operations", server_operations)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)

    @property
    @pulumi.getter
    def persistence(self) -> pulumi.Input['NexusSpecPersistenceArgs']:
        """
        Persistence definition
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: pulumi.Input['NexusSpecPersistenceArgs']):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        Number of pod replicas desired. Defaults to 0.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="useRedHatImage")
    def use_red_hat_image(self) -> pulumi.Input[bool]:
        """
        If you have access to Red Hat Container Catalog, set this to `true` to use the certified image provided by Sonatype Defaults to `false`
        """
        return pulumi.get(self, "use_red_hat_image")

    @use_red_hat_image.setter
    def use_red_hat_image(self, value: pulumi.Input[bool]):
        pulumi.set(self, "use_red_hat_image", value)

    @property
    @pulumi.getter(name="automaticUpdate")
    def automatic_update(self) -> Optional[pulumi.Input['NexusSpecAutomaticUpdateArgs']]:
        """
        Automatic updates configuration
        """
        return pulumi.get(self, "automatic_update")

    @automatic_update.setter
    def automatic_update(self, value: Optional[pulumi.Input['NexusSpecAutomaticUpdateArgs']]):
        pulumi.set(self, "automatic_update", value)

    @property
    @pulumi.getter(name="generateRandomAdminPassword")
    def generate_random_admin_password(self) -> Optional[pulumi.Input[bool]]:
        """
        GenerateRandomAdminPassword enables the random password generation. Defaults to `false`: the default password for a newly created instance is 'admin123', which should be changed in the first login. If set to `true`, you must use the automatically generated 'admin' password, stored in the container's file system at `/nexus-data/admin.password`. The operator uses the default credentials to create a user for itself to create default repositories. If set to `true`, the repositories won't be created since the operator won't fetch for the random password.
        """
        return pulumi.get(self, "generate_random_admin_password")

    @generate_random_admin_password.setter
    def generate_random_admin_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_random_admin_password", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Full image tag name for this specific deployment. Will be ignored if `spec.useRedHatImage` is set to `true`. Default: docker.io/sonatype/nexus3:latest
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The image pull policy for the Nexus image. If left blank behavior will be determined by the image tag (`Always` if "latest" and `IfNotPresent` otherwise). Possible values: `Always`, `IfNotPresent` or `Never`.
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['NexusSpecLivenessProbeArgs']]:
        """
        LivenessProbe describes how the Nexus container liveness probe should work
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['NexusSpecLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['NexusSpecNetworkingArgs']]:
        """
        Networking definition
        """
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['NexusSpecNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['NexusSpecReadinessProbeArgs']]:
        """
        ReadinessProbe describes how the Nexus container readiness probe should work
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['NexusSpecReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['NexusSpecResourcesArgs']]:
        """
        Defined Resources for the Nexus instance
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['NexusSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serverOperations")
    def server_operations(self) -> Optional[pulumi.Input['NexusSpecServerOperationsArgs']]:
        """
        ServerOperations describes the options for the operations performed on the deployed server instance
        """
        return pulumi.get(self, "server_operations")

    @server_operations.setter
    def server_operations(self, value: Optional[pulumi.Input['NexusSpecServerOperationsArgs']]):
        pulumi.set(self, "server_operations", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR (`metadata.name`).
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)


@pulumi.input_type
class NexusSpecAutomaticUpdateArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 minor_version: Optional[pulumi.Input[int]] = None):
        """
        Automatic updates configuration
        :param pulumi.Input[bool] disabled: Whether or not the Operator should perform automatic updates. Defaults to `false` (auto updates are enabled). Is set to `false` if `spec.image` is not empty and is different from the default community image.
        :param pulumi.Input[int] minor_version: The Nexus image minor version the deployment should stay in. If left blank and automatic updates are enabled the latest minor is set.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if minor_version is not None:
            pulumi.set(__self__, "minor_version", minor_version)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the Operator should perform automatic updates. Defaults to `false` (auto updates are enabled). Is set to `false` if `spec.image` is not empty and is different from the default community image.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="minorVersion")
    def minor_version(self) -> Optional[pulumi.Input[int]]:
        """
        The Nexus image minor version the deployment should stay in. If left blank and automatic updates are enabled the latest minor is set.
        """
        return pulumi.get(self, "minor_version")

    @minor_version.setter
    def minor_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minor_version", value)


@pulumi.input_type
class NexusSpecLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        LivenessProbe describes how the Nexus container liveness probe should work
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class NexusSpecNetworkingArgs:
    def __init__(__self__, *,
                 expose: Optional[pulumi.Input[bool]] = None,
                 expose_as: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 tls: Optional[pulumi.Input['NexusSpecNetworkingTlsArgs']] = None):
        """
        Networking definition
        :param pulumi.Input[bool] expose: Set to `true` to expose the Nexus application. Defaults to `false`.
        :param pulumi.Input[str] expose_as: Type of networking exposure: NodePort, Route or Ingress. Defaults to Route on OpenShift and Ingress on Kubernetes. Routes are only available on Openshift and Ingresses are only available on Kubernetes.
        :param pulumi.Input[str] host: Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
        :param pulumi.Input[int] node_port: NodePort defined in the exposed service. Required if exposed via NodePort.
        :param pulumi.Input['NexusSpecNetworkingTlsArgs'] tls: TLS/SSL-related configuration
        """
        if expose is not None:
            pulumi.set(__self__, "expose", expose)
        if expose_as is not None:
            pulumi.set(__self__, "expose_as", expose_as)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def expose(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to expose the Nexus application. Defaults to `false`.
        """
        return pulumi.get(self, "expose")

    @expose.setter
    def expose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose", value)

    @property
    @pulumi.getter(name="exposeAs")
    def expose_as(self) -> Optional[pulumi.Input[str]]:
        """
        Type of networking exposure: NodePort, Route or Ingress. Defaults to Route on OpenShift and Ingress on Kubernetes. Routes are only available on Openshift and Ingresses are only available on Kubernetes.
        """
        return pulumi.get(self, "expose_as")

    @expose_as.setter
    def expose_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expose_as", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        """
        NodePort defined in the exposed service. Required if exposed via NodePort.
        """
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['NexusSpecNetworkingTlsArgs']]:
        """
        TLS/SSL-related configuration
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['NexusSpecNetworkingTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class NexusSpecNetworkingTlsArgs:
    def __init__(__self__, *,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        TLS/SSL-related configuration
        :param pulumi.Input[bool] mandatory: When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to `false`.
        :param pulumi.Input[str] secret_name: When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
        """
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        """
        When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to `false`.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class NexusSpecPersistenceArgs:
    def __init__(__self__, *,
                 persistent: pulumi.Input[bool],
                 storage_class: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[str]] = None):
        """
        Persistence definition
        :param pulumi.Input[bool] persistent: Flag to indicate if this instance will be persistent or not
        :param pulumi.Input[str] storage_class: StorageClass used by the managed PVC.
        :param pulumi.Input[str] volume_size: If persistent, the size of the Volume. Defaults: 10Gi
        """
        pulumi.set(__self__, "persistent", persistent)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)

    @property
    @pulumi.getter
    def persistent(self) -> pulumi.Input[bool]:
        """
        Flag to indicate if this instance will be persistent or not
        """
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: pulumi.Input[bool]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        StorageClass used by the managed PVC.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[str]]:
        """
        If persistent, the size of the Volume. Defaults: 10Gi
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_size", value)


@pulumi.input_type
class NexusSpecReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        ReadinessProbe describes how the Nexus container readiness probe should work
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before probes are initiated. Defaults to 240 seconds. Minimum value is 0.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 15 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class NexusSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesRequestsArgs']]]] = None):
        """
        Defined Resources for the Nexus instance
        :param pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NexusSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class NexusSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NexusSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NexusSpecServerOperationsArgs:
    def __init__(__self__, *,
                 disable_operator_user_creation: Optional[pulumi.Input[bool]] = None,
                 disable_repository_creation: Optional[pulumi.Input[bool]] = None):
        """
        ServerOperations describes the options for the operations performed on the deployed server instance
        :param pulumi.Input[bool] disable_operator_user_creation: DisableOperatorUserCreation disables the auto-creation of the `nexus-operator` user on the deployed server. This user performs all the operations on the server (such as creating the community repos). If disabled, the Operator will use the default `admin` user. Defaults to `false` (always create the user). Setting this to `true` is not recommended as it grants the Operator more privileges than it needs and it would not be possible to tell apart operations performed by the `admin` and the Operator.
        :param pulumi.Input[bool] disable_repository_creation: DisableRepositoryCreation disables the auto-creation of Apache, JBoss and Red Hat repositories and their addition to the Maven Public group in this Nexus instance. Defaults to `false` (always try to create the repos). Set this to `true` to not create them. Only works if `spec.generateRandomAdminPassword` is `false`.
        """
        if disable_operator_user_creation is not None:
            pulumi.set(__self__, "disable_operator_user_creation", disable_operator_user_creation)
        if disable_repository_creation is not None:
            pulumi.set(__self__, "disable_repository_creation", disable_repository_creation)

    @property
    @pulumi.getter(name="disableOperatorUserCreation")
    def disable_operator_user_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        DisableOperatorUserCreation disables the auto-creation of the `nexus-operator` user on the deployed server. This user performs all the operations on the server (such as creating the community repos). If disabled, the Operator will use the default `admin` user. Defaults to `false` (always create the user). Setting this to `true` is not recommended as it grants the Operator more privileges than it needs and it would not be possible to tell apart operations performed by the `admin` and the Operator.
        """
        return pulumi.get(self, "disable_operator_user_creation")

    @disable_operator_user_creation.setter
    def disable_operator_user_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_operator_user_creation", value)

    @property
    @pulumi.getter(name="disableRepositoryCreation")
    def disable_repository_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        DisableRepositoryCreation disables the auto-creation of Apache, JBoss and Red Hat repositories and their addition to the Maven Public group in this Nexus instance. Defaults to `false` (always try to create the repos). Set this to `true` to not create them. Only works if `spec.generateRandomAdminPassword` is `false`.
        """
        return pulumi.get(self, "disable_repository_creation")

    @disable_repository_creation.setter
    def disable_repository_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_repository_creation", value)


@pulumi.input_type
class NexusStatusArgs:
    def __init__(__self__, *,
                 deployment_status: Optional[pulumi.Input['NexusStatusDeploymentStatusArgs']] = None,
                 nexus_route: Optional[pulumi.Input[str]] = None,
                 nexus_status: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 server_operations_status: Optional[pulumi.Input['NexusStatusServerOperationsStatusArgs']] = None,
                 update_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        NexusStatus defines the observed state of Nexus
        :param pulumi.Input['NexusStatusDeploymentStatusArgs'] deployment_status: Condition status for the Nexus deployment
        :param pulumi.Input[str] nexus_route: Route for external service access
        :param pulumi.Input[str] nexus_status: Will be "OK" when this Nexus instance is up
        :param pulumi.Input[str] reason: Gives more information about a failure status
        :param pulumi.Input['NexusStatusServerOperationsStatusArgs'] server_operations_status: ServerOperationsStatus describes the general status for the operations performed in the Nexus server instance
        :param pulumi.Input[Sequence[pulumi.Input[str]]] update_conditions: Conditions reached during an update
        """
        if deployment_status is not None:
            pulumi.set(__self__, "deployment_status", deployment_status)
        if nexus_route is not None:
            pulumi.set(__self__, "nexus_route", nexus_route)
        if nexus_status is not None:
            pulumi.set(__self__, "nexus_status", nexus_status)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if server_operations_status is not None:
            pulumi.set(__self__, "server_operations_status", server_operations_status)
        if update_conditions is not None:
            pulumi.set(__self__, "update_conditions", update_conditions)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> Optional[pulumi.Input['NexusStatusDeploymentStatusArgs']]:
        """
        Condition status for the Nexus deployment
        """
        return pulumi.get(self, "deployment_status")

    @deployment_status.setter
    def deployment_status(self, value: Optional[pulumi.Input['NexusStatusDeploymentStatusArgs']]):
        pulumi.set(self, "deployment_status", value)

    @property
    @pulumi.getter(name="nexusRoute")
    def nexus_route(self) -> Optional[pulumi.Input[str]]:
        """
        Route for external service access
        """
        return pulumi.get(self, "nexus_route")

    @nexus_route.setter
    def nexus_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexus_route", value)

    @property
    @pulumi.getter(name="nexusStatus")
    def nexus_status(self) -> Optional[pulumi.Input[str]]:
        """
        Will be "OK" when this Nexus instance is up
        """
        return pulumi.get(self, "nexus_status")

    @nexus_status.setter
    def nexus_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexus_status", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Gives more information about a failure status
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="serverOperationsStatus")
    def server_operations_status(self) -> Optional[pulumi.Input['NexusStatusServerOperationsStatusArgs']]:
        """
        ServerOperationsStatus describes the general status for the operations performed in the Nexus server instance
        """
        return pulumi.get(self, "server_operations_status")

    @server_operations_status.setter
    def server_operations_status(self, value: Optional[pulumi.Input['NexusStatusServerOperationsStatusArgs']]):
        pulumi.set(self, "server_operations_status", value)

    @property
    @pulumi.getter(name="updateConditions")
    def update_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Conditions reached during an update
        """
        return pulumi.get(self, "update_conditions")

    @update_conditions.setter
    def update_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "update_conditions", value)


@pulumi.input_type
class NexusStatusDeploymentStatusArgs:
    def __init__(__self__, *,
                 available_replicas: Optional[pulumi.Input[int]] = None,
                 collision_count: Optional[pulumi.Input[int]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['NexusStatusDeploymentStatusConditionsArgs']]]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 ready_replicas: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 unavailable_replicas: Optional[pulumi.Input[int]] = None,
                 updated_replicas: Optional[pulumi.Input[int]] = None):
        """
        Condition status for the Nexus deployment
        :param pulumi.Input[int] available_replicas: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        :param pulumi.Input[int] collision_count: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
        :param pulumi.Input[Sequence[pulumi.Input['NexusStatusDeploymentStatusConditionsArgs']]] conditions: Represents the latest available observations of a deployment's current state.
        :param pulumi.Input[int] observed_generation: The generation observed by the deployment controller.
        :param pulumi.Input[int] ready_replicas: Total number of ready pods targeted by this deployment.
        :param pulumi.Input[int] replicas: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        :param pulumi.Input[int] unavailable_replicas: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        :param pulumi.Input[int] updated_replicas: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        if available_replicas is not None:
            pulumi.set(__self__, "available_replicas", available_replicas)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if unavailable_replicas is not None:
            pulumi.set(__self__, "unavailable_replicas", unavailable_replicas)
        if updated_replicas is not None:
            pulumi.set(__self__, "updated_replicas", updated_replicas)

    @property
    @pulumi.getter(name="availableReplicas")
    def available_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        """
        return pulumi.get(self, "available_replicas")

    @available_replicas.setter
    def available_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_replicas", value)

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
        """
        return pulumi.get(self, "collision_count")

    @collision_count.setter
    def collision_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collision_count", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusStatusDeploymentStatusConditionsArgs']]]]:
        """
        Represents the latest available observations of a deployment's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusStatusDeploymentStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        The generation observed by the deployment controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of ready pods targeted by this deployment.
        """
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ready_replicas", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="unavailableReplicas")
    def unavailable_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        """
        return pulumi.get(self, "unavailable_replicas")

    @unavailable_replicas.setter
    def unavailable_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unavailable_replicas", value)

    @property
    @pulumi.getter(name="updatedReplicas")
    def updated_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        return pulumi.get(self, "updated_replicas")

    @updated_replicas.setter
    def updated_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_replicas", value)


@pulumi.input_type
class NexusStatusDeploymentStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class NexusStatusServerOperationsStatusArgs:
    def __init__(__self__, *,
                 community_repositories_created: Optional[pulumi.Input[bool]] = None,
                 maven_central_updated: Optional[pulumi.Input[bool]] = None,
                 maven_public_url: Optional[pulumi.Input[str]] = None,
                 operator_user_created: Optional[pulumi.Input[bool]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 server_ready: Optional[pulumi.Input[bool]] = None):
        """
        ServerOperationsStatus describes the general status for the operations performed in the Nexus server instance
        """
        if community_repositories_created is not None:
            pulumi.set(__self__, "community_repositories_created", community_repositories_created)
        if maven_central_updated is not None:
            pulumi.set(__self__, "maven_central_updated", maven_central_updated)
        if maven_public_url is not None:
            pulumi.set(__self__, "maven_public_url", maven_public_url)
        if operator_user_created is not None:
            pulumi.set(__self__, "operator_user_created", operator_user_created)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if server_ready is not None:
            pulumi.set(__self__, "server_ready", server_ready)

    @property
    @pulumi.getter(name="communityRepositoriesCreated")
    def community_repositories_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "community_repositories_created")

    @community_repositories_created.setter
    def community_repositories_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "community_repositories_created", value)

    @property
    @pulumi.getter(name="mavenCentralUpdated")
    def maven_central_updated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "maven_central_updated")

    @maven_central_updated.setter
    def maven_central_updated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maven_central_updated", value)

    @property
    @pulumi.getter(name="mavenPublicURL")
    def maven_public_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maven_public_url")

    @maven_public_url.setter
    def maven_public_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maven_public_url", value)

    @property
    @pulumi.getter(name="operatorUserCreated")
    def operator_user_created(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "operator_user_created")

    @operator_user_created.setter
    def operator_user_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "operator_user_created", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="serverReady")
    def server_ready(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "server_ready")

    @server_ready.setter
    def server_ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_ready", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1
{

    /// <summary>
    /// NexusSpec defines the desired state of Nexus
    /// </summary>
    public class NexusSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic updates configuration
        /// </summary>
        [Input("automaticUpdate")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecAutomaticUpdateArgs>? AutomaticUpdate { get; set; }

        /// <summary>
        /// GenerateRandomAdminPassword enables the random password generation. Defaults to `false`: the default password for a newly created instance is 'admin123', which should be changed in the first login. If set to `true`, you must use the automatically generated 'admin' password, stored in the container's file system at `/nexus-data/admin.password`. The operator uses the default credentials to create a user for itself to create default repositories. If set to `true`, the repositories won't be created since the operator won't fetch for the random password.
        /// </summary>
        [Input("generateRandomAdminPassword")]
        public Input<bool>? GenerateRandomAdminPassword { get; set; }

        /// <summary>
        /// Full image tag name for this specific deployment. Will be ignored if `spec.useRedHatImage` is set to `true`. Default: docker.io/sonatype/nexus3:latest
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// The image pull policy for the Nexus image. If left blank behavior will be determined by the image tag (`Always` if "latest" and `IfNotPresent` otherwise). Possible values: `Always`, `IfNotPresent` or `Never`.
        /// </summary>
        [Input("imagePullPolicy")]
        public Input<string>? ImagePullPolicy { get; set; }

        /// <summary>
        /// LivenessProbe describes how the Nexus container liveness probe should work
        /// </summary>
        [Input("livenessProbe")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecLivenessProbeArgs>? LivenessProbe { get; set; }

        /// <summary>
        /// Networking definition
        /// </summary>
        [Input("networking")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecNetworkingArgs>? Networking { get; set; }

        /// <summary>
        /// Persistence definition
        /// </summary>
        [Input("persistence", required: true)]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecPersistenceArgs> Persistence { get; set; } = null!;

        /// <summary>
        /// ReadinessProbe describes how the Nexus container readiness probe should work
        /// </summary>
        [Input("readinessProbe")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecReadinessProbeArgs>? ReadinessProbe { get; set; }

        /// <summary>
        /// Number of pod replicas desired. Defaults to 0.
        /// </summary>
        [Input("replicas", required: true)]
        public Input<int> Replicas { get; set; } = null!;

        /// <summary>
        /// Defined Resources for the Nexus instance
        /// </summary>
        [Input("resources")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecResourcesArgs>? Resources { get; set; }

        /// <summary>
        /// ServerOperations describes the options for the operations performed on the deployed server instance
        /// </summary>
        [Input("serverOperations")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1Alpha1.NexusSpecServerOperationsArgs>? ServerOperations { get; set; }

        /// <summary>
        /// ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR (`metadata.name`).
        /// </summary>
        [Input("serviceAccountName")]
        public Input<string>? ServiceAccountName { get; set; }

        /// <summary>
        /// If you have access to Red Hat Container Catalog, set this to `true` to use the certified image provided by Sonatype Defaults to `false`
        /// </summary>
        [Input("useRedHatImage", required: true)]
        public Input<bool> UseRedHatImage { get; set; } = null!;

        public NexusSpecArgs()
        {
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Nexus custom resource to deploy the Nexus Server
type NexusType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NexusSpec defines the desired state of Nexus
	Spec *NexusSpec `pulumi:"spec"`
	// NexusStatus defines the observed state of Nexus
	Status *NexusStatus `pulumi:"status"`
}

// NexusTypeInput is an input type that accepts NexusTypeArgs and NexusTypeOutput values.
// You can construct a concrete instance of `NexusTypeInput` via:
//
//          NexusTypeArgs{...}
type NexusTypeInput interface {
	pulumi.Input

	ToNexusTypeOutput() NexusTypeOutput
	ToNexusTypeOutputWithContext(context.Context) NexusTypeOutput
}

// Nexus custom resource to deploy the Nexus Server
type NexusTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// NexusSpec defines the desired state of Nexus
	Spec NexusSpecPtrInput `pulumi:"spec"`
	// NexusStatus defines the observed state of Nexus
	Status NexusStatusPtrInput `pulumi:"status"`
}

func (NexusTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusType)(nil)).Elem()
}

func (i NexusTypeArgs) ToNexusTypeOutput() NexusTypeOutput {
	return i.ToNexusTypeOutputWithContext(context.Background())
}

func (i NexusTypeArgs) ToNexusTypeOutputWithContext(ctx context.Context) NexusTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusTypeOutput)
}

// Nexus custom resource to deploy the Nexus Server
type NexusTypeOutput struct{ *pulumi.OutputState }

func (NexusTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusType)(nil)).Elem()
}

func (o NexusTypeOutput) ToNexusTypeOutput() NexusTypeOutput {
	return o
}

func (o NexusTypeOutput) ToNexusTypeOutputWithContext(ctx context.Context) NexusTypeOutput {
	return o
}

func (o NexusTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o NexusTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o NexusTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NexusType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// NexusSpec defines the desired state of Nexus
func (o NexusTypeOutput) Spec() NexusSpecPtrOutput {
	return o.ApplyT(func(v NexusType) *NexusSpec { return v.Spec }).(NexusSpecPtrOutput)
}

// NexusStatus defines the observed state of Nexus
func (o NexusTypeOutput) Status() NexusStatusPtrOutput {
	return o.ApplyT(func(v NexusType) *NexusStatus { return v.Status }).(NexusStatusPtrOutput)
}

type NexusMetadata struct {
}

// NexusMetadataInput is an input type that accepts NexusMetadataArgs and NexusMetadataOutput values.
// You can construct a concrete instance of `NexusMetadataInput` via:
//
//          NexusMetadataArgs{...}
type NexusMetadataInput interface {
	pulumi.Input

	ToNexusMetadataOutput() NexusMetadataOutput
	ToNexusMetadataOutputWithContext(context.Context) NexusMetadataOutput
}

type NexusMetadataArgs struct {
}

func (NexusMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusMetadata)(nil)).Elem()
}

func (i NexusMetadataArgs) ToNexusMetadataOutput() NexusMetadataOutput {
	return i.ToNexusMetadataOutputWithContext(context.Background())
}

func (i NexusMetadataArgs) ToNexusMetadataOutputWithContext(ctx context.Context) NexusMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusMetadataOutput)
}

type NexusMetadataOutput struct{ *pulumi.OutputState }

func (NexusMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusMetadata)(nil)).Elem()
}

func (o NexusMetadataOutput) ToNexusMetadataOutput() NexusMetadataOutput {
	return o
}

func (o NexusMetadataOutput) ToNexusMetadataOutputWithContext(ctx context.Context) NexusMetadataOutput {
	return o
}

// NexusSpec defines the desired state of Nexus
type NexusSpec struct {
	// Full image tag name for this specific deployment Default: docker.io/sonatype/nexus3:latest
	Image *string `pulumi:"image"`
	// Networking definition
	Networking *NexusSpecNetworking `pulumi:"networking"`
	// Persistence definition
	Persistence NexusSpecPersistence `pulumi:"persistence"`
	// Number of pods replicas desired Default: 1
	Replicas int `pulumi:"replicas"`
	// Defined Resources for the Nexus instance
	Resources *NexusSpecResources `pulumi:"resources"`
	// ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// If you have access to Red Hat Container Catalog, turn this to true to use the certified image provided by Sonatype Default: false
	UseRedHatImage bool `pulumi:"useRedHatImage"`
}

// NexusSpecInput is an input type that accepts NexusSpecArgs and NexusSpecOutput values.
// You can construct a concrete instance of `NexusSpecInput` via:
//
//          NexusSpecArgs{...}
type NexusSpecInput interface {
	pulumi.Input

	ToNexusSpecOutput() NexusSpecOutput
	ToNexusSpecOutputWithContext(context.Context) NexusSpecOutput
}

// NexusSpec defines the desired state of Nexus
type NexusSpecArgs struct {
	// Full image tag name for this specific deployment Default: docker.io/sonatype/nexus3:latest
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Networking definition
	Networking NexusSpecNetworkingPtrInput `pulumi:"networking"`
	// Persistence definition
	Persistence NexusSpecPersistenceInput `pulumi:"persistence"`
	// Number of pods replicas desired Default: 1
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// Defined Resources for the Nexus instance
	Resources NexusSpecResourcesPtrInput `pulumi:"resources"`
	// ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// If you have access to Red Hat Container Catalog, turn this to true to use the certified image provided by Sonatype Default: false
	UseRedHatImage pulumi.BoolInput `pulumi:"useRedHatImage"`
}

func (NexusSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpec)(nil)).Elem()
}

func (i NexusSpecArgs) ToNexusSpecOutput() NexusSpecOutput {
	return i.ToNexusSpecOutputWithContext(context.Background())
}

func (i NexusSpecArgs) ToNexusSpecOutputWithContext(ctx context.Context) NexusSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecOutput)
}

func (i NexusSpecArgs) ToNexusSpecPtrOutput() NexusSpecPtrOutput {
	return i.ToNexusSpecPtrOutputWithContext(context.Background())
}

func (i NexusSpecArgs) ToNexusSpecPtrOutputWithContext(ctx context.Context) NexusSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecOutput).ToNexusSpecPtrOutputWithContext(ctx)
}

// NexusSpecPtrInput is an input type that accepts NexusSpecArgs, NexusSpecPtr and NexusSpecPtrOutput values.
// You can construct a concrete instance of `NexusSpecPtrInput` via:
//
//          NexusSpecArgs{...}
//
//  or:
//
//          nil
type NexusSpecPtrInput interface {
	pulumi.Input

	ToNexusSpecPtrOutput() NexusSpecPtrOutput
	ToNexusSpecPtrOutputWithContext(context.Context) NexusSpecPtrOutput
}

type nexusSpecPtrType NexusSpecArgs

func NexusSpecPtr(v *NexusSpecArgs) NexusSpecPtrInput {
	return (*nexusSpecPtrType)(v)
}

func (*nexusSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpec)(nil)).Elem()
}

func (i *nexusSpecPtrType) ToNexusSpecPtrOutput() NexusSpecPtrOutput {
	return i.ToNexusSpecPtrOutputWithContext(context.Background())
}

func (i *nexusSpecPtrType) ToNexusSpecPtrOutputWithContext(ctx context.Context) NexusSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecPtrOutput)
}

// NexusSpec defines the desired state of Nexus
type NexusSpecOutput struct{ *pulumi.OutputState }

func (NexusSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpec)(nil)).Elem()
}

func (o NexusSpecOutput) ToNexusSpecOutput() NexusSpecOutput {
	return o
}

func (o NexusSpecOutput) ToNexusSpecOutputWithContext(ctx context.Context) NexusSpecOutput {
	return o
}

func (o NexusSpecOutput) ToNexusSpecPtrOutput() NexusSpecPtrOutput {
	return o.ToNexusSpecPtrOutputWithContext(context.Background())
}

func (o NexusSpecOutput) ToNexusSpecPtrOutputWithContext(ctx context.Context) NexusSpecPtrOutput {
	return o.ApplyT(func(v NexusSpec) *NexusSpec {
		return &v
	}).(NexusSpecPtrOutput)
}

// Full image tag name for this specific deployment Default: docker.io/sonatype/nexus3:latest
func (o NexusSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Networking definition
func (o NexusSpecOutput) Networking() NexusSpecNetworkingPtrOutput {
	return o.ApplyT(func(v NexusSpec) *NexusSpecNetworking { return v.Networking }).(NexusSpecNetworkingPtrOutput)
}

// Persistence definition
func (o NexusSpecOutput) Persistence() NexusSpecPersistenceOutput {
	return o.ApplyT(func(v NexusSpec) NexusSpecPersistence { return v.Persistence }).(NexusSpecPersistenceOutput)
}

// Number of pods replicas desired Default: 1
func (o NexusSpecOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v NexusSpec) int { return v.Replicas }).(pulumi.IntOutput)
}

// Defined Resources for the Nexus instance
func (o NexusSpecOutput) Resources() NexusSpecResourcesPtrOutput {
	return o.ApplyT(func(v NexusSpec) *NexusSpecResources { return v.Resources }).(NexusSpecResourcesPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR.
func (o NexusSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// If you have access to Red Hat Container Catalog, turn this to true to use the certified image provided by Sonatype Default: false
func (o NexusSpecOutput) UseRedHatImage() pulumi.BoolOutput {
	return o.ApplyT(func(v NexusSpec) bool { return v.UseRedHatImage }).(pulumi.BoolOutput)
}

type NexusSpecPtrOutput struct{ *pulumi.OutputState }

func (NexusSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpec)(nil)).Elem()
}

func (o NexusSpecPtrOutput) ToNexusSpecPtrOutput() NexusSpecPtrOutput {
	return o
}

func (o NexusSpecPtrOutput) ToNexusSpecPtrOutputWithContext(ctx context.Context) NexusSpecPtrOutput {
	return o
}

func (o NexusSpecPtrOutput) Elem() NexusSpecOutput {
	return o.ApplyT(func(v *NexusSpec) NexusSpec { return *v }).(NexusSpecOutput)
}

// Full image tag name for this specific deployment Default: docker.io/sonatype/nexus3:latest
func (o NexusSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Networking definition
func (o NexusSpecPtrOutput) Networking() NexusSpecNetworkingPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *NexusSpecNetworking {
		if v == nil {
			return nil
		}
		return v.Networking
	}).(NexusSpecNetworkingPtrOutput)
}

// Persistence definition
func (o NexusSpecPtrOutput) Persistence() NexusSpecPersistencePtrOutput {
	return o.ApplyT(func(v *NexusSpec) *NexusSpecPersistence {
		if v == nil {
			return nil
		}
		return &v.Persistence
	}).(NexusSpecPersistencePtrOutput)
}

// Number of pods replicas desired Default: 1
func (o NexusSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined Resources for the Nexus instance
func (o NexusSpecPtrOutput) Resources() NexusSpecResourcesPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *NexusSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(NexusSpecResourcesPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount used to run the Pods. If left blank, a default ServiceAccount is created with the same name as the Nexus CR.
func (o NexusSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// If you have access to Red Hat Container Catalog, turn this to true to use the certified image provided by Sonatype Default: false
func (o NexusSpecPtrOutput) UseRedHatImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSpec) *bool {
		if v == nil {
			return nil
		}
		return &v.UseRedHatImage
	}).(pulumi.BoolPtrOutput)
}

// Networking definition
type NexusSpecNetworking struct {
	// Set to `true` to expose the Nexus application. Default to false.
	Expose *bool `pulumi:"expose"`
	// Type of networking exposure: NodePort, Route or Ingress. Default to Route on OpenShift and Ingress on Kubernetes.
	ExposeAs *string `pulumi:"exposeAs"`
	// Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
	Host *string `pulumi:"host"`
	// NodePort defined in the exposed service. Required if exposed via NodePort.
	NodePort *int `pulumi:"nodePort"`
	// TLS/SSL-related configuration
	Tls *NexusSpecNetworkingTls `pulumi:"tls"`
}

// NexusSpecNetworkingInput is an input type that accepts NexusSpecNetworkingArgs and NexusSpecNetworkingOutput values.
// You can construct a concrete instance of `NexusSpecNetworkingInput` via:
//
//          NexusSpecNetworkingArgs{...}
type NexusSpecNetworkingInput interface {
	pulumi.Input

	ToNexusSpecNetworkingOutput() NexusSpecNetworkingOutput
	ToNexusSpecNetworkingOutputWithContext(context.Context) NexusSpecNetworkingOutput
}

// Networking definition
type NexusSpecNetworkingArgs struct {
	// Set to `true` to expose the Nexus application. Default to false.
	Expose pulumi.BoolPtrInput `pulumi:"expose"`
	// Type of networking exposure: NodePort, Route or Ingress. Default to Route on OpenShift and Ingress on Kubernetes.
	ExposeAs pulumi.StringPtrInput `pulumi:"exposeAs"`
	// Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// NodePort defined in the exposed service. Required if exposed via NodePort.
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// TLS/SSL-related configuration
	Tls NexusSpecNetworkingTlsPtrInput `pulumi:"tls"`
}

func (NexusSpecNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecNetworking)(nil)).Elem()
}

func (i NexusSpecNetworkingArgs) ToNexusSpecNetworkingOutput() NexusSpecNetworkingOutput {
	return i.ToNexusSpecNetworkingOutputWithContext(context.Background())
}

func (i NexusSpecNetworkingArgs) ToNexusSpecNetworkingOutputWithContext(ctx context.Context) NexusSpecNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingOutput)
}

func (i NexusSpecNetworkingArgs) ToNexusSpecNetworkingPtrOutput() NexusSpecNetworkingPtrOutput {
	return i.ToNexusSpecNetworkingPtrOutputWithContext(context.Background())
}

func (i NexusSpecNetworkingArgs) ToNexusSpecNetworkingPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingOutput).ToNexusSpecNetworkingPtrOutputWithContext(ctx)
}

// NexusSpecNetworkingPtrInput is an input type that accepts NexusSpecNetworkingArgs, NexusSpecNetworkingPtr and NexusSpecNetworkingPtrOutput values.
// You can construct a concrete instance of `NexusSpecNetworkingPtrInput` via:
//
//          NexusSpecNetworkingArgs{...}
//
//  or:
//
//          nil
type NexusSpecNetworkingPtrInput interface {
	pulumi.Input

	ToNexusSpecNetworkingPtrOutput() NexusSpecNetworkingPtrOutput
	ToNexusSpecNetworkingPtrOutputWithContext(context.Context) NexusSpecNetworkingPtrOutput
}

type nexusSpecNetworkingPtrType NexusSpecNetworkingArgs

func NexusSpecNetworkingPtr(v *NexusSpecNetworkingArgs) NexusSpecNetworkingPtrInput {
	return (*nexusSpecNetworkingPtrType)(v)
}

func (*nexusSpecNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecNetworking)(nil)).Elem()
}

func (i *nexusSpecNetworkingPtrType) ToNexusSpecNetworkingPtrOutput() NexusSpecNetworkingPtrOutput {
	return i.ToNexusSpecNetworkingPtrOutputWithContext(context.Background())
}

func (i *nexusSpecNetworkingPtrType) ToNexusSpecNetworkingPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingPtrOutput)
}

// Networking definition
type NexusSpecNetworkingOutput struct{ *pulumi.OutputState }

func (NexusSpecNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecNetworking)(nil)).Elem()
}

func (o NexusSpecNetworkingOutput) ToNexusSpecNetworkingOutput() NexusSpecNetworkingOutput {
	return o
}

func (o NexusSpecNetworkingOutput) ToNexusSpecNetworkingOutputWithContext(ctx context.Context) NexusSpecNetworkingOutput {
	return o
}

func (o NexusSpecNetworkingOutput) ToNexusSpecNetworkingPtrOutput() NexusSpecNetworkingPtrOutput {
	return o.ToNexusSpecNetworkingPtrOutputWithContext(context.Background())
}

func (o NexusSpecNetworkingOutput) ToNexusSpecNetworkingPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *NexusSpecNetworking {
		return &v
	}).(NexusSpecNetworkingPtrOutput)
}

// Set to `true` to expose the Nexus application. Default to false.
func (o NexusSpecNetworkingOutput) Expose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *bool { return v.Expose }).(pulumi.BoolPtrOutput)
}

// Type of networking exposure: NodePort, Route or Ingress. Default to Route on OpenShift and Ingress on Kubernetes.
func (o NexusSpecNetworkingOutput) ExposeAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *string { return v.ExposeAs }).(pulumi.StringPtrOutput)
}

// Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
func (o NexusSpecNetworkingOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// NodePort defined in the exposed service. Required if exposed via NodePort.
func (o NexusSpecNetworkingOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// TLS/SSL-related configuration
func (o NexusSpecNetworkingOutput) Tls() NexusSpecNetworkingTlsPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworking) *NexusSpecNetworkingTls { return v.Tls }).(NexusSpecNetworkingTlsPtrOutput)
}

type NexusSpecNetworkingPtrOutput struct{ *pulumi.OutputState }

func (NexusSpecNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecNetworking)(nil)).Elem()
}

func (o NexusSpecNetworkingPtrOutput) ToNexusSpecNetworkingPtrOutput() NexusSpecNetworkingPtrOutput {
	return o
}

func (o NexusSpecNetworkingPtrOutput) ToNexusSpecNetworkingPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingPtrOutput {
	return o
}

func (o NexusSpecNetworkingPtrOutput) Elem() NexusSpecNetworkingOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) NexusSpecNetworking { return *v }).(NexusSpecNetworkingOutput)
}

// Set to `true` to expose the Nexus application. Default to false.
func (o NexusSpecNetworkingPtrOutput) Expose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) *bool {
		if v == nil {
			return nil
		}
		return v.Expose
	}).(pulumi.BoolPtrOutput)
}

// Type of networking exposure: NodePort, Route or Ingress. Default to Route on OpenShift and Ingress on Kubernetes.
func (o NexusSpecNetworkingPtrOutput) ExposeAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) *string {
		if v == nil {
			return nil
		}
		return v.ExposeAs
	}).(pulumi.StringPtrOutput)
}

// Host where the Nexus service is exposed. This attribute is required if the service is exposed via Ingress.
func (o NexusSpecNetworkingPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// NodePort defined in the exposed service. Required if exposed via NodePort.
func (o NexusSpecNetworkingPtrOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) *int {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.IntPtrOutput)
}

// TLS/SSL-related configuration
func (o NexusSpecNetworkingPtrOutput) Tls() NexusSpecNetworkingTlsPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworking) *NexusSpecNetworkingTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(NexusSpecNetworkingTlsPtrOutput)
}

// TLS/SSL-related configuration
type NexusSpecNetworkingTls struct {
	// When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to false.
	Mandatory *bool `pulumi:"mandatory"`
	// When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
	SecretName *string `pulumi:"secretName"`
}

// NexusSpecNetworkingTlsInput is an input type that accepts NexusSpecNetworkingTlsArgs and NexusSpecNetworkingTlsOutput values.
// You can construct a concrete instance of `NexusSpecNetworkingTlsInput` via:
//
//          NexusSpecNetworkingTlsArgs{...}
type NexusSpecNetworkingTlsInput interface {
	pulumi.Input

	ToNexusSpecNetworkingTlsOutput() NexusSpecNetworkingTlsOutput
	ToNexusSpecNetworkingTlsOutputWithContext(context.Context) NexusSpecNetworkingTlsOutput
}

// TLS/SSL-related configuration
type NexusSpecNetworkingTlsArgs struct {
	// When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to false.
	Mandatory pulumi.BoolPtrInput `pulumi:"mandatory"`
	// When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (NexusSpecNetworkingTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecNetworkingTls)(nil)).Elem()
}

func (i NexusSpecNetworkingTlsArgs) ToNexusSpecNetworkingTlsOutput() NexusSpecNetworkingTlsOutput {
	return i.ToNexusSpecNetworkingTlsOutputWithContext(context.Background())
}

func (i NexusSpecNetworkingTlsArgs) ToNexusSpecNetworkingTlsOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingTlsOutput)
}

func (i NexusSpecNetworkingTlsArgs) ToNexusSpecNetworkingTlsPtrOutput() NexusSpecNetworkingTlsPtrOutput {
	return i.ToNexusSpecNetworkingTlsPtrOutputWithContext(context.Background())
}

func (i NexusSpecNetworkingTlsArgs) ToNexusSpecNetworkingTlsPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingTlsOutput).ToNexusSpecNetworkingTlsPtrOutputWithContext(ctx)
}

// NexusSpecNetworkingTlsPtrInput is an input type that accepts NexusSpecNetworkingTlsArgs, NexusSpecNetworkingTlsPtr and NexusSpecNetworkingTlsPtrOutput values.
// You can construct a concrete instance of `NexusSpecNetworkingTlsPtrInput` via:
//
//          NexusSpecNetworkingTlsArgs{...}
//
//  or:
//
//          nil
type NexusSpecNetworkingTlsPtrInput interface {
	pulumi.Input

	ToNexusSpecNetworkingTlsPtrOutput() NexusSpecNetworkingTlsPtrOutput
	ToNexusSpecNetworkingTlsPtrOutputWithContext(context.Context) NexusSpecNetworkingTlsPtrOutput
}

type nexusSpecNetworkingTlsPtrType NexusSpecNetworkingTlsArgs

func NexusSpecNetworkingTlsPtr(v *NexusSpecNetworkingTlsArgs) NexusSpecNetworkingTlsPtrInput {
	return (*nexusSpecNetworkingTlsPtrType)(v)
}

func (*nexusSpecNetworkingTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecNetworkingTls)(nil)).Elem()
}

func (i *nexusSpecNetworkingTlsPtrType) ToNexusSpecNetworkingTlsPtrOutput() NexusSpecNetworkingTlsPtrOutput {
	return i.ToNexusSpecNetworkingTlsPtrOutputWithContext(context.Background())
}

func (i *nexusSpecNetworkingTlsPtrType) ToNexusSpecNetworkingTlsPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecNetworkingTlsPtrOutput)
}

// TLS/SSL-related configuration
type NexusSpecNetworkingTlsOutput struct{ *pulumi.OutputState }

func (NexusSpecNetworkingTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecNetworkingTls)(nil)).Elem()
}

func (o NexusSpecNetworkingTlsOutput) ToNexusSpecNetworkingTlsOutput() NexusSpecNetworkingTlsOutput {
	return o
}

func (o NexusSpecNetworkingTlsOutput) ToNexusSpecNetworkingTlsOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsOutput {
	return o
}

func (o NexusSpecNetworkingTlsOutput) ToNexusSpecNetworkingTlsPtrOutput() NexusSpecNetworkingTlsPtrOutput {
	return o.ToNexusSpecNetworkingTlsPtrOutputWithContext(context.Background())
}

func (o NexusSpecNetworkingTlsOutput) ToNexusSpecNetworkingTlsPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworkingTls) *NexusSpecNetworkingTls {
		return &v
	}).(NexusSpecNetworkingTlsPtrOutput)
}

// When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to false.
func (o NexusSpecNetworkingTlsOutput) Mandatory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworkingTls) *bool { return v.Mandatory }).(pulumi.BoolPtrOutput)
}

// When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
func (o NexusSpecNetworkingTlsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpecNetworkingTls) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type NexusSpecNetworkingTlsPtrOutput struct{ *pulumi.OutputState }

func (NexusSpecNetworkingTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecNetworkingTls)(nil)).Elem()
}

func (o NexusSpecNetworkingTlsPtrOutput) ToNexusSpecNetworkingTlsPtrOutput() NexusSpecNetworkingTlsPtrOutput {
	return o
}

func (o NexusSpecNetworkingTlsPtrOutput) ToNexusSpecNetworkingTlsPtrOutputWithContext(ctx context.Context) NexusSpecNetworkingTlsPtrOutput {
	return o
}

func (o NexusSpecNetworkingTlsPtrOutput) Elem() NexusSpecNetworkingTlsOutput {
	return o.ApplyT(func(v *NexusSpecNetworkingTls) NexusSpecNetworkingTls { return *v }).(NexusSpecNetworkingTlsOutput)
}

// When exposing via Route, set to `true` to only allow encrypted traffic using TLS (disables HTTP in favor of HTTPS). Defaults to false.
func (o NexusSpecNetworkingTlsPtrOutput) Mandatory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworkingTls) *bool {
		if v == nil {
			return nil
		}
		return v.Mandatory
	}).(pulumi.BoolPtrOutput)
}

// When exposing via Ingress, inform the name of the TLS secret containing certificate and private key for TLS encryption. It must be present in the same namespace as the Operator.
func (o NexusSpecNetworkingTlsPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpecNetworkingTls) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Persistence definition
type NexusSpecPersistence struct {
	// Flag to indicate if this instance will be persistent or not
	Persistent bool `pulumi:"persistent"`
	// StorageClass used by the managed PVC.
	StorageClass *string `pulumi:"storageClass"`
	// If persistent, the size of the Volume. Defaults: 10Gi
	VolumeSize *string `pulumi:"volumeSize"`
}

// NexusSpecPersistenceInput is an input type that accepts NexusSpecPersistenceArgs and NexusSpecPersistenceOutput values.
// You can construct a concrete instance of `NexusSpecPersistenceInput` via:
//
//          NexusSpecPersistenceArgs{...}
type NexusSpecPersistenceInput interface {
	pulumi.Input

	ToNexusSpecPersistenceOutput() NexusSpecPersistenceOutput
	ToNexusSpecPersistenceOutputWithContext(context.Context) NexusSpecPersistenceOutput
}

// Persistence definition
type NexusSpecPersistenceArgs struct {
	// Flag to indicate if this instance will be persistent or not
	Persistent pulumi.BoolInput `pulumi:"persistent"`
	// StorageClass used by the managed PVC.
	StorageClass pulumi.StringPtrInput `pulumi:"storageClass"`
	// If persistent, the size of the Volume. Defaults: 10Gi
	VolumeSize pulumi.StringPtrInput `pulumi:"volumeSize"`
}

func (NexusSpecPersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecPersistence)(nil)).Elem()
}

func (i NexusSpecPersistenceArgs) ToNexusSpecPersistenceOutput() NexusSpecPersistenceOutput {
	return i.ToNexusSpecPersistenceOutputWithContext(context.Background())
}

func (i NexusSpecPersistenceArgs) ToNexusSpecPersistenceOutputWithContext(ctx context.Context) NexusSpecPersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecPersistenceOutput)
}

func (i NexusSpecPersistenceArgs) ToNexusSpecPersistencePtrOutput() NexusSpecPersistencePtrOutput {
	return i.ToNexusSpecPersistencePtrOutputWithContext(context.Background())
}

func (i NexusSpecPersistenceArgs) ToNexusSpecPersistencePtrOutputWithContext(ctx context.Context) NexusSpecPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecPersistenceOutput).ToNexusSpecPersistencePtrOutputWithContext(ctx)
}

// NexusSpecPersistencePtrInput is an input type that accepts NexusSpecPersistenceArgs, NexusSpecPersistencePtr and NexusSpecPersistencePtrOutput values.
// You can construct a concrete instance of `NexusSpecPersistencePtrInput` via:
//
//          NexusSpecPersistenceArgs{...}
//
//  or:
//
//          nil
type NexusSpecPersistencePtrInput interface {
	pulumi.Input

	ToNexusSpecPersistencePtrOutput() NexusSpecPersistencePtrOutput
	ToNexusSpecPersistencePtrOutputWithContext(context.Context) NexusSpecPersistencePtrOutput
}

type nexusSpecPersistencePtrType NexusSpecPersistenceArgs

func NexusSpecPersistencePtr(v *NexusSpecPersistenceArgs) NexusSpecPersistencePtrInput {
	return (*nexusSpecPersistencePtrType)(v)
}

func (*nexusSpecPersistencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecPersistence)(nil)).Elem()
}

func (i *nexusSpecPersistencePtrType) ToNexusSpecPersistencePtrOutput() NexusSpecPersistencePtrOutput {
	return i.ToNexusSpecPersistencePtrOutputWithContext(context.Background())
}

func (i *nexusSpecPersistencePtrType) ToNexusSpecPersistencePtrOutputWithContext(ctx context.Context) NexusSpecPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecPersistencePtrOutput)
}

// Persistence definition
type NexusSpecPersistenceOutput struct{ *pulumi.OutputState }

func (NexusSpecPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecPersistence)(nil)).Elem()
}

func (o NexusSpecPersistenceOutput) ToNexusSpecPersistenceOutput() NexusSpecPersistenceOutput {
	return o
}

func (o NexusSpecPersistenceOutput) ToNexusSpecPersistenceOutputWithContext(ctx context.Context) NexusSpecPersistenceOutput {
	return o
}

func (o NexusSpecPersistenceOutput) ToNexusSpecPersistencePtrOutput() NexusSpecPersistencePtrOutput {
	return o.ToNexusSpecPersistencePtrOutputWithContext(context.Background())
}

func (o NexusSpecPersistenceOutput) ToNexusSpecPersistencePtrOutputWithContext(ctx context.Context) NexusSpecPersistencePtrOutput {
	return o.ApplyT(func(v NexusSpecPersistence) *NexusSpecPersistence {
		return &v
	}).(NexusSpecPersistencePtrOutput)
}

// Flag to indicate if this instance will be persistent or not
func (o NexusSpecPersistenceOutput) Persistent() pulumi.BoolOutput {
	return o.ApplyT(func(v NexusSpecPersistence) bool { return v.Persistent }).(pulumi.BoolOutput)
}

// StorageClass used by the managed PVC.
func (o NexusSpecPersistenceOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpecPersistence) *string { return v.StorageClass }).(pulumi.StringPtrOutput)
}

// If persistent, the size of the Volume. Defaults: 10Gi
func (o NexusSpecPersistenceOutput) VolumeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusSpecPersistence) *string { return v.VolumeSize }).(pulumi.StringPtrOutput)
}

type NexusSpecPersistencePtrOutput struct{ *pulumi.OutputState }

func (NexusSpecPersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecPersistence)(nil)).Elem()
}

func (o NexusSpecPersistencePtrOutput) ToNexusSpecPersistencePtrOutput() NexusSpecPersistencePtrOutput {
	return o
}

func (o NexusSpecPersistencePtrOutput) ToNexusSpecPersistencePtrOutputWithContext(ctx context.Context) NexusSpecPersistencePtrOutput {
	return o
}

func (o NexusSpecPersistencePtrOutput) Elem() NexusSpecPersistenceOutput {
	return o.ApplyT(func(v *NexusSpecPersistence) NexusSpecPersistence { return *v }).(NexusSpecPersistenceOutput)
}

// Flag to indicate if this instance will be persistent or not
func (o NexusSpecPersistencePtrOutput) Persistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSpecPersistence) *bool {
		if v == nil {
			return nil
		}
		return &v.Persistent
	}).(pulumi.BoolPtrOutput)
}

// StorageClass used by the managed PVC.
func (o NexusSpecPersistencePtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpecPersistence) *string {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(pulumi.StringPtrOutput)
}

// If persistent, the size of the Volume. Defaults: 10Gi
func (o NexusSpecPersistencePtrOutput) VolumeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSpecPersistence) *string {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.StringPtrOutput)
}

// Defined Resources for the Nexus instance
type NexusSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]NexusSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]NexusSpecResourcesRequests `pulumi:"requests"`
}

// NexusSpecResourcesInput is an input type that accepts NexusSpecResourcesArgs and NexusSpecResourcesOutput values.
// You can construct a concrete instance of `NexusSpecResourcesInput` via:
//
//          NexusSpecResourcesArgs{...}
type NexusSpecResourcesInput interface {
	pulumi.Input

	ToNexusSpecResourcesOutput() NexusSpecResourcesOutput
	ToNexusSpecResourcesOutputWithContext(context.Context) NexusSpecResourcesOutput
}

// Defined Resources for the Nexus instance
type NexusSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits NexusSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests NexusSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (NexusSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResources)(nil)).Elem()
}

func (i NexusSpecResourcesArgs) ToNexusSpecResourcesOutput() NexusSpecResourcesOutput {
	return i.ToNexusSpecResourcesOutputWithContext(context.Background())
}

func (i NexusSpecResourcesArgs) ToNexusSpecResourcesOutputWithContext(ctx context.Context) NexusSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesOutput)
}

func (i NexusSpecResourcesArgs) ToNexusSpecResourcesPtrOutput() NexusSpecResourcesPtrOutput {
	return i.ToNexusSpecResourcesPtrOutputWithContext(context.Background())
}

func (i NexusSpecResourcesArgs) ToNexusSpecResourcesPtrOutputWithContext(ctx context.Context) NexusSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesOutput).ToNexusSpecResourcesPtrOutputWithContext(ctx)
}

// NexusSpecResourcesPtrInput is an input type that accepts NexusSpecResourcesArgs, NexusSpecResourcesPtr and NexusSpecResourcesPtrOutput values.
// You can construct a concrete instance of `NexusSpecResourcesPtrInput` via:
//
//          NexusSpecResourcesArgs{...}
//
//  or:
//
//          nil
type NexusSpecResourcesPtrInput interface {
	pulumi.Input

	ToNexusSpecResourcesPtrOutput() NexusSpecResourcesPtrOutput
	ToNexusSpecResourcesPtrOutputWithContext(context.Context) NexusSpecResourcesPtrOutput
}

type nexusSpecResourcesPtrType NexusSpecResourcesArgs

func NexusSpecResourcesPtr(v *NexusSpecResourcesArgs) NexusSpecResourcesPtrInput {
	return (*nexusSpecResourcesPtrType)(v)
}

func (*nexusSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecResources)(nil)).Elem()
}

func (i *nexusSpecResourcesPtrType) ToNexusSpecResourcesPtrOutput() NexusSpecResourcesPtrOutput {
	return i.ToNexusSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *nexusSpecResourcesPtrType) ToNexusSpecResourcesPtrOutputWithContext(ctx context.Context) NexusSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesPtrOutput)
}

// Defined Resources for the Nexus instance
type NexusSpecResourcesOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResources)(nil)).Elem()
}

func (o NexusSpecResourcesOutput) ToNexusSpecResourcesOutput() NexusSpecResourcesOutput {
	return o
}

func (o NexusSpecResourcesOutput) ToNexusSpecResourcesOutputWithContext(ctx context.Context) NexusSpecResourcesOutput {
	return o
}

func (o NexusSpecResourcesOutput) ToNexusSpecResourcesPtrOutput() NexusSpecResourcesPtrOutput {
	return o.ToNexusSpecResourcesPtrOutputWithContext(context.Background())
}

func (o NexusSpecResourcesOutput) ToNexusSpecResourcesPtrOutputWithContext(ctx context.Context) NexusSpecResourcesPtrOutput {
	return o.ApplyT(func(v NexusSpecResources) *NexusSpecResources {
		return &v
	}).(NexusSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o NexusSpecResourcesOutput) Limits() NexusSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v NexusSpecResources) map[string]NexusSpecResourcesLimits { return v.Limits }).(NexusSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o NexusSpecResourcesOutput) Requests() NexusSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v NexusSpecResources) map[string]NexusSpecResourcesRequests { return v.Requests }).(NexusSpecResourcesRequestsMapOutput)
}

type NexusSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSpecResources)(nil)).Elem()
}

func (o NexusSpecResourcesPtrOutput) ToNexusSpecResourcesPtrOutput() NexusSpecResourcesPtrOutput {
	return o
}

func (o NexusSpecResourcesPtrOutput) ToNexusSpecResourcesPtrOutputWithContext(ctx context.Context) NexusSpecResourcesPtrOutput {
	return o
}

func (o NexusSpecResourcesPtrOutput) Elem() NexusSpecResourcesOutput {
	return o.ApplyT(func(v *NexusSpecResources) NexusSpecResources { return *v }).(NexusSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o NexusSpecResourcesPtrOutput) Limits() NexusSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *NexusSpecResources) map[string]NexusSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(NexusSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o NexusSpecResourcesPtrOutput) Requests() NexusSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *NexusSpecResources) map[string]NexusSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(NexusSpecResourcesRequestsMapOutput)
}

type NexusSpecResourcesLimits struct {
}

// NexusSpecResourcesLimitsInput is an input type that accepts NexusSpecResourcesLimitsArgs and NexusSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `NexusSpecResourcesLimitsInput` via:
//
//          NexusSpecResourcesLimitsArgs{...}
type NexusSpecResourcesLimitsInput interface {
	pulumi.Input

	ToNexusSpecResourcesLimitsOutput() NexusSpecResourcesLimitsOutput
	ToNexusSpecResourcesLimitsOutputWithContext(context.Context) NexusSpecResourcesLimitsOutput
}

type NexusSpecResourcesLimitsArgs struct {
}

func (NexusSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResourcesLimits)(nil)).Elem()
}

func (i NexusSpecResourcesLimitsArgs) ToNexusSpecResourcesLimitsOutput() NexusSpecResourcesLimitsOutput {
	return i.ToNexusSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i NexusSpecResourcesLimitsArgs) ToNexusSpecResourcesLimitsOutputWithContext(ctx context.Context) NexusSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesLimitsOutput)
}

// NexusSpecResourcesLimitsMapInput is an input type that accepts NexusSpecResourcesLimitsMap and NexusSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `NexusSpecResourcesLimitsMapInput` via:
//
//          NexusSpecResourcesLimitsMap{ "key": NexusSpecResourcesLimitsArgs{...} }
type NexusSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToNexusSpecResourcesLimitsMapOutput() NexusSpecResourcesLimitsMapOutput
	ToNexusSpecResourcesLimitsMapOutputWithContext(context.Context) NexusSpecResourcesLimitsMapOutput
}

type NexusSpecResourcesLimitsMap map[string]NexusSpecResourcesLimitsInput

func (NexusSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NexusSpecResourcesLimits)(nil)).Elem()
}

func (i NexusSpecResourcesLimitsMap) ToNexusSpecResourcesLimitsMapOutput() NexusSpecResourcesLimitsMapOutput {
	return i.ToNexusSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i NexusSpecResourcesLimitsMap) ToNexusSpecResourcesLimitsMapOutputWithContext(ctx context.Context) NexusSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesLimitsMapOutput)
}

type NexusSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResourcesLimits)(nil)).Elem()
}

func (o NexusSpecResourcesLimitsOutput) ToNexusSpecResourcesLimitsOutput() NexusSpecResourcesLimitsOutput {
	return o
}

func (o NexusSpecResourcesLimitsOutput) ToNexusSpecResourcesLimitsOutputWithContext(ctx context.Context) NexusSpecResourcesLimitsOutput {
	return o
}

type NexusSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NexusSpecResourcesLimits)(nil)).Elem()
}

func (o NexusSpecResourcesLimitsMapOutput) ToNexusSpecResourcesLimitsMapOutput() NexusSpecResourcesLimitsMapOutput {
	return o
}

func (o NexusSpecResourcesLimitsMapOutput) ToNexusSpecResourcesLimitsMapOutputWithContext(ctx context.Context) NexusSpecResourcesLimitsMapOutput {
	return o
}

func (o NexusSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) NexusSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NexusSpecResourcesLimits {
		return vs[0].(map[string]NexusSpecResourcesLimits)[vs[1].(string)]
	}).(NexusSpecResourcesLimitsOutput)
}

type NexusSpecResourcesRequests struct {
}

// NexusSpecResourcesRequestsInput is an input type that accepts NexusSpecResourcesRequestsArgs and NexusSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `NexusSpecResourcesRequestsInput` via:
//
//          NexusSpecResourcesRequestsArgs{...}
type NexusSpecResourcesRequestsInput interface {
	pulumi.Input

	ToNexusSpecResourcesRequestsOutput() NexusSpecResourcesRequestsOutput
	ToNexusSpecResourcesRequestsOutputWithContext(context.Context) NexusSpecResourcesRequestsOutput
}

type NexusSpecResourcesRequestsArgs struct {
}

func (NexusSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResourcesRequests)(nil)).Elem()
}

func (i NexusSpecResourcesRequestsArgs) ToNexusSpecResourcesRequestsOutput() NexusSpecResourcesRequestsOutput {
	return i.ToNexusSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i NexusSpecResourcesRequestsArgs) ToNexusSpecResourcesRequestsOutputWithContext(ctx context.Context) NexusSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesRequestsOutput)
}

// NexusSpecResourcesRequestsMapInput is an input type that accepts NexusSpecResourcesRequestsMap and NexusSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `NexusSpecResourcesRequestsMapInput` via:
//
//          NexusSpecResourcesRequestsMap{ "key": NexusSpecResourcesRequestsArgs{...} }
type NexusSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToNexusSpecResourcesRequestsMapOutput() NexusSpecResourcesRequestsMapOutput
	ToNexusSpecResourcesRequestsMapOutputWithContext(context.Context) NexusSpecResourcesRequestsMapOutput
}

type NexusSpecResourcesRequestsMap map[string]NexusSpecResourcesRequestsInput

func (NexusSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NexusSpecResourcesRequests)(nil)).Elem()
}

func (i NexusSpecResourcesRequestsMap) ToNexusSpecResourcesRequestsMapOutput() NexusSpecResourcesRequestsMapOutput {
	return i.ToNexusSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i NexusSpecResourcesRequestsMap) ToNexusSpecResourcesRequestsMapOutputWithContext(ctx context.Context) NexusSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSpecResourcesRequestsMapOutput)
}

type NexusSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusSpecResourcesRequests)(nil)).Elem()
}

func (o NexusSpecResourcesRequestsOutput) ToNexusSpecResourcesRequestsOutput() NexusSpecResourcesRequestsOutput {
	return o
}

func (o NexusSpecResourcesRequestsOutput) ToNexusSpecResourcesRequestsOutputWithContext(ctx context.Context) NexusSpecResourcesRequestsOutput {
	return o
}

type NexusSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (NexusSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NexusSpecResourcesRequests)(nil)).Elem()
}

func (o NexusSpecResourcesRequestsMapOutput) ToNexusSpecResourcesRequestsMapOutput() NexusSpecResourcesRequestsMapOutput {
	return o
}

func (o NexusSpecResourcesRequestsMapOutput) ToNexusSpecResourcesRequestsMapOutputWithContext(ctx context.Context) NexusSpecResourcesRequestsMapOutput {
	return o
}

func (o NexusSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) NexusSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NexusSpecResourcesRequests {
		return vs[0].(map[string]NexusSpecResourcesRequests)[vs[1].(string)]
	}).(NexusSpecResourcesRequestsOutput)
}

// NexusStatus defines the observed state of Nexus
type NexusStatus struct {
	// Condition status for the Nexus deployment
	DeploymentStatus *NexusStatusDeploymentStatus `pulumi:"deploymentStatus"`
	// Route for external service access
	NexusRoute *string `pulumi:"nexusRoute"`
	// Will be "OK" when all objects are created successfully
	NexusStatus *string `pulumi:"nexusStatus"`
}

// NexusStatusInput is an input type that accepts NexusStatusArgs and NexusStatusOutput values.
// You can construct a concrete instance of `NexusStatusInput` via:
//
//          NexusStatusArgs{...}
type NexusStatusInput interface {
	pulumi.Input

	ToNexusStatusOutput() NexusStatusOutput
	ToNexusStatusOutputWithContext(context.Context) NexusStatusOutput
}

// NexusStatus defines the observed state of Nexus
type NexusStatusArgs struct {
	// Condition status for the Nexus deployment
	DeploymentStatus NexusStatusDeploymentStatusPtrInput `pulumi:"deploymentStatus"`
	// Route for external service access
	NexusRoute pulumi.StringPtrInput `pulumi:"nexusRoute"`
	// Will be "OK" when all objects are created successfully
	NexusStatus pulumi.StringPtrInput `pulumi:"nexusStatus"`
}

func (NexusStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatus)(nil)).Elem()
}

func (i NexusStatusArgs) ToNexusStatusOutput() NexusStatusOutput {
	return i.ToNexusStatusOutputWithContext(context.Background())
}

func (i NexusStatusArgs) ToNexusStatusOutputWithContext(ctx context.Context) NexusStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusOutput)
}

func (i NexusStatusArgs) ToNexusStatusPtrOutput() NexusStatusPtrOutput {
	return i.ToNexusStatusPtrOutputWithContext(context.Background())
}

func (i NexusStatusArgs) ToNexusStatusPtrOutputWithContext(ctx context.Context) NexusStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusOutput).ToNexusStatusPtrOutputWithContext(ctx)
}

// NexusStatusPtrInput is an input type that accepts NexusStatusArgs, NexusStatusPtr and NexusStatusPtrOutput values.
// You can construct a concrete instance of `NexusStatusPtrInput` via:
//
//          NexusStatusArgs{...}
//
//  or:
//
//          nil
type NexusStatusPtrInput interface {
	pulumi.Input

	ToNexusStatusPtrOutput() NexusStatusPtrOutput
	ToNexusStatusPtrOutputWithContext(context.Context) NexusStatusPtrOutput
}

type nexusStatusPtrType NexusStatusArgs

func NexusStatusPtr(v *NexusStatusArgs) NexusStatusPtrInput {
	return (*nexusStatusPtrType)(v)
}

func (*nexusStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusStatus)(nil)).Elem()
}

func (i *nexusStatusPtrType) ToNexusStatusPtrOutput() NexusStatusPtrOutput {
	return i.ToNexusStatusPtrOutputWithContext(context.Background())
}

func (i *nexusStatusPtrType) ToNexusStatusPtrOutputWithContext(ctx context.Context) NexusStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusPtrOutput)
}

// NexusStatus defines the observed state of Nexus
type NexusStatusOutput struct{ *pulumi.OutputState }

func (NexusStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatus)(nil)).Elem()
}

func (o NexusStatusOutput) ToNexusStatusOutput() NexusStatusOutput {
	return o
}

func (o NexusStatusOutput) ToNexusStatusOutputWithContext(ctx context.Context) NexusStatusOutput {
	return o
}

func (o NexusStatusOutput) ToNexusStatusPtrOutput() NexusStatusPtrOutput {
	return o.ToNexusStatusPtrOutputWithContext(context.Background())
}

func (o NexusStatusOutput) ToNexusStatusPtrOutputWithContext(ctx context.Context) NexusStatusPtrOutput {
	return o.ApplyT(func(v NexusStatus) *NexusStatus {
		return &v
	}).(NexusStatusPtrOutput)
}

// Condition status for the Nexus deployment
func (o NexusStatusOutput) DeploymentStatus() NexusStatusDeploymentStatusPtrOutput {
	return o.ApplyT(func(v NexusStatus) *NexusStatusDeploymentStatus { return v.DeploymentStatus }).(NexusStatusDeploymentStatusPtrOutput)
}

// Route for external service access
func (o NexusStatusOutput) NexusRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatus) *string { return v.NexusRoute }).(pulumi.StringPtrOutput)
}

// Will be "OK" when all objects are created successfully
func (o NexusStatusOutput) NexusStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatus) *string { return v.NexusStatus }).(pulumi.StringPtrOutput)
}

type NexusStatusPtrOutput struct{ *pulumi.OutputState }

func (NexusStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusStatus)(nil)).Elem()
}

func (o NexusStatusPtrOutput) ToNexusStatusPtrOutput() NexusStatusPtrOutput {
	return o
}

func (o NexusStatusPtrOutput) ToNexusStatusPtrOutputWithContext(ctx context.Context) NexusStatusPtrOutput {
	return o
}

func (o NexusStatusPtrOutput) Elem() NexusStatusOutput {
	return o.ApplyT(func(v *NexusStatus) NexusStatus { return *v }).(NexusStatusOutput)
}

// Condition status for the Nexus deployment
func (o NexusStatusPtrOutput) DeploymentStatus() NexusStatusDeploymentStatusPtrOutput {
	return o.ApplyT(func(v *NexusStatus) *NexusStatusDeploymentStatus {
		if v == nil {
			return nil
		}
		return v.DeploymentStatus
	}).(NexusStatusDeploymentStatusPtrOutput)
}

// Route for external service access
func (o NexusStatusPtrOutput) NexusRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusStatus) *string {
		if v == nil {
			return nil
		}
		return v.NexusRoute
	}).(pulumi.StringPtrOutput)
}

// Will be "OK" when all objects are created successfully
func (o NexusStatusPtrOutput) NexusStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusStatus) *string {
		if v == nil {
			return nil
		}
		return v.NexusStatus
	}).(pulumi.StringPtrOutput)
}

// Condition status for the Nexus deployment
type NexusStatusDeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount *int `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []NexusStatusDeploymentStatusConditions `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// NexusStatusDeploymentStatusInput is an input type that accepts NexusStatusDeploymentStatusArgs and NexusStatusDeploymentStatusOutput values.
// You can construct a concrete instance of `NexusStatusDeploymentStatusInput` via:
//
//          NexusStatusDeploymentStatusArgs{...}
type NexusStatusDeploymentStatusInput interface {
	pulumi.Input

	ToNexusStatusDeploymentStatusOutput() NexusStatusDeploymentStatusOutput
	ToNexusStatusDeploymentStatusOutputWithContext(context.Context) NexusStatusDeploymentStatusOutput
}

// Condition status for the Nexus deployment
type NexusStatusDeploymentStatusArgs struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount pulumi.IntPtrInput `pulumi:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions NexusStatusDeploymentStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Total number of ready pods targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (NexusStatusDeploymentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatusDeploymentStatus)(nil)).Elem()
}

func (i NexusStatusDeploymentStatusArgs) ToNexusStatusDeploymentStatusOutput() NexusStatusDeploymentStatusOutput {
	return i.ToNexusStatusDeploymentStatusOutputWithContext(context.Background())
}

func (i NexusStatusDeploymentStatusArgs) ToNexusStatusDeploymentStatusOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusDeploymentStatusOutput)
}

func (i NexusStatusDeploymentStatusArgs) ToNexusStatusDeploymentStatusPtrOutput() NexusStatusDeploymentStatusPtrOutput {
	return i.ToNexusStatusDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i NexusStatusDeploymentStatusArgs) ToNexusStatusDeploymentStatusPtrOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusDeploymentStatusOutput).ToNexusStatusDeploymentStatusPtrOutputWithContext(ctx)
}

// NexusStatusDeploymentStatusPtrInput is an input type that accepts NexusStatusDeploymentStatusArgs, NexusStatusDeploymentStatusPtr and NexusStatusDeploymentStatusPtrOutput values.
// You can construct a concrete instance of `NexusStatusDeploymentStatusPtrInput` via:
//
//          NexusStatusDeploymentStatusArgs{...}
//
//  or:
//
//          nil
type NexusStatusDeploymentStatusPtrInput interface {
	pulumi.Input

	ToNexusStatusDeploymentStatusPtrOutput() NexusStatusDeploymentStatusPtrOutput
	ToNexusStatusDeploymentStatusPtrOutputWithContext(context.Context) NexusStatusDeploymentStatusPtrOutput
}

type nexusStatusDeploymentStatusPtrType NexusStatusDeploymentStatusArgs

func NexusStatusDeploymentStatusPtr(v *NexusStatusDeploymentStatusArgs) NexusStatusDeploymentStatusPtrInput {
	return (*nexusStatusDeploymentStatusPtrType)(v)
}

func (*nexusStatusDeploymentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusStatusDeploymentStatus)(nil)).Elem()
}

func (i *nexusStatusDeploymentStatusPtrType) ToNexusStatusDeploymentStatusPtrOutput() NexusStatusDeploymentStatusPtrOutput {
	return i.ToNexusStatusDeploymentStatusPtrOutputWithContext(context.Background())
}

func (i *nexusStatusDeploymentStatusPtrType) ToNexusStatusDeploymentStatusPtrOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusDeploymentStatusPtrOutput)
}

// Condition status for the Nexus deployment
type NexusStatusDeploymentStatusOutput struct{ *pulumi.OutputState }

func (NexusStatusDeploymentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatusDeploymentStatus)(nil)).Elem()
}

func (o NexusStatusDeploymentStatusOutput) ToNexusStatusDeploymentStatusOutput() NexusStatusDeploymentStatusOutput {
	return o
}

func (o NexusStatusDeploymentStatusOutput) ToNexusStatusDeploymentStatusOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusOutput {
	return o
}

func (o NexusStatusDeploymentStatusOutput) ToNexusStatusDeploymentStatusPtrOutput() NexusStatusDeploymentStatusPtrOutput {
	return o.ToNexusStatusDeploymentStatusPtrOutputWithContext(context.Background())
}

func (o NexusStatusDeploymentStatusOutput) ToNexusStatusDeploymentStatusPtrOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *NexusStatusDeploymentStatus {
		return &v
	}).(NexusStatusDeploymentStatusPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o NexusStatusDeploymentStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o NexusStatusDeploymentStatusOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.CollisionCount }).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o NexusStatusDeploymentStatusOutput) Conditions() NexusStatusDeploymentStatusConditionsArrayOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) []NexusStatusDeploymentStatusConditions { return v.Conditions }).(NexusStatusDeploymentStatusConditionsArrayOutput)
}

// The generation observed by the deployment controller.
func (o NexusStatusDeploymentStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o NexusStatusDeploymentStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o NexusStatusDeploymentStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o NexusStatusDeploymentStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o NexusStatusDeploymentStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type NexusStatusDeploymentStatusPtrOutput struct{ *pulumi.OutputState }

func (NexusStatusDeploymentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusStatusDeploymentStatus)(nil)).Elem()
}

func (o NexusStatusDeploymentStatusPtrOutput) ToNexusStatusDeploymentStatusPtrOutput() NexusStatusDeploymentStatusPtrOutput {
	return o
}

func (o NexusStatusDeploymentStatusPtrOutput) ToNexusStatusDeploymentStatusPtrOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusPtrOutput {
	return o
}

func (o NexusStatusDeploymentStatusPtrOutput) Elem() NexusStatusDeploymentStatusOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) NexusStatusDeploymentStatus { return *v }).(NexusStatusDeploymentStatusOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
func (o NexusStatusDeploymentStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
func (o NexusStatusDeploymentStatusPtrOutput) CollisionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.CollisionCount
	}).(pulumi.IntPtrOutput)
}

// Represents the latest available observations of a deployment's current state.
func (o NexusStatusDeploymentStatusPtrOutput) Conditions() NexusStatusDeploymentStatusConditionsArrayOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) []NexusStatusDeploymentStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NexusStatusDeploymentStatusConditionsArrayOutput)
}

// The generation observed by the deployment controller.
func (o NexusStatusDeploymentStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Total number of ready pods targeted by this deployment.
func (o NexusStatusDeploymentStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
func (o NexusStatusDeploymentStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
func (o NexusStatusDeploymentStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this deployment that have the desired template spec.
func (o NexusStatusDeploymentStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NexusStatusDeploymentStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type NexusStatusDeploymentStatusConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// NexusStatusDeploymentStatusConditionsInput is an input type that accepts NexusStatusDeploymentStatusConditionsArgs and NexusStatusDeploymentStatusConditionsOutput values.
// You can construct a concrete instance of `NexusStatusDeploymentStatusConditionsInput` via:
//
//          NexusStatusDeploymentStatusConditionsArgs{...}
type NexusStatusDeploymentStatusConditionsInput interface {
	pulumi.Input

	ToNexusStatusDeploymentStatusConditionsOutput() NexusStatusDeploymentStatusConditionsOutput
	ToNexusStatusDeploymentStatusConditionsOutputWithContext(context.Context) NexusStatusDeploymentStatusConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type NexusStatusDeploymentStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NexusStatusDeploymentStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatusDeploymentStatusConditions)(nil)).Elem()
}

func (i NexusStatusDeploymentStatusConditionsArgs) ToNexusStatusDeploymentStatusConditionsOutput() NexusStatusDeploymentStatusConditionsOutput {
	return i.ToNexusStatusDeploymentStatusConditionsOutputWithContext(context.Background())
}

func (i NexusStatusDeploymentStatusConditionsArgs) ToNexusStatusDeploymentStatusConditionsOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusDeploymentStatusConditionsOutput)
}

// NexusStatusDeploymentStatusConditionsArrayInput is an input type that accepts NexusStatusDeploymentStatusConditionsArray and NexusStatusDeploymentStatusConditionsArrayOutput values.
// You can construct a concrete instance of `NexusStatusDeploymentStatusConditionsArrayInput` via:
//
//          NexusStatusDeploymentStatusConditionsArray{ NexusStatusDeploymentStatusConditionsArgs{...} }
type NexusStatusDeploymentStatusConditionsArrayInput interface {
	pulumi.Input

	ToNexusStatusDeploymentStatusConditionsArrayOutput() NexusStatusDeploymentStatusConditionsArrayOutput
	ToNexusStatusDeploymentStatusConditionsArrayOutputWithContext(context.Context) NexusStatusDeploymentStatusConditionsArrayOutput
}

type NexusStatusDeploymentStatusConditionsArray []NexusStatusDeploymentStatusConditionsInput

func (NexusStatusDeploymentStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NexusStatusDeploymentStatusConditions)(nil)).Elem()
}

func (i NexusStatusDeploymentStatusConditionsArray) ToNexusStatusDeploymentStatusConditionsArrayOutput() NexusStatusDeploymentStatusConditionsArrayOutput {
	return i.ToNexusStatusDeploymentStatusConditionsArrayOutputWithContext(context.Background())
}

func (i NexusStatusDeploymentStatusConditionsArray) ToNexusStatusDeploymentStatusConditionsArrayOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusStatusDeploymentStatusConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type NexusStatusDeploymentStatusConditionsOutput struct{ *pulumi.OutputState }

func (NexusStatusDeploymentStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusStatusDeploymentStatusConditions)(nil)).Elem()
}

func (o NexusStatusDeploymentStatusConditionsOutput) ToNexusStatusDeploymentStatusConditionsOutput() NexusStatusDeploymentStatusConditionsOutput {
	return o
}

func (o NexusStatusDeploymentStatusConditionsOutput) ToNexusStatusDeploymentStatusConditionsOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o NexusStatusDeploymentStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o NexusStatusDeploymentStatusConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o NexusStatusDeploymentStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o NexusStatusDeploymentStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o NexusStatusDeploymentStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o NexusStatusDeploymentStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NexusStatusDeploymentStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type NexusStatusDeploymentStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (NexusStatusDeploymentStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NexusStatusDeploymentStatusConditions)(nil)).Elem()
}

func (o NexusStatusDeploymentStatusConditionsArrayOutput) ToNexusStatusDeploymentStatusConditionsArrayOutput() NexusStatusDeploymentStatusConditionsArrayOutput {
	return o
}

func (o NexusStatusDeploymentStatusConditionsArrayOutput) ToNexusStatusDeploymentStatusConditionsArrayOutputWithContext(ctx context.Context) NexusStatusDeploymentStatusConditionsArrayOutput {
	return o
}

func (o NexusStatusDeploymentStatusConditionsArrayOutput) Index(i pulumi.IntInput) NexusStatusDeploymentStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NexusStatusDeploymentStatusConditions {
		return vs[0].([]NexusStatusDeploymentStatusConditions)[vs[1].(int)]
	}).(NexusStatusDeploymentStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(NexusTypeOutput{})
	pulumi.RegisterOutputType(NexusMetadataOutput{})
	pulumi.RegisterOutputType(NexusSpecOutput{})
	pulumi.RegisterOutputType(NexusSpecPtrOutput{})
	pulumi.RegisterOutputType(NexusSpecNetworkingOutput{})
	pulumi.RegisterOutputType(NexusSpecNetworkingPtrOutput{})
	pulumi.RegisterOutputType(NexusSpecNetworkingTlsOutput{})
	pulumi.RegisterOutputType(NexusSpecNetworkingTlsPtrOutput{})
	pulumi.RegisterOutputType(NexusSpecPersistenceOutput{})
	pulumi.RegisterOutputType(NexusSpecPersistencePtrOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(NexusSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(NexusStatusOutput{})
	pulumi.RegisterOutputType(NexusStatusPtrOutput{})
	pulumi.RegisterOutputType(NexusStatusDeploymentStatusOutput{})
	pulumi.RegisterOutputType(NexusStatusDeploymentStatusPtrOutput{})
	pulumi.RegisterOutputType(NexusStatusDeploymentStatusConditionsOutput{})
	pulumi.RegisterOutputType(NexusStatusDeploymentStatusConditionsArrayOutput{})
}

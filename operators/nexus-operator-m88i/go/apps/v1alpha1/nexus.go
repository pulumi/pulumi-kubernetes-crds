// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Nexus custom resource to deploy the Nexus Server
type Nexus struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// NexusSpec defines the desired state of Nexus
	Spec NexusSpecPtrOutput `pulumi:"spec"`
	// NexusStatus defines the observed state of Nexus
	Status NexusStatusPtrOutput `pulumi:"status"`
}

// NewNexus registers a new resource with the given unique name, arguments, and options.
func NewNexus(ctx *pulumi.Context,
	name string, args *NexusArgs, opts ...pulumi.ResourceOption) (*Nexus, error) {
	if args == nil {
		args = &NexusArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("apps.m88i.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Nexus")
	var resource Nexus
	err := ctx.RegisterResource("kubernetes:apps.m88i.io/v1alpha1:Nexus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexus gets an existing Nexus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusState, opts ...pulumi.ResourceOption) (*Nexus, error) {
	var resource Nexus
	err := ctx.ReadResource("kubernetes:apps.m88i.io/v1alpha1:Nexus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nexus resources.
type nexusState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NexusSpec defines the desired state of Nexus
	Spec *NexusSpec `pulumi:"spec"`
	// NexusStatus defines the observed state of Nexus
	Status *NexusStatus `pulumi:"status"`
}

type NexusState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NexusSpec defines the desired state of Nexus
	Spec NexusSpecPtrInput
	// NexusStatus defines the observed state of Nexus
	Status NexusStatusPtrInput
}

func (NexusState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusState)(nil)).Elem()
}

type nexusArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NexusSpec defines the desired state of Nexus
	Spec *NexusSpec `pulumi:"spec"`
	// NexusStatus defines the observed state of Nexus
	Status *NexusStatus `pulumi:"status"`
}

// The set of arguments for constructing a Nexus resource.
type NexusArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NexusSpec defines the desired state of Nexus
	Spec NexusSpecPtrInput
	// NexusStatus defines the observed state of Nexus
	Status NexusStatusPtrInput
}

func (NexusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sysbench is the Schema for the sysbenches API
type Sysbench struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// SysbenchSpec contains the configuration parameters with scheduling options for the sysbench benchmark. The options, testName and command parameters are passed to the sysbench benchmarking application.
	Spec SysbenchSpecPtrOutput `pulumi:"spec"`
	// BenchmarkStatus describes the current state of the benchmark
	Status SysbenchStatusPtrOutput `pulumi:"status"`
}

// NewSysbench registers a new resource with the given unique name, arguments, and options.
func NewSysbench(ctx *pulumi.Context,
	name string, args *SysbenchArgs, opts ...pulumi.ResourceOption) (*Sysbench, error) {
	if args == nil {
		args = &SysbenchArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("perf.kubestone.xridge.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Sysbench")
	var resource Sysbench
	err := ctx.RegisterResource("kubernetes:perf.kubestone.xridge.io/v1alpha1:Sysbench", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSysbench gets an existing Sysbench resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSysbench(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SysbenchState, opts ...pulumi.ResourceOption) (*Sysbench, error) {
	var resource Sysbench
	err := ctx.ReadResource("kubernetes:perf.kubestone.xridge.io/v1alpha1:Sysbench", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sysbench resources.
type sysbenchState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SysbenchSpec contains the configuration parameters with scheduling options for the sysbench benchmark. The options, testName and command parameters are passed to the sysbench benchmarking application.
	Spec *SysbenchSpec `pulumi:"spec"`
	// BenchmarkStatus describes the current state of the benchmark
	Status *SysbenchStatus `pulumi:"status"`
}

type SysbenchState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SysbenchSpec contains the configuration parameters with scheduling options for the sysbench benchmark. The options, testName and command parameters are passed to the sysbench benchmarking application.
	Spec SysbenchSpecPtrInput
	// BenchmarkStatus describes the current state of the benchmark
	Status SysbenchStatusPtrInput
}

func (SysbenchState) ElementType() reflect.Type {
	return reflect.TypeOf((*sysbenchState)(nil)).Elem()
}

type sysbenchArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SysbenchSpec contains the configuration parameters with scheduling options for the sysbench benchmark. The options, testName and command parameters are passed to the sysbench benchmarking application.
	Spec *SysbenchSpec `pulumi:"spec"`
	// BenchmarkStatus describes the current state of the benchmark
	Status *SysbenchStatus `pulumi:"status"`
}

// The set of arguments for constructing a Sysbench resource.
type SysbenchArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SysbenchSpec contains the configuration parameters with scheduling options for the sysbench benchmark. The options, testName and command parameters are passed to the sysbench benchmarking application.
	Spec SysbenchSpecPtrInput
	// BenchmarkStatus describes the current state of the benchmark
	Status SysbenchStatusPtrInput
}

func (SysbenchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sysbenchArgs)(nil)).Elem()
}

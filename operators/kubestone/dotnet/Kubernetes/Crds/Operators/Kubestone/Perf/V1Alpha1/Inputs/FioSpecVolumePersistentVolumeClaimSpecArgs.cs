// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Perf.V1Alpha1
{

    /// <summary>
    /// PersistentVolumeClaimSpec describes the persistent volume claim that will be created and used by the pod. If specified, the VolumeSource.PersistentVolumeClaim's claimName must be set to 'GENERATED'
    /// </summary>
    public class FioSpecVolumePersistentVolumeClaimSpecArgs : Pulumi.ResourceArgs
    {
        [Input("accessModes")]
        private InputList<string>? _accessModes;

        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        public InputList<string> AccessModes
        {
            get => _accessModes ?? (_accessModes = new InputList<string>());
            set => _accessModes = value;
        }

        /// <summary>
        /// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        /// </summary>
        [Input("dataSource")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Perf.V1Alpha1.FioSpecVolumePersistentVolumeClaimSpecDataSourceArgs>? DataSource { get; set; }

        /// <summary>
        /// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        [Input("resources")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Perf.V1Alpha1.FioSpecVolumePersistentVolumeClaimSpecResourcesArgs>? Resources { get; set; }

        /// <summary>
        /// A label query over volumes to consider for binding.
        /// </summary>
        [Input("selector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Perf.V1Alpha1.FioSpecVolumePersistentVolumeClaimSpecSelectorArgs>? Selector { get; set; }

        /// <summary>
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        [Input("storageClassName")]
        public Input<string>? StorageClassName { get; set; }

        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
        /// </summary>
        [Input("volumeMode")]
        public Input<string>? VolumeMode { get; set; }

        /// <summary>
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </summary>
        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        public FioSpecVolumePersistentVolumeClaimSpecArgs()
        {
        }
    }
}

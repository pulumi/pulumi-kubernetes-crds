// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Perf.V1Alpha1
{

    [OutputType]
    public sealed class QperfSpecServerConfigurationPodScheduling
    {
        /// <summary>
        /// Affinity is a group of affinity scheduling rules.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Perf.V1Alpha1.QperfSpecServerConfigurationPodSchedulingAffinity Affinity;
        /// <summary>
        /// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        /// </summary>
        public readonly string NodeName;
        /// <summary>
        /// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
        /// </summary>
        public readonly ImmutableDictionary<string, string> NodeSelector;
        /// <summary>
        /// If specified, the pod's tolerations.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Perf.V1Alpha1.QperfSpecServerConfigurationPodSchedulingTolerations> Tolerations;

        [OutputConstructor]
        private QperfSpecServerConfigurationPodScheduling(
            Pulumi.Kubernetes.Types.Outputs.Perf.V1Alpha1.QperfSpecServerConfigurationPodSchedulingAffinity affinity,

            string nodeName,

            ImmutableDictionary<string, string> nodeSelector,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Perf.V1Alpha1.QperfSpecServerConfigurationPodSchedulingTolerations> tolerations)
        {
            Affinity = affinity;
            NodeName = nodeName;
            NodeSelector = nodeSelector;
            Tolerations = tolerations;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Ibmcloud.V1Alpha1
{

    [OutputType]
    public sealed class EsIndexSpec
    {
        /// <summary>
        /// Bind to an existing index if true, default value false
        /// </summary>
        public readonly bool BindOnly;
        /// <summary>
        /// Binding resource name that holds the secret for elastic search credentials
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Ibmcloud.V1Alpha1.EsIndexSpecBindingFrom BindingFrom;
        /// <summary>
        /// EsURIComposed is the URI of elasticesearch resource in the format https://&lt;user&gt;:&lt;passwd&gt;@hostname:port. Cannot be used if BindingFrom is not empty.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Ibmcloud.V1Alpha1.EsIndexSpecEsURIComposed EsURIComposed;
        /// <summary>
        /// Name of Index to be created on elastic search
        /// </summary>
        public readonly string IndexName;
        /// <summary>
        /// Number of replicas, default value 1
        /// </summary>
        public readonly int NumberOfReplicas;
        /// <summary>
        /// Number of shards, default value 1
        /// </summary>
        public readonly int NumberOfShards;

        [OutputConstructor]
        private EsIndexSpec(
            bool bindOnly,

            Pulumi.Kubernetes.Types.Outputs.Ibmcloud.V1Alpha1.EsIndexSpecBindingFrom bindingFrom,

            Pulumi.Kubernetes.Types.Outputs.Ibmcloud.V1Alpha1.EsIndexSpecEsURIComposed esURIComposed,

            string indexName,

            int numberOfReplicas,

            int numberOfShards)
        {
            BindOnly = bindOnly;
            BindingFrom = bindingFrom;
            EsURIComposed = esURIComposed;
            IndexName = indexName;
            NumberOfReplicas = numberOfReplicas;
            NumberOfShards = numberOfShards;
        }
    }
}

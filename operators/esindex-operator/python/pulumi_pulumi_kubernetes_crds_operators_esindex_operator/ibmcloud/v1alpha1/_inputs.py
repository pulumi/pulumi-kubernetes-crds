# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'EsIndexSpecArgs',
    'EsIndexSpecBindingFromArgs',
    'EsIndexSpecEsURIComposedArgs',
    'EsIndexStatusArgs',
]

@pulumi.input_type
class EsIndexSpecArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 bind_only: Optional[pulumi.Input[bool]] = None,
                 binding_from: Optional[pulumi.Input['EsIndexSpecBindingFromArgs']] = None,
                 es_uri_composed: Optional[pulumi.Input['EsIndexSpecEsURIComposedArgs']] = None,
                 number_of_replicas: Optional[pulumi.Input[int]] = None,
                 number_of_shards: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] index_name: Name of Index to be created on elastic search
        :param pulumi.Input[bool] bind_only: Bind to an existing index if true, default value false
        :param pulumi.Input['EsIndexSpecBindingFromArgs'] binding_from: Binding resource name that holds the secret for elastic search credentials
        :param pulumi.Input['EsIndexSpecEsURIComposedArgs'] es_uri_composed: EsURIComposed is the URI of elasticesearch resource in the format https://<user>:<passwd>@hostname:port. Cannot be used if BindingFrom is not empty.
        :param pulumi.Input[int] number_of_replicas: Number of replicas, default value 1
        :param pulumi.Input[int] number_of_shards: Number of shards, default value 1
        """
        pulumi.set(__self__, "index_name", index_name)
        if bind_only is not None:
            pulumi.set(__self__, "bind_only", bind_only)
        if binding_from is not None:
            pulumi.set(__self__, "binding_from", binding_from)
        if es_uri_composed is not None:
            pulumi.set(__self__, "es_uri_composed", es_uri_composed)
        if number_of_replicas is not None:
            pulumi.set(__self__, "number_of_replicas", number_of_replicas)
        if number_of_shards is not None:
            pulumi.set(__self__, "number_of_shards", number_of_shards)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        """
        Name of Index to be created on elastic search
        """
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="bindOnly")
    def bind_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Bind to an existing index if true, default value false
        """
        return pulumi.get(self, "bind_only")

    @bind_only.setter
    def bind_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bind_only", value)

    @property
    @pulumi.getter(name="bindingFrom")
    def binding_from(self) -> Optional[pulumi.Input['EsIndexSpecBindingFromArgs']]:
        """
        Binding resource name that holds the secret for elastic search credentials
        """
        return pulumi.get(self, "binding_from")

    @binding_from.setter
    def binding_from(self, value: Optional[pulumi.Input['EsIndexSpecBindingFromArgs']]):
        pulumi.set(self, "binding_from", value)

    @property
    @pulumi.getter(name="esURIComposed")
    def es_uri_composed(self) -> Optional[pulumi.Input['EsIndexSpecEsURIComposedArgs']]:
        """
        EsURIComposed is the URI of elasticesearch resource in the format https://<user>:<passwd>@hostname:port. Cannot be used if BindingFrom is not empty.
        """
        return pulumi.get(self, "es_uri_composed")

    @es_uri_composed.setter
    def es_uri_composed(self, value: Optional[pulumi.Input['EsIndexSpecEsURIComposedArgs']]):
        pulumi.set(self, "es_uri_composed", value)

    @property
    @pulumi.getter(name="numberOfReplicas")
    def number_of_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas, default value 1
        """
        return pulumi.get(self, "number_of_replicas")

    @number_of_replicas.setter
    def number_of_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_replicas", value)

    @property
    @pulumi.getter(name="numberOfShards")
    def number_of_shards(self) -> Optional[pulumi.Input[int]]:
        """
        Number of shards, default value 1
        """
        return pulumi.get(self, "number_of_shards")

    @number_of_shards.setter
    def number_of_shards(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_shards", value)


@pulumi.input_type
class EsIndexSpecBindingFromArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Binding resource name that holds the secret for elastic search credentials
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EsIndexSpecEsURIComposedArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 secret_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        EsURIComposed is the URI of elasticesearch resource in the format https://<user>:<passwd>@hostname:port. Cannot be used if BindingFrom is not empty.
        :param pulumi.Input[Mapping[str, Any]] config_map_key_ref: Selects a key of a ConfigMap in the local namespace.
        :param pulumi.Input[Mapping[str, Any]] secret_key_ref: Selects a key of a secret in the local namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a ConfigMap in the local namespace.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a secret in the local namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class EsIndexStatusArgs:
    def __init__(__self__, *,
                 generation: pulumi.Input[int],
                 message: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] generation: Generation of the implemented spec
        :param pulumi.Input[str] message: Message
        :param pulumi.Input[str] state: State of the resource instance
        """
        pulumi.set(__self__, "generation", generation)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def generation(self) -> pulumi.Input[int]:
        """
        Generation of the implemented spec
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the resource instance
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)



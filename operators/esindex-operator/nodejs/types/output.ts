// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace ibmcloud {
    export namespace v1alpha1 {
        export interface EsIndexSpec {
            /**
             * Bind to an existing index if true, default value false
             */
            bindOnly?: boolean;
            /**
             * Binding resource name that holds the secret for elastic search credentials
             */
            bindingFrom?: outputs.ibmcloud.v1alpha1.EsIndexSpecBindingFrom;
            /**
             * EsURIComposed is the URI of elasticesearch resource in the format https://<user>:<passwd>@hostname:port. Cannot be used if BindingFrom is not empty.
             */
            esURIComposed?: outputs.ibmcloud.v1alpha1.EsIndexSpecEsURIComposed;
            /**
             * Name of Index to be created on elastic search
             */
            indexName: string;
            /**
             * Number of replicas, default value 1
             */
            numberOfReplicas?: number;
            /**
             * Number of shards, default value 1
             */
            numberOfShards?: number;
        }

        /**
         * Binding resource name that holds the secret for elastic search credentials
         */
        export interface EsIndexSpecBindingFrom {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * EsURIComposed is the URI of elasticesearch resource in the format https://<user>:<passwd>@hostname:port. Cannot be used if BindingFrom is not empty.
         */
        export interface EsIndexSpecEsURIComposed {
            /**
             * Selects a key of a ConfigMap in the local namespace.
             */
            configMapKeyRef?: {[key: string]: any};
            /**
             * Selects a key of a secret in the local namespace
             */
            secretKeyRef?: {[key: string]: any};
        }

        export interface EsIndexStatus {
            /**
             * Generation of the implemented spec
             */
            generation: number;
            /**
             * Message
             */
            message?: string;
            /**
             * State of the resource instance
             */
            state?: string;
        }
    }
}

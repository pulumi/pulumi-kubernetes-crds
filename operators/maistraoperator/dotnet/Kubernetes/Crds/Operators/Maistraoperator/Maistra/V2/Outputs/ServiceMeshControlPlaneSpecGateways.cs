// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Maistra.V2
{

    [OutputType]
    public sealed class ServiceMeshControlPlaneSpecGateways
    {
        public readonly ImmutableDictionary<string, Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress> AdditionalEgress;
        public readonly ImmutableDictionary<string, Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress> AdditionalIngress;
        public readonly Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysEgress Egress;
        public readonly bool Enabled;
        public readonly Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysIngress Ingress;
        public readonly Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute OpenshiftRoute;

        [OutputConstructor]
        private ServiceMeshControlPlaneSpecGateways(
            ImmutableDictionary<string, Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress> additionalEgress,

            ImmutableDictionary<string, Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress> additionalIngress,

            Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysEgress egress,

            bool enabled,

            Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysIngress ingress,

            Pulumi.Kubernetes.Types.Outputs.Maistra.V2.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute openshiftRoute)
        {
            AdditionalEgress = additionalEgress;
            AdditionalIngress = additionalIngress;
            Egress = egress;
            Enabled = enabled;
            Ingress = ingress;
            OpenshiftRoute = openshiftRoute;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace maistra {
    export namespace v1 {
        export interface ServiceMeshControlPlaneSpec {
            istio?: {[key: string]: any};
            networkType?: string;
            profiles?: string[];
            template?: string;
            threeScale?: {[key: string]: any};
            version?: string;
        }

        export interface ServiceMeshControlPlaneStatus {
            annotations?: {[key: string]: string};
            components?: outputs.maistra.v1.ServiceMeshControlPlaneStatusComponents[];
            conditions?: outputs.maistra.v1.ServiceMeshControlPlaneStatusConditions[];
            lastAppliedConfiguration?: outputs.maistra.v1.ServiceMeshControlPlaneStatusLastAppliedConfiguration;
            observedGeneration?: number;
            reconciledVersion?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponents {
            children?: outputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsChildren[];
            conditions?: outputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsConditions[];
            resource?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildren {
            conditions?: outputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsChildrenConditions[];
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildrenConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponentsConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusLastAppliedConfiguration {
            istio?: {[key: string]: any};
            networkType?: string;
            profiles?: string[];
            template?: string;
            threeScale?: {[key: string]: any};
            version?: string;
        }

        export interface ServiceMeshMemberRollSpec {
            members?: string[];
        }

        export interface ServiceMeshMemberRollStatus {
            annotations?: {[key: string]: string};
            conditions?: outputs.maistra.v1.ServiceMeshMemberRollStatusConditions[];
            configuredMembers?: string[];
            meshGeneration?: number;
            meshReconciledVersion?: string;
            observedGeneration?: number;
            pendingMembers?: string[];
        }

        export interface ServiceMeshMemberRollStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshMemberSpec {
            controlPlaneRef: outputs.maistra.v1.ServiceMeshMemberSpecControlPlaneRef;
        }

        export interface ServiceMeshMemberSpecControlPlaneRef {
            name: string;
            namespace: string;
        }

        export interface ServiceMeshMemberStatus {
            annotations?: {[key: string]: string};
            conditions: outputs.maistra.v1.ServiceMeshMemberStatusConditions[];
            observedGeneration: number;
        }

        export interface ServiceMeshMemberStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }
    }

    export namespace v2 {
        export interface ServiceMeshControlPlaneSpec {
            addons?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons;
            cluster?: outputs.maistra.v2.ServiceMeshControlPlaneSpecCluster;
            gateways?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGateways;
            general?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGeneral;
            policy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecPolicy;
            profiles?: string[];
            proxy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxy;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntime;
            security?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurity;
            techPreview?: {[key: string]: any};
            telemetry?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetry;
            tracing?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTracing;
            version?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddons {
            3scale?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scale;
            grafana?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafana;
            jaeger?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaeger;
            kiali?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKiali;
            prometheus?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheus;
            stackdriver?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriver;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scale {
            backend?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleBackend;
            client?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleClient;
            enabled?: boolean;
            grpc?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleGrpc;
            listen_addr?: number;
            log_grpc?: boolean;
            log_json?: boolean;
            log_level?: string;
            metrics?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleMetrics;
            system?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleSystem;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleBackend {
            cache_flush_interval?: number;
            enable_cache?: boolean;
            policy_fail_closed?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleClient {
            allow_insecure_connections?: boolean;
            timeout?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleGrpc {
            max_conn_timeout?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleMetrics {
            port?: number;
            report?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleSystem {
            cache_max_size?: number;
            cache_refresh_interval?: number;
            cache_refresh_retries?: number;
            cache_ttl?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafana {
            address?: string;
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstall;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstall {
            config?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig;
            persistence?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence;
            security?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity;
            selfManaged?: boolean;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallService;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig {
            env?: {[key: string]: string};
            envSecrets?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence {
            accessMode?: string;
            capacity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity;
            enabled?: boolean;
            storageClassName?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests};
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits {
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests {
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity {
            enabled?: boolean;
            passphraseKey?: string;
            secretName?: string;
            usernameKey?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaeger {
            install?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstall;
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstall {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress;
            storage?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress {
            enabled?: boolean;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage {
            elasticsearch?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch;
            memory?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch {
            indexCleaner?: {[key: string]: any};
            nodeCount?: number;
            redundancyPolicy?: string;
            storage?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory {
            maxTraces?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKiali {
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstall;
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstall {
            dashboard?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallService;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard {
            enableGrafana?: boolean;
            enablePrometheus?: boolean;
            enableTracing?: boolean;
            viewOnly?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheus {
            address?: string;
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstall;
            metricsExpiryDuration?: string;
            scrape?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstall {
            retention?: string;
            scrapeInterval?: string;
            selfManaged?: boolean;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallService;
            useTLS?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriver {
            telemetry?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry;
            tracer?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTracer;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry {
            accessLogging?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging;
            auth?: outputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth;
            configOverride?: {[key: string]: any};
            enableContextGraph?: boolean;
            enableLogging?: boolean;
            enableMetrics?: boolean;
            enabled?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging {
            enabled?: boolean;
            logWindowDuration?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth {
            apiKey?: string;
            appCredentials?: boolean;
            serviceAccountPath?: string;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTracer {
            debug?: boolean;
            maxNumberOfAnnotations?: number;
            maxNumberOfAttributes?: number;
            maxNumberOfMessageEvents?: number;
        }

        export interface ServiceMeshControlPlaneSpecCluster {
            meshExpansion?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansion;
            multiCluster?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiCluster;
            name?: string;
            network?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansion {
            enabled?: boolean;
            ilbGateway?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway {
            enabled?: boolean;
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiCluster {
            enabled?: boolean;
            meshNetworks?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks};
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks {
            endpoints?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints[];
            gateways?: outputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways[];
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints {
            fromCIDR?: string;
            fromRegistry?: string;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways {
            address?: string;
            port?: number;
            service?: string;
        }

        export interface ServiceMeshControlPlaneSpecGateways {
            additionalEgress?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress};
            additionalIngress?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress};
            egress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgress;
            enabled?: boolean;
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngress;
            openshiftRoute?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgress {
            enabled?: boolean;
            namespace?: string;
            requestedNetworkView?: string[];
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngress {
            enabled?: boolean;
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime;
            sds?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds {
            enabled?: boolean;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgress {
            enabled?: boolean;
            namespace?: string;
            requestedNetworkView?: string[];
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumes[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngress {
            enabled?: boolean;
            ingress?: boolean;
            meshExpansionPorts?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts[];
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntime;
            sds?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSds;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumes[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSds {
            enabled?: boolean;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute {
            enabled?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGeneral {
            logging?: outputs.maistra.v2.ServiceMeshControlPlaneSpecGeneralLogging;
            validationMessages?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecGeneralLogging {
            componentLevels?: {[key: string]: string};
            logAsJSON?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecPolicy {
            mixer?: outputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyMixer;
            remote?: outputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyRemote;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecPolicyMixer {
            adapters?: outputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyMixerAdapters;
            enableChecks?: boolean;
            failOpen?: boolean;
            sessionAffinity?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecPolicyMixerAdapters {
            kubernetesenv?: boolean;
            useAdapterCRDs?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecPolicyRemote {
            address?: string;
            createService?: boolean;
            enableChecks?: boolean;
            failOpen?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecProxy {
            accessLogging?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLogging;
            adminPort?: number;
            concurrency?: number;
            envoyMetricsService?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsService;
            injection?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjection;
            logging?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyLogging;
            networking?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworking;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntime;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLogging {
            envoyService?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService;
            file?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingFile;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService {
            address?: string;
            enabled?: boolean;
            tcpKeepalive?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive;
            tlsSettings?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive {
            interval?: string;
            probes?: number;
            time?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings {
            caCertificates?: string;
            clientCertificate?: string;
            mode?: string;
            privateKey?: string;
            sni?: string;
            subjectAltNames?: string[];
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingFile {
            encoding?: string;
            format?: string;
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsService {
            address?: string;
            enabled?: boolean;
            tcpKeepalive?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive;
            tlsSettings?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive {
            interval?: string;
            probes?: number;
            time?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings {
            caCertificates?: string;
            clientCertificate?: string;
            mode?: string;
            privateKey?: string;
            sni?: string;
            subjectAltNames?: string[];
        }

        export interface ServiceMeshControlPlaneSpecProxyInjection {
            alwaysInjectSelector?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector[];
            autoInject?: boolean;
            injectedAnnotations?: {[key: string]: string};
            neverInjectSelector?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector[];
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector {
            matchExpressions?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector {
            matchExpressions?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecProxyLogging {
            componentLevels?: {[key: string]: string};
            level?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworking {
            clusterDomain?: string;
            connectionTimeout?: string;
            dns?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingDns;
            initialization?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitialization;
            maxConnectionAge?: string;
            protocol?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingProtocol;
            trafficControl?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingDns {
            refreshRate?: string;
            searchSuffixes?: string[];
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitialization {
            initContainer?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer {
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingProtocol {
            autoDetect?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect {
            inbound?: boolean;
            outbound?: boolean;
            timeout?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl {
            inbound?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound;
            outbound?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound {
            excludedPorts?: number[];
            includedPorts?: string[];
            interceptionMode?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound {
            excludedIPRanges?: string[];
            excludedPorts?: number[];
            includedIPRanges?: string[];
            policy?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainer;
            readiness?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeReadiness;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeReadiness {
            failureThreshold?: number;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            rewriteApplicationProbes?: boolean;
            statusPort?: number;
        }

        export interface ServiceMeshControlPlaneSpecRuntime {
            components?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponents};
            defaults?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaults;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponents {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPod;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaults {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsPod;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainer {
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment {
            podDisruption?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption {
            enabled?: boolean;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable;
            minAvailable?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsPod {
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations[];
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurity {
            certificateAuthority?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthority;
            controlPlane?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityControlPlane;
            dataPlane?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityDataPlane;
            identity?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityIdentity;
            trust?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityTrust;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthority {
            custom?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom;
            istiod?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom {
            address?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod {
            privateKey?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey;
            selfSigned?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned;
            type?: string;
            workloadCertTTLDefault?: string;
            workloadCertTTLMax?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey {
            rootCADir?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned {
            checkPeriod?: string;
            enableJitter?: boolean;
            gracePeriod?: string;
            ttl?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityControlPlane {
            certProvider?: string;
            mtls?: boolean;
            tls?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityControlPlaneTls;
        }

        export interface ServiceMeshControlPlaneSpecSecurityControlPlaneTls {
            cipherSuites?: string[];
            ecdhCurves?: string[];
            maxProtocolVersion?: string;
            minProtocolVersion?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityDataPlane {
            automtls?: boolean;
            mtls?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecSecurityIdentity {
            thirdParty?: outputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityIdentityThirdParty;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityIdentityThirdParty {
            audience?: string;
            issuer?: string;
        }

        export interface ServiceMeshControlPlaneSpecSecurityTrust {
            additionalDomains?: string[];
            domain?: string;
        }

        export interface ServiceMeshControlPlaneSpecTelemetry {
            mixer?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixer;
            remote?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryRemote;
            type?: string;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixer {
            adapters?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerAdapters;
            batching?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerBatching;
            loadshedding?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding;
            sessionAffinity?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerAdapters {
            kubernetesenv?: boolean;
            stdio?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio;
            useAdapterCRDs?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio {
            enabled?: boolean;
            outputAsJSON?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerBatching {
            maxEntries?: number;
            maxTime?: string;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding {
            latencyThreshold?: string;
            mode?: string;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryRemote {
            address?: string;
            batching?: outputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryRemoteBatching;
            createService?: boolean;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryRemoteBatching {
            maxEntries?: number;
            maxTime?: string;
        }

        export interface ServiceMeshControlPlaneSpecTracing {
            sampling?: number;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatus {
            annotations?: {[key: string]: string};
            appliedSpec?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpec;
            appliedValues?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedValues;
            chartVersion?: string;
            components?: outputs.maistra.v2.ServiceMeshControlPlaneStatusComponents[];
            conditions?: outputs.maistra.v2.ServiceMeshControlPlaneStatusConditions[];
            observedGeneration?: number;
            operatorVersion?: string;
            readiness: outputs.maistra.v2.ServiceMeshControlPlaneStatusReadiness;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpec {
            addons?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons;
            cluster?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecCluster;
            gateways?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGateways;
            general?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGeneral;
            policy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicy;
            profiles?: string[];
            proxy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxy;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntime;
            security?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurity;
            techPreview?: {[key: string]: any};
            telemetry?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetry;
            tracing?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTracing;
            version?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons {
            3scale?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scale;
            grafana?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana;
            jaeger?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger;
            kiali?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali;
            prometheus?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus;
            stackdriver?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scale {
            backend?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend;
            client?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient;
            enabled?: boolean;
            grpc?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc;
            listen_addr?: number;
            log_grpc?: boolean;
            log_json?: boolean;
            log_level?: string;
            metrics?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics;
            system?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend {
            cache_flush_interval?: number;
            enable_cache?: boolean;
            policy_fail_closed?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient {
            allow_insecure_connections?: boolean;
            timeout?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc {
            max_conn_timeout?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics {
            port?: number;
            report?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem {
            cache_max_size?: number;
            cache_refresh_interval?: number;
            cache_refresh_retries?: number;
            cache_ttl?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana {
            address?: string;
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall {
            config?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig;
            persistence?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence;
            security?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity;
            selfManaged?: boolean;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig {
            env?: {[key: string]: string};
            envSecrets?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence {
            accessMode?: string;
            capacity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity;
            enabled?: boolean;
            storageClassName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity {
            enabled?: boolean;
            passphraseKey?: string;
            secretName?: string;
            usernameKey?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger {
            install?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall;
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress;
            storage?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress {
            enabled?: boolean;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage {
            elasticsearch?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch;
            memory?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch {
            indexCleaner?: {[key: string]: any};
            nodeCount?: number;
            redundancyPolicy?: string;
            storage?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory {
            maxTraces?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali {
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall;
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall {
            dashboard?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard {
            enableGrafana?: boolean;
            enablePrometheus?: boolean;
            enableTracing?: boolean;
            viewOnly?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus {
            address?: string;
            enabled?: boolean;
            install?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall;
            metricsExpiryDuration?: string;
            scrape?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall {
            retention?: string;
            scrapeInterval?: string;
            selfManaged?: boolean;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService;
            useTLS?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService {
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata;
            nodePort?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress {
            contextPath?: string;
            enabled?: boolean;
            hosts?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata;
            tls?: {[key: string]: any};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver {
            telemetry?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry;
            tracer?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry {
            accessLogging?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging;
            auth?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth;
            configOverride?: {[key: string]: any};
            enableContextGraph?: boolean;
            enableLogging?: boolean;
            enableMetrics?: boolean;
            enabled?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging {
            enabled?: boolean;
            logWindowDuration?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth {
            apiKey?: string;
            appCredentials?: boolean;
            serviceAccountPath?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer {
            debug?: boolean;
            maxNumberOfAnnotations?: number;
            maxNumberOfAttributes?: number;
            maxNumberOfMessageEvents?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecCluster {
            meshExpansion?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion;
            multiCluster?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster;
            name?: string;
            network?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion {
            enabled?: boolean;
            ilbGateway?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway {
            enabled?: boolean;
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster {
            enabled?: boolean;
            meshNetworks?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks {
            endpoints?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints[];
            gateways?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints {
            fromCIDR?: string;
            fromRegistry?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways {
            address?: string;
            port?: number;
            service?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGateways {
            additionalEgress?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress};
            additionalIngress?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress};
            egress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress;
            enabled?: boolean;
            ingress?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress;
            openshiftRoute?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress {
            enabled?: boolean;
            namespace?: string;
            requestedNetworkView?: string[];
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress {
            enabled?: boolean;
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime;
            sds?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds {
            enabled?: boolean;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress {
            enabled?: boolean;
            namespace?: string;
            requestedNetworkView?: string[];
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress {
            enabled?: boolean;
            ingress?: boolean;
            meshExpansionPorts?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts[];
            namespace?: string;
            routerMode?: string;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime;
            sds?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds;
            service?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService;
            volumes?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds {
            enabled?: boolean;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService {
            clusterIP?: string;
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            ipFamily?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata;
            ports?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig {
            clientIP?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes {
            volume?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume;
            volumeMount?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume {
            configMap?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap;
            secret?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret {
            defaultMode?: number;
            items?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute {
            enabled?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGeneral {
            logging?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging;
            validationMessages?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging {
            componentLevels?: {[key: string]: string};
            logAsJSON?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicy {
            mixer?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer;
            remote?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer {
            adapters?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters;
            enableChecks?: boolean;
            failOpen?: boolean;
            sessionAffinity?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters {
            kubernetesenv?: boolean;
            useAdapterCRDs?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote {
            address?: string;
            createService?: boolean;
            enableChecks?: boolean;
            failOpen?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxy {
            accessLogging?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging;
            adminPort?: number;
            concurrency?: number;
            envoyMetricsService?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService;
            injection?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjection;
            logging?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyLogging;
            networking?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking;
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging {
            envoyService?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService;
            file?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService {
            address?: string;
            enabled?: boolean;
            tcpKeepalive?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive;
            tlsSettings?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive {
            interval?: string;
            probes?: number;
            time?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings {
            caCertificates?: string;
            clientCertificate?: string;
            mode?: string;
            privateKey?: string;
            sni?: string;
            subjectAltNames?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile {
            encoding?: string;
            format?: string;
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService {
            address?: string;
            enabled?: boolean;
            tcpKeepalive?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive;
            tlsSettings?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive {
            interval?: string;
            probes?: number;
            time?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings {
            caCertificates?: string;
            clientCertificate?: string;
            mode?: string;
            privateKey?: string;
            sni?: string;
            subjectAltNames?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjection {
            alwaysInjectSelector?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector[];
            autoInject?: boolean;
            injectedAnnotations?: {[key: string]: string};
            neverInjectSelector?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector {
            matchExpressions?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector {
            matchExpressions?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyLogging {
            componentLevels?: {[key: string]: string};
            level?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking {
            clusterDomain?: string;
            connectionTimeout?: string;
            dns?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns;
            initialization?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization;
            maxConnectionAge?: string;
            protocol?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol;
            trafficControl?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns {
            refreshRate?: string;
            searchSuffixes?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization {
            initContainer?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer {
            runtime?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol {
            autoDetect?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect {
            inbound?: boolean;
            outbound?: boolean;
            timeout?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl {
            inbound?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound;
            outbound?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound {
            excludedPorts?: number[];
            includedPorts?: string[];
            interceptionMode?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound {
            excludedIPRanges?: string[];
            excludedPorts?: number[];
            includedIPRanges?: string[];
            policy?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer;
            readiness?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness {
            failureThreshold?: number;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            rewriteApplicationProbes?: boolean;
            statusPort?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntime {
            components?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents};
            defaults?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer {
            env?: {[key: string]: string};
            imageName?: string;
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment {
            autoScaling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling;
            replicas?: number;
            strategy?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling {
            enabled?: boolean;
            maxReplicas?: number;
            minReplicas?: number;
            targetCPUUtilizationPercentage?: number;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy {
            rollingUpdate?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate {
            maxSurge?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod {
            affinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity;
            metadata?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata;
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity {
            podAntiAffinity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity {
            preferredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling[];
            requiredDuringScheduling?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: string;
            operator: string;
            topologyKey?: string;
            values?: string[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults {
            container?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer;
            deployment?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment;
            pod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer {
            imagePullPolicy?: string;
            imagePullSecrets?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets[];
            imageRegistry?: string;
            imageTag?: string;
            resources?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets {
            name?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources {
            limits?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits};
            requests?: {[key: string]: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests};
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment {
            podDisruption?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption {
            enabled?: boolean;
            maxUnavailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable;
            minAvailable?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod {
            nodeSelector?: {[key: string]: string};
            priorityClassName?: string;
            tolerations?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations[];
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurity {
            certificateAuthority?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority;
            controlPlane?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane;
            dataPlane?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane;
            identity?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity;
            trust?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority {
            custom?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom;
            istiod?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom {
            address?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod {
            privateKey?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey;
            selfSigned?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned;
            type?: string;
            workloadCertTTLDefault?: string;
            workloadCertTTLMax?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey {
            rootCADir?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned {
            checkPeriod?: string;
            enableJitter?: boolean;
            gracePeriod?: string;
            ttl?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane {
            certProvider?: string;
            mtls?: boolean;
            tls?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls {
            cipherSuites?: string[];
            ecdhCurves?: string[];
            maxProtocolVersion?: string;
            minProtocolVersion?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane {
            automtls?: boolean;
            mtls?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity {
            thirdParty?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty {
            audience?: string;
            issuer?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust {
            additionalDomains?: string[];
            domain?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetry {
            mixer?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer;
            remote?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer {
            adapters?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters;
            batching?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching;
            loadshedding?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding;
            sessionAffinity?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters {
            kubernetesenv?: boolean;
            stdio?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio;
            useAdapterCRDs?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio {
            enabled?: boolean;
            outputAsJSON?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching {
            maxEntries?: number;
            maxTime?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding {
            latencyThreshold?: string;
            mode?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote {
            address?: string;
            batching?: outputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching;
            createService?: boolean;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching {
            maxEntries?: number;
            maxTime?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTracing {
            sampling?: number;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusAppliedValues {
            istio?: {[key: string]: any};
            networkType?: string;
            profiles?: string[];
            template?: string;
            threeScale?: {[key: string]: any};
            version?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponents {
            children?: outputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsChildren[];
            conditions?: outputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsConditions[];
            resource?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildren {
            conditions?: outputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsChildrenConditions[];
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildrenConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusComponentsConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusConditions {
            lastTransitionTime?: string;
            message?: string;
            reason?: string;
            status?: string;
            type?: string;
        }

        export interface ServiceMeshControlPlaneStatusReadiness {
            components?: {[key: string]: string[]};
        }

    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace maistra {
    export namespace v1 {
        export interface ServiceMeshControlPlaneSpec {
            istio?: pulumi.Input<{[key: string]: any}>;
            networkType?: pulumi.Input<string>;
            profiles?: pulumi.Input<pulumi.Input<string>[]>;
            template?: pulumi.Input<string>;
            threeScale?: pulumi.Input<{[key: string]: any}>;
            version?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatus {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            components?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusComponents>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusConditions>[]>;
            lastAppliedConfiguration?: pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusLastAppliedConfiguration>;
            observedGeneration?: pulumi.Input<number>;
            reconciledVersion?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponents {
            children?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsChildren>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsConditions>[]>;
            resource?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildren {
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshControlPlaneStatusComponentsChildrenConditions>[]>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildrenConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusLastAppliedConfiguration {
            istio?: pulumi.Input<{[key: string]: any}>;
            networkType?: pulumi.Input<string>;
            profiles?: pulumi.Input<pulumi.Input<string>[]>;
            template?: pulumi.Input<string>;
            threeScale?: pulumi.Input<{[key: string]: any}>;
            version?: pulumi.Input<string>;
        }

        export interface ServiceMeshMemberRollSpec {
            members?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshMemberRollStatus {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshMemberRollStatusConditions>[]>;
            configuredMembers?: pulumi.Input<pulumi.Input<string>[]>;
            meshGeneration?: pulumi.Input<number>;
            meshReconciledVersion?: pulumi.Input<string>;
            observedGeneration?: pulumi.Input<number>;
            pendingMembers?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshMemberRollStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshMemberSpec {
            controlPlaneRef: pulumi.Input<inputs.maistra.v1.ServiceMeshMemberSpecControlPlaneRef>;
        }

        export interface ServiceMeshMemberSpecControlPlaneRef {
            name: pulumi.Input<string>;
            namespace: pulumi.Input<string>;
        }

        export interface ServiceMeshMemberStatus {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            conditions: pulumi.Input<pulumi.Input<inputs.maistra.v1.ServiceMeshMemberStatusConditions>[]>;
            observedGeneration: pulumi.Input<number>;
        }

        export interface ServiceMeshMemberStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }
    }

    export namespace v2 {
        export interface ServiceMeshControlPlaneSpec {
            addons?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons>;
            cluster?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecCluster>;
            gateways?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGateways>;
            general?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGeneral>;
            policy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecPolicy>;
            profiles?: pulumi.Input<pulumi.Input<string>[]>;
            proxy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxy>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntime>;
            security?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurity>;
            techPreview?: pulumi.Input<{[key: string]: any}>;
            telemetry?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetry>;
            tracing?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTracing>;
            version?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddons {
            3scale?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scale>;
            grafana?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafana>;
            jaeger?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaeger>;
            kiali?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKiali>;
            prometheus?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheus>;
            stackdriver?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriver>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scale {
            backend?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleBackend>;
            client?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleClient>;
            enabled?: pulumi.Input<boolean>;
            grpc?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleGrpc>;
            listen_addr?: pulumi.Input<number>;
            log_grpc?: pulumi.Input<boolean>;
            log_json?: pulumi.Input<boolean>;
            log_level?: pulumi.Input<string>;
            metrics?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleMetrics>;
            system?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddons3scaleSystem>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleBackend {
            cache_flush_interval?: pulumi.Input<number>;
            enable_cache?: pulumi.Input<boolean>;
            policy_fail_closed?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleClient {
            allow_insecure_connections?: pulumi.Input<boolean>;
            timeout?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleGrpc {
            max_conn_timeout?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleMetrics {
            port?: pulumi.Input<number>;
            report?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddons3scaleSystem {
            cache_max_size?: pulumi.Input<number>;
            cache_refresh_interval?: pulumi.Input<number>;
            cache_refresh_retries?: pulumi.Input<number>;
            cache_ttl?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafana {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstall>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstall {
            config?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig>;
            persistence?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence>;
            security?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity>;
            selfManaged?: pulumi.Input<boolean>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallService>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            envSecrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence {
            accessMode?: pulumi.Input<string>;
            capacity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity>;
            enabled?: pulumi.Input<boolean>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits {
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests {
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity {
            enabled?: pulumi.Input<boolean>;
            passphraseKey?: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            usernameKey?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaeger {
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstall>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstall {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress>;
            storage?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress {
            enabled?: pulumi.Input<boolean>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage {
            elasticsearch?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch>;
            memory?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch {
            indexCleaner?: pulumi.Input<{[key: string]: any}>;
            nodeCount?: pulumi.Input<number>;
            redundancyPolicy?: pulumi.Input<string>;
            storage?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory {
            maxTraces?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKiali {
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstall>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstall {
            dashboard?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallService>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard {
            enableGrafana?: pulumi.Input<boolean>;
            enablePrometheus?: pulumi.Input<boolean>;
            enableTracing?: pulumi.Input<boolean>;
            viewOnly?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheus {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstall>;
            metricsExpiryDuration?: pulumi.Input<string>;
            scrape?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstall {
            retention?: pulumi.Input<string>;
            scrapeInterval?: pulumi.Input<string>;
            selfManaged?: pulumi.Input<boolean>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallService>;
            useTLS?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriver {
            telemetry?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry>;
            tracer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTracer>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry {
            accessLogging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging>;
            auth?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth>;
            configOverride?: pulumi.Input<{[key: string]: any}>;
            enableContextGraph?: pulumi.Input<boolean>;
            enableLogging?: pulumi.Input<boolean>;
            enableMetrics?: pulumi.Input<boolean>;
            enabled?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging {
            enabled?: pulumi.Input<boolean>;
            logWindowDuration?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth {
            apiKey?: pulumi.Input<string>;
            appCredentials?: pulumi.Input<boolean>;
            serviceAccountPath?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecAddonsStackdriverTracer {
            debug?: pulumi.Input<boolean>;
            maxNumberOfAnnotations?: pulumi.Input<number>;
            maxNumberOfAttributes?: pulumi.Input<number>;
            maxNumberOfMessageEvents?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecCluster {
            meshExpansion?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansion>;
            multiCluster?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiCluster>;
            name?: pulumi.Input<string>;
            network?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansion {
            enabled?: pulumi.Input<boolean>;
            ilbGateway?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiCluster {
            enabled?: pulumi.Input<boolean>;
            meshNetworks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks>}>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks {
            endpoints?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints>[]>;
            gateways?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways>[]>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints {
            fromCIDR?: pulumi.Input<string>;
            fromRegistry?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways {
            address?: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGateways {
            additionalEgress?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress>}>;
            additionalIngress?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress>}>;
            egress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgress>;
            enabled?: pulumi.Input<boolean>;
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngress>;
            openshiftRoute?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            requestedNetworkView?: pulumi.Input<pulumi.Input<string>[]>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime>;
            sds?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds {
            enabled?: pulumi.Input<boolean>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            requestedNetworkView?: pulumi.Input<pulumi.Input<string>[]>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngress {
            enabled?: pulumi.Input<boolean>;
            ingress?: pulumi.Input<boolean>;
            meshExpansionPorts?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts>[]>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntime>;
            sds?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSds>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSds {
            enabled?: pulumi.Input<boolean>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute {
            enabled?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGeneral {
            logging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecGeneralLogging>;
            validationMessages?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecGeneralLogging {
            componentLevels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            logAsJSON?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecPolicy {
            mixer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyMixer>;
            remote?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyRemote>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecPolicyMixer {
            adapters?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecPolicyMixerAdapters>;
            enableChecks?: pulumi.Input<boolean>;
            failOpen?: pulumi.Input<boolean>;
            sessionAffinity?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecPolicyMixerAdapters {
            kubernetesenv?: pulumi.Input<boolean>;
            useAdapterCRDs?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecPolicyRemote {
            address?: pulumi.Input<string>;
            createService?: pulumi.Input<boolean>;
            enableChecks?: pulumi.Input<boolean>;
            failOpen?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecProxy {
            accessLogging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLogging>;
            adminPort?: pulumi.Input<number>;
            concurrency?: pulumi.Input<number>;
            envoyMetricsService?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsService>;
            injection?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjection>;
            logging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyLogging>;
            networking?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworking>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntime>;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLogging {
            envoyService?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService>;
            file?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingFile>;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            tcpKeepalive?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive>;
            tlsSettings?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings>;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive {
            interval?: pulumi.Input<string>;
            probes?: pulumi.Input<number>;
            time?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings {
            caCertificates?: pulumi.Input<string>;
            clientCertificate?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            privateKey?: pulumi.Input<string>;
            sni?: pulumi.Input<string>;
            subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyAccessLoggingFile {
            encoding?: pulumi.Input<string>;
            format?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsService {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            tcpKeepalive?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive>;
            tlsSettings?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings>;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive {
            interval?: pulumi.Input<string>;
            probes?: pulumi.Input<number>;
            time?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings {
            caCertificates?: pulumi.Input<string>;
            clientCertificate?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            privateKey?: pulumi.Input<string>;
            sni?: pulumi.Input<string>;
            subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyInjection {
            alwaysInjectSelector?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector>[]>;
            autoInject?: pulumi.Input<boolean>;
            injectedAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            neverInjectSelector?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyLogging {
            componentLevels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            level?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworking {
            clusterDomain?: pulumi.Input<string>;
            connectionTimeout?: pulumi.Input<string>;
            dns?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingDns>;
            initialization?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitialization>;
            maxConnectionAge?: pulumi.Input<string>;
            protocol?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingProtocol>;
            trafficControl?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingDns {
            refreshRate?: pulumi.Input<string>;
            searchSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitialization {
            initContainer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer {
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingProtocol {
            autoDetect?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect {
            inbound?: pulumi.Input<boolean>;
            outbound?: pulumi.Input<boolean>;
            timeout?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl {
            inbound?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound>;
            outbound?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound {
            excludedPorts?: pulumi.Input<pulumi.Input<number>[]>;
            includedPorts?: pulumi.Input<pulumi.Input<string>[]>;
            interceptionMode?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound {
            excludedIPRanges?: pulumi.Input<pulumi.Input<string>[]>;
            excludedPorts?: pulumi.Input<pulumi.Input<number>[]>;
            includedIPRanges?: pulumi.Input<pulumi.Input<string>[]>;
            policy?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainer>;
            readiness?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeReadiness>;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecProxyRuntimeReadiness {
            failureThreshold?: pulumi.Input<number>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            rewriteApplicationProbes?: pulumi.Input<boolean>;
            statusPort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecRuntime {
            components?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponents>}>;
            defaults?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaults>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponents {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPod>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaults {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsPod>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainer {
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment {
            podDisruption?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption {
            enabled?: pulumi.Input<boolean>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable {
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsPod {
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurity {
            certificateAuthority?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthority>;
            controlPlane?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityControlPlane>;
            dataPlane?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityDataPlane>;
            identity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityIdentity>;
            trust?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityTrust>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthority {
            custom?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom>;
            istiod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom {
            address?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod {
            privateKey?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey>;
            selfSigned?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned>;
            type?: pulumi.Input<string>;
            workloadCertTTLDefault?: pulumi.Input<string>;
            workloadCertTTLMax?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey {
            rootCADir?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned {
            checkPeriod?: pulumi.Input<string>;
            enableJitter?: pulumi.Input<boolean>;
            gracePeriod?: pulumi.Input<string>;
            ttl?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityControlPlane {
            certProvider?: pulumi.Input<string>;
            mtls?: pulumi.Input<boolean>;
            tls?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityControlPlaneTls>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityControlPlaneTls {
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            ecdhCurves?: pulumi.Input<pulumi.Input<string>[]>;
            maxProtocolVersion?: pulumi.Input<string>;
            minProtocolVersion?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityDataPlane {
            automtls?: pulumi.Input<boolean>;
            mtls?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityIdentity {
            thirdParty?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecSecurityIdentityThirdParty>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityIdentityThirdParty {
            audience?: pulumi.Input<string>;
            issuer?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecSecurityTrust {
            additionalDomains?: pulumi.Input<pulumi.Input<string>[]>;
            domain?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetry {
            mixer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixer>;
            remote?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryRemote>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixer {
            adapters?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerAdapters>;
            batching?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerBatching>;
            loadshedding?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding>;
            sessionAffinity?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerAdapters {
            kubernetesenv?: pulumi.Input<boolean>;
            stdio?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio>;
            useAdapterCRDs?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio {
            enabled?: pulumi.Input<boolean>;
            outputAsJSON?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerBatching {
            maxEntries?: pulumi.Input<number>;
            maxTime?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding {
            latencyThreshold?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryRemote {
            address?: pulumi.Input<string>;
            batching?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneSpecTelemetryRemoteBatching>;
            createService?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneSpecTelemetryRemoteBatching {
            maxEntries?: pulumi.Input<number>;
            maxTime?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneSpecTracing {
            sampling?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatus {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            appliedSpec?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpec>;
            appliedValues?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedValues>;
            chartVersion?: pulumi.Input<string>;
            components?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusComponents>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusConditions>[]>;
            observedGeneration?: pulumi.Input<number>;
            operatorVersion?: pulumi.Input<string>;
            readiness: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusReadiness>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpec {
            addons?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons>;
            cluster?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecCluster>;
            gateways?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGateways>;
            general?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGeneral>;
            policy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicy>;
            profiles?: pulumi.Input<pulumi.Input<string>[]>;
            proxy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxy>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntime>;
            security?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurity>;
            techPreview?: pulumi.Input<{[key: string]: any}>;
            telemetry?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetry>;
            tracing?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTracing>;
            version?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons {
            3scale?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scale>;
            grafana?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana>;
            jaeger?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger>;
            kiali?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali>;
            prometheus?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus>;
            stackdriver?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scale {
            backend?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend>;
            client?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient>;
            enabled?: pulumi.Input<boolean>;
            grpc?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc>;
            listen_addr?: pulumi.Input<number>;
            log_grpc?: pulumi.Input<boolean>;
            log_json?: pulumi.Input<boolean>;
            log_level?: pulumi.Input<string>;
            metrics?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics>;
            system?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend {
            cache_flush_interval?: pulumi.Input<number>;
            enable_cache?: pulumi.Input<boolean>;
            policy_fail_closed?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient {
            allow_insecure_connections?: pulumi.Input<boolean>;
            timeout?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc {
            max_conn_timeout?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics {
            port?: pulumi.Input<number>;
            report?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem {
            cache_max_size?: pulumi.Input<number>;
            cache_refresh_interval?: pulumi.Input<number>;
            cache_refresh_retries?: pulumi.Input<number>;
            cache_ttl?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall {
            config?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig>;
            persistence?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence>;
            security?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity>;
            selfManaged?: pulumi.Input<boolean>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            envSecrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence {
            accessMode?: pulumi.Input<string>;
            capacity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity>;
            enabled?: pulumi.Input<boolean>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity {
            enabled?: pulumi.Input<boolean>;
            passphraseKey?: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            usernameKey?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger {
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress>;
            storage?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress {
            enabled?: pulumi.Input<boolean>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage {
            elasticsearch?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch>;
            memory?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch {
            indexCleaner?: pulumi.Input<{[key: string]: any}>;
            nodeCount?: pulumi.Input<number>;
            redundancyPolicy?: pulumi.Input<string>;
            storage?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory {
            maxTraces?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali {
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall {
            dashboard?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard {
            enableGrafana?: pulumi.Input<boolean>;
            enablePrometheus?: pulumi.Input<boolean>;
            enableTracing?: pulumi.Input<boolean>;
            viewOnly?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            install?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall>;
            metricsExpiryDuration?: pulumi.Input<string>;
            scrape?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall {
            retention?: pulumi.Input<string>;
            scrapeInterval?: pulumi.Input<string>;
            selfManaged?: pulumi.Input<boolean>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService>;
            useTLS?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService {
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata>;
            nodePort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress {
            contextPath?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata>;
            tls?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver {
            telemetry?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry>;
            tracer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry {
            accessLogging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging>;
            auth?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth>;
            configOverride?: pulumi.Input<{[key: string]: any}>;
            enableContextGraph?: pulumi.Input<boolean>;
            enableLogging?: pulumi.Input<boolean>;
            enableMetrics?: pulumi.Input<boolean>;
            enabled?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging {
            enabled?: pulumi.Input<boolean>;
            logWindowDuration?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth {
            apiKey?: pulumi.Input<string>;
            appCredentials?: pulumi.Input<boolean>;
            serviceAccountPath?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer {
            debug?: pulumi.Input<boolean>;
            maxNumberOfAnnotations?: pulumi.Input<number>;
            maxNumberOfAttributes?: pulumi.Input<number>;
            maxNumberOfMessageEvents?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecCluster {
            meshExpansion?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion>;
            multiCluster?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster>;
            name?: pulumi.Input<string>;
            network?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion {
            enabled?: pulumi.Input<boolean>;
            ilbGateway?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster {
            enabled?: pulumi.Input<boolean>;
            meshNetworks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks {
            endpoints?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints>[]>;
            gateways?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints {
            fromCIDR?: pulumi.Input<string>;
            fromRegistry?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways {
            address?: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGateways {
            additionalEgress?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress>}>;
            additionalIngress?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress>}>;
            egress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress>;
            enabled?: pulumi.Input<boolean>;
            ingress?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress>;
            openshiftRoute?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            requestedNetworkView?: pulumi.Input<pulumi.Input<string>[]>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime>;
            sds?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds {
            enabled?: pulumi.Input<boolean>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress {
            enabled?: pulumi.Input<boolean>;
            namespace?: pulumi.Input<string>;
            requestedNetworkView?: pulumi.Input<pulumi.Input<string>[]>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress {
            enabled?: pulumi.Input<boolean>;
            ingress?: pulumi.Input<boolean>;
            meshExpansionPorts?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts>[]>;
            namespace?: pulumi.Input<string>;
            routerMode?: pulumi.Input<string>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime>;
            sds?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds>;
            service?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService>;
            volumes?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds {
            enabled?: pulumi.Input<boolean>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService {
            clusterIP?: pulumi.Input<string>;
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            externalName?: pulumi.Input<string>;
            externalTrafficPolicy?: pulumi.Input<string>;
            healthCheckNodePort?: pulumi.Input<number>;
            ipFamily?: pulumi.Input<string>;
            loadBalancerIP?: pulumi.Input<string>;
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata>;
            ports?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts>[]>;
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            sessionAffinity?: pulumi.Input<string>;
            sessionAffinityConfig?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig>;
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts {
            appProtocol?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            port: pulumi.Input<number>;
            protocol?: pulumi.Input<string>;
            targetPort?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig {
            clientIP?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP {
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes {
            volume?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume>;
            volumeMount?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume {
            configMap?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap>;
            secret?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount {
            mountPath: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems {
            key: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute {
            enabled?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGeneral {
            logging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging>;
            validationMessages?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging {
            componentLevels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            logAsJSON?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicy {
            mixer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer>;
            remote?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer {
            adapters?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters>;
            enableChecks?: pulumi.Input<boolean>;
            failOpen?: pulumi.Input<boolean>;
            sessionAffinity?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters {
            kubernetesenv?: pulumi.Input<boolean>;
            useAdapterCRDs?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote {
            address?: pulumi.Input<string>;
            createService?: pulumi.Input<boolean>;
            enableChecks?: pulumi.Input<boolean>;
            failOpen?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxy {
            accessLogging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging>;
            adminPort?: pulumi.Input<number>;
            concurrency?: pulumi.Input<number>;
            envoyMetricsService?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService>;
            injection?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjection>;
            logging?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyLogging>;
            networking?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking>;
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging {
            envoyService?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService>;
            file?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            tcpKeepalive?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive>;
            tlsSettings?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive {
            interval?: pulumi.Input<string>;
            probes?: pulumi.Input<number>;
            time?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings {
            caCertificates?: pulumi.Input<string>;
            clientCertificate?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            privateKey?: pulumi.Input<string>;
            sni?: pulumi.Input<string>;
            subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile {
            encoding?: pulumi.Input<string>;
            format?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService {
            address?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            tcpKeepalive?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive>;
            tlsSettings?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive {
            interval?: pulumi.Input<string>;
            probes?: pulumi.Input<number>;
            time?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings {
            caCertificates?: pulumi.Input<string>;
            clientCertificate?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            privateKey?: pulumi.Input<string>;
            sni?: pulumi.Input<string>;
            subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjection {
            alwaysInjectSelector?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector>[]>;
            autoInject?: pulumi.Input<boolean>;
            injectedAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            neverInjectSelector?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyLogging {
            componentLevels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            level?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking {
            clusterDomain?: pulumi.Input<string>;
            connectionTimeout?: pulumi.Input<string>;
            dns?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns>;
            initialization?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization>;
            maxConnectionAge?: pulumi.Input<string>;
            protocol?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol>;
            trafficControl?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns {
            refreshRate?: pulumi.Input<string>;
            searchSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization {
            initContainer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer {
            runtime?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol {
            autoDetect?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect {
            inbound?: pulumi.Input<boolean>;
            outbound?: pulumi.Input<boolean>;
            timeout?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl {
            inbound?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound>;
            outbound?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound {
            excludedPorts?: pulumi.Input<pulumi.Input<number>[]>;
            includedPorts?: pulumi.Input<pulumi.Input<string>[]>;
            interceptionMode?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound {
            excludedIPRanges?: pulumi.Input<pulumi.Input<string>[]>;
            excludedPorts?: pulumi.Input<pulumi.Input<number>[]>;
            includedIPRanges?: pulumi.Input<pulumi.Input<string>[]>;
            policy?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer>;
            readiness?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness {
            failureThreshold?: pulumi.Input<number>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            rewriteApplicationProbes?: pulumi.Input<boolean>;
            statusPort?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntime {
            components?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents>}>;
            defaults?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer {
            env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            imageName?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment {
            autoScaling?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling>;
            replicas?: pulumi.Input<number>;
            strategy?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling {
            enabled?: pulumi.Input<boolean>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            targetCPUUtilizationPercentage?: pulumi.Input<number>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy {
            rollingUpdate?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate {
            maxSurge?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod {
            affinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity>;
            metadata?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity {
            podAntiAffinity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity {
            preferredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling>[]>;
            requiredDuringScheduling?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            topologyKey?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults {
            container?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer>;
            deployment?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment>;
            pod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer {
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets>[]>;
            imageRegistry?: pulumi.Input<string>;
            imageTag?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources {
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests>}>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment {
            podDisruption?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption {
            enabled?: pulumi.Input<boolean>;
            maxUnavailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable>;
            minAvailable?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable {
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod {
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            priorityClassName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations>[]>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurity {
            certificateAuthority?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority>;
            controlPlane?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane>;
            dataPlane?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane>;
            identity?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity>;
            trust?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority {
            custom?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom>;
            istiod?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom {
            address?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod {
            privateKey?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey>;
            selfSigned?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned>;
            type?: pulumi.Input<string>;
            workloadCertTTLDefault?: pulumi.Input<string>;
            workloadCertTTLMax?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey {
            rootCADir?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned {
            checkPeriod?: pulumi.Input<string>;
            enableJitter?: pulumi.Input<boolean>;
            gracePeriod?: pulumi.Input<string>;
            ttl?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane {
            certProvider?: pulumi.Input<string>;
            mtls?: pulumi.Input<boolean>;
            tls?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls {
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            ecdhCurves?: pulumi.Input<pulumi.Input<string>[]>;
            maxProtocolVersion?: pulumi.Input<string>;
            minProtocolVersion?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane {
            automtls?: pulumi.Input<boolean>;
            mtls?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity {
            thirdParty?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty {
            audience?: pulumi.Input<string>;
            issuer?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust {
            additionalDomains?: pulumi.Input<pulumi.Input<string>[]>;
            domain?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetry {
            mixer?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer>;
            remote?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer {
            adapters?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters>;
            batching?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching>;
            loadshedding?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding>;
            sessionAffinity?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters {
            kubernetesenv?: pulumi.Input<boolean>;
            stdio?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio>;
            useAdapterCRDs?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio {
            enabled?: pulumi.Input<boolean>;
            outputAsJSON?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching {
            maxEntries?: pulumi.Input<number>;
            maxTime?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding {
            latencyThreshold?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote {
            address?: pulumi.Input<string>;
            batching?: pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching>;
            createService?: pulumi.Input<boolean>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching {
            maxEntries?: pulumi.Input<number>;
            maxTime?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedSpecTracing {
            sampling?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusAppliedValues {
            istio?: pulumi.Input<{[key: string]: any}>;
            networkType?: pulumi.Input<string>;
            profiles?: pulumi.Input<pulumi.Input<string>[]>;
            template?: pulumi.Input<string>;
            threeScale?: pulumi.Input<{[key: string]: any}>;
            version?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponents {
            children?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsChildren>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsConditions>[]>;
            resource?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildren {
            conditions?: pulumi.Input<pulumi.Input<inputs.maistra.v2.ServiceMeshControlPlaneStatusComponentsChildrenConditions>[]>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsChildrenConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusComponentsConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface ServiceMeshControlPlaneStatusReadiness {
            components?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
        }

    }
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ServiceMeshControlPlaneSpec',
    'ServiceMeshControlPlaneStatus',
    'ServiceMeshControlPlaneStatusComponents',
    'ServiceMeshControlPlaneStatusComponentsChildren',
    'ServiceMeshControlPlaneStatusComponentsChildrenConditions',
    'ServiceMeshControlPlaneStatusComponentsConditions',
    'ServiceMeshControlPlaneStatusConditions',
    'ServiceMeshControlPlaneStatusLastAppliedConfiguration',
    'ServiceMeshMemberRollSpec',
    'ServiceMeshMemberRollStatus',
    'ServiceMeshMemberRollStatusConditions',
    'ServiceMeshMemberSpec',
    'ServiceMeshMemberSpecControlPlaneRef',
    'ServiceMeshMemberStatus',
    'ServiceMeshMemberStatusConditions',
]

@pulumi.output_type
class ServiceMeshControlPlaneSpec(dict):
    def __init__(__self__, *,
                 istio: Optional[Mapping[str, Any]] = None,
                 network_type: Optional[str] = None,
                 profiles: Optional[Sequence[str]] = None,
                 template: Optional[str] = None,
                 three_scale: Optional[Mapping[str, Any]] = None,
                 version: Optional[str] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "istio")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "three_scale")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatus(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 components: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponents']] = None,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusConditions']] = None,
                 last_applied_configuration: Optional['outputs.ServiceMeshControlPlaneStatusLastAppliedConfiguration'] = None,
                 observed_generation: Optional[int] = None,
                 reconciled_version: Optional[str] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_applied_configuration is not None:
            pulumi.set(__self__, "last_applied_configuration", last_applied_configuration)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reconciled_version is not None:
            pulumi.set(__self__, "reconciled_version", reconciled_version)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def components(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponents']]:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="lastAppliedConfiguration")
    def last_applied_configuration(self) -> Optional['outputs.ServiceMeshControlPlaneStatusLastAppliedConfiguration']:
        return pulumi.get(self, "last_applied_configuration")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="reconciledVersion")
    def reconciled_version(self) -> Optional[str]:
        return pulumi.get(self, "reconciled_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponents(dict):
    def __init__(__self__, *,
                 children: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildren']] = None,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsConditions']] = None,
                 resource: Optional[str] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildren']]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        return pulumi.get(self, "resource")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsChildren(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildrenConditions']] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildrenConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsChildrenConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusLastAppliedConfiguration(dict):
    def __init__(__self__, *,
                 istio: Optional[Mapping[str, Any]] = None,
                 network_type: Optional[str] = None,
                 profiles: Optional[Sequence[str]] = None,
                 template: Optional[str] = None,
                 three_scale: Optional[Mapping[str, Any]] = None,
                 version: Optional[str] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "istio")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "three_scale")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberRollSpec(dict):
    def __init__(__self__, *,
                 members: Optional[Sequence[str]] = None):
        if members is not None:
            pulumi.set(__self__, "members", members)

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "members")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberRollStatus(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 conditions: Optional[Sequence['outputs.ServiceMeshMemberRollStatusConditions']] = None,
                 configured_members: Optional[Sequence[str]] = None,
                 mesh_generation: Optional[int] = None,
                 mesh_reconciled_version: Optional[str] = None,
                 observed_generation: Optional[int] = None,
                 pending_members: Optional[Sequence[str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if configured_members is not None:
            pulumi.set(__self__, "configured_members", configured_members)
        if mesh_generation is not None:
            pulumi.set(__self__, "mesh_generation", mesh_generation)
        if mesh_reconciled_version is not None:
            pulumi.set(__self__, "mesh_reconciled_version", mesh_reconciled_version)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if pending_members is not None:
            pulumi.set(__self__, "pending_members", pending_members)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshMemberRollStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="configuredMembers")
    def configured_members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "configured_members")

    @property
    @pulumi.getter(name="meshGeneration")
    def mesh_generation(self) -> Optional[int]:
        return pulumi.get(self, "mesh_generation")

    @property
    @pulumi.getter(name="meshReconciledVersion")
    def mesh_reconciled_version(self) -> Optional[str]:
        return pulumi.get(self, "mesh_reconciled_version")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="pendingMembers")
    def pending_members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pending_members")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberRollStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberSpec(dict):
    def __init__(__self__, *,
                 control_plane_ref: 'outputs.ServiceMeshMemberSpecControlPlaneRef'):
        pulumi.set(__self__, "control_plane_ref", control_plane_ref)

    @property
    @pulumi.getter(name="controlPlaneRef")
    def control_plane_ref(self) -> 'outputs.ServiceMeshMemberSpecControlPlaneRef':
        return pulumi.get(self, "control_plane_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberSpecControlPlaneRef(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberStatus(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.ServiceMeshMemberStatusConditions'],
                 observed_generation: int,
                 annotations: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "observed_generation", observed_generation)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ServiceMeshMemberStatusConditions']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> int:
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshMemberStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceMeshControlPlaneSpecArgs',
    'ServiceMeshControlPlaneStatusArgs',
    'ServiceMeshControlPlaneStatusComponentsArgs',
    'ServiceMeshControlPlaneStatusComponentsChildrenArgs',
    'ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs',
    'ServiceMeshControlPlaneStatusComponentsConditionsArgs',
    'ServiceMeshControlPlaneStatusConditionsArgs',
    'ServiceMeshControlPlaneStatusLastAppliedConfigurationArgs',
    'ServiceMeshMemberRollSpecArgs',
    'ServiceMeshMemberRollStatusArgs',
    'ServiceMeshMemberRollStatusConditionsArgs',
    'ServiceMeshMemberSpecArgs',
    'ServiceMeshMemberSpecControlPlaneRefArgs',
    'ServiceMeshMemberStatusArgs',
    'ServiceMeshMemberStatusConditionsArgs',
]

@pulumi.input_type
class ServiceMeshControlPlaneSpecArgs:
    def __init__(__self__, *,
                 istio: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 three_scale: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "istio")

    @istio.setter
    def istio(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "istio", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "three_scale")

    @three_scale.setter
    def three_scale(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "three_scale", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]] = None,
                 last_applied_configuration: Optional[pulumi.Input['ServiceMeshControlPlaneStatusLastAppliedConfigurationArgs']] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 reconciled_version: Optional[pulumi.Input[str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_applied_configuration is not None:
            pulumi.set(__self__, "last_applied_configuration", last_applied_configuration)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reconciled_version is not None:
            pulumi.set(__self__, "reconciled_version", reconciled_version)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="lastAppliedConfiguration")
    def last_applied_configuration(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusLastAppliedConfigurationArgs']]:
        return pulumi.get(self, "last_applied_configuration")

    @last_applied_configuration.setter
    def last_applied_configuration(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusLastAppliedConfigurationArgs']]):
        pulumi.set(self, "last_applied_configuration", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="reconciledVersion")
    def reconciled_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reconciled_version")

    @reconciled_version.setter
    def reconciled_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reconciled_version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsChildrenArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusLastAppliedConfigurationArgs:
    def __init__(__self__, *,
                 istio: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 three_scale: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "istio")

    @istio.setter
    def istio(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "istio", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "three_scale")

    @three_scale.setter
    def three_scale(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "three_scale", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServiceMeshMemberRollSpecArgs:
    def __init__(__self__, *,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if members is not None:
            pulumi.set(__self__, "members", members)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)


@pulumi.input_type
class ServiceMeshMemberRollStatusArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberRollStatusConditionsArgs']]]] = None,
                 configured_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mesh_generation: Optional[pulumi.Input[int]] = None,
                 mesh_reconciled_version: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 pending_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if configured_members is not None:
            pulumi.set(__self__, "configured_members", configured_members)
        if mesh_generation is not None:
            pulumi.set(__self__, "mesh_generation", mesh_generation)
        if mesh_reconciled_version is not None:
            pulumi.set(__self__, "mesh_reconciled_version", mesh_reconciled_version)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if pending_members is not None:
            pulumi.set(__self__, "pending_members", pending_members)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberRollStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberRollStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="configuredMembers")
    def configured_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "configured_members")

    @configured_members.setter
    def configured_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "configured_members", value)

    @property
    @pulumi.getter(name="meshGeneration")
    def mesh_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mesh_generation")

    @mesh_generation.setter
    def mesh_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mesh_generation", value)

    @property
    @pulumi.getter(name="meshReconciledVersion")
    def mesh_reconciled_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_reconciled_version")

    @mesh_reconciled_version.setter
    def mesh_reconciled_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_reconciled_version", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="pendingMembers")
    def pending_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pending_members")

    @pending_members.setter
    def pending_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pending_members", value)


@pulumi.input_type
class ServiceMeshMemberRollStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshMemberSpecArgs:
    def __init__(__self__, *,
                 control_plane_ref: pulumi.Input['ServiceMeshMemberSpecControlPlaneRefArgs']):
        pulumi.set(__self__, "control_plane_ref", control_plane_ref)

    @property
    @pulumi.getter(name="controlPlaneRef")
    def control_plane_ref(self) -> pulumi.Input['ServiceMeshMemberSpecControlPlaneRefArgs']:
        return pulumi.get(self, "control_plane_ref")

    @control_plane_ref.setter
    def control_plane_ref(self, value: pulumi.Input['ServiceMeshMemberSpecControlPlaneRefArgs']):
        pulumi.set(self, "control_plane_ref", value)


@pulumi.input_type
class ServiceMeshMemberSpecControlPlaneRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ServiceMeshMemberStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberStatusConditionsArgs']]],
                 observed_generation: pulumi.Input[int],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "observed_generation", observed_generation)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberStatusConditionsArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceMeshMemberStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)


@pulumi.input_type
class ServiceMeshMemberStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceMeshControlPlaneSpecArgs',
    'ServiceMeshControlPlaneSpecAddonsArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleBackendArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleClientArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleGrpcArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleMetricsArgs',
    'ServiceMeshControlPlaneSpecAddons3scaleSystemArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfigArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurityArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearchArgs',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemoryArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallDashboardArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecAddonsStackdriverArgs',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryArgs',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLoggingArgs',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuthArgs',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTracerArgs',
    'ServiceMeshControlPlaneSpecClusterArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneSpecClusterMultiClusterArgs',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksArgs',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpointsArgs',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGatewaysArgs',
    'ServiceMeshControlPlaneSpecGatewaysArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServicePortsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadataArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServicePortsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneSpecGatewaysOpenshiftRouteArgs',
    'ServiceMeshControlPlaneSpecGeneralArgs',
    'ServiceMeshControlPlaneSpecGeneralLoggingArgs',
    'ServiceMeshControlPlaneSpecPolicyArgs',
    'ServiceMeshControlPlaneSpecPolicyMixerArgs',
    'ServiceMeshControlPlaneSpecPolicyMixerAdaptersArgs',
    'ServiceMeshControlPlaneSpecPolicyRemoteArgs',
    'ServiceMeshControlPlaneSpecProxyArgs',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingArgs',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceArgs',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingFileArgs',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceArgs',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettingsArgs',
    'ServiceMeshControlPlaneSpecProxyInjectionArgs',
    'ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorArgs',
    'ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs',
    'ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorArgs',
    'ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs',
    'ServiceMeshControlPlaneSpecProxyLoggingArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingDnsArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingProtocolArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetectArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInboundArgs',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutboundArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecProxyRuntimeReadinessArgs',
    'ServiceMeshControlPlaneSpecRuntimeArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadataArgs',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerationsArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsPodArgs',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerationsArgs',
    'ServiceMeshControlPlaneSpecSecurityArgs',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityArgs',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustomArgs',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodArgs',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSignedArgs',
    'ServiceMeshControlPlaneSpecSecurityControlPlaneArgs',
    'ServiceMeshControlPlaneSpecSecurityControlPlaneTlsArgs',
    'ServiceMeshControlPlaneSpecSecurityDataPlaneArgs',
    'ServiceMeshControlPlaneSpecSecurityIdentityArgs',
    'ServiceMeshControlPlaneSpecSecurityIdentityThirdPartyArgs',
    'ServiceMeshControlPlaneSpecSecurityTrustArgs',
    'ServiceMeshControlPlaneSpecTelemetryArgs',
    'ServiceMeshControlPlaneSpecTelemetryMixerArgs',
    'ServiceMeshControlPlaneSpecTelemetryMixerAdaptersArgs',
    'ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdioArgs',
    'ServiceMeshControlPlaneSpecTelemetryMixerBatchingArgs',
    'ServiceMeshControlPlaneSpecTelemetryMixerLoadsheddingArgs',
    'ServiceMeshControlPlaneSpecTelemetryRemoteArgs',
    'ServiceMeshControlPlaneSpecTelemetryRemoteBatchingArgs',
    'ServiceMeshControlPlaneSpecTracingArgs',
    'ServiceMeshControlPlaneStatusArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackendArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClientArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpcArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetricsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystemArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearchArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemoryArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboardArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLoggingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuthArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpointsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGatewaysArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPortArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMountArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItemsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRouteArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGeneralArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecGeneralLoggingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdaptersArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyRemoteArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFileArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettingsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyLoggingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDnsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetectArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInboundArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutboundArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadinessArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScalingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadataArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecretsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimitsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequestsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerationsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustomArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSignedArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTlsArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlaneArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdPartyArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityTrustArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdioArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatchingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadsheddingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatchingArgs',
    'ServiceMeshControlPlaneStatusAppliedSpecTracingArgs',
    'ServiceMeshControlPlaneStatusAppliedValuesArgs',
    'ServiceMeshControlPlaneStatusComponentsArgs',
    'ServiceMeshControlPlaneStatusComponentsChildrenArgs',
    'ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs',
    'ServiceMeshControlPlaneStatusComponentsConditionsArgs',
    'ServiceMeshControlPlaneStatusConditionsArgs',
    'ServiceMeshControlPlaneStatusReadinessArgs',
]

@pulumi.input_type
class ServiceMeshControlPlaneSpecArgs:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsArgs']] = None,
                 cluster: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterArgs']] = None,
                 gateways: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysArgs']] = None,
                 general: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralArgs']] = None,
                 policy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyArgs']] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyArgs']] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeArgs']] = None,
                 security: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityArgs']] = None,
                 tech_preview: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 telemetry: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryArgs']] = None,
                 tracing: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTracingArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if general is not None:
            pulumi.set(__self__, "general", general)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tech_preview is not None:
            pulumi.set(__self__, "tech_preview", tech_preview)
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsArgs']]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsArgs']]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterArgs']]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterArgs']]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysArgs']]:
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysArgs']]):
        pulumi.set(self, "gateways", value)

    @property
    @pulumi.getter
    def general(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralArgs']]:
        return pulumi.get(self, "general")

    @general.setter
    def general(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralArgs']]):
        pulumi.set(self, "general", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyArgs']]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyArgs']]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="techPreview")
    def tech_preview(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tech_preview")

    @tech_preview.setter
    def tech_preview(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tech_preview", value)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryArgs']]:
        return pulumi.get(self, "telemetry")

    @telemetry.setter
    def telemetry(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryArgs']]):
        pulumi.set(self, "telemetry", value)

    @property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTracingArgs']]:
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTracingArgs']]):
        pulumi.set(self, "tracing", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsArgs:
    def __init__(__self__, *,
                 _3scale: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleArgs']] = None,
                 grafana: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaArgs']] = None,
                 jaeger: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerArgs']] = None,
                 kiali: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiArgs']] = None,
                 prometheus: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusArgs']] = None,
                 stackdriver: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverArgs']] = None):
        if _3scale is not None:
            pulumi.set(__self__, "_3scale", _3scale)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kiali is not None:
            pulumi.set(__self__, "kiali", kiali)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if stackdriver is not None:
            pulumi.set(__self__, "stackdriver", stackdriver)

    @property
    @pulumi.getter(name="3scale")
    def _3scale(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleArgs']]:
        return pulumi.get(self, "_3scale")

    @_3scale.setter
    def _3scale(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleArgs']]):
        pulumi.set(self, "_3scale", value)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaArgs']]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaArgs']]):
        pulumi.set(self, "grafana", value)

    @property
    @pulumi.getter
    def jaeger(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerArgs']]:
        return pulumi.get(self, "jaeger")

    @jaeger.setter
    def jaeger(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerArgs']]):
        pulumi.set(self, "jaeger", value)

    @property
    @pulumi.getter
    def kiali(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiArgs']]:
        return pulumi.get(self, "kiali")

    @kiali.setter
    def kiali(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiArgs']]):
        pulumi.set(self, "kiali", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusArgs']]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def stackdriver(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverArgs']]:
        return pulumi.get(self, "stackdriver")

    @stackdriver.setter
    def stackdriver(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverArgs']]):
        pulumi.set(self, "stackdriver", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleArgs:
    def __init__(__self__, *,
                 backend: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleBackendArgs']] = None,
                 client: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleClientArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 grpc: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleGrpcArgs']] = None,
                 listen_addr: Optional[pulumi.Input[int]] = None,
                 log_grpc: Optional[pulumi.Input[bool]] = None,
                 log_json: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleMetricsArgs']] = None,
                 system: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleSystemArgs']] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if client is not None:
            pulumi.set(__self__, "client", client)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if listen_addr is not None:
            pulumi.set(__self__, "listen_addr", listen_addr)
        if log_grpc is not None:
            pulumi.set(__self__, "log_grpc", log_grpc)
        if log_json is not None:
            pulumi.set(__self__, "log_json", log_json)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleBackendArgs']]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleBackendArgs']]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def client(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleClientArgs']]:
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleClientArgs']]):
        pulumi.set(self, "client", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def listen_addr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "listen_addr")

    @listen_addr.setter
    def listen_addr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listen_addr", value)

    @property
    @pulumi.getter
    def log_grpc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_grpc")

    @log_grpc.setter
    def log_grpc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_grpc", value)

    @property
    @pulumi.getter
    def log_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_json")

    @log_json.setter
    def log_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_json", value)

    @property
    @pulumi.getter
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleSystemArgs']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddons3scaleSystemArgs']]):
        pulumi.set(self, "system", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleBackendArgs:
    def __init__(__self__, *,
                 cache_flush_interval: Optional[pulumi.Input[int]] = None,
                 enable_cache: Optional[pulumi.Input[bool]] = None,
                 policy_fail_closed: Optional[pulumi.Input[bool]] = None):
        if cache_flush_interval is not None:
            pulumi.set(__self__, "cache_flush_interval", cache_flush_interval)
        if enable_cache is not None:
            pulumi.set(__self__, "enable_cache", enable_cache)
        if policy_fail_closed is not None:
            pulumi.set(__self__, "policy_fail_closed", policy_fail_closed)

    @property
    @pulumi.getter
    def cache_flush_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_flush_interval")

    @cache_flush_interval.setter
    def cache_flush_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_flush_interval", value)

    @property
    @pulumi.getter
    def enable_cache(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cache")

    @enable_cache.setter
    def enable_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cache", value)

    @property
    @pulumi.getter
    def policy_fail_closed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "policy_fail_closed")

    @policy_fail_closed.setter
    def policy_fail_closed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "policy_fail_closed", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleClientArgs:
    def __init__(__self__, *,
                 allow_insecure_connections: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if allow_insecure_connections is not None:
            pulumi.set(__self__, "allow_insecure_connections", allow_insecure_connections)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def allow_insecure_connections(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_insecure_connections")

    @allow_insecure_connections.setter
    def allow_insecure_connections(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure_connections", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleGrpcArgs:
    def __init__(__self__, *,
                 max_conn_timeout: Optional[pulumi.Input[int]] = None):
        if max_conn_timeout is not None:
            pulumi.set(__self__, "max_conn_timeout", max_conn_timeout)

    @property
    @pulumi.getter
    def max_conn_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conn_timeout")

    @max_conn_timeout.setter
    def max_conn_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conn_timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleMetricsArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None,
                 report: Optional[pulumi.Input[bool]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddons3scaleSystemArgs:
    def __init__(__self__, *,
                 cache_max_size: Optional[pulumi.Input[int]] = None,
                 cache_refresh_interval: Optional[pulumi.Input[int]] = None,
                 cache_refresh_retries: Optional[pulumi.Input[int]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None):
        if cache_max_size is not None:
            pulumi.set(__self__, "cache_max_size", cache_max_size)
        if cache_refresh_interval is not None:
            pulumi.set(__self__, "cache_refresh_interval", cache_refresh_interval)
        if cache_refresh_retries is not None:
            pulumi.set(__self__, "cache_refresh_retries", cache_refresh_retries)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)

    @property
    @pulumi.getter
    def cache_max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_max_size")

    @cache_max_size.setter
    def cache_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_max_size", value)

    @property
    @pulumi.getter
    def cache_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_refresh_interval")

    @cache_refresh_interval.setter
    def cache_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_refresh_interval", value)

    @property
    @pulumi.getter
    def cache_refresh_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_refresh_retries")

    @cache_refresh_retries.setter
    def cache_refresh_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_refresh_retries", value)

    @property
    @pulumi.getter
    def cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_ttl", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallArgs']]):
        pulumi.set(self, "install", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfigArgs']] = None,
                 persistence: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceArgs']] = None,
                 security: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurityArgs']] = None,
                 self_managed: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceArgs']] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceArgs']]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceArgs']]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_managed")

    @self_managed.setter
    def self_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_managed", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfigArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 env_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env_secrets")

    @env_secrets.setter
    def env_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env_secrets", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 capacity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityArgs']]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityArgs']]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurityArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 passphrase_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if passphrase_key is not None:
            pulumi.set(__self__, "passphrase_key", passphrase_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="passphraseKey")
    def passphrase_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_key")

    @passphrase_key.setter
    def passphrase_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerArgs:
    def __init__(__self__, *,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressArgs']] = None,
                 storage: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageArgs']] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageArgs']]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadataArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearchArgs']] = None,
                 memory: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemoryArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearchArgs']]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearchArgs:
    def __init__(__self__, *,
                 index_cleaner: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 redundancy_policy: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if index_cleaner is not None:
            pulumi.set(__self__, "index_cleaner", index_cleaner)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if redundancy_policy is not None:
            pulumi.set(__self__, "redundancy_policy", redundancy_policy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="indexCleaner")
    def index_cleaner(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "index_cleaner")

    @index_cleaner.setter
    def index_cleaner(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "index_cleaner", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="redundancyPolicy")
    def redundancy_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundancy_policy")

    @redundancy_policy.setter
    def redundancy_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundancy_policy", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemoryArgs:
    def __init__(__self__, *,
                 max_traces: Optional[pulumi.Input[int]] = None):
        if max_traces is not None:
            pulumi.set(__self__, "max_traces", max_traces)

    @property
    @pulumi.getter(name="maxTraces")
    def max_traces(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_traces")

    @max_traces.setter
    def max_traces(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_traces", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallArgs:
    def __init__(__self__, *,
                 dashboard: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallDashboardArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceArgs']] = None):
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallDashboardArgs']]:
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallDashboardArgs']]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallDashboardArgs:
    def __init__(__self__, *,
                 enable_grafana: Optional[pulumi.Input[bool]] = None,
                 enable_prometheus: Optional[pulumi.Input[bool]] = None,
                 enable_tracing: Optional[pulumi.Input[bool]] = None,
                 view_only: Optional[pulumi.Input[bool]] = None):
        if enable_grafana is not None:
            pulumi.set(__self__, "enable_grafana", enable_grafana)
        if enable_prometheus is not None:
            pulumi.set(__self__, "enable_prometheus", enable_prometheus)
        if enable_tracing is not None:
            pulumi.set(__self__, "enable_tracing", enable_tracing)
        if view_only is not None:
            pulumi.set(__self__, "view_only", view_only)

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_grafana")

    @enable_grafana.setter
    def enable_grafana(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_grafana", value)

    @property
    @pulumi.getter(name="enablePrometheus")
    def enable_prometheus(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_prometheus")

    @enable_prometheus.setter
    def enable_prometheus(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_prometheus", value)

    @property
    @pulumi.getter(name="enableTracing")
    def enable_tracing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_tracing")

    @enable_tracing.setter
    def enable_tracing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tracing", value)

    @property
    @pulumi.getter(name="viewOnly")
    def view_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "view_only")

    @view_only.setter
    def view_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "view_only", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallArgs']] = None,
                 metrics_expiry_duration: Optional[pulumi.Input[str]] = None,
                 scrape: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if metrics_expiry_duration is not None:
            pulumi.set(__self__, "metrics_expiry_duration", metrics_expiry_duration)
        if scrape is not None:
            pulumi.set(__self__, "scrape", scrape)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter(name="metricsExpiryDuration")
    def metrics_expiry_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_expiry_duration")

    @metrics_expiry_duration.setter
    def metrics_expiry_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_expiry_duration", value)

    @property
    @pulumi.getter
    def scrape(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scrape")

    @scrape.setter
    def scrape(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scrape", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallArgs:
    def __init__(__self__, *,
                 retention: Optional[pulumi.Input[str]] = None,
                 scrape_interval: Optional[pulumi.Input[str]] = None,
                 self_managed: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceArgs']] = None,
                 use_tls: Optional[pulumi.Input[bool]] = None):
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if scrape_interval is not None:
            pulumi.set(__self__, "scrape_interval", scrape_interval)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scrape_interval")

    @scrape_interval.setter
    def scrape_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scrape_interval", value)

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_managed")

    @self_managed.setter
    def self_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_managed", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="useTLS")
    def use_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsStackdriverArgs:
    def __init__(__self__, *,
                 telemetry: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryArgs']] = None,
                 tracer: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTracerArgs']] = None):
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracer is not None:
            pulumi.set(__self__, "tracer", tracer)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryArgs']]:
        return pulumi.get(self, "telemetry")

    @telemetry.setter
    def telemetry(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryArgs']]):
        pulumi.set(self, "telemetry", value)

    @property
    @pulumi.getter
    def tracer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTracerArgs']]:
        return pulumi.get(self, "tracer")

    @tracer.setter
    def tracer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTracerArgs']]):
        pulumi.set(self, "tracer", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryArgs:
    def __init__(__self__, *,
                 access_logging: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLoggingArgs']] = None,
                 auth: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuthArgs']] = None,
                 config_override: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 enable_context_graph: Optional[pulumi.Input[bool]] = None,
                 enable_logging: Optional[pulumi.Input[bool]] = None,
                 enable_metrics: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enable_context_graph is not None:
            pulumi.set(__self__, "enable_context_graph", enable_context_graph)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enable_metrics is not None:
            pulumi.set(__self__, "enable_metrics", enable_metrics)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLoggingArgs']]:
        return pulumi.get(self, "access_logging")

    @access_logging.setter
    def access_logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLoggingArgs']]):
        pulumi.set(self, "access_logging", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter(name="enableContextGraph")
    def enable_context_graph(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_context_graph")

    @enable_context_graph.setter
    def enable_context_graph(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_context_graph", value)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_logging")

    @enable_logging.setter
    def enable_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging", value)

    @property
    @pulumi.getter(name="enableMetrics")
    def enable_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_metrics")

    @enable_metrics.setter
    def enable_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_metrics", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLoggingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_window_duration: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_window_duration is not None:
            pulumi.set(__self__, "log_window_duration", log_window_duration)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logWindowDuration")
    def log_window_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_window_duration")

    @log_window_duration.setter
    def log_window_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_window_duration", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuthArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_credentials: Optional[pulumi.Input[bool]] = None,
                 service_account_path: Optional[pulumi.Input[str]] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_credentials is not None:
            pulumi.set(__self__, "app_credentials", app_credentials)
        if service_account_path is not None:
            pulumi.set(__self__, "service_account_path", service_account_path)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appCredentials")
    def app_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "app_credentials")

    @app_credentials.setter
    def app_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "app_credentials", value)

    @property
    @pulumi.getter(name="serviceAccountPath")
    def service_account_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_path")

    @service_account_path.setter
    def service_account_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_path", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTracerArgs:
    def __init__(__self__, *,
                 debug: Optional[pulumi.Input[bool]] = None,
                 max_number_of_annotations: Optional[pulumi.Input[int]] = None,
                 max_number_of_attributes: Optional[pulumi.Input[int]] = None,
                 max_number_of_message_events: Optional[pulumi.Input[int]] = None):
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if max_number_of_annotations is not None:
            pulumi.set(__self__, "max_number_of_annotations", max_number_of_annotations)
        if max_number_of_attributes is not None:
            pulumi.set(__self__, "max_number_of_attributes", max_number_of_attributes)
        if max_number_of_message_events is not None:
            pulumi.set(__self__, "max_number_of_message_events", max_number_of_message_events)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="maxNumberOfAnnotations")
    def max_number_of_annotations(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_annotations")

    @max_number_of_annotations.setter
    def max_number_of_annotations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_annotations", value)

    @property
    @pulumi.getter(name="maxNumberOfAttributes")
    def max_number_of_attributes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_attributes")

    @max_number_of_attributes.setter
    def max_number_of_attributes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_attributes", value)

    @property
    @pulumi.getter(name="maxNumberOfMessageEvents")
    def max_number_of_message_events(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_message_events")

    @max_number_of_message_events.setter
    def max_number_of_message_events(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_message_events", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterArgs:
    def __init__(__self__, *,
                 mesh_expansion: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionArgs']] = None,
                 multi_cluster: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        if mesh_expansion is not None:
            pulumi.set(__self__, "mesh_expansion", mesh_expansion)
        if multi_cluster is not None:
            pulumi.set(__self__, "multi_cluster", multi_cluster)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="meshExpansion")
    def mesh_expansion(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionArgs']]:
        return pulumi.get(self, "mesh_expansion")

    @mesh_expansion.setter
    def mesh_expansion(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionArgs']]):
        pulumi.set(self, "mesh_expansion", value)

    @property
    @pulumi.getter(name="multiCluster")
    def multi_cluster(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterArgs']]:
        return pulumi.get(self, "multi_cluster")

    @multi_cluster.setter
    def multi_cluster(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterArgs']]):
        pulumi.set(self, "multi_cluster", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ilb_gateway: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ilb_gateway is not None:
            pulumi.set(__self__, "ilb_gateway", ilb_gateway)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ilbGateway")
    def ilb_gateway(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayArgs']]:
        return pulumi.get(self, "ilb_gateway")

    @ilb_gateway.setter
    def ilb_gateway(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayArgs']]):
        pulumi.set(self, "ilb_gateway", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMultiClusterArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mesh_networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mesh_networks is not None:
            pulumi.set(__self__, "mesh_networks", mesh_networks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="meshNetworks")
    def mesh_networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksArgs']]]]:
        return pulumi.get(self, "mesh_networks")

    @mesh_networks.setter
    def mesh_networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksArgs']]]]):
        pulumi.set(self, "mesh_networks", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksArgs:
    def __init__(__self__, *,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]] = None,
                 gateways: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]] = None):
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]]:
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]]):
        pulumi.set(self, "gateways", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpointsArgs:
    def __init__(__self__, *,
                 from_cidr: Optional[pulumi.Input[str]] = None,
                 from_registry: Optional[pulumi.Input[str]] = None):
        if from_cidr is not None:
            pulumi.set(__self__, "from_cidr", from_cidr)
        if from_registry is not None:
            pulumi.set(__self__, "from_registry", from_registry)

    @property
    @pulumi.getter(name="fromCIDR")
    def from_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_cidr")

    @from_cidr.setter
    def from_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_cidr", value)

    @property
    @pulumi.getter(name="fromRegistry")
    def from_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_registry")

    @from_registry.setter
    def from_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_registry", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGatewaysArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysArgs:
    def __init__(__self__, *,
                 additional_egress: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressArgs']]]] = None,
                 additional_ingress: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressArgs']]]] = None,
                 egress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressArgs']] = None,
                 openshift_route: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysOpenshiftRouteArgs']] = None):
        if additional_egress is not None:
            pulumi.set(__self__, "additional_egress", additional_egress)
        if additional_ingress is not None:
            pulumi.set(__self__, "additional_ingress", additional_ingress)
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if openshift_route is not None:
            pulumi.set(__self__, "openshift_route", openshift_route)

    @property
    @pulumi.getter(name="additionalEgress")
    def additional_egress(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressArgs']]]]:
        return pulumi.get(self, "additional_egress")

    @additional_egress.setter
    def additional_egress(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressArgs']]]]):
        pulumi.set(self, "additional_egress", value)

    @property
    @pulumi.getter(name="additionalIngress")
    def additional_ingress(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressArgs']]]]:
        return pulumi.get(self, "additional_ingress")

    @additional_ingress.setter
    def additional_ingress(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressArgs']]]]):
        pulumi.set(self, "additional_ingress", value)

    @property
    @pulumi.getter
    def egress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressArgs']]:
        return pulumi.get(self, "egress")

    @egress.setter
    def egress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressArgs']]):
        pulumi.set(self, "egress", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="openshiftRoute")
    def openshift_route(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysOpenshiftRouteArgs']]:
        return pulumi.get(self, "openshift_route")

    @openshift_route.setter
    def openshift_route(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysOpenshiftRouteArgs']]):
        pulumi.set(self, "openshift_route", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 requested_network_view: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_network_view")

    @requested_network_view.setter
    def requested_network_view(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_network_view", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeArgs']] = None,
                 sds: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsArgs']]):
        pulumi.set(self, "sds", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 requested_network_view: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_network_view")

    @requested_network_view.setter
    def requested_network_view(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_network_view", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input[bool]] = None,
                 mesh_expansion_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsArgs']]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeArgs']] = None,
                 sds: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if mesh_expansion_ports is not None:
            pulumi.set(__self__, "mesh_expansion_ports", mesh_expansion_ports)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="meshExpansionPorts")
    def mesh_expansion_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsArgs']]]]:
        return pulumi.get(self, "mesh_expansion_ports")

    @mesh_expansion_ports.setter
    def mesh_expansion_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsArgs']]]]):
        pulumi.set(self, "mesh_expansion_ports", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsArgs']]):
        pulumi.set(self, "sds", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGatewaysOpenshiftRouteArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGeneralArgs:
    def __init__(__self__, *,
                 logging: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralLoggingArgs']] = None,
                 validation_messages: Optional[pulumi.Input[bool]] = None):
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if validation_messages is not None:
            pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecGeneralLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validation_messages")

    @validation_messages.setter
    def validation_messages(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validation_messages", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecGeneralLoggingArgs:
    def __init__(__self__, *,
                 component_levels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 log_as_json: Optional[pulumi.Input[bool]] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if log_as_json is not None:
            pulumi.set(__self__, "log_as_json", log_as_json)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "component_levels")

    @component_levels.setter
    def component_levels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "component_levels", value)

    @property
    @pulumi.getter(name="logAsJSON")
    def log_as_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_as_json")

    @log_as_json.setter
    def log_as_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_as_json", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecPolicyArgs:
    def __init__(__self__, *,
                 mixer: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerArgs']] = None,
                 remote: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyRemoteArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerArgs']]:
        return pulumi.get(self, "mixer")

    @mixer.setter
    def mixer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerArgs']]):
        pulumi.set(self, "mixer", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyRemoteArgs']]:
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyRemoteArgs']]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecPolicyMixerArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerAdaptersArgs']] = None,
                 enable_checks: Optional[pulumi.Input[bool]] = None,
                 fail_open: Optional[pulumi.Input[bool]] = None,
                 session_affinity: Optional[pulumi.Input[bool]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecPolicyMixerAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_checks")

    @enable_checks.setter
    def enable_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_checks", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecPolicyMixerAdaptersArgs:
    def __init__(__self__, *,
                 kubernetesenv: Optional[pulumi.Input[bool]] = None,
                 use_adapter_crds: Optional[pulumi.Input[bool]] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kubernetesenv")

    @kubernetesenv.setter
    def kubernetesenv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetesenv", value)

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_adapter_crds")

    @use_adapter_crds.setter
    def use_adapter_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_adapter_crds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecPolicyRemoteArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 create_service: Optional[pulumi.Input[bool]] = None,
                 enable_checks: Optional[pulumi.Input[bool]] = None,
                 fail_open: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_service")

    @create_service.setter
    def create_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_service", value)

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_checks")

    @enable_checks.setter
    def enable_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_checks", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_open", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyArgs:
    def __init__(__self__, *,
                 access_logging: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingArgs']] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 concurrency: Optional[pulumi.Input[int]] = None,
                 envoy_metrics_service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceArgs']] = None,
                 injection: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionArgs']] = None,
                 logging: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyLoggingArgs']] = None,
                 networking: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingArgs']] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeArgs']] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if envoy_metrics_service is not None:
            pulumi.set(__self__, "envoy_metrics_service", envoy_metrics_service)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingArgs']]:
        return pulumi.get(self, "access_logging")

    @access_logging.setter
    def access_logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingArgs']]):
        pulumi.set(self, "access_logging", value)

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_port")

    @admin_port.setter
    def admin_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_port", value)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="envoyMetricsService")
    def envoy_metrics_service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceArgs']]:
        return pulumi.get(self, "envoy_metrics_service")

    @envoy_metrics_service.setter
    def envoy_metrics_service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceArgs']]):
        pulumi.set(self, "envoy_metrics_service", value)

    @property
    @pulumi.getter
    def injection(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionArgs']]:
        return pulumi.get(self, "injection")

    @injection.setter
    def injection(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionArgs']]):
        pulumi.set(self, "injection", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingArgs:
    def __init__(__self__, *,
                 envoy_service: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceArgs']] = None,
                 file: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingFileArgs']] = None):
        if envoy_service is not None:
            pulumi.set(__self__, "envoy_service", envoy_service)
        if file is not None:
            pulumi.set(__self__, "file", file)

    @property
    @pulumi.getter(name="envoyService")
    def envoy_service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceArgs']]:
        return pulumi.get(self, "envoy_service")

    @envoy_service.setter
    def envoy_service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceArgs']]):
        pulumi.set(self, "envoy_service", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingFileArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingFileArgs']]):
        pulumi.set(self, "file", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalive: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']] = None,
                 tls_settings: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']]:
        return pulumi.get(self, "tcp_keepalive")

    @tcp_keepalive.setter
    def tcp_keepalive(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']]):
        pulumi.set(self, "tcp_keepalive", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']]:
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[str]] = None,
                 probes: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def probes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probes")

    @probes.setter
    def probes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probes", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs:
    def __init__(__self__, *,
                 ca_certificates: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 subject_alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alt_names")

    @subject_alt_names.setter
    def subject_alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alt_names", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingFileArgs:
    def __init__(__self__, *,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalive: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']] = None,
                 tls_settings: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettingsArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']]:
        return pulumi.get(self, "tcp_keepalive")

    @tcp_keepalive.setter
    def tcp_keepalive(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']]):
        pulumi.set(self, "tcp_keepalive", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettingsArgs']]:
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[str]] = None,
                 probes: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def probes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probes")

    @probes.setter
    def probes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probes", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettingsArgs:
    def __init__(__self__, *,
                 ca_certificates: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 subject_alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alt_names")

    @subject_alt_names.setter
    def subject_alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alt_names", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyInjectionArgs:
    def __init__(__self__, *,
                 always_inject_selector: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorArgs']]]] = None,
                 auto_inject: Optional[pulumi.Input[bool]] = None,
                 injected_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 never_inject_selector: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorArgs']]]] = None):
        if always_inject_selector is not None:
            pulumi.set(__self__, "always_inject_selector", always_inject_selector)
        if auto_inject is not None:
            pulumi.set(__self__, "auto_inject", auto_inject)
        if injected_annotations is not None:
            pulumi.set(__self__, "injected_annotations", injected_annotations)
        if never_inject_selector is not None:
            pulumi.set(__self__, "never_inject_selector", never_inject_selector)

    @property
    @pulumi.getter(name="alwaysInjectSelector")
    def always_inject_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorArgs']]]]:
        return pulumi.get(self, "always_inject_selector")

    @always_inject_selector.setter
    def always_inject_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorArgs']]]]):
        pulumi.set(self, "always_inject_selector", value)

    @property
    @pulumi.getter(name="autoInject")
    def auto_inject(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_inject")

    @auto_inject.setter
    def auto_inject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_inject", value)

    @property
    @pulumi.getter(name="injectedAnnotations")
    def injected_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "injected_annotations")

    @injected_annotations.setter
    def injected_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "injected_annotations", value)

    @property
    @pulumi.getter(name="neverInjectSelector")
    def never_inject_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorArgs']]]]:
        return pulumi.get(self, "never_inject_selector")

    @never_inject_selector.setter
    def never_inject_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorArgs']]]]):
        pulumi.set(self, "never_inject_selector", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyLoggingArgs:
    def __init__(__self__, *,
                 component_levels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "component_levels")

    @component_levels.setter
    def component_levels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "component_levels", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingArgs:
    def __init__(__self__, *,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 connection_timeout: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingDnsArgs']] = None,
                 initialization: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationArgs']] = None,
                 max_connection_age: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolArgs']] = None,
                 traffic_control: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlArgs']] = None):
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if max_connection_age is not None:
            pulumi.set(__self__, "max_connection_age", max_connection_age)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if traffic_control is not None:
            pulumi.set(__self__, "traffic_control", traffic_control)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_timeout")

    @connection_timeout.setter
    def connection_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_timeout", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def initialization(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationArgs']]:
        return pulumi.get(self, "initialization")

    @initialization.setter
    def initialization(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationArgs']]):
        pulumi.set(self, "initialization", value)

    @property
    @pulumi.getter(name="maxConnectionAge")
    def max_connection_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connection_age")

    @max_connection_age.setter
    def max_connection_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connection_age", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolArgs']]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolArgs']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="trafficControl")
    def traffic_control(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlArgs']]:
        return pulumi.get(self, "traffic_control")

    @traffic_control.setter
    def traffic_control(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlArgs']]):
        pulumi.set(self, "traffic_control", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingDnsArgs:
    def __init__(__self__, *,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 search_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if search_suffixes is not None:
            pulumi.set(__self__, "search_suffixes", search_suffixes)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter(name="searchSuffixes")
    def search_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "search_suffixes")

    @search_suffixes.setter
    def search_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "search_suffixes", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationArgs:
    def __init__(__self__, *,
                 init_container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if init_container is not None:
            pulumi.set(__self__, "init_container", init_container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="initContainer")
    def init_container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerArgs']]:
        return pulumi.get(self, "init_container")

    @init_container.setter
    def init_container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerArgs']]):
        pulumi.set(self, "init_container", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerArgs:
    def __init__(__self__, *,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeArgs']] = None):
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingProtocolArgs:
    def __init__(__self__, *,
                 auto_detect: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetectArgs']] = None):
        if auto_detect is not None:
            pulumi.set(__self__, "auto_detect", auto_detect)

    @property
    @pulumi.getter(name="autoDetect")
    def auto_detect(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetectArgs']]:
        return pulumi.get(self, "auto_detect")

    @auto_detect.setter
    def auto_detect(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetectArgs']]):
        pulumi.set(self, "auto_detect", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetectArgs:
    def __init__(__self__, *,
                 inbound: Optional[pulumi.Input[bool]] = None,
                 outbound: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlArgs:
    def __init__(__self__, *,
                 inbound: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInboundArgs']] = None,
                 outbound: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutboundArgs']] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInboundArgs']]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInboundArgs']]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutboundArgs']]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutboundArgs']]):
        pulumi.set(self, "outbound", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInboundArgs:
    def __init__(__self__, *,
                 excluded_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 included_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 interception_mode: Optional[pulumi.Input[str]] = None):
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ports is not None:
            pulumi.set(__self__, "included_ports", included_ports)
        if interception_mode is not None:
            pulumi.set(__self__, "interception_mode", interception_mode)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "excluded_ports")

    @excluded_ports.setter
    def excluded_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "excluded_ports", value)

    @property
    @pulumi.getter(name="includedPorts")
    def included_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_ports")

    @included_ports.setter
    def included_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_ports", value)

    @property
    @pulumi.getter(name="interceptionMode")
    def interception_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interception_mode")

    @interception_mode.setter
    def interception_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interception_mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutboundArgs:
    def __init__(__self__, *,
                 excluded_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 included_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy: Optional[pulumi.Input[str]] = None):
        if excluded_ip_ranges is not None:
            pulumi.set(__self__, "excluded_ip_ranges", excluded_ip_ranges)
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ip_ranges is not None:
            pulumi.set(__self__, "included_ip_ranges", included_ip_ranges)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="excludedIPRanges")
    def excluded_ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_ip_ranges")

    @excluded_ip_ranges.setter
    def excluded_ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_ip_ranges", value)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "excluded_ports")

    @excluded_ports.setter
    def excluded_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "excluded_ports", value)

    @property
    @pulumi.getter(name="includedIPRanges")
    def included_ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_ip_ranges")

    @included_ip_ranges.setter
    def included_ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_ip_ranges", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerArgs']] = None,
                 readiness: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeReadinessArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def readiness(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeReadinessArgs']]:
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeReadinessArgs']]):
        pulumi.set(self, "readiness", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecProxyRuntimeReadinessArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 rewrite_application_probes: Optional[pulumi.Input[bool]] = None,
                 status_port: Optional[pulumi.Input[int]] = None):
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if rewrite_application_probes is not None:
            pulumi.set(__self__, "rewrite_application_probes", rewrite_application_probes)
        if status_port is not None:
            pulumi.set(__self__, "status_port", status_port)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="rewriteApplicationProbes")
    def rewrite_application_probes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rewrite_application_probes")

    @rewrite_application_probes.setter
    def rewrite_application_probes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rewrite_application_probes", value)

    @property
    @pulumi.getter(name="statusPort")
    def status_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_port")

    @status_port.setter
    def status_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeArgs:
    def __init__(__self__, *,
                 components: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsArgs']]]] = None,
                 defaults: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsArgs']] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsArgs']]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsArgs']]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsArgs']]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsArgs']]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerArgs:
    def __init__(__self__, *,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesArgs']] = None):
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentArgs:
    def __init__(__self__, *,
                 pod_disruption: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionArgs']] = None):
        if pod_disruption is not None:
            pulumi.set(__self__, "pod_disruption", pod_disruption)

    @property
    @pulumi.getter(name="podDisruption")
    def pod_disruption(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionArgs']]:
        return pulumi.get(self, "pod_disruption")

    @pod_disruption.setter
    def pod_disruption(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionArgs']]):
        pulumi.set(self, "pod_disruption", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']] = None,
                 min_available: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']]):
        pulumi.set(self, "min_available", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsPodArgs:
    def __init__(__self__, *,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerationsArgs']]]] = None):
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityArgs:
    def __init__(__self__, *,
                 certificate_authority: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityArgs']] = None,
                 control_plane: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneArgs']] = None,
                 data_plane: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityDataPlaneArgs']] = None,
                 identity: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityArgs']] = None,
                 trust: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityTrustArgs']] = None):
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if data_plane is not None:
            pulumi.set(__self__, "data_plane", data_plane)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityArgs']]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityArgs']]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneArgs']]:
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="dataPlane")
    def data_plane(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityDataPlaneArgs']]:
        return pulumi.get(self, "data_plane")

    @data_plane.setter
    def data_plane(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityDataPlaneArgs']]):
        pulumi.set(self, "data_plane", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityArgs']]:
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def trust(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityTrustArgs']]:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityTrustArgs']]):
        pulumi.set(self, "trust", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustomArgs']] = None,
                 istiod: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if istiod is not None:
            pulumi.set(__self__, "istiod", istiod)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustomArgs']]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def istiod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodArgs']]:
        return pulumi.get(self, "istiod")

    @istiod.setter
    def istiod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodArgs']]):
        pulumi.set(self, "istiod", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustomArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodArgs:
    def __init__(__self__, *,
                 private_key: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']] = None,
                 self_signed: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 workload_cert_ttl_default: Optional[pulumi.Input[str]] = None,
                 workload_cert_ttl_max: Optional[pulumi.Input[str]] = None):
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workload_cert_ttl_default is not None:
            pulumi.set(__self__, "workload_cert_ttl_default", workload_cert_ttl_default)
        if workload_cert_ttl_max is not None:
            pulumi.set(__self__, "workload_cert_ttl_max", workload_cert_ttl_max)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workloadCertTTLDefault")
    def workload_cert_ttl_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workload_cert_ttl_default")

    @workload_cert_ttl_default.setter
    def workload_cert_ttl_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_cert_ttl_default", value)

    @property
    @pulumi.getter(name="workloadCertTTLMax")
    def workload_cert_ttl_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workload_cert_ttl_max")

    @workload_cert_ttl_max.setter
    def workload_cert_ttl_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_cert_ttl_max", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs:
    def __init__(__self__, *,
                 root_ca_dir: Optional[pulumi.Input[str]] = None):
        if root_ca_dir is not None:
            pulumi.set(__self__, "root_ca_dir", root_ca_dir)

    @property
    @pulumi.getter(name="rootCADir")
    def root_ca_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_ca_dir")

    @root_ca_dir.setter
    def root_ca_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_ca_dir", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSignedArgs:
    def __init__(__self__, *,
                 check_period: Optional[pulumi.Input[str]] = None,
                 enable_jitter: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None):
        if check_period is not None:
            pulumi.set(__self__, "check_period", check_period)
        if enable_jitter is not None:
            pulumi.set(__self__, "enable_jitter", enable_jitter)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_period")

    @check_period.setter
    def check_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_period", value)

    @property
    @pulumi.getter(name="enableJitter")
    def enable_jitter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_jitter")

    @enable_jitter.setter
    def enable_jitter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_jitter", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityControlPlaneArgs:
    def __init__(__self__, *,
                 cert_provider: Optional[pulumi.Input[str]] = None,
                 mtls: Optional[pulumi.Input[bool]] = None,
                 tls: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneTlsArgs']] = None):
        if cert_provider is not None:
            pulumi.set(__self__, "cert_provider", cert_provider)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="certProvider")
    def cert_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_provider")

    @cert_provider.setter
    def cert_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_provider", value)

    @property
    @pulumi.getter
    def mtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mtls")

    @mtls.setter
    def mtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtls", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityControlPlaneTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityControlPlaneTlsArgs:
    def __init__(__self__, *,
                 cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ecdh_curves: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_protocol_version: Optional[pulumi.Input[str]] = None,
                 min_protocol_version: Optional[pulumi.Input[str]] = None):
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if ecdh_curves is not None:
            pulumi.set(__self__, "ecdh_curves", ecdh_curves)
        if max_protocol_version is not None:
            pulumi.set(__self__, "max_protocol_version", max_protocol_version)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cipher_suites")

    @cipher_suites.setter
    def cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cipher_suites", value)

    @property
    @pulumi.getter(name="ecdhCurves")
    def ecdh_curves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ecdh_curves")

    @ecdh_curves.setter
    def ecdh_curves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ecdh_curves", value)

    @property
    @pulumi.getter(name="maxProtocolVersion")
    def max_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_protocol_version")

    @max_protocol_version.setter
    def max_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_protocol_version", value)

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_protocol_version")

    @min_protocol_version.setter
    def min_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_protocol_version", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityDataPlaneArgs:
    def __init__(__self__, *,
                 automtls: Optional[pulumi.Input[bool]] = None,
                 mtls: Optional[pulumi.Input[bool]] = None):
        if automtls is not None:
            pulumi.set(__self__, "automtls", automtls)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)

    @property
    @pulumi.getter
    def automtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automtls")

    @automtls.setter
    def automtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automtls", value)

    @property
    @pulumi.getter
    def mtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mtls")

    @mtls.setter
    def mtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtls", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityIdentityArgs:
    def __init__(__self__, *,
                 third_party: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityThirdPartyArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityThirdPartyArgs']]:
        return pulumi.get(self, "third_party")

    @third_party.setter
    def third_party(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecSecurityIdentityThirdPartyArgs']]):
        pulumi.set(self, "third_party", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityIdentityThirdPartyArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecSecurityTrustArgs:
    def __init__(__self__, *,
                 additional_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None):
        if additional_domains is not None:
            pulumi.set(__self__, "additional_domains", additional_domains)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="additionalDomains")
    def additional_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_domains")

    @additional_domains.setter
    def additional_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_domains", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryArgs:
    def __init__(__self__, *,
                 mixer: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerArgs']] = None,
                 remote: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerArgs']]:
        return pulumi.get(self, "mixer")

    @mixer.setter
    def mixer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerArgs']]):
        pulumi.set(self, "mixer", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteArgs']]:
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteArgs']]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryMixerArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersArgs']] = None,
                 batching: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerBatchingArgs']] = None,
                 loadshedding: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerLoadsheddingArgs']] = None,
                 session_affinity: Optional[pulumi.Input[bool]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if loadshedding is not None:
            pulumi.set(__self__, "loadshedding", loadshedding)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter
    def batching(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerBatchingArgs']]:
        return pulumi.get(self, "batching")

    @batching.setter
    def batching(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerBatchingArgs']]):
        pulumi.set(self, "batching", value)

    @property
    @pulumi.getter
    def loadshedding(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerLoadsheddingArgs']]:
        return pulumi.get(self, "loadshedding")

    @loadshedding.setter
    def loadshedding(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerLoadsheddingArgs']]):
        pulumi.set(self, "loadshedding", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryMixerAdaptersArgs:
    def __init__(__self__, *,
                 kubernetesenv: Optional[pulumi.Input[bool]] = None,
                 stdio: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdioArgs']] = None,
                 use_adapter_crds: Optional[pulumi.Input[bool]] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if stdio is not None:
            pulumi.set(__self__, "stdio", stdio)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kubernetesenv")

    @kubernetesenv.setter
    def kubernetesenv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetesenv", value)

    @property
    @pulumi.getter
    def stdio(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdioArgs']]:
        return pulumi.get(self, "stdio")

    @stdio.setter
    def stdio(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdioArgs']]):
        pulumi.set(self, "stdio", value)

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_adapter_crds")

    @use_adapter_crds.setter
    def use_adapter_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_adapter_crds", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdioArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 output_as_json: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if output_as_json is not None:
            pulumi.set(__self__, "output_as_json", output_as_json)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="outputAsJSON")
    def output_as_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "output_as_json")

    @output_as_json.setter
    def output_as_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "output_as_json", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryMixerBatchingArgs:
    def __init__(__self__, *,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_time: Optional[pulumi.Input[str]] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_time")

    @max_time.setter
    def max_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_time", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryMixerLoadsheddingArgs:
    def __init__(__self__, *,
                 latency_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryRemoteArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 batching: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteBatchingArgs']] = None,
                 create_service: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def batching(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteBatchingArgs']]:
        return pulumi.get(self, "batching")

    @batching.setter
    def batching(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneSpecTelemetryRemoteBatchingArgs']]):
        pulumi.set(self, "batching", value)

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_service")

    @create_service.setter
    def create_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_service", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTelemetryRemoteBatchingArgs:
    def __init__(__self__, *,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_time: Optional[pulumi.Input[str]] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_time")

    @max_time.setter
    def max_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_time", value)


@pulumi.input_type
class ServiceMeshControlPlaneSpecTracingArgs:
    def __init__(__self__, *,
                 sampling: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusArgs:
    def __init__(__self__, *,
                 readiness: pulumi.Input['ServiceMeshControlPlaneStatusReadinessArgs'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 applied_spec: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecArgs']] = None,
                 applied_values: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedValuesArgs']] = None,
                 chart_version: Optional[pulumi.Input[str]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 operator_version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "readiness", readiness)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if applied_spec is not None:
            pulumi.set(__self__, "applied_spec", applied_spec)
        if applied_values is not None:
            pulumi.set(__self__, "applied_values", applied_values)
        if chart_version is not None:
            pulumi.set(__self__, "chart_version", chart_version)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if operator_version is not None:
            pulumi.set(__self__, "operator_version", operator_version)

    @property
    @pulumi.getter
    def readiness(self) -> pulumi.Input['ServiceMeshControlPlaneStatusReadinessArgs']:
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: pulumi.Input['ServiceMeshControlPlaneStatusReadinessArgs']):
        pulumi.set(self, "readiness", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="appliedSpec")
    def applied_spec(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecArgs']]:
        return pulumi.get(self, "applied_spec")

    @applied_spec.setter
    def applied_spec(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecArgs']]):
        pulumi.set(self, "applied_spec", value)

    @property
    @pulumi.getter(name="appliedValues")
    def applied_values(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedValuesArgs']]:
        return pulumi.get(self, "applied_values")

    @applied_values.setter
    def applied_values(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedValuesArgs']]):
        pulumi.set(self, "applied_values", value)

    @property
    @pulumi.getter(name="chartVersion")
    def chart_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_version")

    @chart_version.setter
    def chart_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_version", value)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsArgs']]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="operatorVersion")
    def operator_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator_version")

    @operator_version.setter
    def operator_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecArgs:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsArgs']] = None,
                 cluster: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterArgs']] = None,
                 gateways: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysArgs']] = None,
                 general: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralArgs']] = None,
                 policy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyArgs']] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyArgs']] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeArgs']] = None,
                 security: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityArgs']] = None,
                 tech_preview: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 telemetry: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryArgs']] = None,
                 tracing: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTracingArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if general is not None:
            pulumi.set(__self__, "general", general)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tech_preview is not None:
            pulumi.set(__self__, "tech_preview", tech_preview)
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsArgs']]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsArgs']]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterArgs']]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterArgs']]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysArgs']]:
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysArgs']]):
        pulumi.set(self, "gateways", value)

    @property
    @pulumi.getter
    def general(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralArgs']]:
        return pulumi.get(self, "general")

    @general.setter
    def general(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralArgs']]):
        pulumi.set(self, "general", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyArgs']]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyArgs']]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="techPreview")
    def tech_preview(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tech_preview")

    @tech_preview.setter
    def tech_preview(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tech_preview", value)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryArgs']]:
        return pulumi.get(self, "telemetry")

    @telemetry.setter
    def telemetry(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryArgs']]):
        pulumi.set(self, "telemetry", value)

    @property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTracingArgs']]:
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTracingArgs']]):
        pulumi.set(self, "tracing", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsArgs:
    def __init__(__self__, *,
                 _3scale: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleArgs']] = None,
                 grafana: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaArgs']] = None,
                 jaeger: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerArgs']] = None,
                 kiali: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiArgs']] = None,
                 prometheus: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusArgs']] = None,
                 stackdriver: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverArgs']] = None):
        if _3scale is not None:
            pulumi.set(__self__, "_3scale", _3scale)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kiali is not None:
            pulumi.set(__self__, "kiali", kiali)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if stackdriver is not None:
            pulumi.set(__self__, "stackdriver", stackdriver)

    @property
    @pulumi.getter(name="3scale")
    def _3scale(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleArgs']]:
        return pulumi.get(self, "_3scale")

    @_3scale.setter
    def _3scale(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleArgs']]):
        pulumi.set(self, "_3scale", value)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaArgs']]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaArgs']]):
        pulumi.set(self, "grafana", value)

    @property
    @pulumi.getter
    def jaeger(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerArgs']]:
        return pulumi.get(self, "jaeger")

    @jaeger.setter
    def jaeger(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerArgs']]):
        pulumi.set(self, "jaeger", value)

    @property
    @pulumi.getter
    def kiali(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiArgs']]:
        return pulumi.get(self, "kiali")

    @kiali.setter
    def kiali(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiArgs']]):
        pulumi.set(self, "kiali", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusArgs']]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def stackdriver(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverArgs']]:
        return pulumi.get(self, "stackdriver")

    @stackdriver.setter
    def stackdriver(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverArgs']]):
        pulumi.set(self, "stackdriver", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleArgs:
    def __init__(__self__, *,
                 backend: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackendArgs']] = None,
                 client: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClientArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 grpc: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpcArgs']] = None,
                 listen_addr: Optional[pulumi.Input[int]] = None,
                 log_grpc: Optional[pulumi.Input[bool]] = None,
                 log_json: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetricsArgs']] = None,
                 system: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystemArgs']] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if client is not None:
            pulumi.set(__self__, "client", client)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if listen_addr is not None:
            pulumi.set(__self__, "listen_addr", listen_addr)
        if log_grpc is not None:
            pulumi.set(__self__, "log_grpc", log_grpc)
        if log_json is not None:
            pulumi.set(__self__, "log_json", log_json)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackendArgs']]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackendArgs']]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def client(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClientArgs']]:
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClientArgs']]):
        pulumi.set(self, "client", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def listen_addr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "listen_addr")

    @listen_addr.setter
    def listen_addr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listen_addr", value)

    @property
    @pulumi.getter
    def log_grpc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_grpc")

    @log_grpc.setter
    def log_grpc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_grpc", value)

    @property
    @pulumi.getter
    def log_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_json")

    @log_json.setter
    def log_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_json", value)

    @property
    @pulumi.getter
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystemArgs']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystemArgs']]):
        pulumi.set(self, "system", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackendArgs:
    def __init__(__self__, *,
                 cache_flush_interval: Optional[pulumi.Input[int]] = None,
                 enable_cache: Optional[pulumi.Input[bool]] = None,
                 policy_fail_closed: Optional[pulumi.Input[bool]] = None):
        if cache_flush_interval is not None:
            pulumi.set(__self__, "cache_flush_interval", cache_flush_interval)
        if enable_cache is not None:
            pulumi.set(__self__, "enable_cache", enable_cache)
        if policy_fail_closed is not None:
            pulumi.set(__self__, "policy_fail_closed", policy_fail_closed)

    @property
    @pulumi.getter
    def cache_flush_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_flush_interval")

    @cache_flush_interval.setter
    def cache_flush_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_flush_interval", value)

    @property
    @pulumi.getter
    def enable_cache(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cache")

    @enable_cache.setter
    def enable_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cache", value)

    @property
    @pulumi.getter
    def policy_fail_closed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "policy_fail_closed")

    @policy_fail_closed.setter
    def policy_fail_closed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "policy_fail_closed", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClientArgs:
    def __init__(__self__, *,
                 allow_insecure_connections: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if allow_insecure_connections is not None:
            pulumi.set(__self__, "allow_insecure_connections", allow_insecure_connections)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def allow_insecure_connections(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_insecure_connections")

    @allow_insecure_connections.setter
    def allow_insecure_connections(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure_connections", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpcArgs:
    def __init__(__self__, *,
                 max_conn_timeout: Optional[pulumi.Input[int]] = None):
        if max_conn_timeout is not None:
            pulumi.set(__self__, "max_conn_timeout", max_conn_timeout)

    @property
    @pulumi.getter
    def max_conn_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conn_timeout")

    @max_conn_timeout.setter
    def max_conn_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conn_timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetricsArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None,
                 report: Optional[pulumi.Input[bool]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystemArgs:
    def __init__(__self__, *,
                 cache_max_size: Optional[pulumi.Input[int]] = None,
                 cache_refresh_interval: Optional[pulumi.Input[int]] = None,
                 cache_refresh_retries: Optional[pulumi.Input[int]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None):
        if cache_max_size is not None:
            pulumi.set(__self__, "cache_max_size", cache_max_size)
        if cache_refresh_interval is not None:
            pulumi.set(__self__, "cache_refresh_interval", cache_refresh_interval)
        if cache_refresh_retries is not None:
            pulumi.set(__self__, "cache_refresh_retries", cache_refresh_retries)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)

    @property
    @pulumi.getter
    def cache_max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_max_size")

    @cache_max_size.setter
    def cache_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_max_size", value)

    @property
    @pulumi.getter
    def cache_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_refresh_interval")

    @cache_refresh_interval.setter
    def cache_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_refresh_interval", value)

    @property
    @pulumi.getter
    def cache_refresh_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_refresh_retries")

    @cache_refresh_retries.setter
    def cache_refresh_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_refresh_retries", value)

    @property
    @pulumi.getter
    def cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_ttl", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallArgs']]):
        pulumi.set(self, "install", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfigArgs']] = None,
                 persistence: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceArgs']] = None,
                 security: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurityArgs']] = None,
                 self_managed: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceArgs']] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceArgs']]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceArgs']]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_managed")

    @self_managed.setter
    def self_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_managed", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfigArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 env_secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env_secrets")

    @env_secrets.setter
    def env_secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env_secrets", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 capacity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityArgs']]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityArgs']]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurityArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 passphrase_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if passphrase_key is not None:
            pulumi.set(__self__, "passphrase_key", passphrase_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="passphraseKey")
    def passphrase_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_key")

    @passphrase_key.setter
    def passphrase_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerArgs:
    def __init__(__self__, *,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressArgs']] = None,
                 storage: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageArgs']] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageArgs']]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadataArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearchArgs']] = None,
                 memory: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemoryArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearchArgs']]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearchArgs:
    def __init__(__self__, *,
                 index_cleaner: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 redundancy_policy: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if index_cleaner is not None:
            pulumi.set(__self__, "index_cleaner", index_cleaner)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if redundancy_policy is not None:
            pulumi.set(__self__, "redundancy_policy", redundancy_policy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="indexCleaner")
    def index_cleaner(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "index_cleaner")

    @index_cleaner.setter
    def index_cleaner(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "index_cleaner", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="redundancyPolicy")
    def redundancy_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundancy_policy")

    @redundancy_policy.setter
    def redundancy_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundancy_policy", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemoryArgs:
    def __init__(__self__, *,
                 max_traces: Optional[pulumi.Input[int]] = None):
        if max_traces is not None:
            pulumi.set(__self__, "max_traces", max_traces)

    @property
    @pulumi.getter(name="maxTraces")
    def max_traces(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_traces")

    @max_traces.setter
    def max_traces(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_traces", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallArgs:
    def __init__(__self__, *,
                 dashboard: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboardArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceArgs']] = None):
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboardArgs']]:
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboardArgs']]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboardArgs:
    def __init__(__self__, *,
                 enable_grafana: Optional[pulumi.Input[bool]] = None,
                 enable_prometheus: Optional[pulumi.Input[bool]] = None,
                 enable_tracing: Optional[pulumi.Input[bool]] = None,
                 view_only: Optional[pulumi.Input[bool]] = None):
        if enable_grafana is not None:
            pulumi.set(__self__, "enable_grafana", enable_grafana)
        if enable_prometheus is not None:
            pulumi.set(__self__, "enable_prometheus", enable_prometheus)
        if enable_tracing is not None:
            pulumi.set(__self__, "enable_tracing", enable_tracing)
        if view_only is not None:
            pulumi.set(__self__, "view_only", view_only)

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_grafana")

    @enable_grafana.setter
    def enable_grafana(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_grafana", value)

    @property
    @pulumi.getter(name="enablePrometheus")
    def enable_prometheus(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_prometheus")

    @enable_prometheus.setter
    def enable_prometheus(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_prometheus", value)

    @property
    @pulumi.getter(name="enableTracing")
    def enable_tracing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_tracing")

    @enable_tracing.setter
    def enable_tracing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tracing", value)

    @property
    @pulumi.getter(name="viewOnly")
    def view_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "view_only")

    @view_only.setter
    def view_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "view_only", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 install: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallArgs']] = None,
                 metrics_expiry_duration: Optional[pulumi.Input[str]] = None,
                 scrape: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if metrics_expiry_duration is not None:
            pulumi.set(__self__, "metrics_expiry_duration", metrics_expiry_duration)
        if scrape is not None:
            pulumi.set(__self__, "scrape", scrape)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def install(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallArgs']]:
        return pulumi.get(self, "install")

    @install.setter
    def install(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallArgs']]):
        pulumi.set(self, "install", value)

    @property
    @pulumi.getter(name="metricsExpiryDuration")
    def metrics_expiry_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_expiry_duration")

    @metrics_expiry_duration.setter
    def metrics_expiry_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_expiry_duration", value)

    @property
    @pulumi.getter
    def scrape(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scrape")

    @scrape.setter
    def scrape(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scrape", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallArgs:
    def __init__(__self__, *,
                 retention: Optional[pulumi.Input[str]] = None,
                 scrape_interval: Optional[pulumi.Input[str]] = None,
                 self_managed: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceArgs']] = None,
                 use_tls: Optional[pulumi.Input[bool]] = None):
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if scrape_interval is not None:
            pulumi.set(__self__, "scrape_interval", scrape_interval)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scrape_interval")

    @scrape_interval.setter
    def scrape_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scrape_interval", value)

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_managed")

    @self_managed.setter
    def self_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_managed", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="useTLS")
    def use_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadataArgs']] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressArgs:
    def __init__(__self__, *,
                 context_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadataArgs']] = None,
                 tls: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverArgs:
    def __init__(__self__, *,
                 telemetry: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryArgs']] = None,
                 tracer: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracerArgs']] = None):
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracer is not None:
            pulumi.set(__self__, "tracer", tracer)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryArgs']]:
        return pulumi.get(self, "telemetry")

    @telemetry.setter
    def telemetry(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryArgs']]):
        pulumi.set(self, "telemetry", value)

    @property
    @pulumi.getter
    def tracer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracerArgs']]:
        return pulumi.get(self, "tracer")

    @tracer.setter
    def tracer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracerArgs']]):
        pulumi.set(self, "tracer", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryArgs:
    def __init__(__self__, *,
                 access_logging: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLoggingArgs']] = None,
                 auth: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuthArgs']] = None,
                 config_override: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 enable_context_graph: Optional[pulumi.Input[bool]] = None,
                 enable_logging: Optional[pulumi.Input[bool]] = None,
                 enable_metrics: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enable_context_graph is not None:
            pulumi.set(__self__, "enable_context_graph", enable_context_graph)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enable_metrics is not None:
            pulumi.set(__self__, "enable_metrics", enable_metrics)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLoggingArgs']]:
        return pulumi.get(self, "access_logging")

    @access_logging.setter
    def access_logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLoggingArgs']]):
        pulumi.set(self, "access_logging", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter(name="enableContextGraph")
    def enable_context_graph(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_context_graph")

    @enable_context_graph.setter
    def enable_context_graph(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_context_graph", value)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_logging")

    @enable_logging.setter
    def enable_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging", value)

    @property
    @pulumi.getter(name="enableMetrics")
    def enable_metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_metrics")

    @enable_metrics.setter
    def enable_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_metrics", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLoggingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_window_duration: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_window_duration is not None:
            pulumi.set(__self__, "log_window_duration", log_window_duration)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logWindowDuration")
    def log_window_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_window_duration")

    @log_window_duration.setter
    def log_window_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_window_duration", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuthArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 app_credentials: Optional[pulumi.Input[bool]] = None,
                 service_account_path: Optional[pulumi.Input[str]] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_credentials is not None:
            pulumi.set(__self__, "app_credentials", app_credentials)
        if service_account_path is not None:
            pulumi.set(__self__, "service_account_path", service_account_path)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appCredentials")
    def app_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "app_credentials")

    @app_credentials.setter
    def app_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "app_credentials", value)

    @property
    @pulumi.getter(name="serviceAccountPath")
    def service_account_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_path")

    @service_account_path.setter
    def service_account_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_path", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracerArgs:
    def __init__(__self__, *,
                 debug: Optional[pulumi.Input[bool]] = None,
                 max_number_of_annotations: Optional[pulumi.Input[int]] = None,
                 max_number_of_attributes: Optional[pulumi.Input[int]] = None,
                 max_number_of_message_events: Optional[pulumi.Input[int]] = None):
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if max_number_of_annotations is not None:
            pulumi.set(__self__, "max_number_of_annotations", max_number_of_annotations)
        if max_number_of_attributes is not None:
            pulumi.set(__self__, "max_number_of_attributes", max_number_of_attributes)
        if max_number_of_message_events is not None:
            pulumi.set(__self__, "max_number_of_message_events", max_number_of_message_events)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="maxNumberOfAnnotations")
    def max_number_of_annotations(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_annotations")

    @max_number_of_annotations.setter
    def max_number_of_annotations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_annotations", value)

    @property
    @pulumi.getter(name="maxNumberOfAttributes")
    def max_number_of_attributes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_attributes")

    @max_number_of_attributes.setter
    def max_number_of_attributes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_attributes", value)

    @property
    @pulumi.getter(name="maxNumberOfMessageEvents")
    def max_number_of_message_events(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_number_of_message_events")

    @max_number_of_message_events.setter
    def max_number_of_message_events(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_number_of_message_events", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterArgs:
    def __init__(__self__, *,
                 mesh_expansion: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionArgs']] = None,
                 multi_cluster: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        if mesh_expansion is not None:
            pulumi.set(__self__, "mesh_expansion", mesh_expansion)
        if multi_cluster is not None:
            pulumi.set(__self__, "multi_cluster", multi_cluster)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="meshExpansion")
    def mesh_expansion(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionArgs']]:
        return pulumi.get(self, "mesh_expansion")

    @mesh_expansion.setter
    def mesh_expansion(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionArgs']]):
        pulumi.set(self, "mesh_expansion", value)

    @property
    @pulumi.getter(name="multiCluster")
    def multi_cluster(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterArgs']]:
        return pulumi.get(self, "multi_cluster")

    @multi_cluster.setter
    def multi_cluster(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterArgs']]):
        pulumi.set(self, "multi_cluster", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ilb_gateway: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ilb_gateway is not None:
            pulumi.set(__self__, "ilb_gateway", ilb_gateway)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ilbGateway")
    def ilb_gateway(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayArgs']]:
        return pulumi.get(self, "ilb_gateway")

    @ilb_gateway.setter
    def ilb_gateway(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayArgs']]):
        pulumi.set(self, "ilb_gateway", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mesh_networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mesh_networks is not None:
            pulumi.set(__self__, "mesh_networks", mesh_networks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="meshNetworks")
    def mesh_networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksArgs']]]]:
        return pulumi.get(self, "mesh_networks")

    @mesh_networks.setter
    def mesh_networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksArgs']]]]):
        pulumi.set(self, "mesh_networks", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksArgs:
    def __init__(__self__, *,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]] = None,
                 gateways: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]] = None):
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpointsArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]]:
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGatewaysArgs']]]]):
        pulumi.set(self, "gateways", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpointsArgs:
    def __init__(__self__, *,
                 from_cidr: Optional[pulumi.Input[str]] = None,
                 from_registry: Optional[pulumi.Input[str]] = None):
        if from_cidr is not None:
            pulumi.set(__self__, "from_cidr", from_cidr)
        if from_registry is not None:
            pulumi.set(__self__, "from_registry", from_registry)

    @property
    @pulumi.getter(name="fromCIDR")
    def from_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_cidr")

    @from_cidr.setter
    def from_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_cidr", value)

    @property
    @pulumi.getter(name="fromRegistry")
    def from_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_registry")

    @from_registry.setter
    def from_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_registry", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGatewaysArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysArgs:
    def __init__(__self__, *,
                 additional_egress: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressArgs']]]] = None,
                 additional_ingress: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressArgs']]]] = None,
                 egress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressArgs']] = None,
                 openshift_route: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRouteArgs']] = None):
        if additional_egress is not None:
            pulumi.set(__self__, "additional_egress", additional_egress)
        if additional_ingress is not None:
            pulumi.set(__self__, "additional_ingress", additional_ingress)
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if openshift_route is not None:
            pulumi.set(__self__, "openshift_route", openshift_route)

    @property
    @pulumi.getter(name="additionalEgress")
    def additional_egress(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressArgs']]]]:
        return pulumi.get(self, "additional_egress")

    @additional_egress.setter
    def additional_egress(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressArgs']]]]):
        pulumi.set(self, "additional_egress", value)

    @property
    @pulumi.getter(name="additionalIngress")
    def additional_ingress(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressArgs']]]]:
        return pulumi.get(self, "additional_ingress")

    @additional_ingress.setter
    def additional_ingress(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressArgs']]]]):
        pulumi.set(self, "additional_ingress", value)

    @property
    @pulumi.getter
    def egress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressArgs']]:
        return pulumi.get(self, "egress")

    @egress.setter
    def egress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressArgs']]):
        pulumi.set(self, "egress", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="openshiftRoute")
    def openshift_route(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRouteArgs']]:
        return pulumi.get(self, "openshift_route")

    @openshift_route.setter
    def openshift_route(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRouteArgs']]):
        pulumi.set(self, "openshift_route", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 requested_network_view: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_network_view")

    @requested_network_view.setter
    def requested_network_view(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_network_view", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeArgs']] = None,
                 sds: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsArgs']]):
        pulumi.set(self, "sds", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 requested_network_view: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requested_network_view")

    @requested_network_view.setter
    def requested_network_view(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requested_network_view", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input[bool]] = None,
                 mesh_expansion_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsArgs']]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 router_mode: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeArgs']] = None,
                 sds: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsArgs']] = None,
                 service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if mesh_expansion_ports is not None:
            pulumi.set(__self__, "mesh_expansion_ports", mesh_expansion_ports)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="meshExpansionPorts")
    def mesh_expansion_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsArgs']]]]:
        return pulumi.get(self, "mesh_expansion_ports")

    @mesh_expansion_ports.setter
    def mesh_expansion_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsArgs']]]]):
        pulumi.set(self, "mesh_expansion_ports", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_mode")

    @router_mode.setter
    def router_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_mode", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeArgs']]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsArgs']]):
        pulumi.set(self, "sds", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceArgs:
    def __init__(__self__, *,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadataArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsArgs']]]] = None,
                 publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_config: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigArgs']] = None,
                 topology_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publish_not_ready_addresses", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigArgs']]:
        return pulumi.get(self, "session_affinity_config")

    @session_affinity_config.setter
    def session_affinity_config(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigArgs']]):
        pulumi.set(self, "session_affinity_config", value)

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "topology_keys")

    @topology_keys.setter
    def topology_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topology_keys", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 app_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPortArgs']] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_protocol")

    @app_protocol.setter
    def app_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPortArgs']]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPortArgs']]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs']]):
        pulumi.set(self, "client_ip", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIPArgs:
    def __init__(__self__, *,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesArgs:
    def __init__(__self__, *,
                 volume: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeArgs']] = None,
                 volume_mount: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMountArgs']] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMountArgs']]:
        return pulumi.get(self, "volume_mount")

    @volume_mount.setter
    def volume_mount(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMountArgs']]):
        pulumi.set(self, "volume_mount", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapArgs']] = None,
                 secret: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretArgs']] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapArgs']]:
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRouteArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGeneralArgs:
    def __init__(__self__, *,
                 logging: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralLoggingArgs']] = None,
                 validation_messages: Optional[pulumi.Input[bool]] = None):
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if validation_messages is not None:
            pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecGeneralLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validation_messages")

    @validation_messages.setter
    def validation_messages(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validation_messages", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecGeneralLoggingArgs:
    def __init__(__self__, *,
                 component_levels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 log_as_json: Optional[pulumi.Input[bool]] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if log_as_json is not None:
            pulumi.set(__self__, "log_as_json", log_as_json)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "component_levels")

    @component_levels.setter
    def component_levels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "component_levels", value)

    @property
    @pulumi.getter(name="logAsJSON")
    def log_as_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_as_json")

    @log_as_json.setter
    def log_as_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_as_json", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyArgs:
    def __init__(__self__, *,
                 mixer: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerArgs']] = None,
                 remote: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyRemoteArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerArgs']]:
        return pulumi.get(self, "mixer")

    @mixer.setter
    def mixer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerArgs']]):
        pulumi.set(self, "mixer", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyRemoteArgs']]:
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyRemoteArgs']]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdaptersArgs']] = None,
                 enable_checks: Optional[pulumi.Input[bool]] = None,
                 fail_open: Optional[pulumi.Input[bool]] = None,
                 session_affinity: Optional[pulumi.Input[bool]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_checks")

    @enable_checks.setter
    def enable_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_checks", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdaptersArgs:
    def __init__(__self__, *,
                 kubernetesenv: Optional[pulumi.Input[bool]] = None,
                 use_adapter_crds: Optional[pulumi.Input[bool]] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kubernetesenv")

    @kubernetesenv.setter
    def kubernetesenv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetesenv", value)

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_adapter_crds")

    @use_adapter_crds.setter
    def use_adapter_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_adapter_crds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyRemoteArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 create_service: Optional[pulumi.Input[bool]] = None,
                 enable_checks: Optional[pulumi.Input[bool]] = None,
                 fail_open: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_service")

    @create_service.setter
    def create_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_service", value)

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_checks")

    @enable_checks.setter
    def enable_checks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_checks", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_open", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyArgs:
    def __init__(__self__, *,
                 access_logging: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingArgs']] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 concurrency: Optional[pulumi.Input[int]] = None,
                 envoy_metrics_service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceArgs']] = None,
                 injection: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionArgs']] = None,
                 logging: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyLoggingArgs']] = None,
                 networking: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingArgs']] = None,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeArgs']] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if envoy_metrics_service is not None:
            pulumi.set(__self__, "envoy_metrics_service", envoy_metrics_service)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingArgs']]:
        return pulumi.get(self, "access_logging")

    @access_logging.setter
    def access_logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingArgs']]):
        pulumi.set(self, "access_logging", value)

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_port")

    @admin_port.setter
    def admin_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_port", value)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="envoyMetricsService")
    def envoy_metrics_service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceArgs']]:
        return pulumi.get(self, "envoy_metrics_service")

    @envoy_metrics_service.setter
    def envoy_metrics_service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceArgs']]):
        pulumi.set(self, "envoy_metrics_service", value)

    @property
    @pulumi.getter
    def injection(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionArgs']]:
        return pulumi.get(self, "injection")

    @injection.setter
    def injection(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionArgs']]):
        pulumi.set(self, "injection", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingArgs:
    def __init__(__self__, *,
                 envoy_service: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceArgs']] = None,
                 file: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFileArgs']] = None):
        if envoy_service is not None:
            pulumi.set(__self__, "envoy_service", envoy_service)
        if file is not None:
            pulumi.set(__self__, "file", file)

    @property
    @pulumi.getter(name="envoyService")
    def envoy_service(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceArgs']]:
        return pulumi.get(self, "envoy_service")

    @envoy_service.setter
    def envoy_service(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceArgs']]):
        pulumi.set(self, "envoy_service", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFileArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFileArgs']]):
        pulumi.set(self, "file", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalive: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']] = None,
                 tls_settings: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']]:
        return pulumi.get(self, "tcp_keepalive")

    @tcp_keepalive.setter
    def tcp_keepalive(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs']]):
        pulumi.set(self, "tcp_keepalive", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']]:
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepaliveArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[str]] = None,
                 probes: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def probes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probes")

    @probes.setter
    def probes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probes", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettingsArgs:
    def __init__(__self__, *,
                 ca_certificates: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 subject_alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alt_names")

    @subject_alt_names.setter
    def subject_alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alt_names", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFileArgs:
    def __init__(__self__, *,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalive: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']] = None,
                 tls_settings: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettingsArgs']] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']]:
        return pulumi.get(self, "tcp_keepalive")

    @tcp_keepalive.setter
    def tcp_keepalive(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs']]):
        pulumi.set(self, "tcp_keepalive", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettingsArgs']]:
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepaliveArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[str]] = None,
                 probes: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def probes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probes")

    @probes.setter
    def probes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probes", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettingsArgs:
    def __init__(__self__, *,
                 ca_certificates: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 subject_alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alt_names")

    @subject_alt_names.setter
    def subject_alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alt_names", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionArgs:
    def __init__(__self__, *,
                 always_inject_selector: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorArgs']]]] = None,
                 auto_inject: Optional[pulumi.Input[bool]] = None,
                 injected_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 never_inject_selector: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorArgs']]]] = None):
        if always_inject_selector is not None:
            pulumi.set(__self__, "always_inject_selector", always_inject_selector)
        if auto_inject is not None:
            pulumi.set(__self__, "auto_inject", auto_inject)
        if injected_annotations is not None:
            pulumi.set(__self__, "injected_annotations", injected_annotations)
        if never_inject_selector is not None:
            pulumi.set(__self__, "never_inject_selector", never_inject_selector)

    @property
    @pulumi.getter(name="alwaysInjectSelector")
    def always_inject_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorArgs']]]]:
        return pulumi.get(self, "always_inject_selector")

    @always_inject_selector.setter
    def always_inject_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorArgs']]]]):
        pulumi.set(self, "always_inject_selector", value)

    @property
    @pulumi.getter(name="autoInject")
    def auto_inject(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_inject")

    @auto_inject.setter
    def auto_inject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_inject", value)

    @property
    @pulumi.getter(name="injectedAnnotations")
    def injected_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "injected_annotations")

    @injected_annotations.setter
    def injected_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "injected_annotations", value)

    @property
    @pulumi.getter(name="neverInjectSelector")
    def never_inject_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorArgs']]]]:
        return pulumi.get(self, "never_inject_selector")

    @never_inject_selector.setter
    def never_inject_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorArgs']]]]):
        pulumi.set(self, "never_inject_selector", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyLoggingArgs:
    def __init__(__self__, *,
                 component_levels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "component_levels")

    @component_levels.setter
    def component_levels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "component_levels", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingArgs:
    def __init__(__self__, *,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 connection_timeout: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDnsArgs']] = None,
                 initialization: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationArgs']] = None,
                 max_connection_age: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolArgs']] = None,
                 traffic_control: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlArgs']] = None):
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if max_connection_age is not None:
            pulumi.set(__self__, "max_connection_age", max_connection_age)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if traffic_control is not None:
            pulumi.set(__self__, "traffic_control", traffic_control)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_timeout")

    @connection_timeout.setter
    def connection_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_timeout", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def initialization(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationArgs']]:
        return pulumi.get(self, "initialization")

    @initialization.setter
    def initialization(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationArgs']]):
        pulumi.set(self, "initialization", value)

    @property
    @pulumi.getter(name="maxConnectionAge")
    def max_connection_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_connection_age")

    @max_connection_age.setter
    def max_connection_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_connection_age", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolArgs']]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolArgs']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="trafficControl")
    def traffic_control(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlArgs']]:
        return pulumi.get(self, "traffic_control")

    @traffic_control.setter
    def traffic_control(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlArgs']]):
        pulumi.set(self, "traffic_control", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDnsArgs:
    def __init__(__self__, *,
                 refresh_rate: Optional[pulumi.Input[str]] = None,
                 search_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if search_suffixes is not None:
            pulumi.set(__self__, "search_suffixes", search_suffixes)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter(name="searchSuffixes")
    def search_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "search_suffixes")

    @search_suffixes.setter
    def search_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "search_suffixes", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationArgs:
    def __init__(__self__, *,
                 init_container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if init_container is not None:
            pulumi.set(__self__, "init_container", init_container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="initContainer")
    def init_container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerArgs']]:
        return pulumi.get(self, "init_container")

    @init_container.setter
    def init_container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerArgs']]):
        pulumi.set(self, "init_container", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerArgs:
    def __init__(__self__, *,
                 runtime: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeArgs']] = None):
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeArgs']]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeArgs']]):
        pulumi.set(self, "runtime", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolArgs:
    def __init__(__self__, *,
                 auto_detect: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetectArgs']] = None):
        if auto_detect is not None:
            pulumi.set(__self__, "auto_detect", auto_detect)

    @property
    @pulumi.getter(name="autoDetect")
    def auto_detect(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetectArgs']]:
        return pulumi.get(self, "auto_detect")

    @auto_detect.setter
    def auto_detect(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetectArgs']]):
        pulumi.set(self, "auto_detect", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetectArgs:
    def __init__(__self__, *,
                 inbound: Optional[pulumi.Input[bool]] = None,
                 outbound: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlArgs:
    def __init__(__self__, *,
                 inbound: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInboundArgs']] = None,
                 outbound: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutboundArgs']] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInboundArgs']]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInboundArgs']]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutboundArgs']]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutboundArgs']]):
        pulumi.set(self, "outbound", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInboundArgs:
    def __init__(__self__, *,
                 excluded_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 included_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 interception_mode: Optional[pulumi.Input[str]] = None):
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ports is not None:
            pulumi.set(__self__, "included_ports", included_ports)
        if interception_mode is not None:
            pulumi.set(__self__, "interception_mode", interception_mode)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "excluded_ports")

    @excluded_ports.setter
    def excluded_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "excluded_ports", value)

    @property
    @pulumi.getter(name="includedPorts")
    def included_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_ports")

    @included_ports.setter
    def included_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_ports", value)

    @property
    @pulumi.getter(name="interceptionMode")
    def interception_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interception_mode")

    @interception_mode.setter
    def interception_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interception_mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutboundArgs:
    def __init__(__self__, *,
                 excluded_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 included_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy: Optional[pulumi.Input[str]] = None):
        if excluded_ip_ranges is not None:
            pulumi.set(__self__, "excluded_ip_ranges", excluded_ip_ranges)
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ip_ranges is not None:
            pulumi.set(__self__, "included_ip_ranges", included_ip_ranges)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="excludedIPRanges")
    def excluded_ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_ip_ranges")

    @excluded_ip_ranges.setter
    def excluded_ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_ip_ranges", value)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "excluded_ports")

    @excluded_ports.setter
    def excluded_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "excluded_ports", value)

    @property
    @pulumi.getter(name="includedIPRanges")
    def included_ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_ip_ranges")

    @included_ip_ranges.setter
    def included_ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_ip_ranges", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerArgs']] = None,
                 readiness: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadinessArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def readiness(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadinessArgs']]:
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadinessArgs']]):
        pulumi.set(self, "readiness", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadinessArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 rewrite_application_probes: Optional[pulumi.Input[bool]] = None,
                 status_port: Optional[pulumi.Input[int]] = None):
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if rewrite_application_probes is not None:
            pulumi.set(__self__, "rewrite_application_probes", rewrite_application_probes)
        if status_port is not None:
            pulumi.set(__self__, "status_port", status_port)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="rewriteApplicationProbes")
    def rewrite_application_probes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rewrite_application_probes")

    @rewrite_application_probes.setter
    def rewrite_application_probes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rewrite_application_probes", value)

    @property
    @pulumi.getter(name="statusPort")
    def status_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_port")

    @status_port.setter
    def status_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_port", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeArgs:
    def __init__(__self__, *,
                 components: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsArgs']]]] = None,
                 defaults: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsArgs']] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsArgs']]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsArgs']]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsArgs']]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsArgs']]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesArgs']] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScalingArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyArgs']] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScalingArgs']]:
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs']]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurgeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityArgs']] = None,
                 metadata: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadataArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerationsArgs']]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityArgs:
    def __init__(__self__, *,
                 pod_anti_affinity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]] = None,
                 required_during_scheduling: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling")

    @preferred_during_scheduling.setter
    def preferred_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling", value)

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]:
        return pulumi.get(self, "required_during_scheduling")

    @required_during_scheduling.setter
    def required_during_scheduling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs']]]]):
        pulumi.set(self, "required_during_scheduling", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringSchedulingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 topology_key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodArgs']] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerArgs']]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentArgs']]:
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodArgs']]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerArgs:
    def __init__(__self__, *,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]] = None,
                 image_registry: Optional[pulumi.Input[str]] = None,
                 image_tag: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesArgs']] = None):
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]]:
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_registry")

    @image_registry.setter
    def image_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_registry", value)

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_tag")

    @image_tag.setter
    def image_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_tag", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentArgs:
    def __init__(__self__, *,
                 pod_disruption: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionArgs']] = None):
        if pod_disruption is not None:
            pulumi.set(__self__, "pod_disruption", pod_disruption)

    @property
    @pulumi.getter(name="podDisruption")
    def pod_disruption(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionArgs']]:
        return pulumi.get(self, "pod_disruption")

    @pod_disruption.setter
    def pod_disruption(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionArgs']]):
        pulumi.set(self, "pod_disruption", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_unavailable: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']] = None,
                 min_available: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs']]):
        pulumi.set(self, "min_available", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodArgs:
    def __init__(__self__, *,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerationsArgs']]]] = None):
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerationsArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityArgs:
    def __init__(__self__, *,
                 certificate_authority: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityArgs']] = None,
                 control_plane: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneArgs']] = None,
                 data_plane: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlaneArgs']] = None,
                 identity: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityArgs']] = None,
                 trust: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityTrustArgs']] = None):
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if data_plane is not None:
            pulumi.set(__self__, "data_plane", data_plane)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityArgs']]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityArgs']]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneArgs']]:
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="dataPlane")
    def data_plane(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlaneArgs']]:
        return pulumi.get(self, "data_plane")

    @data_plane.setter
    def data_plane(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlaneArgs']]):
        pulumi.set(self, "data_plane", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityArgs']]:
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def trust(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityTrustArgs']]:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityTrustArgs']]):
        pulumi.set(self, "trust", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustomArgs']] = None,
                 istiod: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if istiod is not None:
            pulumi.set(__self__, "istiod", istiod)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustomArgs']]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def istiod(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodArgs']]:
        return pulumi.get(self, "istiod")

    @istiod.setter
    def istiod(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodArgs']]):
        pulumi.set(self, "istiod", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustomArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodArgs:
    def __init__(__self__, *,
                 private_key: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']] = None,
                 self_signed: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 workload_cert_ttl_default: Optional[pulumi.Input[str]] = None,
                 workload_cert_ttl_max: Optional[pulumi.Input[str]] = None):
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workload_cert_ttl_default is not None:
            pulumi.set(__self__, "workload_cert_ttl_default", workload_cert_ttl_default)
        if workload_cert_ttl_max is not None:
            pulumi.set(__self__, "workload_cert_ttl_max", workload_cert_ttl_max)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs']]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSignedArgs']]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workloadCertTTLDefault")
    def workload_cert_ttl_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workload_cert_ttl_default")

    @workload_cert_ttl_default.setter
    def workload_cert_ttl_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_cert_ttl_default", value)

    @property
    @pulumi.getter(name="workloadCertTTLMax")
    def workload_cert_ttl_max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workload_cert_ttl_max")

    @workload_cert_ttl_max.setter
    def workload_cert_ttl_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_cert_ttl_max", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKeyArgs:
    def __init__(__self__, *,
                 root_ca_dir: Optional[pulumi.Input[str]] = None):
        if root_ca_dir is not None:
            pulumi.set(__self__, "root_ca_dir", root_ca_dir)

    @property
    @pulumi.getter(name="rootCADir")
    def root_ca_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_ca_dir")

    @root_ca_dir.setter
    def root_ca_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_ca_dir", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSignedArgs:
    def __init__(__self__, *,
                 check_period: Optional[pulumi.Input[str]] = None,
                 enable_jitter: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None):
        if check_period is not None:
            pulumi.set(__self__, "check_period", check_period)
        if enable_jitter is not None:
            pulumi.set(__self__, "enable_jitter", enable_jitter)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_period")

    @check_period.setter
    def check_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_period", value)

    @property
    @pulumi.getter(name="enableJitter")
    def enable_jitter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_jitter")

    @enable_jitter.setter
    def enable_jitter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_jitter", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneArgs:
    def __init__(__self__, *,
                 cert_provider: Optional[pulumi.Input[str]] = None,
                 mtls: Optional[pulumi.Input[bool]] = None,
                 tls: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTlsArgs']] = None):
        if cert_provider is not None:
            pulumi.set(__self__, "cert_provider", cert_provider)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="certProvider")
    def cert_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_provider")

    @cert_provider.setter
    def cert_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_provider", value)

    @property
    @pulumi.getter
    def mtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mtls")

    @mtls.setter
    def mtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtls", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTlsArgs:
    def __init__(__self__, *,
                 cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ecdh_curves: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_protocol_version: Optional[pulumi.Input[str]] = None,
                 min_protocol_version: Optional[pulumi.Input[str]] = None):
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if ecdh_curves is not None:
            pulumi.set(__self__, "ecdh_curves", ecdh_curves)
        if max_protocol_version is not None:
            pulumi.set(__self__, "max_protocol_version", max_protocol_version)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cipher_suites")

    @cipher_suites.setter
    def cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cipher_suites", value)

    @property
    @pulumi.getter(name="ecdhCurves")
    def ecdh_curves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ecdh_curves")

    @ecdh_curves.setter
    def ecdh_curves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ecdh_curves", value)

    @property
    @pulumi.getter(name="maxProtocolVersion")
    def max_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_protocol_version")

    @max_protocol_version.setter
    def max_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_protocol_version", value)

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_protocol_version")

    @min_protocol_version.setter
    def min_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_protocol_version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlaneArgs:
    def __init__(__self__, *,
                 automtls: Optional[pulumi.Input[bool]] = None,
                 mtls: Optional[pulumi.Input[bool]] = None):
        if automtls is not None:
            pulumi.set(__self__, "automtls", automtls)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)

    @property
    @pulumi.getter
    def automtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automtls")

    @automtls.setter
    def automtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automtls", value)

    @property
    @pulumi.getter
    def mtls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mtls")

    @mtls.setter
    def mtls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtls", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityArgs:
    def __init__(__self__, *,
                 third_party: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdPartyArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdPartyArgs']]:
        return pulumi.get(self, "third_party")

    @third_party.setter
    def third_party(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdPartyArgs']]):
        pulumi.set(self, "third_party", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdPartyArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityTrustArgs:
    def __init__(__self__, *,
                 additional_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None):
        if additional_domains is not None:
            pulumi.set(__self__, "additional_domains", additional_domains)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="additionalDomains")
    def additional_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_domains")

    @additional_domains.setter
    def additional_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_domains", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryArgs:
    def __init__(__self__, *,
                 mixer: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerArgs']] = None,
                 remote: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerArgs']]:
        return pulumi.get(self, "mixer")

    @mixer.setter
    def mixer(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerArgs']]):
        pulumi.set(self, "mixer", value)

    @property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteArgs']]:
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteArgs']]):
        pulumi.set(self, "remote", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersArgs']] = None,
                 batching: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatchingArgs']] = None,
                 loadshedding: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadsheddingArgs']] = None,
                 session_affinity: Optional[pulumi.Input[bool]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if loadshedding is not None:
            pulumi.set(__self__, "loadshedding", loadshedding)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter
    def batching(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatchingArgs']]:
        return pulumi.get(self, "batching")

    @batching.setter
    def batching(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatchingArgs']]):
        pulumi.set(self, "batching", value)

    @property
    @pulumi.getter
    def loadshedding(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadsheddingArgs']]:
        return pulumi.get(self, "loadshedding")

    @loadshedding.setter
    def loadshedding(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadsheddingArgs']]):
        pulumi.set(self, "loadshedding", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_affinity", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersArgs:
    def __init__(__self__, *,
                 kubernetesenv: Optional[pulumi.Input[bool]] = None,
                 stdio: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdioArgs']] = None,
                 use_adapter_crds: Optional[pulumi.Input[bool]] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if stdio is not None:
            pulumi.set(__self__, "stdio", stdio)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kubernetesenv")

    @kubernetesenv.setter
    def kubernetesenv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetesenv", value)

    @property
    @pulumi.getter
    def stdio(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdioArgs']]:
        return pulumi.get(self, "stdio")

    @stdio.setter
    def stdio(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdioArgs']]):
        pulumi.set(self, "stdio", value)

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_adapter_crds")

    @use_adapter_crds.setter
    def use_adapter_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_adapter_crds", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdioArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 output_as_json: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if output_as_json is not None:
            pulumi.set(__self__, "output_as_json", output_as_json)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="outputAsJSON")
    def output_as_json(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "output_as_json")

    @output_as_json.setter
    def output_as_json(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "output_as_json", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatchingArgs:
    def __init__(__self__, *,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_time: Optional[pulumi.Input[str]] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_time")

    @max_time.setter
    def max_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_time", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadsheddingArgs:
    def __init__(__self__, *,
                 latency_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 batching: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatchingArgs']] = None,
                 create_service: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def batching(self) -> Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatchingArgs']]:
        return pulumi.get(self, "batching")

    @batching.setter
    def batching(self, value: Optional[pulumi.Input['ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatchingArgs']]):
        pulumi.set(self, "batching", value)

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_service")

    @create_service.setter
    def create_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_service", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatchingArgs:
    def __init__(__self__, *,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_time: Optional[pulumi.Input[str]] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_time")

    @max_time.setter
    def max_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_time", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedSpecTracingArgs:
    def __init__(__self__, *,
                 sampling: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusAppliedValuesArgs:
    def __init__(__self__, *,
                 istio: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 three_scale: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "istio")

    @istio.setter
    def istio(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "istio", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "three_scale")

    @three_scale.setter
    def three_scale(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "three_scale", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsChildrenArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsChildrenConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusComponentsConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServiceMeshControlPlaneStatusReadinessArgs:
    def __init__(__self__, *,
                 components: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "components", value)



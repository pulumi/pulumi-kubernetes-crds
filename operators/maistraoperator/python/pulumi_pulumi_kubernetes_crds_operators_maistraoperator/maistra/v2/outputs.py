# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ServiceMeshControlPlaneSpec',
    'ServiceMeshControlPlaneSpecAddons',
    'ServiceMeshControlPlaneSpecAddons3scale',
    'ServiceMeshControlPlaneSpecAddons3scaleBackend',
    'ServiceMeshControlPlaneSpecAddons3scaleClient',
    'ServiceMeshControlPlaneSpecAddons3scaleGrpc',
    'ServiceMeshControlPlaneSpecAddons3scaleMetrics',
    'ServiceMeshControlPlaneSpecAddons3scaleSystem',
    'ServiceMeshControlPlaneSpecAddonsGrafana',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstall',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallService',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata',
    'ServiceMeshControlPlaneSpecAddonsJaeger',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstall',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch',
    'ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory',
    'ServiceMeshControlPlaneSpecAddonsKiali',
    'ServiceMeshControlPlaneSpecAddonsKialiInstall',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallService',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata',
    'ServiceMeshControlPlaneSpecAddonsPrometheus',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstall',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallService',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata',
    'ServiceMeshControlPlaneSpecAddonsStackdriver',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth',
    'ServiceMeshControlPlaneSpecAddonsStackdriverTracer',
    'ServiceMeshControlPlaneSpecCluster',
    'ServiceMeshControlPlaneSpecClusterMeshExpansion',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret',
    'ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneSpecClusterMultiCluster',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints',
    'ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways',
    'ServiceMeshControlPlaneSpecGateways',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgress',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngress',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret',
    'ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneSpecGatewaysEgress',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntime',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata',
    'ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations',
    'ServiceMeshControlPlaneSpecGatewaysEgressService',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata',
    'ServiceMeshControlPlaneSpecGatewaysEgressServicePorts',
    'ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumes',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret',
    'ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneSpecGatewaysIngress',
    'ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts',
    'ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntime',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata',
    'ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations',
    'ServiceMeshControlPlaneSpecGatewaysIngressSds',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits',
    'ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests',
    'ServiceMeshControlPlaneSpecGatewaysIngressService',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata',
    'ServiceMeshControlPlaneSpecGatewaysIngressServicePorts',
    'ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumes',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret',
    'ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute',
    'ServiceMeshControlPlaneSpecGeneral',
    'ServiceMeshControlPlaneSpecGeneralLogging',
    'ServiceMeshControlPlaneSpecPolicy',
    'ServiceMeshControlPlaneSpecPolicyMixer',
    'ServiceMeshControlPlaneSpecPolicyMixerAdapters',
    'ServiceMeshControlPlaneSpecPolicyRemote',
    'ServiceMeshControlPlaneSpecProxy',
    'ServiceMeshControlPlaneSpecProxyAccessLogging',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings',
    'ServiceMeshControlPlaneSpecProxyAccessLoggingFile',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsService',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive',
    'ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings',
    'ServiceMeshControlPlaneSpecProxyInjection',
    'ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector',
    'ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions',
    'ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector',
    'ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions',
    'ServiceMeshControlPlaneSpecProxyLogging',
    'ServiceMeshControlPlaneSpecProxyNetworking',
    'ServiceMeshControlPlaneSpecProxyNetworkingDns',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitialization',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits',
    'ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests',
    'ServiceMeshControlPlaneSpecProxyNetworkingProtocol',
    'ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound',
    'ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound',
    'ServiceMeshControlPlaneSpecProxyRuntime',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainer',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResources',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecProxyRuntimeReadiness',
    'ServiceMeshControlPlaneSpecRuntime',
    'ServiceMeshControlPlaneSpecRuntimeComponents',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainer',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeployment',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPod',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata',
    'ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations',
    'ServiceMeshControlPlaneSpecRuntimeDefaults',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainer',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsPod',
    'ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations',
    'ServiceMeshControlPlaneSpecSecurity',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthority',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey',
    'ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned',
    'ServiceMeshControlPlaneSpecSecurityControlPlane',
    'ServiceMeshControlPlaneSpecSecurityControlPlaneTls',
    'ServiceMeshControlPlaneSpecSecurityDataPlane',
    'ServiceMeshControlPlaneSpecSecurityIdentity',
    'ServiceMeshControlPlaneSpecSecurityIdentityThirdParty',
    'ServiceMeshControlPlaneSpecSecurityTrust',
    'ServiceMeshControlPlaneSpecTelemetry',
    'ServiceMeshControlPlaneSpecTelemetryMixer',
    'ServiceMeshControlPlaneSpecTelemetryMixerAdapters',
    'ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio',
    'ServiceMeshControlPlaneSpecTelemetryMixerBatching',
    'ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding',
    'ServiceMeshControlPlaneSpecTelemetryRemote',
    'ServiceMeshControlPlaneSpecTelemetryRemoteBatching',
    'ServiceMeshControlPlaneSpecTracing',
    'ServiceMeshControlPlaneStatus',
    'ServiceMeshControlPlaneStatusAppliedSpec',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scale',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics',
    'ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth',
    'ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer',
    'ServiceMeshControlPlaneStatusAppliedSpecCluster',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints',
    'ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways',
    'ServiceMeshControlPlaneStatusAppliedSpecGateways',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems',
    'ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute',
    'ServiceMeshControlPlaneStatusAppliedSpecGeneral',
    'ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicy',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters',
    'ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote',
    'ServiceMeshControlPlaneStatusAppliedSpecProxy',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjection',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyLogging',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntime',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod',
    'ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurity',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty',
    'ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetry',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote',
    'ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching',
    'ServiceMeshControlPlaneStatusAppliedSpecTracing',
    'ServiceMeshControlPlaneStatusAppliedValues',
    'ServiceMeshControlPlaneStatusComponents',
    'ServiceMeshControlPlaneStatusComponentsChildren',
    'ServiceMeshControlPlaneStatusComponentsChildrenConditions',
    'ServiceMeshControlPlaneStatusComponentsConditions',
    'ServiceMeshControlPlaneStatusConditions',
    'ServiceMeshControlPlaneStatusReadiness',
]

@pulumi.output_type
class ServiceMeshControlPlaneSpec(dict):
    def __init__(__self__, *,
                 addons: Optional['outputs.ServiceMeshControlPlaneSpecAddons'] = None,
                 cluster: Optional['outputs.ServiceMeshControlPlaneSpecCluster'] = None,
                 gateways: Optional['outputs.ServiceMeshControlPlaneSpecGateways'] = None,
                 general: Optional['outputs.ServiceMeshControlPlaneSpecGeneral'] = None,
                 policy: Optional['outputs.ServiceMeshControlPlaneSpecPolicy'] = None,
                 profiles: Optional[Sequence[str]] = None,
                 proxy: Optional['outputs.ServiceMeshControlPlaneSpecProxy'] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecRuntime'] = None,
                 security: Optional['outputs.ServiceMeshControlPlaneSpecSecurity'] = None,
                 tech_preview: Optional[Mapping[str, Any]] = None,
                 telemetry: Optional['outputs.ServiceMeshControlPlaneSpecTelemetry'] = None,
                 tracing: Optional['outputs.ServiceMeshControlPlaneSpecTracing'] = None,
                 version: Optional[str] = None):
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if general is not None:
            pulumi.set(__self__, "general", general)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tech_preview is not None:
            pulumi.set(__self__, "tech_preview", tech_preview)
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def addons(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons']:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.ServiceMeshControlPlaneSpecCluster']:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def gateways(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGateways']:
        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter
    def general(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGeneral']:
        return pulumi.get(self, "general")

    @property
    @pulumi.getter
    def policy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecPolicy']:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxy']:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="techPreview")
    def tech_preview(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tech_preview")

    @property
    @pulumi.getter
    def telemetry(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetry']:
        return pulumi.get(self, "telemetry")

    @property
    @pulumi.getter
    def tracing(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTracing']:
        return pulumi.get(self, "tracing")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons(dict):
    def __init__(__self__, *,
                 _3scale: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scale'] = None,
                 grafana: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafana'] = None,
                 jaeger: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaeger'] = None,
                 kiali: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKiali'] = None,
                 prometheus: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheus'] = None,
                 stackdriver: Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriver'] = None):
        if _3scale is not None:
            pulumi.set(__self__, "_3scale", _3scale)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kiali is not None:
            pulumi.set(__self__, "kiali", kiali)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if stackdriver is not None:
            pulumi.set(__self__, "stackdriver", stackdriver)

    @property
    @pulumi.getter(name="3scale")
    def _3scale(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scale']:
        return pulumi.get(self, "_3scale")

    @property
    @pulumi.getter
    def grafana(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafana']:
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter
    def jaeger(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaeger']:
        return pulumi.get(self, "jaeger")

    @property
    @pulumi.getter
    def kiali(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKiali']:
        return pulumi.get(self, "kiali")

    @property
    @pulumi.getter
    def prometheus(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheus']:
        return pulumi.get(self, "prometheus")

    @property
    @pulumi.getter
    def stackdriver(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriver']:
        return pulumi.get(self, "stackdriver")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scale(dict):
    def __init__(__self__, *,
                 backend: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleBackend'] = None,
                 client: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleClient'] = None,
                 enabled: Optional[bool] = None,
                 grpc: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleGrpc'] = None,
                 listen_addr: Optional[int] = None,
                 log_grpc: Optional[bool] = None,
                 log_json: Optional[bool] = None,
                 log_level: Optional[str] = None,
                 metrics: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleMetrics'] = None,
                 system: Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleSystem'] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if client is not None:
            pulumi.set(__self__, "client", client)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if listen_addr is not None:
            pulumi.set(__self__, "listen_addr", listen_addr)
        if log_grpc is not None:
            pulumi.set(__self__, "log_grpc", log_grpc)
        if log_json is not None:
            pulumi.set(__self__, "log_json", log_json)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def backend(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleBackend']:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def client(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleClient']:
        return pulumi.get(self, "client")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def grpc(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleGrpc']:
        return pulumi.get(self, "grpc")

    @property
    @pulumi.getter
    def listen_addr(self) -> Optional[int]:
        return pulumi.get(self, "listen_addr")

    @property
    @pulumi.getter
    def log_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "log_grpc")

    @property
    @pulumi.getter
    def log_json(self) -> Optional[bool]:
        return pulumi.get(self, "log_json")

    @property
    @pulumi.getter
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleMetrics']:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def system(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddons3scaleSystem']:
        return pulumi.get(self, "system")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scaleBackend(dict):
    def __init__(__self__, *,
                 cache_flush_interval: Optional[int] = None,
                 enable_cache: Optional[bool] = None,
                 policy_fail_closed: Optional[bool] = None):
        if cache_flush_interval is not None:
            pulumi.set(__self__, "cache_flush_interval", cache_flush_interval)
        if enable_cache is not None:
            pulumi.set(__self__, "enable_cache", enable_cache)
        if policy_fail_closed is not None:
            pulumi.set(__self__, "policy_fail_closed", policy_fail_closed)

    @property
    @pulumi.getter
    def cache_flush_interval(self) -> Optional[int]:
        return pulumi.get(self, "cache_flush_interval")

    @property
    @pulumi.getter
    def enable_cache(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cache")

    @property
    @pulumi.getter
    def policy_fail_closed(self) -> Optional[bool]:
        return pulumi.get(self, "policy_fail_closed")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scaleClient(dict):
    def __init__(__self__, *,
                 allow_insecure_connections: Optional[bool] = None,
                 timeout: Optional[int] = None):
        if allow_insecure_connections is not None:
            pulumi.set(__self__, "allow_insecure_connections", allow_insecure_connections)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def allow_insecure_connections(self) -> Optional[bool]:
        return pulumi.get(self, "allow_insecure_connections")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scaleGrpc(dict):
    def __init__(__self__, *,
                 max_conn_timeout: Optional[int] = None):
        if max_conn_timeout is not None:
            pulumi.set(__self__, "max_conn_timeout", max_conn_timeout)

    @property
    @pulumi.getter
    def max_conn_timeout(self) -> Optional[int]:
        return pulumi.get(self, "max_conn_timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scaleMetrics(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 report: Optional[bool] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def report(self) -> Optional[bool]:
        return pulumi.get(self, "report")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddons3scaleSystem(dict):
    def __init__(__self__, *,
                 cache_max_size: Optional[int] = None,
                 cache_refresh_interval: Optional[int] = None,
                 cache_refresh_retries: Optional[int] = None,
                 cache_ttl: Optional[int] = None):
        if cache_max_size is not None:
            pulumi.set(__self__, "cache_max_size", cache_max_size)
        if cache_refresh_interval is not None:
            pulumi.set(__self__, "cache_refresh_interval", cache_refresh_interval)
        if cache_refresh_retries is not None:
            pulumi.set(__self__, "cache_refresh_retries", cache_refresh_retries)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)

    @property
    @pulumi.getter
    def cache_max_size(self) -> Optional[int]:
        return pulumi.get(self, "cache_max_size")

    @property
    @pulumi.getter
    def cache_refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_interval")

    @property
    @pulumi.getter
    def cache_refresh_retries(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_retries")

    @property
    @pulumi.getter
    def cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "cache_ttl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafana(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstall'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstall']:
        return pulumi.get(self, "install")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstall(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig'] = None,
                 persistence: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence'] = None,
                 security: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity'] = None,
                 self_managed: Optional[bool] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallService'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence']:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[bool]:
        return pulumi.get(self, "self_managed")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallService']:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallConfig(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 env_secrets: Optional[Mapping[str, str]] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env_secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistence(dict):
    def __init__(__self__, *,
                 access_mode: Optional[str] = None,
                 capacity: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity'] = None,
                 enabled: Optional[bool] = None,
                 storage_class_name: Optional[str] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[str]:
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity']:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacity(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallPersistenceCapacityRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallSecurity(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 passphrase_key: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 username_key: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if passphrase_key is not None:
            pulumi.set(__self__, "passphrase_key", passphrase_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="passphraseKey")
    def passphrase_key(self) -> Optional[str]:
        return pulumi.get(self, "passphrase_key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[str]:
        return pulumi.get(self, "username_key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsGrafanaInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaeger(dict):
    def __init__(__self__, *,
                 install: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstall'] = None,
                 name: Optional[str] = None):
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstall(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress'] = None,
                 storage: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage'] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage']:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata']:
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorage(dict):
    def __init__(__self__, *,
                 elasticsearch: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch'] = None,
                 memory: Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory'] = None,
                 type: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch']:
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter
    def memory(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory']:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageElasticsearch(dict):
    def __init__(__self__, *,
                 index_cleaner: Optional[Mapping[str, Any]] = None,
                 node_count: Optional[int] = None,
                 redundancy_policy: Optional[str] = None,
                 storage: Optional[Mapping[str, Any]] = None):
        if index_cleaner is not None:
            pulumi.set(__self__, "index_cleaner", index_cleaner)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if redundancy_policy is not None:
            pulumi.set(__self__, "redundancy_policy", redundancy_policy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="indexCleaner")
    def index_cleaner(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "index_cleaner")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="redundancyPolicy")
    def redundancy_policy(self) -> Optional[str]:
        return pulumi.get(self, "redundancy_policy")

    @property
    @pulumi.getter
    def storage(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsJaegerInstallStorageMemory(dict):
    def __init__(__self__, *,
                 max_traces: Optional[int] = None):
        if max_traces is not None:
            pulumi.set(__self__, "max_traces", max_traces)

    @property
    @pulumi.getter(name="maxTraces")
    def max_traces(self) -> Optional[int]:
        return pulumi.get(self, "max_traces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKiali(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstall'] = None,
                 name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstall(dict):
    def __init__(__self__, *,
                 dashboard: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallService'] = None):
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard']:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallService']:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallDashboard(dict):
    def __init__(__self__, *,
                 enable_grafana: Optional[bool] = None,
                 enable_prometheus: Optional[bool] = None,
                 enable_tracing: Optional[bool] = None,
                 view_only: Optional[bool] = None):
        if enable_grafana is not None:
            pulumi.set(__self__, "enable_grafana", enable_grafana)
        if enable_prometheus is not None:
            pulumi.set(__self__, "enable_prometheus", enable_prometheus)
        if enable_tracing is not None:
            pulumi.set(__self__, "enable_tracing", enable_tracing)
        if view_only is not None:
            pulumi.set(__self__, "view_only", view_only)

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> Optional[bool]:
        return pulumi.get(self, "enable_grafana")

    @property
    @pulumi.getter(name="enablePrometheus")
    def enable_prometheus(self) -> Optional[bool]:
        return pulumi.get(self, "enable_prometheus")

    @property
    @pulumi.getter(name="enableTracing")
    def enable_tracing(self) -> Optional[bool]:
        return pulumi.get(self, "enable_tracing")

    @property
    @pulumi.getter(name="viewOnly")
    def view_only(self) -> Optional[bool]:
        return pulumi.get(self, "view_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsKialiInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheus(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstall'] = None,
                 metrics_expiry_duration: Optional[str] = None,
                 scrape: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if metrics_expiry_duration is not None:
            pulumi.set(__self__, "metrics_expiry_duration", metrics_expiry_duration)
        if scrape is not None:
            pulumi.set(__self__, "scrape", scrape)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter(name="metricsExpiryDuration")
    def metrics_expiry_duration(self) -> Optional[str]:
        return pulumi.get(self, "metrics_expiry_duration")

    @property
    @pulumi.getter
    def scrape(self) -> Optional[bool]:
        return pulumi.get(self, "scrape")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstall(dict):
    def __init__(__self__, *,
                 retention: Optional[str] = None,
                 scrape_interval: Optional[str] = None,
                 self_managed: Optional[bool] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallService'] = None,
                 use_tls: Optional[bool] = None):
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if scrape_interval is not None:
            pulumi.set(__self__, "scrape_interval", scrape_interval)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def retention(self) -> Optional[str]:
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> Optional[str]:
        return pulumi.get(self, "scrape_interval")

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[bool]:
        return pulumi.get(self, "self_managed")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="useTLS")
    def use_tls(self) -> Optional[bool]:
        return pulumi.get(self, "use_tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsPrometheusInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsStackdriver(dict):
    def __init__(__self__, *,
                 telemetry: Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry'] = None,
                 tracer: Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTracer'] = None):
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracer is not None:
            pulumi.set(__self__, "tracer", tracer)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry']:
        return pulumi.get(self, "telemetry")

    @property
    @pulumi.getter
    def tracer(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTracer']:
        return pulumi.get(self, "tracer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetry(dict):
    def __init__(__self__, *,
                 access_logging: Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging'] = None,
                 auth: Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth'] = None,
                 config_override: Optional[Mapping[str, Any]] = None,
                 enable_context_graph: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 enable_metrics: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enable_context_graph is not None:
            pulumi.set(__self__, "enable_context_graph", enable_context_graph)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enable_metrics is not None:
            pulumi.set(__self__, "enable_metrics", enable_metrics)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging']:
        return pulumi.get(self, "access_logging")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth']:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter(name="enableContextGraph")
    def enable_context_graph(self) -> Optional[bool]:
        return pulumi.get(self, "enable_context_graph")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="enableMetrics")
    def enable_metrics(self) -> Optional[bool]:
        return pulumi.get(self, "enable_metrics")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAccessLogging(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_window_duration: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_window_duration is not None:
            pulumi.set(__self__, "log_window_duration", log_window_duration)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logWindowDuration")
    def log_window_duration(self) -> Optional[str]:
        return pulumi.get(self, "log_window_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTelemetryAuth(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 app_credentials: Optional[bool] = None,
                 service_account_path: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_credentials is not None:
            pulumi.set(__self__, "app_credentials", app_credentials)
        if service_account_path is not None:
            pulumi.set(__self__, "service_account_path", service_account_path)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appCredentials")
    def app_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "app_credentials")

    @property
    @pulumi.getter(name="serviceAccountPath")
    def service_account_path(self) -> Optional[str]:
        return pulumi.get(self, "service_account_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecAddonsStackdriverTracer(dict):
    def __init__(__self__, *,
                 debug: Optional[bool] = None,
                 max_number_of_annotations: Optional[int] = None,
                 max_number_of_attributes: Optional[int] = None,
                 max_number_of_message_events: Optional[int] = None):
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if max_number_of_annotations is not None:
            pulumi.set(__self__, "max_number_of_annotations", max_number_of_annotations)
        if max_number_of_attributes is not None:
            pulumi.set(__self__, "max_number_of_attributes", max_number_of_attributes)
        if max_number_of_message_events is not None:
            pulumi.set(__self__, "max_number_of_message_events", max_number_of_message_events)

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="maxNumberOfAnnotations")
    def max_number_of_annotations(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_annotations")

    @property
    @pulumi.getter(name="maxNumberOfAttributes")
    def max_number_of_attributes(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_attributes")

    @property
    @pulumi.getter(name="maxNumberOfMessageEvents")
    def max_number_of_message_events(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_message_events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecCluster(dict):
    def __init__(__self__, *,
                 mesh_expansion: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansion'] = None,
                 multi_cluster: Optional['outputs.ServiceMeshControlPlaneSpecClusterMultiCluster'] = None,
                 name: Optional[str] = None,
                 network: Optional[str] = None):
        if mesh_expansion is not None:
            pulumi.set(__self__, "mesh_expansion", mesh_expansion)
        if multi_cluster is not None:
            pulumi.set(__self__, "multi_cluster", multi_cluster)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="meshExpansion")
    def mesh_expansion(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansion']:
        return pulumi.get(self, "mesh_expansion")

    @property
    @pulumi.getter(name="multiCluster")
    def multi_cluster(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMultiCluster']:
        return pulumi.get(self, "multi_cluster")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansion(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ilb_gateway: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ilb_gateway is not None:
            pulumi.set(__self__, "ilb_gateway", ilb_gateway)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ilbGateway")
    def ilb_gateway(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway']:
        return pulumi.get(self, "ilb_gateway")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGateway(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMultiCluster(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mesh_networks: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mesh_networks is not None:
            pulumi.set(__self__, "mesh_networks", mesh_networks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="meshNetworks")
    def mesh_networks(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks']]:
        return pulumi.get(self, "mesh_networks")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworks(dict):
    def __init__(__self__, *,
                 endpoints: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints']] = None,
                 gateways: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways']] = None):
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def gateways(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways']]:
        return pulumi.get(self, "gateways")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksEndpoints(dict):
    def __init__(__self__, *,
                 from_cidr: Optional[str] = None,
                 from_registry: Optional[str] = None):
        if from_cidr is not None:
            pulumi.set(__self__, "from_cidr", from_cidr)
        if from_registry is not None:
            pulumi.set(__self__, "from_registry", from_registry)

    @property
    @pulumi.getter(name="fromCIDR")
    def from_cidr(self) -> Optional[str]:
        return pulumi.get(self, "from_cidr")

    @property
    @pulumi.getter(name="fromRegistry")
    def from_registry(self) -> Optional[str]:
        return pulumi.get(self, "from_registry")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecClusterMultiClusterMeshNetworksGateways(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 service: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGateways(dict):
    def __init__(__self__, *,
                 additional_egress: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress']] = None,
                 additional_ingress: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress']] = None,
                 egress: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgress'] = None,
                 enabled: Optional[bool] = None,
                 ingress: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngress'] = None,
                 openshift_route: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute'] = None):
        if additional_egress is not None:
            pulumi.set(__self__, "additional_egress", additional_egress)
        if additional_ingress is not None:
            pulumi.set(__self__, "additional_ingress", additional_ingress)
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if openshift_route is not None:
            pulumi.set(__self__, "openshift_route", openshift_route)

    @property
    @pulumi.getter(name="additionalEgress")
    def additional_egress(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgress']]:
        return pulumi.get(self, "additional_egress")

    @property
    @pulumi.getter(name="additionalIngress")
    def additional_ingress(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngress']]:
        return pulumi.get(self, "additional_ingress")

    @property
    @pulumi.getter
    def egress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgress']:
        return pulumi.get(self, "egress")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="openshiftRoute")
    def openshift_route(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute']:
        return pulumi.get(self, "openshift_route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 requested_network_view: Optional[Sequence[str]] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "requested_network_view")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalEgressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime'] = None,
                 sds: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def sds(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds']:
        return pulumi.get(self, "sds")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSds(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysAdditionalIngressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 requested_network_view: Optional[Sequence[str]] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "requested_network_view")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysEgressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ingress: Optional[bool] = None,
                 mesh_expansion_ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts']] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntime'] = None,
                 sds: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSds'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if mesh_expansion_ports is not None:
            pulumi.set(__self__, "mesh_expansion_ports", mesh_expansion_ports)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ingress(self) -> Optional[bool]:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="meshExpansionPorts")
    def mesh_expansion_ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts']]:
        return pulumi.get(self, "mesh_expansion_ports")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def sds(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSds']:
        return pulumi.get(self, "sds")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressMeshExpansionPortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSds(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressSdsRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysIngressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGatewaysOpenshiftRoute(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGeneral(dict):
    def __init__(__self__, *,
                 logging: Optional['outputs.ServiceMeshControlPlaneSpecGeneralLogging'] = None,
                 validation_messages: Optional[bool] = None):
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if validation_messages is not None:
            pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.ServiceMeshControlPlaneSpecGeneralLogging']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Optional[bool]:
        return pulumi.get(self, "validation_messages")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecGeneralLogging(dict):
    def __init__(__self__, *,
                 component_levels: Optional[Mapping[str, str]] = None,
                 log_as_json: Optional[bool] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if log_as_json is not None:
            pulumi.set(__self__, "log_as_json", log_as_json)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "component_levels")

    @property
    @pulumi.getter(name="logAsJSON")
    def log_as_json(self) -> Optional[bool]:
        return pulumi.get(self, "log_as_json")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecPolicy(dict):
    def __init__(__self__, *,
                 mixer: Optional['outputs.ServiceMeshControlPlaneSpecPolicyMixer'] = None,
                 remote: Optional['outputs.ServiceMeshControlPlaneSpecPolicyRemote'] = None,
                 type: Optional[str] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional['outputs.ServiceMeshControlPlaneSpecPolicyMixer']:
        return pulumi.get(self, "mixer")

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.ServiceMeshControlPlaneSpecPolicyRemote']:
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecPolicyMixer(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.ServiceMeshControlPlaneSpecPolicyMixerAdapters'] = None,
                 enable_checks: Optional[bool] = None,
                 fail_open: Optional[bool] = None,
                 session_affinity: Optional[bool] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.ServiceMeshControlPlaneSpecPolicyMixerAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[bool]:
        return pulumi.get(self, "enable_checks")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[bool]:
        return pulumi.get(self, "fail_open")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[bool]:
        return pulumi.get(self, "session_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecPolicyMixerAdapters(dict):
    def __init__(__self__, *,
                 kubernetesenv: Optional[bool] = None,
                 use_adapter_crds: Optional[bool] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[bool]:
        return pulumi.get(self, "kubernetesenv")

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[bool]:
        return pulumi.get(self, "use_adapter_crds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecPolicyRemote(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 create_service: Optional[bool] = None,
                 enable_checks: Optional[bool] = None,
                 fail_open: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_service")

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[bool]:
        return pulumi.get(self, "enable_checks")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[bool]:
        return pulumi.get(self, "fail_open")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxy(dict):
    def __init__(__self__, *,
                 access_logging: Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLogging'] = None,
                 admin_port: Optional[int] = None,
                 concurrency: Optional[int] = None,
                 envoy_metrics_service: Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsService'] = None,
                 injection: Optional['outputs.ServiceMeshControlPlaneSpecProxyInjection'] = None,
                 logging: Optional['outputs.ServiceMeshControlPlaneSpecProxyLogging'] = None,
                 networking: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworking'] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntime'] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if envoy_metrics_service is not None:
            pulumi.set(__self__, "envoy_metrics_service", envoy_metrics_service)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLogging']:
        return pulumi.get(self, "access_logging")

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[int]:
        return pulumi.get(self, "admin_port")

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="envoyMetricsService")
    def envoy_metrics_service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsService']:
        return pulumi.get(self, "envoy_metrics_service")

    @property
    @pulumi.getter
    def injection(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyInjection']:
        return pulumi.get(self, "injection")

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyLogging']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def networking(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworking']:
        return pulumi.get(self, "networking")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyAccessLogging(dict):
    def __init__(__self__, *,
                 envoy_service: Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService'] = None,
                 file: Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingFile'] = None):
        if envoy_service is not None:
            pulumi.set(__self__, "envoy_service", envoy_service)
        if file is not None:
            pulumi.set(__self__, "file", file)

    @property
    @pulumi.getter(name="envoyService")
    def envoy_service(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService']:
        return pulumi.get(self, "envoy_service")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingFile']:
        return pulumi.get(self, "file")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyService(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 tcp_keepalive: Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive'] = None,
                 tls_settings: Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive']:
        return pulumi.get(self, "tcp_keepalive")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings']:
        return pulumi.get(self, "tls_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTcpKeepalive(dict):
    def __init__(__self__, *,
                 interval: Optional[str] = None,
                 probes: Optional[int] = None,
                 time: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def probes(self) -> Optional[int]:
        return pulumi.get(self, "probes")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingEnvoyServiceTlsSettings(dict):
    def __init__(__self__, *,
                 ca_certificates: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 mode: Optional[str] = None,
                 private_key: Optional[str] = None,
                 sni: Optional[str] = None,
                 subject_alt_names: Optional[Sequence[str]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyAccessLoggingFile(dict):
    def __init__(__self__, *,
                 encoding: Optional[str] = None,
                 format: Optional[str] = None,
                 name: Optional[str] = None):
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsService(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 tcp_keepalive: Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive'] = None,
                 tls_settings: Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive']:
        return pulumi.get(self, "tcp_keepalive")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings']:
        return pulumi.get(self, "tls_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTcpKeepalive(dict):
    def __init__(__self__, *,
                 interval: Optional[str] = None,
                 probes: Optional[int] = None,
                 time: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def probes(self) -> Optional[int]:
        return pulumi.get(self, "probes")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyEnvoyMetricsServiceTlsSettings(dict):
    def __init__(__self__, *,
                 ca_certificates: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 mode: Optional[str] = None,
                 private_key: Optional[str] = None,
                 sni: Optional[str] = None,
                 subject_alt_names: Optional[Sequence[str]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyInjection(dict):
    def __init__(__self__, *,
                 always_inject_selector: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector']] = None,
                 auto_inject: Optional[bool] = None,
                 injected_annotations: Optional[Mapping[str, str]] = None,
                 never_inject_selector: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector']] = None):
        if always_inject_selector is not None:
            pulumi.set(__self__, "always_inject_selector", always_inject_selector)
        if auto_inject is not None:
            pulumi.set(__self__, "auto_inject", auto_inject)
        if injected_annotations is not None:
            pulumi.set(__self__, "injected_annotations", injected_annotations)
        if never_inject_selector is not None:
            pulumi.set(__self__, "never_inject_selector", never_inject_selector)

    @property
    @pulumi.getter(name="alwaysInjectSelector")
    def always_inject_selector(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector']]:
        return pulumi.get(self, "always_inject_selector")

    @property
    @pulumi.getter(name="autoInject")
    def auto_inject(self) -> Optional[bool]:
        return pulumi.get(self, "auto_inject")

    @property
    @pulumi.getter(name="injectedAnnotations")
    def injected_annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "injected_annotations")

    @property
    @pulumi.getter(name="neverInjectSelector")
    def never_inject_selector(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector']]:
        return pulumi.get(self, "never_inject_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyInjectionAlwaysInjectSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyInjectionNeverInjectSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyLogging(dict):
    def __init__(__self__, *,
                 component_levels: Optional[Mapping[str, str]] = None,
                 level: Optional[str] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "component_levels")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworking(dict):
    def __init__(__self__, *,
                 cluster_domain: Optional[str] = None,
                 connection_timeout: Optional[str] = None,
                 dns: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingDns'] = None,
                 initialization: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitialization'] = None,
                 max_connection_age: Optional[str] = None,
                 protocol: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingProtocol'] = None,
                 traffic_control: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl'] = None):
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if max_connection_age is not None:
            pulumi.set(__self__, "max_connection_age", max_connection_age)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if traffic_control is not None:
            pulumi.set(__self__, "traffic_control", traffic_control)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[str]:
        return pulumi.get(self, "cluster_domain")

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter
    def dns(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingDns']:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def initialization(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitialization']:
        return pulumi.get(self, "initialization")

    @property
    @pulumi.getter(name="maxConnectionAge")
    def max_connection_age(self) -> Optional[str]:
        return pulumi.get(self, "max_connection_age")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingProtocol']:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="trafficControl")
    def traffic_control(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl']:
        return pulumi.get(self, "traffic_control")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingDns(dict):
    def __init__(__self__, *,
                 refresh_rate: Optional[str] = None,
                 search_suffixes: Optional[Sequence[str]] = None):
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if search_suffixes is not None:
            pulumi.set(__self__, "search_suffixes", search_suffixes)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="searchSuffixes")
    def search_suffixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "search_suffixes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitialization(dict):
    def __init__(__self__, *,
                 init_container: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer'] = None,
                 type: Optional[str] = None):
        if init_container is not None:
            pulumi.set(__self__, "init_container", init_container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="initContainer")
    def init_container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer']:
        return pulumi.get(self, "init_container")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainer(dict):
    def __init__(__self__, *,
                 runtime: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime'] = None):
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingProtocol(dict):
    def __init__(__self__, *,
                 auto_detect: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect'] = None):
        if auto_detect is not None:
            pulumi.set(__self__, "auto_detect", auto_detect)

    @property
    @pulumi.getter(name="autoDetect")
    def auto_detect(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect']:
        return pulumi.get(self, "auto_detect")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingProtocolAutoDetect(dict):
    def __init__(__self__, *,
                 inbound: Optional[bool] = None,
                 outbound: Optional[bool] = None,
                 timeout: Optional[str] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[bool]:
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter
    def outbound(self) -> Optional[bool]:
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControl(dict):
    def __init__(__self__, *,
                 inbound: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound'] = None,
                 outbound: Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound'] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)

    @property
    @pulumi.getter
    def inbound(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound']:
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter
    def outbound(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound']:
        return pulumi.get(self, "outbound")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlInbound(dict):
    def __init__(__self__, *,
                 excluded_ports: Optional[Sequence[int]] = None,
                 included_ports: Optional[Sequence[str]] = None,
                 interception_mode: Optional[str] = None):
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ports is not None:
            pulumi.set(__self__, "included_ports", included_ports)
        if interception_mode is not None:
            pulumi.set(__self__, "interception_mode", interception_mode)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "excluded_ports")

    @property
    @pulumi.getter(name="includedPorts")
    def included_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "included_ports")

    @property
    @pulumi.getter(name="interceptionMode")
    def interception_mode(self) -> Optional[str]:
        return pulumi.get(self, "interception_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyNetworkingTrafficControlOutbound(dict):
    def __init__(__self__, *,
                 excluded_ip_ranges: Optional[Sequence[str]] = None,
                 excluded_ports: Optional[Sequence[int]] = None,
                 included_ip_ranges: Optional[Sequence[str]] = None,
                 policy: Optional[str] = None):
        if excluded_ip_ranges is not None:
            pulumi.set(__self__, "excluded_ip_ranges", excluded_ip_ranges)
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ip_ranges is not None:
            pulumi.set(__self__, "included_ip_ranges", included_ip_ranges)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="excludedIPRanges")
    def excluded_ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_ip_ranges")

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "excluded_ports")

    @property
    @pulumi.getter(name="includedIPRanges")
    def included_ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "included_ip_ranges")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainer'] = None,
                 readiness: Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeReadiness'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def readiness(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeReadiness']:
        return pulumi.get(self, "readiness")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecProxyRuntimeReadiness(dict):
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 rewrite_application_probes: Optional[bool] = None,
                 status_port: Optional[int] = None):
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if rewrite_application_probes is not None:
            pulumi.set(__self__, "rewrite_application_probes", rewrite_application_probes)
        if status_port is not None:
            pulumi.set(__self__, "status_port", status_port)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="rewriteApplicationProbes")
    def rewrite_application_probes(self) -> Optional[bool]:
        return pulumi.get(self, "rewrite_application_probes")

    @property
    @pulumi.getter(name="statusPort")
    def status_port(self) -> Optional[int]:
        return pulumi.get(self, "status_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntime(dict):
    def __init__(__self__, *,
                 components: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponents']] = None,
                 defaults: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaults'] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def components(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponents']]:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def defaults(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaults']:
        return pulumi.get(self, "defaults")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponents(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeComponentsPodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaults(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsPod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsPod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainer(dict):
    def __init__(__self__, *,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources'] = None):
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeployment(dict):
    def __init__(__self__, *,
                 pod_disruption: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption'] = None):
        if pod_disruption is not None:
            pulumi.set(__self__, "pod_disruption", pod_disruption)

    @property
    @pulumi.getter(name="podDisruption")
    def pod_disruption(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption']:
        return pulumi.get(self, "pod_disruption")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruption(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable'] = None,
                 min_available: Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable']:
        return pulumi.get(self, "min_available")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsPod(dict):
    def __init__(__self__, *,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations']] = None):
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecRuntimeDefaultsPodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurity(dict):
    def __init__(__self__, *,
                 certificate_authority: Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthority'] = None,
                 control_plane: Optional['outputs.ServiceMeshControlPlaneSpecSecurityControlPlane'] = None,
                 data_plane: Optional['outputs.ServiceMeshControlPlaneSpecSecurityDataPlane'] = None,
                 identity: Optional['outputs.ServiceMeshControlPlaneSpecSecurityIdentity'] = None,
                 trust: Optional['outputs.ServiceMeshControlPlaneSpecSecurityTrust'] = None):
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if data_plane is not None:
            pulumi.set(__self__, "data_plane", data_plane)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthority']:
        return pulumi.get(self, "certificate_authority")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityControlPlane']:
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="dataPlane")
    def data_plane(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityDataPlane']:
        return pulumi.get(self, "data_plane")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityIdentity']:
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def trust(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityTrust']:
        return pulumi.get(self, "trust")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthority(dict):
    def __init__(__self__, *,
                 custom: Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom'] = None,
                 istiod: Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod'] = None,
                 type: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if istiod is not None:
            pulumi.set(__self__, "istiod", istiod)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def custom(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom']:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def istiod(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod']:
        return pulumi.get(self, "istiod")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityCustom(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiod(dict):
    def __init__(__self__, *,
                 private_key: Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey'] = None,
                 self_signed: Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned'] = None,
                 type: Optional[str] = None,
                 workload_cert_ttl_default: Optional[str] = None,
                 workload_cert_ttl_max: Optional[str] = None):
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workload_cert_ttl_default is not None:
            pulumi.set(__self__, "workload_cert_ttl_default", workload_cert_ttl_default)
        if workload_cert_ttl_max is not None:
            pulumi.set(__self__, "workload_cert_ttl_max", workload_cert_ttl_max)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey']:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned']:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workloadCertTTLDefault")
    def workload_cert_ttl_default(self) -> Optional[str]:
        return pulumi.get(self, "workload_cert_ttl_default")

    @property
    @pulumi.getter(name="workloadCertTTLMax")
    def workload_cert_ttl_max(self) -> Optional[str]:
        return pulumi.get(self, "workload_cert_ttl_max")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodPrivateKey(dict):
    def __init__(__self__, *,
                 root_ca_dir: Optional[str] = None):
        if root_ca_dir is not None:
            pulumi.set(__self__, "root_ca_dir", root_ca_dir)

    @property
    @pulumi.getter(name="rootCADir")
    def root_ca_dir(self) -> Optional[str]:
        return pulumi.get(self, "root_ca_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityCertificateAuthorityIstiodSelfSigned(dict):
    def __init__(__self__, *,
                 check_period: Optional[str] = None,
                 enable_jitter: Optional[bool] = None,
                 grace_period: Optional[str] = None,
                 ttl: Optional[str] = None):
        if check_period is not None:
            pulumi.set(__self__, "check_period", check_period)
        if enable_jitter is not None:
            pulumi.set(__self__, "enable_jitter", enable_jitter)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> Optional[str]:
        return pulumi.get(self, "check_period")

    @property
    @pulumi.getter(name="enableJitter")
    def enable_jitter(self) -> Optional[bool]:
        return pulumi.get(self, "enable_jitter")

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[str]:
        return pulumi.get(self, "grace_period")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityControlPlane(dict):
    def __init__(__self__, *,
                 cert_provider: Optional[str] = None,
                 mtls: Optional[bool] = None,
                 tls: Optional['outputs.ServiceMeshControlPlaneSpecSecurityControlPlaneTls'] = None):
        if cert_provider is not None:
            pulumi.set(__self__, "cert_provider", cert_provider)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="certProvider")
    def cert_provider(self) -> Optional[str]:
        return pulumi.get(self, "cert_provider")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[bool]:
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityControlPlaneTls']:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityControlPlaneTls(dict):
    def __init__(__self__, *,
                 cipher_suites: Optional[Sequence[str]] = None,
                 ecdh_curves: Optional[Sequence[str]] = None,
                 max_protocol_version: Optional[str] = None,
                 min_protocol_version: Optional[str] = None):
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if ecdh_curves is not None:
            pulumi.set(__self__, "ecdh_curves", ecdh_curves)
        if max_protocol_version is not None:
            pulumi.set(__self__, "max_protocol_version", max_protocol_version)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cipher_suites")

    @property
    @pulumi.getter(name="ecdhCurves")
    def ecdh_curves(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ecdh_curves")

    @property
    @pulumi.getter(name="maxProtocolVersion")
    def max_protocol_version(self) -> Optional[str]:
        return pulumi.get(self, "max_protocol_version")

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[str]:
        return pulumi.get(self, "min_protocol_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityDataPlane(dict):
    def __init__(__self__, *,
                 automtls: Optional[bool] = None,
                 mtls: Optional[bool] = None):
        if automtls is not None:
            pulumi.set(__self__, "automtls", automtls)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)

    @property
    @pulumi.getter
    def automtls(self) -> Optional[bool]:
        return pulumi.get(self, "automtls")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[bool]:
        return pulumi.get(self, "mtls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityIdentity(dict):
    def __init__(__self__, *,
                 third_party: Optional['outputs.ServiceMeshControlPlaneSpecSecurityIdentityThirdParty'] = None,
                 type: Optional[str] = None):
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional['outputs.ServiceMeshControlPlaneSpecSecurityIdentityThirdParty']:
        return pulumi.get(self, "third_party")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityIdentityThirdParty(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 issuer: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecSecurityTrust(dict):
    def __init__(__self__, *,
                 additional_domains: Optional[Sequence[str]] = None,
                 domain: Optional[str] = None):
        if additional_domains is not None:
            pulumi.set(__self__, "additional_domains", additional_domains)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="additionalDomains")
    def additional_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "additional_domains")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetry(dict):
    def __init__(__self__, *,
                 mixer: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixer'] = None,
                 remote: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryRemote'] = None,
                 type: Optional[str] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixer']:
        return pulumi.get(self, "mixer")

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryRemote']:
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryMixer(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerAdapters'] = None,
                 batching: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerBatching'] = None,
                 loadshedding: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding'] = None,
                 session_affinity: Optional[bool] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if loadshedding is not None:
            pulumi.set(__self__, "loadshedding", loadshedding)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerBatching']:
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter
    def loadshedding(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding']:
        return pulumi.get(self, "loadshedding")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[bool]:
        return pulumi.get(self, "session_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryMixerAdapters(dict):
    def __init__(__self__, *,
                 kubernetesenv: Optional[bool] = None,
                 stdio: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio'] = None,
                 use_adapter_crds: Optional[bool] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if stdio is not None:
            pulumi.set(__self__, "stdio", stdio)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[bool]:
        return pulumi.get(self, "kubernetesenv")

    @property
    @pulumi.getter
    def stdio(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio']:
        return pulumi.get(self, "stdio")

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[bool]:
        return pulumi.get(self, "use_adapter_crds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryMixerAdaptersStdio(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 output_as_json: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if output_as_json is not None:
            pulumi.set(__self__, "output_as_json", output_as_json)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="outputAsJSON")
    def output_as_json(self) -> Optional[bool]:
        return pulumi.get(self, "output_as_json")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryMixerBatching(dict):
    def __init__(__self__, *,
                 max_entries: Optional[int] = None,
                 max_time: Optional[str] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[int]:
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[str]:
        return pulumi.get(self, "max_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryMixerLoadshedding(dict):
    def __init__(__self__, *,
                 latency_threshold: Optional[str] = None,
                 mode: Optional[str] = None):
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[str]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryRemote(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 batching: Optional['outputs.ServiceMeshControlPlaneSpecTelemetryRemoteBatching'] = None,
                 create_service: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.ServiceMeshControlPlaneSpecTelemetryRemoteBatching']:
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTelemetryRemoteBatching(dict):
    def __init__(__self__, *,
                 max_entries: Optional[int] = None,
                 max_time: Optional[str] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[int]:
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[str]:
        return pulumi.get(self, "max_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneSpecTracing(dict):
    def __init__(__self__, *,
                 sampling: Optional[int] = None,
                 type: Optional[str] = None):
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[int]:
        return pulumi.get(self, "sampling")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatus(dict):
    def __init__(__self__, *,
                 readiness: 'outputs.ServiceMeshControlPlaneStatusReadiness',
                 annotations: Optional[Mapping[str, str]] = None,
                 applied_spec: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpec'] = None,
                 applied_values: Optional['outputs.ServiceMeshControlPlaneStatusAppliedValues'] = None,
                 chart_version: Optional[str] = None,
                 components: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponents']] = None,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusConditions']] = None,
                 observed_generation: Optional[int] = None,
                 operator_version: Optional[str] = None):
        pulumi.set(__self__, "readiness", readiness)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if applied_spec is not None:
            pulumi.set(__self__, "applied_spec", applied_spec)
        if applied_values is not None:
            pulumi.set(__self__, "applied_values", applied_values)
        if chart_version is not None:
            pulumi.set(__self__, "chart_version", chart_version)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if operator_version is not None:
            pulumi.set(__self__, "operator_version", operator_version)

    @property
    @pulumi.getter
    def readiness(self) -> 'outputs.ServiceMeshControlPlaneStatusReadiness':
        return pulumi.get(self, "readiness")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="appliedSpec")
    def applied_spec(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpec']:
        return pulumi.get(self, "applied_spec")

    @property
    @pulumi.getter(name="appliedValues")
    def applied_values(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedValues']:
        return pulumi.get(self, "applied_values")

    @property
    @pulumi.getter(name="chartVersion")
    def chart_version(self) -> Optional[str]:
        return pulumi.get(self, "chart_version")

    @property
    @pulumi.getter
    def components(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponents']]:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="operatorVersion")
    def operator_version(self) -> Optional[str]:
        return pulumi.get(self, "operator_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpec(dict):
    def __init__(__self__, *,
                 addons: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons'] = None,
                 cluster: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecCluster'] = None,
                 gateways: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGateways'] = None,
                 general: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGeneral'] = None,
                 policy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicy'] = None,
                 profiles: Optional[Sequence[str]] = None,
                 proxy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxy'] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntime'] = None,
                 security: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurity'] = None,
                 tech_preview: Optional[Mapping[str, Any]] = None,
                 telemetry: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetry'] = None,
                 tracing: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTracing'] = None,
                 version: Optional[str] = None):
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if general is not None:
            pulumi.set(__self__, "general", general)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if tech_preview is not None:
            pulumi.set(__self__, "tech_preview", tech_preview)
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def addons(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons']:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecCluster']:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def gateways(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGateways']:
        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter
    def general(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGeneral']:
        return pulumi.get(self, "general")

    @property
    @pulumi.getter
    def policy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicy']:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxy']:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="techPreview")
    def tech_preview(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tech_preview")

    @property
    @pulumi.getter
    def telemetry(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetry']:
        return pulumi.get(self, "telemetry")

    @property
    @pulumi.getter
    def tracing(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTracing']:
        return pulumi.get(self, "tracing")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons(dict):
    def __init__(__self__, *,
                 _3scale: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scale'] = None,
                 grafana: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana'] = None,
                 jaeger: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger'] = None,
                 kiali: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali'] = None,
                 prometheus: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus'] = None,
                 stackdriver: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver'] = None):
        if _3scale is not None:
            pulumi.set(__self__, "_3scale", _3scale)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kiali is not None:
            pulumi.set(__self__, "kiali", kiali)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if stackdriver is not None:
            pulumi.set(__self__, "stackdriver", stackdriver)

    @property
    @pulumi.getter(name="3scale")
    def _3scale(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scale']:
        return pulumi.get(self, "_3scale")

    @property
    @pulumi.getter
    def grafana(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana']:
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter
    def jaeger(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger']:
        return pulumi.get(self, "jaeger")

    @property
    @pulumi.getter
    def kiali(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali']:
        return pulumi.get(self, "kiali")

    @property
    @pulumi.getter
    def prometheus(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus']:
        return pulumi.get(self, "prometheus")

    @property
    @pulumi.getter
    def stackdriver(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver']:
        return pulumi.get(self, "stackdriver")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scale(dict):
    def __init__(__self__, *,
                 backend: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend'] = None,
                 client: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient'] = None,
                 enabled: Optional[bool] = None,
                 grpc: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc'] = None,
                 listen_addr: Optional[int] = None,
                 log_grpc: Optional[bool] = None,
                 log_json: Optional[bool] = None,
                 log_level: Optional[str] = None,
                 metrics: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics'] = None,
                 system: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem'] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if client is not None:
            pulumi.set(__self__, "client", client)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if listen_addr is not None:
            pulumi.set(__self__, "listen_addr", listen_addr)
        if log_grpc is not None:
            pulumi.set(__self__, "log_grpc", log_grpc)
        if log_json is not None:
            pulumi.set(__self__, "log_json", log_json)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def backend(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend']:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def client(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient']:
        return pulumi.get(self, "client")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def grpc(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc']:
        return pulumi.get(self, "grpc")

    @property
    @pulumi.getter
    def listen_addr(self) -> Optional[int]:
        return pulumi.get(self, "listen_addr")

    @property
    @pulumi.getter
    def log_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "log_grpc")

    @property
    @pulumi.getter
    def log_json(self) -> Optional[bool]:
        return pulumi.get(self, "log_json")

    @property
    @pulumi.getter
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics']:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def system(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem']:
        return pulumi.get(self, "system")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleBackend(dict):
    def __init__(__self__, *,
                 cache_flush_interval: Optional[int] = None,
                 enable_cache: Optional[bool] = None,
                 policy_fail_closed: Optional[bool] = None):
        if cache_flush_interval is not None:
            pulumi.set(__self__, "cache_flush_interval", cache_flush_interval)
        if enable_cache is not None:
            pulumi.set(__self__, "enable_cache", enable_cache)
        if policy_fail_closed is not None:
            pulumi.set(__self__, "policy_fail_closed", policy_fail_closed)

    @property
    @pulumi.getter
    def cache_flush_interval(self) -> Optional[int]:
        return pulumi.get(self, "cache_flush_interval")

    @property
    @pulumi.getter
    def enable_cache(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cache")

    @property
    @pulumi.getter
    def policy_fail_closed(self) -> Optional[bool]:
        return pulumi.get(self, "policy_fail_closed")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleClient(dict):
    def __init__(__self__, *,
                 allow_insecure_connections: Optional[bool] = None,
                 timeout: Optional[int] = None):
        if allow_insecure_connections is not None:
            pulumi.set(__self__, "allow_insecure_connections", allow_insecure_connections)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def allow_insecure_connections(self) -> Optional[bool]:
        return pulumi.get(self, "allow_insecure_connections")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleGrpc(dict):
    def __init__(__self__, *,
                 max_conn_timeout: Optional[int] = None):
        if max_conn_timeout is not None:
            pulumi.set(__self__, "max_conn_timeout", max_conn_timeout)

    @property
    @pulumi.getter
    def max_conn_timeout(self) -> Optional[int]:
        return pulumi.get(self, "max_conn_timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleMetrics(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 report: Optional[bool] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def report(self) -> Optional[bool]:
        return pulumi.get(self, "report")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddons3scaleSystem(dict):
    def __init__(__self__, *,
                 cache_max_size: Optional[int] = None,
                 cache_refresh_interval: Optional[int] = None,
                 cache_refresh_retries: Optional[int] = None,
                 cache_ttl: Optional[int] = None):
        if cache_max_size is not None:
            pulumi.set(__self__, "cache_max_size", cache_max_size)
        if cache_refresh_interval is not None:
            pulumi.set(__self__, "cache_refresh_interval", cache_refresh_interval)
        if cache_refresh_retries is not None:
            pulumi.set(__self__, "cache_refresh_retries", cache_refresh_retries)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)

    @property
    @pulumi.getter
    def cache_max_size(self) -> Optional[int]:
        return pulumi.get(self, "cache_max_size")

    @property
    @pulumi.getter
    def cache_refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_interval")

    @property
    @pulumi.getter
    def cache_refresh_retries(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_retries")

    @property
    @pulumi.getter
    def cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "cache_ttl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafana(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall']:
        return pulumi.get(self, "install")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstall(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig'] = None,
                 persistence: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence'] = None,
                 security: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity'] = None,
                 self_managed: Optional[bool] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence']:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity']:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[bool]:
        return pulumi.get(self, "self_managed")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService']:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallConfig(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 env_secrets: Optional[Mapping[str, str]] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env_secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistence(dict):
    def __init__(__self__, *,
                 access_mode: Optional[str] = None,
                 capacity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity'] = None,
                 enabled: Optional[bool] = None,
                 storage_class_name: Optional[str] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[str]:
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity']:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacity(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallPersistenceCapacityRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallSecurity(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 passphrase_key: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 username_key: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if passphrase_key is not None:
            pulumi.set(__self__, "passphrase_key", passphrase_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="passphraseKey")
    def passphrase_key(self) -> Optional[str]:
        return pulumi.get(self, "passphrase_key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[str]:
        return pulumi.get(self, "username_key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsGrafanaInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaeger(dict):
    def __init__(__self__, *,
                 install: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall'] = None,
                 name: Optional[str] = None):
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstall(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress'] = None,
                 storage: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage'] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage']:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata']:
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorage(dict):
    def __init__(__self__, *,
                 elasticsearch: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch'] = None,
                 memory: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory'] = None,
                 type: Optional[str] = None):
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch']:
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter
    def memory(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory']:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageElasticsearch(dict):
    def __init__(__self__, *,
                 index_cleaner: Optional[Mapping[str, Any]] = None,
                 node_count: Optional[int] = None,
                 redundancy_policy: Optional[str] = None,
                 storage: Optional[Mapping[str, Any]] = None):
        if index_cleaner is not None:
            pulumi.set(__self__, "index_cleaner", index_cleaner)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if redundancy_policy is not None:
            pulumi.set(__self__, "redundancy_policy", redundancy_policy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="indexCleaner")
    def index_cleaner(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "index_cleaner")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="redundancyPolicy")
    def redundancy_policy(self) -> Optional[str]:
        return pulumi.get(self, "redundancy_policy")

    @property
    @pulumi.getter
    def storage(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsJaegerInstallStorageMemory(dict):
    def __init__(__self__, *,
                 max_traces: Optional[int] = None):
        if max_traces is not None:
            pulumi.set(__self__, "max_traces", max_traces)

    @property
    @pulumi.getter(name="maxTraces")
    def max_traces(self) -> Optional[int]:
        return pulumi.get(self, "max_traces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKiali(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall'] = None,
                 name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstall(dict):
    def __init__(__self__, *,
                 dashboard: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService'] = None):
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard']:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService']:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallDashboard(dict):
    def __init__(__self__, *,
                 enable_grafana: Optional[bool] = None,
                 enable_prometheus: Optional[bool] = None,
                 enable_tracing: Optional[bool] = None,
                 view_only: Optional[bool] = None):
        if enable_grafana is not None:
            pulumi.set(__self__, "enable_grafana", enable_grafana)
        if enable_prometheus is not None:
            pulumi.set(__self__, "enable_prometheus", enable_prometheus)
        if enable_tracing is not None:
            pulumi.set(__self__, "enable_tracing", enable_tracing)
        if view_only is not None:
            pulumi.set(__self__, "view_only", view_only)

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> Optional[bool]:
        return pulumi.get(self, "enable_grafana")

    @property
    @pulumi.getter(name="enablePrometheus")
    def enable_prometheus(self) -> Optional[bool]:
        return pulumi.get(self, "enable_prometheus")

    @property
    @pulumi.getter(name="enableTracing")
    def enable_tracing(self) -> Optional[bool]:
        return pulumi.get(self, "enable_tracing")

    @property
    @pulumi.getter(name="viewOnly")
    def view_only(self) -> Optional[bool]:
        return pulumi.get(self, "view_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsKialiInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheus(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 install: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall'] = None,
                 metrics_expiry_duration: Optional[str] = None,
                 scrape: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if install is not None:
            pulumi.set(__self__, "install", install)
        if metrics_expiry_duration is not None:
            pulumi.set(__self__, "metrics_expiry_duration", metrics_expiry_duration)
        if scrape is not None:
            pulumi.set(__self__, "scrape", scrape)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def install(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall']:
        return pulumi.get(self, "install")

    @property
    @pulumi.getter(name="metricsExpiryDuration")
    def metrics_expiry_duration(self) -> Optional[str]:
        return pulumi.get(self, "metrics_expiry_duration")

    @property
    @pulumi.getter
    def scrape(self) -> Optional[bool]:
        return pulumi.get(self, "scrape")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstall(dict):
    def __init__(__self__, *,
                 retention: Optional[str] = None,
                 scrape_interval: Optional[str] = None,
                 self_managed: Optional[bool] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService'] = None,
                 use_tls: Optional[bool] = None):
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if scrape_interval is not None:
            pulumi.set(__self__, "scrape_interval", scrape_interval)
        if self_managed is not None:
            pulumi.set(__self__, "self_managed", self_managed)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def retention(self) -> Optional[str]:
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> Optional[str]:
        return pulumi.get(self, "scrape_interval")

    @property
    @pulumi.getter(name="selfManaged")
    def self_managed(self) -> Optional[bool]:
        return pulumi.get(self, "self_managed")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="useTLS")
    def use_tls(self) -> Optional[bool]:
        return pulumi.get(self, "use_tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallService(dict):
    def __init__(__self__, *,
                 ingress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata'] = None,
                 node_port: Optional[int] = None):
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngress(dict):
    def __init__(__self__, *,
                 context_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hosts: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata'] = None,
                 tls: Optional[Mapping[str, Any]] = None):
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceIngressMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsPrometheusInstallServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriver(dict):
    def __init__(__self__, *,
                 telemetry: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry'] = None,
                 tracer: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer'] = None):
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)
        if tracer is not None:
            pulumi.set(__self__, "tracer", tracer)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry']:
        return pulumi.get(self, "telemetry")

    @property
    @pulumi.getter
    def tracer(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer']:
        return pulumi.get(self, "tracer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetry(dict):
    def __init__(__self__, *,
                 access_logging: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging'] = None,
                 auth: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth'] = None,
                 config_override: Optional[Mapping[str, Any]] = None,
                 enable_context_graph: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 enable_metrics: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enable_context_graph is not None:
            pulumi.set(__self__, "enable_context_graph", enable_context_graph)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if enable_metrics is not None:
            pulumi.set(__self__, "enable_metrics", enable_metrics)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging']:
        return pulumi.get(self, "access_logging")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth']:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter(name="enableContextGraph")
    def enable_context_graph(self) -> Optional[bool]:
        return pulumi.get(self, "enable_context_graph")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="enableMetrics")
    def enable_metrics(self) -> Optional[bool]:
        return pulumi.get(self, "enable_metrics")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAccessLogging(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 log_window_duration: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_window_duration is not None:
            pulumi.set(__self__, "log_window_duration", log_window_duration)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logWindowDuration")
    def log_window_duration(self) -> Optional[str]:
        return pulumi.get(self, "log_window_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTelemetryAuth(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 app_credentials: Optional[bool] = None,
                 service_account_path: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_credentials is not None:
            pulumi.set(__self__, "app_credentials", app_credentials)
        if service_account_path is not None:
            pulumi.set(__self__, "service_account_path", service_account_path)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appCredentials")
    def app_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "app_credentials")

    @property
    @pulumi.getter(name="serviceAccountPath")
    def service_account_path(self) -> Optional[str]:
        return pulumi.get(self, "service_account_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecAddonsStackdriverTracer(dict):
    def __init__(__self__, *,
                 debug: Optional[bool] = None,
                 max_number_of_annotations: Optional[int] = None,
                 max_number_of_attributes: Optional[int] = None,
                 max_number_of_message_events: Optional[int] = None):
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if max_number_of_annotations is not None:
            pulumi.set(__self__, "max_number_of_annotations", max_number_of_annotations)
        if max_number_of_attributes is not None:
            pulumi.set(__self__, "max_number_of_attributes", max_number_of_attributes)
        if max_number_of_message_events is not None:
            pulumi.set(__self__, "max_number_of_message_events", max_number_of_message_events)

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="maxNumberOfAnnotations")
    def max_number_of_annotations(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_annotations")

    @property
    @pulumi.getter(name="maxNumberOfAttributes")
    def max_number_of_attributes(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_attributes")

    @property
    @pulumi.getter(name="maxNumberOfMessageEvents")
    def max_number_of_message_events(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_message_events")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecCluster(dict):
    def __init__(__self__, *,
                 mesh_expansion: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion'] = None,
                 multi_cluster: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster'] = None,
                 name: Optional[str] = None,
                 network: Optional[str] = None):
        if mesh_expansion is not None:
            pulumi.set(__self__, "mesh_expansion", mesh_expansion)
        if multi_cluster is not None:
            pulumi.set(__self__, "multi_cluster", multi_cluster)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="meshExpansion")
    def mesh_expansion(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion']:
        return pulumi.get(self, "mesh_expansion")

    @property
    @pulumi.getter(name="multiCluster")
    def multi_cluster(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster']:
        return pulumi.get(self, "multi_cluster")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansion(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ilb_gateway: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ilb_gateway is not None:
            pulumi.set(__self__, "ilb_gateway", ilb_gateway)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ilbGateway")
    def ilb_gateway(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway']:
        return pulumi.get(self, "ilb_gateway")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGateway(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMeshExpansionIlbGatewayVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiCluster(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mesh_networks: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mesh_networks is not None:
            pulumi.set(__self__, "mesh_networks", mesh_networks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="meshNetworks")
    def mesh_networks(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks']]:
        return pulumi.get(self, "mesh_networks")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworks(dict):
    def __init__(__self__, *,
                 endpoints: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints']] = None,
                 gateways: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways']] = None):
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def gateways(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways']]:
        return pulumi.get(self, "gateways")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksEndpoints(dict):
    def __init__(__self__, *,
                 from_cidr: Optional[str] = None,
                 from_registry: Optional[str] = None):
        if from_cidr is not None:
            pulumi.set(__self__, "from_cidr", from_cidr)
        if from_registry is not None:
            pulumi.set(__self__, "from_registry", from_registry)

    @property
    @pulumi.getter(name="fromCIDR")
    def from_cidr(self) -> Optional[str]:
        return pulumi.get(self, "from_cidr")

    @property
    @pulumi.getter(name="fromRegistry")
    def from_registry(self) -> Optional[str]:
        return pulumi.get(self, "from_registry")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecClusterMultiClusterMeshNetworksGateways(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 service: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGateways(dict):
    def __init__(__self__, *,
                 additional_egress: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress']] = None,
                 additional_ingress: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress']] = None,
                 egress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress'] = None,
                 enabled: Optional[bool] = None,
                 ingress: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress'] = None,
                 openshift_route: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute'] = None):
        if additional_egress is not None:
            pulumi.set(__self__, "additional_egress", additional_egress)
        if additional_ingress is not None:
            pulumi.set(__self__, "additional_ingress", additional_ingress)
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if openshift_route is not None:
            pulumi.set(__self__, "openshift_route", openshift_route)

    @property
    @pulumi.getter(name="additionalEgress")
    def additional_egress(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress']]:
        return pulumi.get(self, "additional_egress")

    @property
    @pulumi.getter(name="additionalIngress")
    def additional_ingress(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress']]:
        return pulumi.get(self, "additional_ingress")

    @property
    @pulumi.getter
    def egress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress']:
        return pulumi.get(self, "egress")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress']:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="openshiftRoute")
    def openshift_route(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute']:
        return pulumi.get(self, "openshift_route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 requested_network_view: Optional[Sequence[str]] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "requested_network_view")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalEgressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime'] = None,
                 sds: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def sds(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds']:
        return pulumi.get(self, "sds")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSds(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressSdsRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysAdditionalIngressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 requested_network_view: Optional[Sequence[str]] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requested_network_view is not None:
            pulumi.set(__self__, "requested_network_view", requested_network_view)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requestedNetworkView")
    def requested_network_view(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "requested_network_view")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysEgressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ingress: Optional[bool] = None,
                 mesh_expansion_ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts']] = None,
                 namespace: Optional[str] = None,
                 router_mode: Optional[str] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime'] = None,
                 sds: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds'] = None,
                 service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService'] = None,
                 volumes: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if mesh_expansion_ports is not None:
            pulumi.set(__self__, "mesh_expansion_ports", mesh_expansion_ports)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if router_mode is not None:
            pulumi.set(__self__, "router_mode", router_mode)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if sds is not None:
            pulumi.set(__self__, "sds", sds)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ingress(self) -> Optional[bool]:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="meshExpansionPorts")
    def mesh_expansion_ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts']]:
        return pulumi.get(self, "mesh_expansion_ports")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="routerMode")
    def router_mode(self) -> Optional[str]:
        return pulumi.get(self, "router_mode")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime']:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def sds(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds']:
        return pulumi.get(self, "sds")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService']:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressMeshExpansionPortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimeDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressRuntimePodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSds(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressSdsRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressService(dict):
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata'] = None,
                 ports: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig']:
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePorts(dict):
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort'] = None):
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort']:
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServicePortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfig(dict):
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP'] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP']:
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressServiceSessionAffinityConfigClientIP(dict):
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumes(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume'] = None,
                 volume_mount: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mount is not None:
            pulumi.set(__self__, "volume_mount", volume_mount)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume']:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="volumeMount")
    def volume_mount(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount']:
        return pulumi.get(self, "volume_mount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolume(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap'] = None,
                 secret: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret']:
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeMount(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysIngressVolumesVolumeSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGatewaysOpenshiftRoute(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGeneral(dict):
    def __init__(__self__, *,
                 logging: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging'] = None,
                 validation_messages: Optional[bool] = None):
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if validation_messages is not None:
            pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Optional[bool]:
        return pulumi.get(self, "validation_messages")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecGeneralLogging(dict):
    def __init__(__self__, *,
                 component_levels: Optional[Mapping[str, str]] = None,
                 log_as_json: Optional[bool] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if log_as_json is not None:
            pulumi.set(__self__, "log_as_json", log_as_json)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "component_levels")

    @property
    @pulumi.getter(name="logAsJSON")
    def log_as_json(self) -> Optional[bool]:
        return pulumi.get(self, "log_as_json")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicy(dict):
    def __init__(__self__, *,
                 mixer: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer'] = None,
                 remote: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote'] = None,
                 type: Optional[str] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer']:
        return pulumi.get(self, "mixer")

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote']:
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyMixer(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters'] = None,
                 enable_checks: Optional[bool] = None,
                 fail_open: Optional[bool] = None,
                 session_affinity: Optional[bool] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[bool]:
        return pulumi.get(self, "enable_checks")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[bool]:
        return pulumi.get(self, "fail_open")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[bool]:
        return pulumi.get(self, "session_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyMixerAdapters(dict):
    def __init__(__self__, *,
                 kubernetesenv: Optional[bool] = None,
                 use_adapter_crds: Optional[bool] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[bool]:
        return pulumi.get(self, "kubernetesenv")

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[bool]:
        return pulumi.get(self, "use_adapter_crds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecPolicyRemote(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 create_service: Optional[bool] = None,
                 enable_checks: Optional[bool] = None,
                 fail_open: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)
        if enable_checks is not None:
            pulumi.set(__self__, "enable_checks", enable_checks)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_service")

    @property
    @pulumi.getter(name="enableChecks")
    def enable_checks(self) -> Optional[bool]:
        return pulumi.get(self, "enable_checks")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[bool]:
        return pulumi.get(self, "fail_open")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxy(dict):
    def __init__(__self__, *,
                 access_logging: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging'] = None,
                 admin_port: Optional[int] = None,
                 concurrency: Optional[int] = None,
                 envoy_metrics_service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService'] = None,
                 injection: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjection'] = None,
                 logging: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyLogging'] = None,
                 networking: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking'] = None,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime'] = None):
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if envoy_metrics_service is not None:
            pulumi.set(__self__, "envoy_metrics_service", envoy_metrics_service)
        if injection is not None:
            pulumi.set(__self__, "injection", injection)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging']:
        return pulumi.get(self, "access_logging")

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[int]:
        return pulumi.get(self, "admin_port")

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[int]:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="envoyMetricsService")
    def envoy_metrics_service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService']:
        return pulumi.get(self, "envoy_metrics_service")

    @property
    @pulumi.getter
    def injection(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjection']:
        return pulumi.get(self, "injection")

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyLogging']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def networking(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking']:
        return pulumi.get(self, "networking")

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLogging(dict):
    def __init__(__self__, *,
                 envoy_service: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService'] = None,
                 file: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile'] = None):
        if envoy_service is not None:
            pulumi.set(__self__, "envoy_service", envoy_service)
        if file is not None:
            pulumi.set(__self__, "file", file)

    @property
    @pulumi.getter(name="envoyService")
    def envoy_service(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService']:
        return pulumi.get(self, "envoy_service")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile']:
        return pulumi.get(self, "file")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyService(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 tcp_keepalive: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive'] = None,
                 tls_settings: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive']:
        return pulumi.get(self, "tcp_keepalive")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings']:
        return pulumi.get(self, "tls_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTcpKeepalive(dict):
    def __init__(__self__, *,
                 interval: Optional[str] = None,
                 probes: Optional[int] = None,
                 time: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def probes(self) -> Optional[int]:
        return pulumi.get(self, "probes")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingEnvoyServiceTlsSettings(dict):
    def __init__(__self__, *,
                 ca_certificates: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 mode: Optional[str] = None,
                 private_key: Optional[str] = None,
                 sni: Optional[str] = None,
                 subject_alt_names: Optional[Sequence[str]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyAccessLoggingFile(dict):
    def __init__(__self__, *,
                 encoding: Optional[str] = None,
                 format: Optional[str] = None,
                 name: Optional[str] = None):
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsService(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 tcp_keepalive: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive'] = None,
                 tls_settings: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings'] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tcp_keepalive is not None:
            pulumi.set(__self__, "tcp_keepalive", tcp_keepalive)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="tcpKeepalive")
    def tcp_keepalive(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive']:
        return pulumi.get(self, "tcp_keepalive")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings']:
        return pulumi.get(self, "tls_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTcpKeepalive(dict):
    def __init__(__self__, *,
                 interval: Optional[str] = None,
                 probes: Optional[int] = None,
                 time: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probes is not None:
            pulumi.set(__self__, "probes", probes)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def probes(self) -> Optional[int]:
        return pulumi.get(self, "probes")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyEnvoyMetricsServiceTlsSettings(dict):
    def __init__(__self__, *,
                 ca_certificates: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 mode: Optional[str] = None,
                 private_key: Optional[str] = None,
                 sni: Optional[str] = None,
                 subject_alt_names: Optional[Sequence[str]] = None):
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjection(dict):
    def __init__(__self__, *,
                 always_inject_selector: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector']] = None,
                 auto_inject: Optional[bool] = None,
                 injected_annotations: Optional[Mapping[str, str]] = None,
                 never_inject_selector: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector']] = None):
        if always_inject_selector is not None:
            pulumi.set(__self__, "always_inject_selector", always_inject_selector)
        if auto_inject is not None:
            pulumi.set(__self__, "auto_inject", auto_inject)
        if injected_annotations is not None:
            pulumi.set(__self__, "injected_annotations", injected_annotations)
        if never_inject_selector is not None:
            pulumi.set(__self__, "never_inject_selector", never_inject_selector)

    @property
    @pulumi.getter(name="alwaysInjectSelector")
    def always_inject_selector(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector']]:
        return pulumi.get(self, "always_inject_selector")

    @property
    @pulumi.getter(name="autoInject")
    def auto_inject(self) -> Optional[bool]:
        return pulumi.get(self, "auto_inject")

    @property
    @pulumi.getter(name="injectedAnnotations")
    def injected_annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "injected_annotations")

    @property
    @pulumi.getter(name="neverInjectSelector")
    def never_inject_selector(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector']]:
        return pulumi.get(self, "never_inject_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionAlwaysInjectSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyInjectionNeverInjectSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyLogging(dict):
    def __init__(__self__, *,
                 component_levels: Optional[Mapping[str, str]] = None,
                 level: Optional[str] = None):
        if component_levels is not None:
            pulumi.set(__self__, "component_levels", component_levels)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="componentLevels")
    def component_levels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "component_levels")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworking(dict):
    def __init__(__self__, *,
                 cluster_domain: Optional[str] = None,
                 connection_timeout: Optional[str] = None,
                 dns: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns'] = None,
                 initialization: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization'] = None,
                 max_connection_age: Optional[str] = None,
                 protocol: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol'] = None,
                 traffic_control: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl'] = None):
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if max_connection_age is not None:
            pulumi.set(__self__, "max_connection_age", max_connection_age)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if traffic_control is not None:
            pulumi.set(__self__, "traffic_control", traffic_control)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[str]:
        return pulumi.get(self, "cluster_domain")

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter
    def dns(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns']:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def initialization(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization']:
        return pulumi.get(self, "initialization")

    @property
    @pulumi.getter(name="maxConnectionAge")
    def max_connection_age(self) -> Optional[str]:
        return pulumi.get(self, "max_connection_age")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol']:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="trafficControl")
    def traffic_control(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl']:
        return pulumi.get(self, "traffic_control")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingDns(dict):
    def __init__(__self__, *,
                 refresh_rate: Optional[str] = None,
                 search_suffixes: Optional[Sequence[str]] = None):
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if search_suffixes is not None:
            pulumi.set(__self__, "search_suffixes", search_suffixes)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="searchSuffixes")
    def search_suffixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "search_suffixes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitialization(dict):
    def __init__(__self__, *,
                 init_container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer'] = None,
                 type: Optional[str] = None):
        if init_container is not None:
            pulumi.set(__self__, "init_container", init_container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="initContainer")
    def init_container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer']:
        return pulumi.get(self, "init_container")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainer(dict):
    def __init__(__self__, *,
                 runtime: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime'] = None):
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter
    def runtime(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime']:
        return pulumi.get(self, "runtime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntime(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingInitializationInitContainerRuntimeResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocol(dict):
    def __init__(__self__, *,
                 auto_detect: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect'] = None):
        if auto_detect is not None:
            pulumi.set(__self__, "auto_detect", auto_detect)

    @property
    @pulumi.getter(name="autoDetect")
    def auto_detect(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect']:
        return pulumi.get(self, "auto_detect")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingProtocolAutoDetect(dict):
    def __init__(__self__, *,
                 inbound: Optional[bool] = None,
                 outbound: Optional[bool] = None,
                 timeout: Optional[str] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[bool]:
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter
    def outbound(self) -> Optional[bool]:
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControl(dict):
    def __init__(__self__, *,
                 inbound: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound'] = None,
                 outbound: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound'] = None):
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)

    @property
    @pulumi.getter
    def inbound(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound']:
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter
    def outbound(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound']:
        return pulumi.get(self, "outbound")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlInbound(dict):
    def __init__(__self__, *,
                 excluded_ports: Optional[Sequence[int]] = None,
                 included_ports: Optional[Sequence[str]] = None,
                 interception_mode: Optional[str] = None):
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ports is not None:
            pulumi.set(__self__, "included_ports", included_ports)
        if interception_mode is not None:
            pulumi.set(__self__, "interception_mode", interception_mode)

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "excluded_ports")

    @property
    @pulumi.getter(name="includedPorts")
    def included_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "included_ports")

    @property
    @pulumi.getter(name="interceptionMode")
    def interception_mode(self) -> Optional[str]:
        return pulumi.get(self, "interception_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyNetworkingTrafficControlOutbound(dict):
    def __init__(__self__, *,
                 excluded_ip_ranges: Optional[Sequence[str]] = None,
                 excluded_ports: Optional[Sequence[int]] = None,
                 included_ip_ranges: Optional[Sequence[str]] = None,
                 policy: Optional[str] = None):
        if excluded_ip_ranges is not None:
            pulumi.set(__self__, "excluded_ip_ranges", excluded_ip_ranges)
        if excluded_ports is not None:
            pulumi.set(__self__, "excluded_ports", excluded_ports)
        if included_ip_ranges is not None:
            pulumi.set(__self__, "included_ip_ranges", included_ip_ranges)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="excludedIPRanges")
    def excluded_ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_ip_ranges")

    @property
    @pulumi.getter(name="excludedPorts")
    def excluded_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "excluded_ports")

    @property
    @pulumi.getter(name="includedIPRanges")
    def included_ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "included_ip_ranges")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntime(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer'] = None,
                 readiness: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def readiness(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness']:
        return pulumi.get(self, "readiness")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecProxyRuntimeReadiness(dict):
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 rewrite_application_probes: Optional[bool] = None,
                 status_port: Optional[int] = None):
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if rewrite_application_probes is not None:
            pulumi.set(__self__, "rewrite_application_probes", rewrite_application_probes)
        if status_port is not None:
            pulumi.set(__self__, "status_port", status_port)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="rewriteApplicationProbes")
    def rewrite_application_probes(self) -> Optional[bool]:
        return pulumi.get(self, "rewrite_application_probes")

    @property
    @pulumi.getter(name="statusPort")
    def status_port(self) -> Optional[int]:
        return pulumi.get(self, "status_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntime(dict):
    def __init__(__self__, *,
                 components: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents']] = None,
                 defaults: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults'] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def components(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents']]:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def defaults(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults']:
        return pulumi.get(self, "defaults")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponents(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainer(dict):
    def __init__(__self__, *,
                 env: Optional[Mapping[str, str]] = None,
                 image_name: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources'] = None):
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeployment(dict):
    def __init__(__self__, *,
                 auto_scaling: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling'] = None,
                 replicas: Optional[int] = None,
                 strategy: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy'] = None):
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling']:
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentAutoScaling(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsDeploymentStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPod(dict):
    def __init__(__self__, *,
                 affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity'] = None,
                 metadata: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations']] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinity(dict):
    def __init__(__self__, *,
                 pod_anti_affinity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity'] = None):
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling']] = None,
                 required_during_scheduling: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling']] = None):
        if preferred_during_scheduling is not None:
            pulumi.set(__self__, "preferred_during_scheduling", preferred_during_scheduling)
        if required_during_scheduling is not None:
            pulumi.set(__self__, "required_during_scheduling", required_during_scheduling)

    @property
    @pulumi.getter(name="preferredDuringScheduling")
    def preferred_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling']]:
        return pulumi.get(self, "preferred_during_scheduling")

    @property
    @pulumi.getter(name="requiredDuringScheduling")
    def required_during_scheduling(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling']]:
        return pulumi.get(self, "required_during_scheduling")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityPreferredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodAffinityPodAntiAffinityRequiredDuringScheduling(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 topology_key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[str]:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeComponentsPodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaults(dict):
    def __init__(__self__, *,
                 container: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer'] = None,
                 deployment: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment'] = None,
                 pod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod'] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer']:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod']:
        return pulumi.get(self, "pod")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainer(dict):
    def __init__(__self__, *,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets']] = None,
                 image_registry: Optional[str] = None,
                 image_tag: Optional[str] = None,
                 resources: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources'] = None):
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if image_registry is not None:
            pulumi.set(__self__, "image_registry", image_registry)
        if image_tag is not None:
            pulumi.set(__self__, "image_tag", image_tag)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="imageRegistry")
    def image_registry(self) -> Optional[str]:
        return pulumi.get(self, "image_registry")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits']]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests']]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsContainerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeployment(dict):
    def __init__(__self__, *,
                 pod_disruption: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption'] = None):
        if pod_disruption is not None:
            pulumi.set(__self__, "pod_disruption", pod_disruption)

    @property
    @pulumi.getter(name="podDisruption")
    def pod_disruption(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption']:
        return pulumi.get(self, "pod_disruption")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruption(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_unavailable: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable'] = None,
                 min_available: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable']:
        return pulumi.get(self, "min_available")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsDeploymentPodDisruptionMinAvailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPod(dict):
    def __init__(__self__, *,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations']] = None):
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations']]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecRuntimeDefaultsPodTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurity(dict):
    def __init__(__self__, *,
                 certificate_authority: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority'] = None,
                 control_plane: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane'] = None,
                 data_plane: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane'] = None,
                 identity: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity'] = None,
                 trust: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust'] = None):
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if data_plane is not None:
            pulumi.set(__self__, "data_plane", data_plane)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority']:
        return pulumi.get(self, "certificate_authority")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane']:
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="dataPlane")
    def data_plane(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane']:
        return pulumi.get(self, "data_plane")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity']:
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def trust(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust']:
        return pulumi.get(self, "trust")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthority(dict):
    def __init__(__self__, *,
                 custom: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom'] = None,
                 istiod: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod'] = None,
                 type: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if istiod is not None:
            pulumi.set(__self__, "istiod", istiod)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def custom(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom']:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def istiod(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod']:
        return pulumi.get(self, "istiod")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityCustom(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiod(dict):
    def __init__(__self__, *,
                 private_key: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey'] = None,
                 self_signed: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned'] = None,
                 type: Optional[str] = None,
                 workload_cert_ttl_default: Optional[str] = None,
                 workload_cert_ttl_max: Optional[str] = None):
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workload_cert_ttl_default is not None:
            pulumi.set(__self__, "workload_cert_ttl_default", workload_cert_ttl_default)
        if workload_cert_ttl_max is not None:
            pulumi.set(__self__, "workload_cert_ttl_max", workload_cert_ttl_max)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey']:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned']:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workloadCertTTLDefault")
    def workload_cert_ttl_default(self) -> Optional[str]:
        return pulumi.get(self, "workload_cert_ttl_default")

    @property
    @pulumi.getter(name="workloadCertTTLMax")
    def workload_cert_ttl_max(self) -> Optional[str]:
        return pulumi.get(self, "workload_cert_ttl_max")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodPrivateKey(dict):
    def __init__(__self__, *,
                 root_ca_dir: Optional[str] = None):
        if root_ca_dir is not None:
            pulumi.set(__self__, "root_ca_dir", root_ca_dir)

    @property
    @pulumi.getter(name="rootCADir")
    def root_ca_dir(self) -> Optional[str]:
        return pulumi.get(self, "root_ca_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityCertificateAuthorityIstiodSelfSigned(dict):
    def __init__(__self__, *,
                 check_period: Optional[str] = None,
                 enable_jitter: Optional[bool] = None,
                 grace_period: Optional[str] = None,
                 ttl: Optional[str] = None):
        if check_period is not None:
            pulumi.set(__self__, "check_period", check_period)
        if enable_jitter is not None:
            pulumi.set(__self__, "enable_jitter", enable_jitter)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="checkPeriod")
    def check_period(self) -> Optional[str]:
        return pulumi.get(self, "check_period")

    @property
    @pulumi.getter(name="enableJitter")
    def enable_jitter(self) -> Optional[bool]:
        return pulumi.get(self, "enable_jitter")

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[str]:
        return pulumi.get(self, "grace_period")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlane(dict):
    def __init__(__self__, *,
                 cert_provider: Optional[str] = None,
                 mtls: Optional[bool] = None,
                 tls: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls'] = None):
        if cert_provider is not None:
            pulumi.set(__self__, "cert_provider", cert_provider)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="certProvider")
    def cert_provider(self) -> Optional[str]:
        return pulumi.get(self, "cert_provider")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[bool]:
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls']:
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityControlPlaneTls(dict):
    def __init__(__self__, *,
                 cipher_suites: Optional[Sequence[str]] = None,
                 ecdh_curves: Optional[Sequence[str]] = None,
                 max_protocol_version: Optional[str] = None,
                 min_protocol_version: Optional[str] = None):
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if ecdh_curves is not None:
            pulumi.set(__self__, "ecdh_curves", ecdh_curves)
        if max_protocol_version is not None:
            pulumi.set(__self__, "max_protocol_version", max_protocol_version)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cipher_suites")

    @property
    @pulumi.getter(name="ecdhCurves")
    def ecdh_curves(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ecdh_curves")

    @property
    @pulumi.getter(name="maxProtocolVersion")
    def max_protocol_version(self) -> Optional[str]:
        return pulumi.get(self, "max_protocol_version")

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[str]:
        return pulumi.get(self, "min_protocol_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityDataPlane(dict):
    def __init__(__self__, *,
                 automtls: Optional[bool] = None,
                 mtls: Optional[bool] = None):
        if automtls is not None:
            pulumi.set(__self__, "automtls", automtls)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)

    @property
    @pulumi.getter
    def automtls(self) -> Optional[bool]:
        return pulumi.get(self, "automtls")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[bool]:
        return pulumi.get(self, "mtls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentity(dict):
    def __init__(__self__, *,
                 third_party: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty'] = None,
                 type: Optional[str] = None):
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty']:
        return pulumi.get(self, "third_party")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityIdentityThirdParty(dict):
    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 issuer: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecSecurityTrust(dict):
    def __init__(__self__, *,
                 additional_domains: Optional[Sequence[str]] = None,
                 domain: Optional[str] = None):
        if additional_domains is not None:
            pulumi.set(__self__, "additional_domains", additional_domains)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="additionalDomains")
    def additional_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "additional_domains")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetry(dict):
    def __init__(__self__, *,
                 mixer: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer'] = None,
                 remote: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote'] = None,
                 type: Optional[str] = None):
        if mixer is not None:
            pulumi.set(__self__, "mixer", mixer)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mixer(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer']:
        return pulumi.get(self, "mixer")

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote']:
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixer(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters'] = None,
                 batching: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching'] = None,
                 loadshedding: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding'] = None,
                 session_affinity: Optional[bool] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if loadshedding is not None:
            pulumi.set(__self__, "loadshedding", loadshedding)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching']:
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter
    def loadshedding(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding']:
        return pulumi.get(self, "loadshedding")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[bool]:
        return pulumi.get(self, "session_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdapters(dict):
    def __init__(__self__, *,
                 kubernetesenv: Optional[bool] = None,
                 stdio: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio'] = None,
                 use_adapter_crds: Optional[bool] = None):
        if kubernetesenv is not None:
            pulumi.set(__self__, "kubernetesenv", kubernetesenv)
        if stdio is not None:
            pulumi.set(__self__, "stdio", stdio)
        if use_adapter_crds is not None:
            pulumi.set(__self__, "use_adapter_crds", use_adapter_crds)

    @property
    @pulumi.getter
    def kubernetesenv(self) -> Optional[bool]:
        return pulumi.get(self, "kubernetesenv")

    @property
    @pulumi.getter
    def stdio(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio']:
        return pulumi.get(self, "stdio")

    @property
    @pulumi.getter(name="useAdapterCRDs")
    def use_adapter_crds(self) -> Optional[bool]:
        return pulumi.get(self, "use_adapter_crds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerAdaptersStdio(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 output_as_json: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if output_as_json is not None:
            pulumi.set(__self__, "output_as_json", output_as_json)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="outputAsJSON")
    def output_as_json(self) -> Optional[bool]:
        return pulumi.get(self, "output_as_json")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerBatching(dict):
    def __init__(__self__, *,
                 max_entries: Optional[int] = None,
                 max_time: Optional[str] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[int]:
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[str]:
        return pulumi.get(self, "max_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryMixerLoadshedding(dict):
    def __init__(__self__, *,
                 latency_threshold: Optional[str] = None,
                 mode: Optional[str] = None):
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[str]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemote(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 batching: Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching'] = None,
                 create_service: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if batching is not None:
            pulumi.set(__self__, "batching", batching)
        if create_service is not None:
            pulumi.set(__self__, "create_service", create_service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def batching(self) -> Optional['outputs.ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching']:
        return pulumi.get(self, "batching")

    @property
    @pulumi.getter(name="createService")
    def create_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTelemetryRemoteBatching(dict):
    def __init__(__self__, *,
                 max_entries: Optional[int] = None,
                 max_time: Optional[str] = None):
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_time is not None:
            pulumi.set(__self__, "max_time", max_time)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[int]:
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxTime")
    def max_time(self) -> Optional[str]:
        return pulumi.get(self, "max_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedSpecTracing(dict):
    def __init__(__self__, *,
                 sampling: Optional[int] = None,
                 type: Optional[str] = None):
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[int]:
        return pulumi.get(self, "sampling")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusAppliedValues(dict):
    def __init__(__self__, *,
                 istio: Optional[Mapping[str, Any]] = None,
                 network_type: Optional[str] = None,
                 profiles: Optional[Sequence[str]] = None,
                 template: Optional[str] = None,
                 three_scale: Optional[Mapping[str, Any]] = None,
                 version: Optional[str] = None):
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if three_scale is not None:
            pulumi.set(__self__, "three_scale", three_scale)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def istio(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "istio")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="threeScale")
    def three_scale(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "three_scale")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponents(dict):
    def __init__(__self__, *,
                 children: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildren']] = None,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsConditions']] = None,
                 resource: Optional[str] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildren']]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        return pulumi.get(self, "resource")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsChildren(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildrenConditions']] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ServiceMeshControlPlaneStatusComponentsChildrenConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsChildrenConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusComponentsConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceMeshControlPlaneStatusReadiness(dict):
    def __init__(__self__, *,
                 components: Optional[Mapping[str, Sequence[str]]] = None):
        if components is not None:
            pulumi.set(__self__, "components", components)

    @property
    @pulumi.getter
    def components(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "components")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type FederatedTypeConfigType struct {
	ApiVersion *string                    `pulumi:"apiVersion"`
	Kind       *string                    `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta         `pulumi:"metadata"`
	Spec       FederatedTypeConfigSpec    `pulumi:"spec"`
	Status     *FederatedTypeConfigStatus `pulumi:"status"`
}

// FederatedTypeConfigTypeInput is an input type that accepts FederatedTypeConfigTypeArgs and FederatedTypeConfigTypeOutput values.
// You can construct a concrete instance of `FederatedTypeConfigTypeInput` via:
//
//          FederatedTypeConfigTypeArgs{...}
type FederatedTypeConfigTypeInput interface {
	pulumi.Input

	ToFederatedTypeConfigTypeOutput() FederatedTypeConfigTypeOutput
	ToFederatedTypeConfigTypeOutputWithContext(context.Context) FederatedTypeConfigTypeOutput
}

type FederatedTypeConfigTypeArgs struct {
	ApiVersion pulumi.StringPtrInput             `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput             `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput         `pulumi:"metadata"`
	Spec       FederatedTypeConfigSpecInput      `pulumi:"spec"`
	Status     FederatedTypeConfigStatusPtrInput `pulumi:"status"`
}

func (FederatedTypeConfigTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigType)(nil)).Elem()
}

func (i FederatedTypeConfigTypeArgs) ToFederatedTypeConfigTypeOutput() FederatedTypeConfigTypeOutput {
	return i.ToFederatedTypeConfigTypeOutputWithContext(context.Background())
}

func (i FederatedTypeConfigTypeArgs) ToFederatedTypeConfigTypeOutputWithContext(ctx context.Context) FederatedTypeConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigTypeOutput)
}

type FederatedTypeConfigTypeOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigType)(nil)).Elem()
}

func (o FederatedTypeConfigTypeOutput) ToFederatedTypeConfigTypeOutput() FederatedTypeConfigTypeOutput {
	return o
}

func (o FederatedTypeConfigTypeOutput) ToFederatedTypeConfigTypeOutputWithContext(ctx context.Context) FederatedTypeConfigTypeOutput {
	return o
}

func (o FederatedTypeConfigTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o FederatedTypeConfigTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o FederatedTypeConfigTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o FederatedTypeConfigTypeOutput) Spec() FederatedTypeConfigSpecOutput {
	return o.ApplyT(func(v FederatedTypeConfigType) FederatedTypeConfigSpec { return v.Spec }).(FederatedTypeConfigSpecOutput)
}

func (o FederatedTypeConfigTypeOutput) Status() FederatedTypeConfigStatusPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigType) *FederatedTypeConfigStatus { return v.Status }).(FederatedTypeConfigStatusPtrOutput)
}

type FederatedTypeConfigMetadata struct {
}

// FederatedTypeConfigMetadataInput is an input type that accepts FederatedTypeConfigMetadataArgs and FederatedTypeConfigMetadataOutput values.
// You can construct a concrete instance of `FederatedTypeConfigMetadataInput` via:
//
//          FederatedTypeConfigMetadataArgs{...}
type FederatedTypeConfigMetadataInput interface {
	pulumi.Input

	ToFederatedTypeConfigMetadataOutput() FederatedTypeConfigMetadataOutput
	ToFederatedTypeConfigMetadataOutputWithContext(context.Context) FederatedTypeConfigMetadataOutput
}

type FederatedTypeConfigMetadataArgs struct {
}

func (FederatedTypeConfigMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigMetadata)(nil)).Elem()
}

func (i FederatedTypeConfigMetadataArgs) ToFederatedTypeConfigMetadataOutput() FederatedTypeConfigMetadataOutput {
	return i.ToFederatedTypeConfigMetadataOutputWithContext(context.Background())
}

func (i FederatedTypeConfigMetadataArgs) ToFederatedTypeConfigMetadataOutputWithContext(ctx context.Context) FederatedTypeConfigMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigMetadataOutput)
}

type FederatedTypeConfigMetadataOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigMetadata)(nil)).Elem()
}

func (o FederatedTypeConfigMetadataOutput) ToFederatedTypeConfigMetadataOutput() FederatedTypeConfigMetadataOutput {
	return o
}

func (o FederatedTypeConfigMetadataOutput) ToFederatedTypeConfigMetadataOutputWithContext(ctx context.Context) FederatedTypeConfigMetadataOutput {
	return o
}

type FederatedTypeConfigSpec struct {
	// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
	FederatedType FederatedTypeConfigSpecFederatedType `pulumi:"federatedType"`
	// Whether or not propagation to member clusters should be enabled.
	Propagation string `pulumi:"propagation"`
	// Whether or not Status object should be populated.
	StatusCollection *string `pulumi:"statusCollection"`
	// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
	StatusType *FederatedTypeConfigSpecStatusType `pulumi:"statusType"`
	// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
	TargetType FederatedTypeConfigSpecTargetType `pulumi:"targetType"`
}

// FederatedTypeConfigSpecInput is an input type that accepts FederatedTypeConfigSpecArgs and FederatedTypeConfigSpecOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecInput` via:
//
//          FederatedTypeConfigSpecArgs{...}
type FederatedTypeConfigSpecInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecOutput() FederatedTypeConfigSpecOutput
	ToFederatedTypeConfigSpecOutputWithContext(context.Context) FederatedTypeConfigSpecOutput
}

type FederatedTypeConfigSpecArgs struct {
	// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
	FederatedType FederatedTypeConfigSpecFederatedTypeInput `pulumi:"federatedType"`
	// Whether or not propagation to member clusters should be enabled.
	Propagation pulumi.StringInput `pulumi:"propagation"`
	// Whether or not Status object should be populated.
	StatusCollection pulumi.StringPtrInput `pulumi:"statusCollection"`
	// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
	StatusType FederatedTypeConfigSpecStatusTypePtrInput `pulumi:"statusType"`
	// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
	TargetType FederatedTypeConfigSpecTargetTypeInput `pulumi:"targetType"`
}

func (FederatedTypeConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpec)(nil)).Elem()
}

func (i FederatedTypeConfigSpecArgs) ToFederatedTypeConfigSpecOutput() FederatedTypeConfigSpecOutput {
	return i.ToFederatedTypeConfigSpecOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecArgs) ToFederatedTypeConfigSpecOutputWithContext(ctx context.Context) FederatedTypeConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecOutput)
}

func (i FederatedTypeConfigSpecArgs) ToFederatedTypeConfigSpecPtrOutput() FederatedTypeConfigSpecPtrOutput {
	return i.ToFederatedTypeConfigSpecPtrOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecArgs) ToFederatedTypeConfigSpecPtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecOutput).ToFederatedTypeConfigSpecPtrOutputWithContext(ctx)
}

// FederatedTypeConfigSpecPtrInput is an input type that accepts FederatedTypeConfigSpecArgs, FederatedTypeConfigSpecPtr and FederatedTypeConfigSpecPtrOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecPtrInput` via:
//
//          FederatedTypeConfigSpecArgs{...}
//
//  or:
//
//          nil
type FederatedTypeConfigSpecPtrInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecPtrOutput() FederatedTypeConfigSpecPtrOutput
	ToFederatedTypeConfigSpecPtrOutputWithContext(context.Context) FederatedTypeConfigSpecPtrOutput
}

type federatedTypeConfigSpecPtrType FederatedTypeConfigSpecArgs

func FederatedTypeConfigSpecPtr(v *FederatedTypeConfigSpecArgs) FederatedTypeConfigSpecPtrInput {
	return (*federatedTypeConfigSpecPtrType)(v)
}

func (*federatedTypeConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpec)(nil)).Elem()
}

func (i *federatedTypeConfigSpecPtrType) ToFederatedTypeConfigSpecPtrOutput() FederatedTypeConfigSpecPtrOutput {
	return i.ToFederatedTypeConfigSpecPtrOutputWithContext(context.Background())
}

func (i *federatedTypeConfigSpecPtrType) ToFederatedTypeConfigSpecPtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecPtrOutput)
}

type FederatedTypeConfigSpecOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpec)(nil)).Elem()
}

func (o FederatedTypeConfigSpecOutput) ToFederatedTypeConfigSpecOutput() FederatedTypeConfigSpecOutput {
	return o
}

func (o FederatedTypeConfigSpecOutput) ToFederatedTypeConfigSpecOutputWithContext(ctx context.Context) FederatedTypeConfigSpecOutput {
	return o
}

func (o FederatedTypeConfigSpecOutput) ToFederatedTypeConfigSpecPtrOutput() FederatedTypeConfigSpecPtrOutput {
	return o.ToFederatedTypeConfigSpecPtrOutputWithContext(context.Background())
}

func (o FederatedTypeConfigSpecOutput) ToFederatedTypeConfigSpecPtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) *FederatedTypeConfigSpec {
		return &v
	}).(FederatedTypeConfigSpecPtrOutput)
}

// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
func (o FederatedTypeConfigSpecOutput) FederatedType() FederatedTypeConfigSpecFederatedTypeOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) FederatedTypeConfigSpecFederatedType { return v.FederatedType }).(FederatedTypeConfigSpecFederatedTypeOutput)
}

// Whether or not propagation to member clusters should be enabled.
func (o FederatedTypeConfigSpecOutput) Propagation() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) string { return v.Propagation }).(pulumi.StringOutput)
}

// Whether or not Status object should be populated.
func (o FederatedTypeConfigSpecOutput) StatusCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) *string { return v.StatusCollection }).(pulumi.StringPtrOutput)
}

// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
func (o FederatedTypeConfigSpecOutput) StatusType() FederatedTypeConfigSpecStatusTypePtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) *FederatedTypeConfigSpecStatusType { return v.StatusType }).(FederatedTypeConfigSpecStatusTypePtrOutput)
}

// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
func (o FederatedTypeConfigSpecOutput) TargetType() FederatedTypeConfigSpecTargetTypeOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpec) FederatedTypeConfigSpecTargetType { return v.TargetType }).(FederatedTypeConfigSpecTargetTypeOutput)
}

type FederatedTypeConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpec)(nil)).Elem()
}

func (o FederatedTypeConfigSpecPtrOutput) ToFederatedTypeConfigSpecPtrOutput() FederatedTypeConfigSpecPtrOutput {
	return o
}

func (o FederatedTypeConfigSpecPtrOutput) ToFederatedTypeConfigSpecPtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecPtrOutput {
	return o
}

func (o FederatedTypeConfigSpecPtrOutput) Elem() FederatedTypeConfigSpecOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) FederatedTypeConfigSpec { return *v }).(FederatedTypeConfigSpecOutput)
}

// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
func (o FederatedTypeConfigSpecPtrOutput) FederatedType() FederatedTypeConfigSpecFederatedTypePtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) *FederatedTypeConfigSpecFederatedType {
		if v == nil {
			return nil
		}
		return &v.FederatedType
	}).(FederatedTypeConfigSpecFederatedTypePtrOutput)
}

// Whether or not propagation to member clusters should be enabled.
func (o FederatedTypeConfigSpecPtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Propagation
	}).(pulumi.StringPtrOutput)
}

// Whether or not Status object should be populated.
func (o FederatedTypeConfigSpecPtrOutput) StatusCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.StatusCollection
	}).(pulumi.StringPtrOutput)
}

// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
func (o FederatedTypeConfigSpecPtrOutput) StatusType() FederatedTypeConfigSpecStatusTypePtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) *FederatedTypeConfigSpecStatusType {
		if v == nil {
			return nil
		}
		return v.StatusType
	}).(FederatedTypeConfigSpecStatusTypePtrOutput)
}

// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
func (o FederatedTypeConfigSpecPtrOutput) TargetType() FederatedTypeConfigSpecTargetTypePtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpec) *FederatedTypeConfigSpecTargetType {
		if v == nil {
			return nil
		}
		return &v.TargetType
	}).(FederatedTypeConfigSpecTargetTypePtrOutput)
}

// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
type FederatedTypeConfigSpecFederatedType struct {
	// Group of the resource.
	Group *string `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind string `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName string `pulumi:"pluralName"`
	// Scope of the resource.
	Scope string `pulumi:"scope"`
	// Version of the resource.
	Version string `pulumi:"version"`
}

// FederatedTypeConfigSpecFederatedTypeInput is an input type that accepts FederatedTypeConfigSpecFederatedTypeArgs and FederatedTypeConfigSpecFederatedTypeOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecFederatedTypeInput` via:
//
//          FederatedTypeConfigSpecFederatedTypeArgs{...}
type FederatedTypeConfigSpecFederatedTypeInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecFederatedTypeOutput() FederatedTypeConfigSpecFederatedTypeOutput
	ToFederatedTypeConfigSpecFederatedTypeOutputWithContext(context.Context) FederatedTypeConfigSpecFederatedTypeOutput
}

// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
type FederatedTypeConfigSpecFederatedTypeArgs struct {
	// Group of the resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind pulumi.StringInput `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName pulumi.StringInput `pulumi:"pluralName"`
	// Scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Version of the resource.
	Version pulumi.StringInput `pulumi:"version"`
}

func (FederatedTypeConfigSpecFederatedTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecFederatedType)(nil)).Elem()
}

func (i FederatedTypeConfigSpecFederatedTypeArgs) ToFederatedTypeConfigSpecFederatedTypeOutput() FederatedTypeConfigSpecFederatedTypeOutput {
	return i.ToFederatedTypeConfigSpecFederatedTypeOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecFederatedTypeArgs) ToFederatedTypeConfigSpecFederatedTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecFederatedTypeOutput)
}

func (i FederatedTypeConfigSpecFederatedTypeArgs) ToFederatedTypeConfigSpecFederatedTypePtrOutput() FederatedTypeConfigSpecFederatedTypePtrOutput {
	return i.ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecFederatedTypeArgs) ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecFederatedTypeOutput).ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(ctx)
}

// FederatedTypeConfigSpecFederatedTypePtrInput is an input type that accepts FederatedTypeConfigSpecFederatedTypeArgs, FederatedTypeConfigSpecFederatedTypePtr and FederatedTypeConfigSpecFederatedTypePtrOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecFederatedTypePtrInput` via:
//
//          FederatedTypeConfigSpecFederatedTypeArgs{...}
//
//  or:
//
//          nil
type FederatedTypeConfigSpecFederatedTypePtrInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecFederatedTypePtrOutput() FederatedTypeConfigSpecFederatedTypePtrOutput
	ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(context.Context) FederatedTypeConfigSpecFederatedTypePtrOutput
}

type federatedTypeConfigSpecFederatedTypePtrType FederatedTypeConfigSpecFederatedTypeArgs

func FederatedTypeConfigSpecFederatedTypePtr(v *FederatedTypeConfigSpecFederatedTypeArgs) FederatedTypeConfigSpecFederatedTypePtrInput {
	return (*federatedTypeConfigSpecFederatedTypePtrType)(v)
}

func (*federatedTypeConfigSpecFederatedTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecFederatedType)(nil)).Elem()
}

func (i *federatedTypeConfigSpecFederatedTypePtrType) ToFederatedTypeConfigSpecFederatedTypePtrOutput() FederatedTypeConfigSpecFederatedTypePtrOutput {
	return i.ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(context.Background())
}

func (i *federatedTypeConfigSpecFederatedTypePtrType) ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecFederatedTypePtrOutput)
}

// Configuration for the federated type that defines (via template, placement and overrides fields) how the target type should appear in multiple cluster.
type FederatedTypeConfigSpecFederatedTypeOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecFederatedTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecFederatedType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecFederatedTypeOutput) ToFederatedTypeConfigSpecFederatedTypeOutput() FederatedTypeConfigSpecFederatedTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecFederatedTypeOutput) ToFederatedTypeConfigSpecFederatedTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecFederatedTypeOutput) ToFederatedTypeConfigSpecFederatedTypePtrOutput() FederatedTypeConfigSpecFederatedTypePtrOutput {
	return o.ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(context.Background())
}

func (o FederatedTypeConfigSpecFederatedTypeOutput) ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypePtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) *FederatedTypeConfigSpecFederatedType {
		return &v
	}).(FederatedTypeConfigSpecFederatedTypePtrOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecFederatedTypeOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecFederatedTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) string { return v.Kind }).(pulumi.StringOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecFederatedTypeOutput) PluralName() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) string { return v.PluralName }).(pulumi.StringOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecFederatedTypeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) string { return v.Scope }).(pulumi.StringOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecFederatedTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecFederatedType) string { return v.Version }).(pulumi.StringOutput)
}

type FederatedTypeConfigSpecFederatedTypePtrOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecFederatedTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecFederatedType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecFederatedTypePtrOutput) ToFederatedTypeConfigSpecFederatedTypePtrOutput() FederatedTypeConfigSpecFederatedTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecFederatedTypePtrOutput) ToFederatedTypeConfigSpecFederatedTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecFederatedTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecFederatedTypePtrOutput) Elem() FederatedTypeConfigSpecFederatedTypeOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) FederatedTypeConfigSpecFederatedType { return *v }).(FederatedTypeConfigSpecFederatedTypeOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecFederatedTypePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecFederatedTypePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecFederatedTypePtrOutput) PluralName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) *string {
		if v == nil {
			return nil
		}
		return &v.PluralName
	}).(pulumi.StringPtrOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecFederatedTypePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecFederatedTypePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecFederatedType) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
type FederatedTypeConfigSpecStatusType struct {
	// Group of the resource.
	Group *string `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind string `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName string `pulumi:"pluralName"`
	// Scope of the resource.
	Scope string `pulumi:"scope"`
	// Version of the resource.
	Version string `pulumi:"version"`
}

// FederatedTypeConfigSpecStatusTypeInput is an input type that accepts FederatedTypeConfigSpecStatusTypeArgs and FederatedTypeConfigSpecStatusTypeOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecStatusTypeInput` via:
//
//          FederatedTypeConfigSpecStatusTypeArgs{...}
type FederatedTypeConfigSpecStatusTypeInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecStatusTypeOutput() FederatedTypeConfigSpecStatusTypeOutput
	ToFederatedTypeConfigSpecStatusTypeOutputWithContext(context.Context) FederatedTypeConfigSpecStatusTypeOutput
}

// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
type FederatedTypeConfigSpecStatusTypeArgs struct {
	// Group of the resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind pulumi.StringInput `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName pulumi.StringInput `pulumi:"pluralName"`
	// Scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Version of the resource.
	Version pulumi.StringInput `pulumi:"version"`
}

func (FederatedTypeConfigSpecStatusTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecStatusType)(nil)).Elem()
}

func (i FederatedTypeConfigSpecStatusTypeArgs) ToFederatedTypeConfigSpecStatusTypeOutput() FederatedTypeConfigSpecStatusTypeOutput {
	return i.ToFederatedTypeConfigSpecStatusTypeOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecStatusTypeArgs) ToFederatedTypeConfigSpecStatusTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecStatusTypeOutput)
}

func (i FederatedTypeConfigSpecStatusTypeArgs) ToFederatedTypeConfigSpecStatusTypePtrOutput() FederatedTypeConfigSpecStatusTypePtrOutput {
	return i.ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecStatusTypeArgs) ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecStatusTypeOutput).ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(ctx)
}

// FederatedTypeConfigSpecStatusTypePtrInput is an input type that accepts FederatedTypeConfigSpecStatusTypeArgs, FederatedTypeConfigSpecStatusTypePtr and FederatedTypeConfigSpecStatusTypePtrOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecStatusTypePtrInput` via:
//
//          FederatedTypeConfigSpecStatusTypeArgs{...}
//
//  or:
//
//          nil
type FederatedTypeConfigSpecStatusTypePtrInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecStatusTypePtrOutput() FederatedTypeConfigSpecStatusTypePtrOutput
	ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(context.Context) FederatedTypeConfigSpecStatusTypePtrOutput
}

type federatedTypeConfigSpecStatusTypePtrType FederatedTypeConfigSpecStatusTypeArgs

func FederatedTypeConfigSpecStatusTypePtr(v *FederatedTypeConfigSpecStatusTypeArgs) FederatedTypeConfigSpecStatusTypePtrInput {
	return (*federatedTypeConfigSpecStatusTypePtrType)(v)
}

func (*federatedTypeConfigSpecStatusTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecStatusType)(nil)).Elem()
}

func (i *federatedTypeConfigSpecStatusTypePtrType) ToFederatedTypeConfigSpecStatusTypePtrOutput() FederatedTypeConfigSpecStatusTypePtrOutput {
	return i.ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(context.Background())
}

func (i *federatedTypeConfigSpecStatusTypePtrType) ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecStatusTypePtrOutput)
}

// Configuration for the status type that holds information about which type holds the status of the federated resource. If not provided, the group and version will default to those provided for the federated type api resource.
type FederatedTypeConfigSpecStatusTypeOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecStatusTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecStatusType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecStatusTypeOutput) ToFederatedTypeConfigSpecStatusTypeOutput() FederatedTypeConfigSpecStatusTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecStatusTypeOutput) ToFederatedTypeConfigSpecStatusTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecStatusTypeOutput) ToFederatedTypeConfigSpecStatusTypePtrOutput() FederatedTypeConfigSpecStatusTypePtrOutput {
	return o.ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(context.Background())
}

func (o FederatedTypeConfigSpecStatusTypeOutput) ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypePtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) *FederatedTypeConfigSpecStatusType {
		return &v
	}).(FederatedTypeConfigSpecStatusTypePtrOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecStatusTypeOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecStatusTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) string { return v.Kind }).(pulumi.StringOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecStatusTypeOutput) PluralName() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) string { return v.PluralName }).(pulumi.StringOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecStatusTypeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) string { return v.Scope }).(pulumi.StringOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecStatusTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecStatusType) string { return v.Version }).(pulumi.StringOutput)
}

type FederatedTypeConfigSpecStatusTypePtrOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecStatusTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecStatusType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecStatusTypePtrOutput) ToFederatedTypeConfigSpecStatusTypePtrOutput() FederatedTypeConfigSpecStatusTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecStatusTypePtrOutput) ToFederatedTypeConfigSpecStatusTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecStatusTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecStatusTypePtrOutput) Elem() FederatedTypeConfigSpecStatusTypeOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) FederatedTypeConfigSpecStatusType { return *v }).(FederatedTypeConfigSpecStatusTypeOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecStatusTypePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecStatusTypePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecStatusTypePtrOutput) PluralName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) *string {
		if v == nil {
			return nil
		}
		return &v.PluralName
	}).(pulumi.StringPtrOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecStatusTypePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecStatusTypePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecStatusType) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
type FederatedTypeConfigSpecTargetType struct {
	// Group of the resource.
	Group *string `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind string `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName string `pulumi:"pluralName"`
	// Scope of the resource.
	Scope string `pulumi:"scope"`
	// Version of the resource.
	Version string `pulumi:"version"`
}

// FederatedTypeConfigSpecTargetTypeInput is an input type that accepts FederatedTypeConfigSpecTargetTypeArgs and FederatedTypeConfigSpecTargetTypeOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecTargetTypeInput` via:
//
//          FederatedTypeConfigSpecTargetTypeArgs{...}
type FederatedTypeConfigSpecTargetTypeInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecTargetTypeOutput() FederatedTypeConfigSpecTargetTypeOutput
	ToFederatedTypeConfigSpecTargetTypeOutputWithContext(context.Context) FederatedTypeConfigSpecTargetTypeOutput
}

// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
type FederatedTypeConfigSpecTargetTypeArgs struct {
	// Group of the resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Camel-cased singular name of the resource (e.g. ConfigMap)
	Kind pulumi.StringInput `pulumi:"kind"`
	// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
	PluralName pulumi.StringInput `pulumi:"pluralName"`
	// Scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Version of the resource.
	Version pulumi.StringInput `pulumi:"version"`
}

func (FederatedTypeConfigSpecTargetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecTargetType)(nil)).Elem()
}

func (i FederatedTypeConfigSpecTargetTypeArgs) ToFederatedTypeConfigSpecTargetTypeOutput() FederatedTypeConfigSpecTargetTypeOutput {
	return i.ToFederatedTypeConfigSpecTargetTypeOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecTargetTypeArgs) ToFederatedTypeConfigSpecTargetTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecTargetTypeOutput)
}

func (i FederatedTypeConfigSpecTargetTypeArgs) ToFederatedTypeConfigSpecTargetTypePtrOutput() FederatedTypeConfigSpecTargetTypePtrOutput {
	return i.ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(context.Background())
}

func (i FederatedTypeConfigSpecTargetTypeArgs) ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecTargetTypeOutput).ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(ctx)
}

// FederatedTypeConfigSpecTargetTypePtrInput is an input type that accepts FederatedTypeConfigSpecTargetTypeArgs, FederatedTypeConfigSpecTargetTypePtr and FederatedTypeConfigSpecTargetTypePtrOutput values.
// You can construct a concrete instance of `FederatedTypeConfigSpecTargetTypePtrInput` via:
//
//          FederatedTypeConfigSpecTargetTypeArgs{...}
//
//  or:
//
//          nil
type FederatedTypeConfigSpecTargetTypePtrInput interface {
	pulumi.Input

	ToFederatedTypeConfigSpecTargetTypePtrOutput() FederatedTypeConfigSpecTargetTypePtrOutput
	ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(context.Context) FederatedTypeConfigSpecTargetTypePtrOutput
}

type federatedTypeConfigSpecTargetTypePtrType FederatedTypeConfigSpecTargetTypeArgs

func FederatedTypeConfigSpecTargetTypePtr(v *FederatedTypeConfigSpecTargetTypeArgs) FederatedTypeConfigSpecTargetTypePtrInput {
	return (*federatedTypeConfigSpecTargetTypePtrType)(v)
}

func (*federatedTypeConfigSpecTargetTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecTargetType)(nil)).Elem()
}

func (i *federatedTypeConfigSpecTargetTypePtrType) ToFederatedTypeConfigSpecTargetTypePtrOutput() FederatedTypeConfigSpecTargetTypePtrOutput {
	return i.ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(context.Background())
}

func (i *federatedTypeConfigSpecTargetTypePtrType) ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigSpecTargetTypePtrOutput)
}

// The configuration of the target type. If not set, the pluralName and groupName fields will be set from the metadata.name of this resource. The kind field must be set.
type FederatedTypeConfigSpecTargetTypeOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecTargetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigSpecTargetType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecTargetTypeOutput) ToFederatedTypeConfigSpecTargetTypeOutput() FederatedTypeConfigSpecTargetTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecTargetTypeOutput) ToFederatedTypeConfigSpecTargetTypeOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypeOutput {
	return o
}

func (o FederatedTypeConfigSpecTargetTypeOutput) ToFederatedTypeConfigSpecTargetTypePtrOutput() FederatedTypeConfigSpecTargetTypePtrOutput {
	return o.ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(context.Background())
}

func (o FederatedTypeConfigSpecTargetTypeOutput) ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypePtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) *FederatedTypeConfigSpecTargetType {
		return &v
	}).(FederatedTypeConfigSpecTargetTypePtrOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecTargetTypeOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecTargetTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) string { return v.Kind }).(pulumi.StringOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecTargetTypeOutput) PluralName() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) string { return v.PluralName }).(pulumi.StringOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecTargetTypeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) string { return v.Scope }).(pulumi.StringOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecTargetTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigSpecTargetType) string { return v.Version }).(pulumi.StringOutput)
}

type FederatedTypeConfigSpecTargetTypePtrOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigSpecTargetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigSpecTargetType)(nil)).Elem()
}

func (o FederatedTypeConfigSpecTargetTypePtrOutput) ToFederatedTypeConfigSpecTargetTypePtrOutput() FederatedTypeConfigSpecTargetTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecTargetTypePtrOutput) ToFederatedTypeConfigSpecTargetTypePtrOutputWithContext(ctx context.Context) FederatedTypeConfigSpecTargetTypePtrOutput {
	return o
}

func (o FederatedTypeConfigSpecTargetTypePtrOutput) Elem() FederatedTypeConfigSpecTargetTypeOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) FederatedTypeConfigSpecTargetType { return *v }).(FederatedTypeConfigSpecTargetTypeOutput)
}

// Group of the resource.
func (o FederatedTypeConfigSpecTargetTypePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Camel-cased singular name of the resource (e.g. ConfigMap)
func (o FederatedTypeConfigSpecTargetTypePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
func (o FederatedTypeConfigSpecTargetTypePtrOutput) PluralName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) *string {
		if v == nil {
			return nil
		}
		return &v.PluralName
	}).(pulumi.StringPtrOutput)
}

// Scope of the resource.
func (o FederatedTypeConfigSpecTargetTypePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// Version of the resource.
func (o FederatedTypeConfigSpecTargetTypePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigSpecTargetType) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type FederatedTypeConfigStatus struct {
	// ObservedGeneration is the generation as observed by the controller consuming the FederatedTypeConfig.
	ObservedGeneration int `pulumi:"observedGeneration"`
	// PropagationController tracks the status of the sync controller.
	PropagationController string `pulumi:"propagationController"`
	// StatusController tracks the status of the status controller.
	StatusController *string `pulumi:"statusController"`
}

// FederatedTypeConfigStatusInput is an input type that accepts FederatedTypeConfigStatusArgs and FederatedTypeConfigStatusOutput values.
// You can construct a concrete instance of `FederatedTypeConfigStatusInput` via:
//
//          FederatedTypeConfigStatusArgs{...}
type FederatedTypeConfigStatusInput interface {
	pulumi.Input

	ToFederatedTypeConfigStatusOutput() FederatedTypeConfigStatusOutput
	ToFederatedTypeConfigStatusOutputWithContext(context.Context) FederatedTypeConfigStatusOutput
}

type FederatedTypeConfigStatusArgs struct {
	// ObservedGeneration is the generation as observed by the controller consuming the FederatedTypeConfig.
	ObservedGeneration pulumi.IntInput `pulumi:"observedGeneration"`
	// PropagationController tracks the status of the sync controller.
	PropagationController pulumi.StringInput `pulumi:"propagationController"`
	// StatusController tracks the status of the status controller.
	StatusController pulumi.StringPtrInput `pulumi:"statusController"`
}

func (FederatedTypeConfigStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigStatus)(nil)).Elem()
}

func (i FederatedTypeConfigStatusArgs) ToFederatedTypeConfigStatusOutput() FederatedTypeConfigStatusOutput {
	return i.ToFederatedTypeConfigStatusOutputWithContext(context.Background())
}

func (i FederatedTypeConfigStatusArgs) ToFederatedTypeConfigStatusOutputWithContext(ctx context.Context) FederatedTypeConfigStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigStatusOutput)
}

func (i FederatedTypeConfigStatusArgs) ToFederatedTypeConfigStatusPtrOutput() FederatedTypeConfigStatusPtrOutput {
	return i.ToFederatedTypeConfigStatusPtrOutputWithContext(context.Background())
}

func (i FederatedTypeConfigStatusArgs) ToFederatedTypeConfigStatusPtrOutputWithContext(ctx context.Context) FederatedTypeConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigStatusOutput).ToFederatedTypeConfigStatusPtrOutputWithContext(ctx)
}

// FederatedTypeConfigStatusPtrInput is an input type that accepts FederatedTypeConfigStatusArgs, FederatedTypeConfigStatusPtr and FederatedTypeConfigStatusPtrOutput values.
// You can construct a concrete instance of `FederatedTypeConfigStatusPtrInput` via:
//
//          FederatedTypeConfigStatusArgs{...}
//
//  or:
//
//          nil
type FederatedTypeConfigStatusPtrInput interface {
	pulumi.Input

	ToFederatedTypeConfigStatusPtrOutput() FederatedTypeConfigStatusPtrOutput
	ToFederatedTypeConfigStatusPtrOutputWithContext(context.Context) FederatedTypeConfigStatusPtrOutput
}

type federatedTypeConfigStatusPtrType FederatedTypeConfigStatusArgs

func FederatedTypeConfigStatusPtr(v *FederatedTypeConfigStatusArgs) FederatedTypeConfigStatusPtrInput {
	return (*federatedTypeConfigStatusPtrType)(v)
}

func (*federatedTypeConfigStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigStatus)(nil)).Elem()
}

func (i *federatedTypeConfigStatusPtrType) ToFederatedTypeConfigStatusPtrOutput() FederatedTypeConfigStatusPtrOutput {
	return i.ToFederatedTypeConfigStatusPtrOutputWithContext(context.Background())
}

func (i *federatedTypeConfigStatusPtrType) ToFederatedTypeConfigStatusPtrOutputWithContext(ctx context.Context) FederatedTypeConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedTypeConfigStatusPtrOutput)
}

type FederatedTypeConfigStatusOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederatedTypeConfigStatus)(nil)).Elem()
}

func (o FederatedTypeConfigStatusOutput) ToFederatedTypeConfigStatusOutput() FederatedTypeConfigStatusOutput {
	return o
}

func (o FederatedTypeConfigStatusOutput) ToFederatedTypeConfigStatusOutputWithContext(ctx context.Context) FederatedTypeConfigStatusOutput {
	return o
}

func (o FederatedTypeConfigStatusOutput) ToFederatedTypeConfigStatusPtrOutput() FederatedTypeConfigStatusPtrOutput {
	return o.ToFederatedTypeConfigStatusPtrOutputWithContext(context.Background())
}

func (o FederatedTypeConfigStatusOutput) ToFederatedTypeConfigStatusPtrOutputWithContext(ctx context.Context) FederatedTypeConfigStatusPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigStatus) *FederatedTypeConfigStatus {
		return &v
	}).(FederatedTypeConfigStatusPtrOutput)
}

// ObservedGeneration is the generation as observed by the controller consuming the FederatedTypeConfig.
func (o FederatedTypeConfigStatusOutput) ObservedGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v FederatedTypeConfigStatus) int { return v.ObservedGeneration }).(pulumi.IntOutput)
}

// PropagationController tracks the status of the sync controller.
func (o FederatedTypeConfigStatusOutput) PropagationController() pulumi.StringOutput {
	return o.ApplyT(func(v FederatedTypeConfigStatus) string { return v.PropagationController }).(pulumi.StringOutput)
}

// StatusController tracks the status of the status controller.
func (o FederatedTypeConfigStatusOutput) StatusController() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederatedTypeConfigStatus) *string { return v.StatusController }).(pulumi.StringPtrOutput)
}

type FederatedTypeConfigStatusPtrOutput struct{ *pulumi.OutputState }

func (FederatedTypeConfigStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedTypeConfigStatus)(nil)).Elem()
}

func (o FederatedTypeConfigStatusPtrOutput) ToFederatedTypeConfigStatusPtrOutput() FederatedTypeConfigStatusPtrOutput {
	return o
}

func (o FederatedTypeConfigStatusPtrOutput) ToFederatedTypeConfigStatusPtrOutputWithContext(ctx context.Context) FederatedTypeConfigStatusPtrOutput {
	return o
}

func (o FederatedTypeConfigStatusPtrOutput) Elem() FederatedTypeConfigStatusOutput {
	return o.ApplyT(func(v *FederatedTypeConfigStatus) FederatedTypeConfigStatus { return *v }).(FederatedTypeConfigStatusOutput)
}

// ObservedGeneration is the generation as observed by the controller consuming the FederatedTypeConfig.
func (o FederatedTypeConfigStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigStatus) *int {
		if v == nil {
			return nil
		}
		return &v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// PropagationController tracks the status of the sync controller.
func (o FederatedTypeConfigStatusPtrOutput) PropagationController() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigStatus) *string {
		if v == nil {
			return nil
		}
		return &v.PropagationController
	}).(pulumi.StringPtrOutput)
}

// StatusController tracks the status of the status controller.
func (o FederatedTypeConfigStatusPtrOutput) StatusController() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedTypeConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.StatusController
	}).(pulumi.StringPtrOutput)
}

type KubeFedClusterType struct {
	ApiVersion *string               `pulumi:"apiVersion"`
	Kind       *string               `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec       KubeFedClusterSpec    `pulumi:"spec"`
	Status     *KubeFedClusterStatus `pulumi:"status"`
}

// KubeFedClusterTypeInput is an input type that accepts KubeFedClusterTypeArgs and KubeFedClusterTypeOutput values.
// You can construct a concrete instance of `KubeFedClusterTypeInput` via:
//
//          KubeFedClusterTypeArgs{...}
type KubeFedClusterTypeInput interface {
	pulumi.Input

	ToKubeFedClusterTypeOutput() KubeFedClusterTypeOutput
	ToKubeFedClusterTypeOutputWithContext(context.Context) KubeFedClusterTypeOutput
}

type KubeFedClusterTypeArgs struct {
	ApiVersion pulumi.StringPtrInput        `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput        `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput    `pulumi:"metadata"`
	Spec       KubeFedClusterSpecInput      `pulumi:"spec"`
	Status     KubeFedClusterStatusPtrInput `pulumi:"status"`
}

func (KubeFedClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterType)(nil)).Elem()
}

func (i KubeFedClusterTypeArgs) ToKubeFedClusterTypeOutput() KubeFedClusterTypeOutput {
	return i.ToKubeFedClusterTypeOutputWithContext(context.Background())
}

func (i KubeFedClusterTypeArgs) ToKubeFedClusterTypeOutputWithContext(ctx context.Context) KubeFedClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterTypeOutput)
}

type KubeFedClusterTypeOutput struct{ *pulumi.OutputState }

func (KubeFedClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterType)(nil)).Elem()
}

func (o KubeFedClusterTypeOutput) ToKubeFedClusterTypeOutput() KubeFedClusterTypeOutput {
	return o
}

func (o KubeFedClusterTypeOutput) ToKubeFedClusterTypeOutputWithContext(ctx context.Context) KubeFedClusterTypeOutput {
	return o
}

func (o KubeFedClusterTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubeFedClusterTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubeFedClusterTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubeFedClusterType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KubeFedClusterTypeOutput) Spec() KubeFedClusterSpecOutput {
	return o.ApplyT(func(v KubeFedClusterType) KubeFedClusterSpec { return v.Spec }).(KubeFedClusterSpecOutput)
}

func (o KubeFedClusterTypeOutput) Status() KubeFedClusterStatusPtrOutput {
	return o.ApplyT(func(v KubeFedClusterType) *KubeFedClusterStatus { return v.Status }).(KubeFedClusterStatusPtrOutput)
}

type KubeFedClusterMetadata struct {
}

// KubeFedClusterMetadataInput is an input type that accepts KubeFedClusterMetadataArgs and KubeFedClusterMetadataOutput values.
// You can construct a concrete instance of `KubeFedClusterMetadataInput` via:
//
//          KubeFedClusterMetadataArgs{...}
type KubeFedClusterMetadataInput interface {
	pulumi.Input

	ToKubeFedClusterMetadataOutput() KubeFedClusterMetadataOutput
	ToKubeFedClusterMetadataOutputWithContext(context.Context) KubeFedClusterMetadataOutput
}

type KubeFedClusterMetadataArgs struct {
}

func (KubeFedClusterMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterMetadata)(nil)).Elem()
}

func (i KubeFedClusterMetadataArgs) ToKubeFedClusterMetadataOutput() KubeFedClusterMetadataOutput {
	return i.ToKubeFedClusterMetadataOutputWithContext(context.Background())
}

func (i KubeFedClusterMetadataArgs) ToKubeFedClusterMetadataOutputWithContext(ctx context.Context) KubeFedClusterMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterMetadataOutput)
}

type KubeFedClusterMetadataOutput struct{ *pulumi.OutputState }

func (KubeFedClusterMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterMetadata)(nil)).Elem()
}

func (o KubeFedClusterMetadataOutput) ToKubeFedClusterMetadataOutput() KubeFedClusterMetadataOutput {
	return o
}

func (o KubeFedClusterMetadataOutput) ToKubeFedClusterMetadataOutputWithContext(ctx context.Context) KubeFedClusterMetadataOutput {
	return o
}

type KubeFedClusterSpec struct {
	// The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.
	ApiEndpoint string `pulumi:"apiEndpoint"`
	// CABundle contains the certificate authority information.
	CaBundle *string `pulumi:"caBundle"`
	// DisabledTLSValidations defines a list of checks to ignore when validating the TLS connection to the member cluster.  This can be any of *, SubjectName, or ValidityPeriod. If * is specified, it is expected to be the only option in list.
	DisabledTLSValidations []string `pulumi:"disabledTLSValidations"`
	// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
	SecretRef KubeFedClusterSpecSecretRef `pulumi:"secretRef"`
}

// KubeFedClusterSpecInput is an input type that accepts KubeFedClusterSpecArgs and KubeFedClusterSpecOutput values.
// You can construct a concrete instance of `KubeFedClusterSpecInput` via:
//
//          KubeFedClusterSpecArgs{...}
type KubeFedClusterSpecInput interface {
	pulumi.Input

	ToKubeFedClusterSpecOutput() KubeFedClusterSpecOutput
	ToKubeFedClusterSpecOutputWithContext(context.Context) KubeFedClusterSpecOutput
}

type KubeFedClusterSpecArgs struct {
	// The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.
	ApiEndpoint pulumi.StringInput `pulumi:"apiEndpoint"`
	// CABundle contains the certificate authority information.
	CaBundle pulumi.StringPtrInput `pulumi:"caBundle"`
	// DisabledTLSValidations defines a list of checks to ignore when validating the TLS connection to the member cluster.  This can be any of *, SubjectName, or ValidityPeriod. If * is specified, it is expected to be the only option in list.
	DisabledTLSValidations pulumi.StringArrayInput `pulumi:"disabledTLSValidations"`
	// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
	SecretRef KubeFedClusterSpecSecretRefInput `pulumi:"secretRef"`
}

func (KubeFedClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterSpec)(nil)).Elem()
}

func (i KubeFedClusterSpecArgs) ToKubeFedClusterSpecOutput() KubeFedClusterSpecOutput {
	return i.ToKubeFedClusterSpecOutputWithContext(context.Background())
}

func (i KubeFedClusterSpecArgs) ToKubeFedClusterSpecOutputWithContext(ctx context.Context) KubeFedClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecOutput)
}

func (i KubeFedClusterSpecArgs) ToKubeFedClusterSpecPtrOutput() KubeFedClusterSpecPtrOutput {
	return i.ToKubeFedClusterSpecPtrOutputWithContext(context.Background())
}

func (i KubeFedClusterSpecArgs) ToKubeFedClusterSpecPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecOutput).ToKubeFedClusterSpecPtrOutputWithContext(ctx)
}

// KubeFedClusterSpecPtrInput is an input type that accepts KubeFedClusterSpecArgs, KubeFedClusterSpecPtr and KubeFedClusterSpecPtrOutput values.
// You can construct a concrete instance of `KubeFedClusterSpecPtrInput` via:
//
//          KubeFedClusterSpecArgs{...}
//
//  or:
//
//          nil
type KubeFedClusterSpecPtrInput interface {
	pulumi.Input

	ToKubeFedClusterSpecPtrOutput() KubeFedClusterSpecPtrOutput
	ToKubeFedClusterSpecPtrOutputWithContext(context.Context) KubeFedClusterSpecPtrOutput
}

type kubeFedClusterSpecPtrType KubeFedClusterSpecArgs

func KubeFedClusterSpecPtr(v *KubeFedClusterSpecArgs) KubeFedClusterSpecPtrInput {
	return (*kubeFedClusterSpecPtrType)(v)
}

func (*kubeFedClusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterSpec)(nil)).Elem()
}

func (i *kubeFedClusterSpecPtrType) ToKubeFedClusterSpecPtrOutput() KubeFedClusterSpecPtrOutput {
	return i.ToKubeFedClusterSpecPtrOutputWithContext(context.Background())
}

func (i *kubeFedClusterSpecPtrType) ToKubeFedClusterSpecPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecPtrOutput)
}

type KubeFedClusterSpecOutput struct{ *pulumi.OutputState }

func (KubeFedClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterSpec)(nil)).Elem()
}

func (o KubeFedClusterSpecOutput) ToKubeFedClusterSpecOutput() KubeFedClusterSpecOutput {
	return o
}

func (o KubeFedClusterSpecOutput) ToKubeFedClusterSpecOutputWithContext(ctx context.Context) KubeFedClusterSpecOutput {
	return o
}

func (o KubeFedClusterSpecOutput) ToKubeFedClusterSpecPtrOutput() KubeFedClusterSpecPtrOutput {
	return o.ToKubeFedClusterSpecPtrOutputWithContext(context.Background())
}

func (o KubeFedClusterSpecOutput) ToKubeFedClusterSpecPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecPtrOutput {
	return o.ApplyT(func(v KubeFedClusterSpec) *KubeFedClusterSpec {
		return &v
	}).(KubeFedClusterSpecPtrOutput)
}

// The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.
func (o KubeFedClusterSpecOutput) ApiEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedClusterSpec) string { return v.ApiEndpoint }).(pulumi.StringOutput)
}

// CABundle contains the certificate authority information.
func (o KubeFedClusterSpecOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterSpec) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

// DisabledTLSValidations defines a list of checks to ignore when validating the TLS connection to the member cluster.  This can be any of *, SubjectName, or ValidityPeriod. If * is specified, it is expected to be the only option in list.
func (o KubeFedClusterSpecOutput) DisabledTLSValidations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeFedClusterSpec) []string { return v.DisabledTLSValidations }).(pulumi.StringArrayOutput)
}

// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
func (o KubeFedClusterSpecOutput) SecretRef() KubeFedClusterSpecSecretRefOutput {
	return o.ApplyT(func(v KubeFedClusterSpec) KubeFedClusterSpecSecretRef { return v.SecretRef }).(KubeFedClusterSpecSecretRefOutput)
}

type KubeFedClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (KubeFedClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterSpec)(nil)).Elem()
}

func (o KubeFedClusterSpecPtrOutput) ToKubeFedClusterSpecPtrOutput() KubeFedClusterSpecPtrOutput {
	return o
}

func (o KubeFedClusterSpecPtrOutput) ToKubeFedClusterSpecPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecPtrOutput {
	return o
}

func (o KubeFedClusterSpecPtrOutput) Elem() KubeFedClusterSpecOutput {
	return o.ApplyT(func(v *KubeFedClusterSpec) KubeFedClusterSpec { return *v }).(KubeFedClusterSpecOutput)
}

// The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.
func (o KubeFedClusterSpecPtrOutput) ApiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedClusterSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ApiEndpoint
	}).(pulumi.StringPtrOutput)
}

// CABundle contains the certificate authority information.
func (o KubeFedClusterSpecPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedClusterSpec) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

// DisabledTLSValidations defines a list of checks to ignore when validating the TLS connection to the member cluster.  This can be any of *, SubjectName, or ValidityPeriod. If * is specified, it is expected to be the only option in list.
func (o KubeFedClusterSpecPtrOutput) DisabledTLSValidations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeFedClusterSpec) []string {
		if v == nil {
			return nil
		}
		return v.DisabledTLSValidations
	}).(pulumi.StringArrayOutput)
}

// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
func (o KubeFedClusterSpecPtrOutput) SecretRef() KubeFedClusterSpecSecretRefPtrOutput {
	return o.ApplyT(func(v *KubeFedClusterSpec) *KubeFedClusterSpecSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(KubeFedClusterSpecSecretRefPtrOutput)
}

// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
type KubeFedClusterSpecSecretRef struct {
	// Name of a secret within the enclosing namespace
	Name string `pulumi:"name"`
}

// KubeFedClusterSpecSecretRefInput is an input type that accepts KubeFedClusterSpecSecretRefArgs and KubeFedClusterSpecSecretRefOutput values.
// You can construct a concrete instance of `KubeFedClusterSpecSecretRefInput` via:
//
//          KubeFedClusterSpecSecretRefArgs{...}
type KubeFedClusterSpecSecretRefInput interface {
	pulumi.Input

	ToKubeFedClusterSpecSecretRefOutput() KubeFedClusterSpecSecretRefOutput
	ToKubeFedClusterSpecSecretRefOutputWithContext(context.Context) KubeFedClusterSpecSecretRefOutput
}

// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
type KubeFedClusterSpecSecretRefArgs struct {
	// Name of a secret within the enclosing namespace
	Name pulumi.StringInput `pulumi:"name"`
}

func (KubeFedClusterSpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterSpecSecretRef)(nil)).Elem()
}

func (i KubeFedClusterSpecSecretRefArgs) ToKubeFedClusterSpecSecretRefOutput() KubeFedClusterSpecSecretRefOutput {
	return i.ToKubeFedClusterSpecSecretRefOutputWithContext(context.Background())
}

func (i KubeFedClusterSpecSecretRefArgs) ToKubeFedClusterSpecSecretRefOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecSecretRefOutput)
}

func (i KubeFedClusterSpecSecretRefArgs) ToKubeFedClusterSpecSecretRefPtrOutput() KubeFedClusterSpecSecretRefPtrOutput {
	return i.ToKubeFedClusterSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i KubeFedClusterSpecSecretRefArgs) ToKubeFedClusterSpecSecretRefPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecSecretRefOutput).ToKubeFedClusterSpecSecretRefPtrOutputWithContext(ctx)
}

// KubeFedClusterSpecSecretRefPtrInput is an input type that accepts KubeFedClusterSpecSecretRefArgs, KubeFedClusterSpecSecretRefPtr and KubeFedClusterSpecSecretRefPtrOutput values.
// You can construct a concrete instance of `KubeFedClusterSpecSecretRefPtrInput` via:
//
//          KubeFedClusterSpecSecretRefArgs{...}
//
//  or:
//
//          nil
type KubeFedClusterSpecSecretRefPtrInput interface {
	pulumi.Input

	ToKubeFedClusterSpecSecretRefPtrOutput() KubeFedClusterSpecSecretRefPtrOutput
	ToKubeFedClusterSpecSecretRefPtrOutputWithContext(context.Context) KubeFedClusterSpecSecretRefPtrOutput
}

type kubeFedClusterSpecSecretRefPtrType KubeFedClusterSpecSecretRefArgs

func KubeFedClusterSpecSecretRefPtr(v *KubeFedClusterSpecSecretRefArgs) KubeFedClusterSpecSecretRefPtrInput {
	return (*kubeFedClusterSpecSecretRefPtrType)(v)
}

func (*kubeFedClusterSpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterSpecSecretRef)(nil)).Elem()
}

func (i *kubeFedClusterSpecSecretRefPtrType) ToKubeFedClusterSpecSecretRefPtrOutput() KubeFedClusterSpecSecretRefPtrOutput {
	return i.ToKubeFedClusterSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *kubeFedClusterSpecSecretRefPtrType) ToKubeFedClusterSpecSecretRefPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterSpecSecretRefPtrOutput)
}

// Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a "token" key.
type KubeFedClusterSpecSecretRefOutput struct{ *pulumi.OutputState }

func (KubeFedClusterSpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterSpecSecretRef)(nil)).Elem()
}

func (o KubeFedClusterSpecSecretRefOutput) ToKubeFedClusterSpecSecretRefOutput() KubeFedClusterSpecSecretRefOutput {
	return o
}

func (o KubeFedClusterSpecSecretRefOutput) ToKubeFedClusterSpecSecretRefOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefOutput {
	return o
}

func (o KubeFedClusterSpecSecretRefOutput) ToKubeFedClusterSpecSecretRefPtrOutput() KubeFedClusterSpecSecretRefPtrOutput {
	return o.ToKubeFedClusterSpecSecretRefPtrOutputWithContext(context.Background())
}

func (o KubeFedClusterSpecSecretRefOutput) ToKubeFedClusterSpecSecretRefPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefPtrOutput {
	return o.ApplyT(func(v KubeFedClusterSpecSecretRef) *KubeFedClusterSpecSecretRef {
		return &v
	}).(KubeFedClusterSpecSecretRefPtrOutput)
}

// Name of a secret within the enclosing namespace
func (o KubeFedClusterSpecSecretRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedClusterSpecSecretRef) string { return v.Name }).(pulumi.StringOutput)
}

type KubeFedClusterSpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (KubeFedClusterSpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterSpecSecretRef)(nil)).Elem()
}

func (o KubeFedClusterSpecSecretRefPtrOutput) ToKubeFedClusterSpecSecretRefPtrOutput() KubeFedClusterSpecSecretRefPtrOutput {
	return o
}

func (o KubeFedClusterSpecSecretRefPtrOutput) ToKubeFedClusterSpecSecretRefPtrOutputWithContext(ctx context.Context) KubeFedClusterSpecSecretRefPtrOutput {
	return o
}

func (o KubeFedClusterSpecSecretRefPtrOutput) Elem() KubeFedClusterSpecSecretRefOutput {
	return o.ApplyT(func(v *KubeFedClusterSpecSecretRef) KubeFedClusterSpecSecretRef { return *v }).(KubeFedClusterSpecSecretRefOutput)
}

// Name of a secret within the enclosing namespace
func (o KubeFedClusterSpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedClusterSpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type KubeFedClusterStatus struct {
	// Conditions is an array of current cluster conditions.
	Conditions []KubeFedClusterStatusConditions `pulumi:"conditions"`
	// Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.
	Region *string `pulumi:"region"`
	// Zones are the names of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'.
	Zones []string `pulumi:"zones"`
}

// KubeFedClusterStatusInput is an input type that accepts KubeFedClusterStatusArgs and KubeFedClusterStatusOutput values.
// You can construct a concrete instance of `KubeFedClusterStatusInput` via:
//
//          KubeFedClusterStatusArgs{...}
type KubeFedClusterStatusInput interface {
	pulumi.Input

	ToKubeFedClusterStatusOutput() KubeFedClusterStatusOutput
	ToKubeFedClusterStatusOutputWithContext(context.Context) KubeFedClusterStatusOutput
}

type KubeFedClusterStatusArgs struct {
	// Conditions is an array of current cluster conditions.
	Conditions KubeFedClusterStatusConditionsArrayInput `pulumi:"conditions"`
	// Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Zones are the names of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (KubeFedClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterStatus)(nil)).Elem()
}

func (i KubeFedClusterStatusArgs) ToKubeFedClusterStatusOutput() KubeFedClusterStatusOutput {
	return i.ToKubeFedClusterStatusOutputWithContext(context.Background())
}

func (i KubeFedClusterStatusArgs) ToKubeFedClusterStatusOutputWithContext(ctx context.Context) KubeFedClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterStatusOutput)
}

func (i KubeFedClusterStatusArgs) ToKubeFedClusterStatusPtrOutput() KubeFedClusterStatusPtrOutput {
	return i.ToKubeFedClusterStatusPtrOutputWithContext(context.Background())
}

func (i KubeFedClusterStatusArgs) ToKubeFedClusterStatusPtrOutputWithContext(ctx context.Context) KubeFedClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterStatusOutput).ToKubeFedClusterStatusPtrOutputWithContext(ctx)
}

// KubeFedClusterStatusPtrInput is an input type that accepts KubeFedClusterStatusArgs, KubeFedClusterStatusPtr and KubeFedClusterStatusPtrOutput values.
// You can construct a concrete instance of `KubeFedClusterStatusPtrInput` via:
//
//          KubeFedClusterStatusArgs{...}
//
//  or:
//
//          nil
type KubeFedClusterStatusPtrInput interface {
	pulumi.Input

	ToKubeFedClusterStatusPtrOutput() KubeFedClusterStatusPtrOutput
	ToKubeFedClusterStatusPtrOutputWithContext(context.Context) KubeFedClusterStatusPtrOutput
}

type kubeFedClusterStatusPtrType KubeFedClusterStatusArgs

func KubeFedClusterStatusPtr(v *KubeFedClusterStatusArgs) KubeFedClusterStatusPtrInput {
	return (*kubeFedClusterStatusPtrType)(v)
}

func (*kubeFedClusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterStatus)(nil)).Elem()
}

func (i *kubeFedClusterStatusPtrType) ToKubeFedClusterStatusPtrOutput() KubeFedClusterStatusPtrOutput {
	return i.ToKubeFedClusterStatusPtrOutputWithContext(context.Background())
}

func (i *kubeFedClusterStatusPtrType) ToKubeFedClusterStatusPtrOutputWithContext(ctx context.Context) KubeFedClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterStatusPtrOutput)
}

type KubeFedClusterStatusOutput struct{ *pulumi.OutputState }

func (KubeFedClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterStatus)(nil)).Elem()
}

func (o KubeFedClusterStatusOutput) ToKubeFedClusterStatusOutput() KubeFedClusterStatusOutput {
	return o
}

func (o KubeFedClusterStatusOutput) ToKubeFedClusterStatusOutputWithContext(ctx context.Context) KubeFedClusterStatusOutput {
	return o
}

func (o KubeFedClusterStatusOutput) ToKubeFedClusterStatusPtrOutput() KubeFedClusterStatusPtrOutput {
	return o.ToKubeFedClusterStatusPtrOutputWithContext(context.Background())
}

func (o KubeFedClusterStatusOutput) ToKubeFedClusterStatusPtrOutputWithContext(ctx context.Context) KubeFedClusterStatusPtrOutput {
	return o.ApplyT(func(v KubeFedClusterStatus) *KubeFedClusterStatus {
		return &v
	}).(KubeFedClusterStatusPtrOutput)
}

// Conditions is an array of current cluster conditions.
func (o KubeFedClusterStatusOutput) Conditions() KubeFedClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v KubeFedClusterStatus) []KubeFedClusterStatusConditions { return v.Conditions }).(KubeFedClusterStatusConditionsArrayOutput)
}

// Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.
func (o KubeFedClusterStatusOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterStatus) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Zones are the names of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'.
func (o KubeFedClusterStatusOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeFedClusterStatus) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type KubeFedClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (KubeFedClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedClusterStatus)(nil)).Elem()
}

func (o KubeFedClusterStatusPtrOutput) ToKubeFedClusterStatusPtrOutput() KubeFedClusterStatusPtrOutput {
	return o
}

func (o KubeFedClusterStatusPtrOutput) ToKubeFedClusterStatusPtrOutputWithContext(ctx context.Context) KubeFedClusterStatusPtrOutput {
	return o
}

func (o KubeFedClusterStatusPtrOutput) Elem() KubeFedClusterStatusOutput {
	return o.ApplyT(func(v *KubeFedClusterStatus) KubeFedClusterStatus { return *v }).(KubeFedClusterStatusOutput)
}

// Conditions is an array of current cluster conditions.
func (o KubeFedClusterStatusPtrOutput) Conditions() KubeFedClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KubeFedClusterStatus) []KubeFedClusterStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KubeFedClusterStatusConditionsArrayOutput)
}

// Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.
func (o KubeFedClusterStatusPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Zones are the names of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'.
func (o KubeFedClusterStatusPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeFedClusterStatus) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

type KubeFedClusterStatusConditions struct {
	// Last time the condition was checked.
	LastProbeTime string `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of cluster condition, Ready or Offline.
	Type string `pulumi:"type"`
}

// KubeFedClusterStatusConditionsInput is an input type that accepts KubeFedClusterStatusConditionsArgs and KubeFedClusterStatusConditionsOutput values.
// You can construct a concrete instance of `KubeFedClusterStatusConditionsInput` via:
//
//          KubeFedClusterStatusConditionsArgs{...}
type KubeFedClusterStatusConditionsInput interface {
	pulumi.Input

	ToKubeFedClusterStatusConditionsOutput() KubeFedClusterStatusConditionsOutput
	ToKubeFedClusterStatusConditionsOutputWithContext(context.Context) KubeFedClusterStatusConditionsOutput
}

type KubeFedClusterStatusConditionsArgs struct {
	// Last time the condition was checked.
	LastProbeTime pulumi.StringInput `pulumi:"lastProbeTime"`
	// Last time the condition transit from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of cluster condition, Ready or Offline.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KubeFedClusterStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterStatusConditions)(nil)).Elem()
}

func (i KubeFedClusterStatusConditionsArgs) ToKubeFedClusterStatusConditionsOutput() KubeFedClusterStatusConditionsOutput {
	return i.ToKubeFedClusterStatusConditionsOutputWithContext(context.Background())
}

func (i KubeFedClusterStatusConditionsArgs) ToKubeFedClusterStatusConditionsOutputWithContext(ctx context.Context) KubeFedClusterStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterStatusConditionsOutput)
}

// KubeFedClusterStatusConditionsArrayInput is an input type that accepts KubeFedClusterStatusConditionsArray and KubeFedClusterStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KubeFedClusterStatusConditionsArrayInput` via:
//
//          KubeFedClusterStatusConditionsArray{ KubeFedClusterStatusConditionsArgs{...} }
type KubeFedClusterStatusConditionsArrayInput interface {
	pulumi.Input

	ToKubeFedClusterStatusConditionsArrayOutput() KubeFedClusterStatusConditionsArrayOutput
	ToKubeFedClusterStatusConditionsArrayOutputWithContext(context.Context) KubeFedClusterStatusConditionsArrayOutput
}

type KubeFedClusterStatusConditionsArray []KubeFedClusterStatusConditionsInput

func (KubeFedClusterStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubeFedClusterStatusConditions)(nil)).Elem()
}

func (i KubeFedClusterStatusConditionsArray) ToKubeFedClusterStatusConditionsArrayOutput() KubeFedClusterStatusConditionsArrayOutput {
	return i.ToKubeFedClusterStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KubeFedClusterStatusConditionsArray) ToKubeFedClusterStatusConditionsArrayOutputWithContext(ctx context.Context) KubeFedClusterStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedClusterStatusConditionsArrayOutput)
}

type KubeFedClusterStatusConditionsOutput struct{ *pulumi.OutputState }

func (KubeFedClusterStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedClusterStatusConditions)(nil)).Elem()
}

func (o KubeFedClusterStatusConditionsOutput) ToKubeFedClusterStatusConditionsOutput() KubeFedClusterStatusConditionsOutput {
	return o
}

func (o KubeFedClusterStatusConditionsOutput) ToKubeFedClusterStatusConditionsOutputWithContext(ctx context.Context) KubeFedClusterStatusConditionsOutput {
	return o
}

// Last time the condition was checked.
func (o KubeFedClusterStatusConditionsOutput) LastProbeTime() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) string { return v.LastProbeTime }).(pulumi.StringOutput)
}

// Last time the condition transit from one status to another.
func (o KubeFedClusterStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human readable message indicating details about last transition.
func (o KubeFedClusterStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason for the condition's last transition.
func (o KubeFedClusterStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KubeFedClusterStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of cluster condition, Ready or Offline.
func (o KubeFedClusterStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedClusterStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KubeFedClusterStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KubeFedClusterStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubeFedClusterStatusConditions)(nil)).Elem()
}

func (o KubeFedClusterStatusConditionsArrayOutput) ToKubeFedClusterStatusConditionsArrayOutput() KubeFedClusterStatusConditionsArrayOutput {
	return o
}

func (o KubeFedClusterStatusConditionsArrayOutput) ToKubeFedClusterStatusConditionsArrayOutputWithContext(ctx context.Context) KubeFedClusterStatusConditionsArrayOutput {
	return o
}

func (o KubeFedClusterStatusConditionsArrayOutput) Index(i pulumi.IntInput) KubeFedClusterStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubeFedClusterStatusConditions {
		return vs[0].([]KubeFedClusterStatusConditions)[vs[1].(int)]
	}).(KubeFedClusterStatusConditionsOutput)
}

type KubeFedConfigType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       KubeFedConfigSpec  `pulumi:"spec"`
}

// KubeFedConfigTypeInput is an input type that accepts KubeFedConfigTypeArgs and KubeFedConfigTypeOutput values.
// You can construct a concrete instance of `KubeFedConfigTypeInput` via:
//
//          KubeFedConfigTypeArgs{...}
type KubeFedConfigTypeInput interface {
	pulumi.Input

	ToKubeFedConfigTypeOutput() KubeFedConfigTypeOutput
	ToKubeFedConfigTypeOutputWithContext(context.Context) KubeFedConfigTypeOutput
}

type KubeFedConfigTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       KubeFedConfigSpecInput    `pulumi:"spec"`
}

func (KubeFedConfigTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigType)(nil)).Elem()
}

func (i KubeFedConfigTypeArgs) ToKubeFedConfigTypeOutput() KubeFedConfigTypeOutput {
	return i.ToKubeFedConfigTypeOutputWithContext(context.Background())
}

func (i KubeFedConfigTypeArgs) ToKubeFedConfigTypeOutputWithContext(ctx context.Context) KubeFedConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigTypeOutput)
}

type KubeFedConfigTypeOutput struct{ *pulumi.OutputState }

func (KubeFedConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigType)(nil)).Elem()
}

func (o KubeFedConfigTypeOutput) ToKubeFedConfigTypeOutput() KubeFedConfigTypeOutput {
	return o
}

func (o KubeFedConfigTypeOutput) ToKubeFedConfigTypeOutputWithContext(ctx context.Context) KubeFedConfigTypeOutput {
	return o
}

func (o KubeFedConfigTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubeFedConfigTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubeFedConfigTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubeFedConfigType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KubeFedConfigTypeOutput) Spec() KubeFedConfigSpecOutput {
	return o.ApplyT(func(v KubeFedConfigType) KubeFedConfigSpec { return v.Spec }).(KubeFedConfigSpecOutput)
}

type KubeFedConfigMetadata struct {
}

// KubeFedConfigMetadataInput is an input type that accepts KubeFedConfigMetadataArgs and KubeFedConfigMetadataOutput values.
// You can construct a concrete instance of `KubeFedConfigMetadataInput` via:
//
//          KubeFedConfigMetadataArgs{...}
type KubeFedConfigMetadataInput interface {
	pulumi.Input

	ToKubeFedConfigMetadataOutput() KubeFedConfigMetadataOutput
	ToKubeFedConfigMetadataOutputWithContext(context.Context) KubeFedConfigMetadataOutput
}

type KubeFedConfigMetadataArgs struct {
}

func (KubeFedConfigMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigMetadata)(nil)).Elem()
}

func (i KubeFedConfigMetadataArgs) ToKubeFedConfigMetadataOutput() KubeFedConfigMetadataOutput {
	return i.ToKubeFedConfigMetadataOutputWithContext(context.Background())
}

func (i KubeFedConfigMetadataArgs) ToKubeFedConfigMetadataOutputWithContext(ctx context.Context) KubeFedConfigMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigMetadataOutput)
}

type KubeFedConfigMetadataOutput struct{ *pulumi.OutputState }

func (KubeFedConfigMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigMetadata)(nil)).Elem()
}

func (o KubeFedConfigMetadataOutput) ToKubeFedConfigMetadataOutput() KubeFedConfigMetadataOutput {
	return o
}

func (o KubeFedConfigMetadataOutput) ToKubeFedConfigMetadataOutputWithContext(ctx context.Context) KubeFedConfigMetadataOutput {
	return o
}

type KubeFedConfigSpec struct {
	ClusterHealthCheck *KubeFedConfigSpecClusterHealthCheck `pulumi:"clusterHealthCheck"`
	ControllerDuration *KubeFedConfigSpecControllerDuration `pulumi:"controllerDuration"`
	FeatureGates       []KubeFedConfigSpecFeatureGates      `pulumi:"featureGates"`
	LeaderElect        *KubeFedConfigSpecLeaderElect        `pulumi:"leaderElect"`
	// The scope of the KubeFed control plane should be either `Namespaced` or `Cluster`. `Namespaced` indicates that the KubeFed namespace will be the only target of the control plane.
	Scope          string                           `pulumi:"scope"`
	SyncController *KubeFedConfigSpecSyncController `pulumi:"syncController"`
}

// KubeFedConfigSpecInput is an input type that accepts KubeFedConfigSpecArgs and KubeFedConfigSpecOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecInput` via:
//
//          KubeFedConfigSpecArgs{...}
type KubeFedConfigSpecInput interface {
	pulumi.Input

	ToKubeFedConfigSpecOutput() KubeFedConfigSpecOutput
	ToKubeFedConfigSpecOutputWithContext(context.Context) KubeFedConfigSpecOutput
}

type KubeFedConfigSpecArgs struct {
	ClusterHealthCheck KubeFedConfigSpecClusterHealthCheckPtrInput `pulumi:"clusterHealthCheck"`
	ControllerDuration KubeFedConfigSpecControllerDurationPtrInput `pulumi:"controllerDuration"`
	FeatureGates       KubeFedConfigSpecFeatureGatesArrayInput     `pulumi:"featureGates"`
	LeaderElect        KubeFedConfigSpecLeaderElectPtrInput        `pulumi:"leaderElect"`
	// The scope of the KubeFed control plane should be either `Namespaced` or `Cluster`. `Namespaced` indicates that the KubeFed namespace will be the only target of the control plane.
	Scope          pulumi.StringInput                      `pulumi:"scope"`
	SyncController KubeFedConfigSpecSyncControllerPtrInput `pulumi:"syncController"`
}

func (KubeFedConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpec)(nil)).Elem()
}

func (i KubeFedConfigSpecArgs) ToKubeFedConfigSpecOutput() KubeFedConfigSpecOutput {
	return i.ToKubeFedConfigSpecOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecArgs) ToKubeFedConfigSpecOutputWithContext(ctx context.Context) KubeFedConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecOutput)
}

func (i KubeFedConfigSpecArgs) ToKubeFedConfigSpecPtrOutput() KubeFedConfigSpecPtrOutput {
	return i.ToKubeFedConfigSpecPtrOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecArgs) ToKubeFedConfigSpecPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecOutput).ToKubeFedConfigSpecPtrOutputWithContext(ctx)
}

// KubeFedConfigSpecPtrInput is an input type that accepts KubeFedConfigSpecArgs, KubeFedConfigSpecPtr and KubeFedConfigSpecPtrOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecPtrInput` via:
//
//          KubeFedConfigSpecArgs{...}
//
//  or:
//
//          nil
type KubeFedConfigSpecPtrInput interface {
	pulumi.Input

	ToKubeFedConfigSpecPtrOutput() KubeFedConfigSpecPtrOutput
	ToKubeFedConfigSpecPtrOutputWithContext(context.Context) KubeFedConfigSpecPtrOutput
}

type kubeFedConfigSpecPtrType KubeFedConfigSpecArgs

func KubeFedConfigSpecPtr(v *KubeFedConfigSpecArgs) KubeFedConfigSpecPtrInput {
	return (*kubeFedConfigSpecPtrType)(v)
}

func (*kubeFedConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpec)(nil)).Elem()
}

func (i *kubeFedConfigSpecPtrType) ToKubeFedConfigSpecPtrOutput() KubeFedConfigSpecPtrOutput {
	return i.ToKubeFedConfigSpecPtrOutputWithContext(context.Background())
}

func (i *kubeFedConfigSpecPtrType) ToKubeFedConfigSpecPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecPtrOutput)
}

type KubeFedConfigSpecOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpec)(nil)).Elem()
}

func (o KubeFedConfigSpecOutput) ToKubeFedConfigSpecOutput() KubeFedConfigSpecOutput {
	return o
}

func (o KubeFedConfigSpecOutput) ToKubeFedConfigSpecOutputWithContext(ctx context.Context) KubeFedConfigSpecOutput {
	return o
}

func (o KubeFedConfigSpecOutput) ToKubeFedConfigSpecPtrOutput() KubeFedConfigSpecPtrOutput {
	return o.ToKubeFedConfigSpecPtrOutputWithContext(context.Background())
}

func (o KubeFedConfigSpecOutput) ToKubeFedConfigSpecPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) *KubeFedConfigSpec {
		return &v
	}).(KubeFedConfigSpecPtrOutput)
}
func (o KubeFedConfigSpecOutput) ClusterHealthCheck() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) *KubeFedConfigSpecClusterHealthCheck { return v.ClusterHealthCheck }).(KubeFedConfigSpecClusterHealthCheckPtrOutput)
}

func (o KubeFedConfigSpecOutput) ControllerDuration() KubeFedConfigSpecControllerDurationPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) *KubeFedConfigSpecControllerDuration { return v.ControllerDuration }).(KubeFedConfigSpecControllerDurationPtrOutput)
}

func (o KubeFedConfigSpecOutput) FeatureGates() KubeFedConfigSpecFeatureGatesArrayOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) []KubeFedConfigSpecFeatureGates { return v.FeatureGates }).(KubeFedConfigSpecFeatureGatesArrayOutput)
}

func (o KubeFedConfigSpecOutput) LeaderElect() KubeFedConfigSpecLeaderElectPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) *KubeFedConfigSpecLeaderElect { return v.LeaderElect }).(KubeFedConfigSpecLeaderElectPtrOutput)
}

// The scope of the KubeFed control plane should be either `Namespaced` or `Cluster`. `Namespaced` indicates that the KubeFed namespace will be the only target of the control plane.
func (o KubeFedConfigSpecOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) string { return v.Scope }).(pulumi.StringOutput)
}

func (o KubeFedConfigSpecOutput) SyncController() KubeFedConfigSpecSyncControllerPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpec) *KubeFedConfigSpecSyncController { return v.SyncController }).(KubeFedConfigSpecSyncControllerPtrOutput)
}

type KubeFedConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpec)(nil)).Elem()
}

func (o KubeFedConfigSpecPtrOutput) ToKubeFedConfigSpecPtrOutput() KubeFedConfigSpecPtrOutput {
	return o
}

func (o KubeFedConfigSpecPtrOutput) ToKubeFedConfigSpecPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecPtrOutput {
	return o
}

func (o KubeFedConfigSpecPtrOutput) Elem() KubeFedConfigSpecOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) KubeFedConfigSpec { return *v }).(KubeFedConfigSpecOutput)
}

func (o KubeFedConfigSpecPtrOutput) ClusterHealthCheck() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) *KubeFedConfigSpecClusterHealthCheck {
		if v == nil {
			return nil
		}
		return v.ClusterHealthCheck
	}).(KubeFedConfigSpecClusterHealthCheckPtrOutput)
}

func (o KubeFedConfigSpecPtrOutput) ControllerDuration() KubeFedConfigSpecControllerDurationPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) *KubeFedConfigSpecControllerDuration {
		if v == nil {
			return nil
		}
		return v.ControllerDuration
	}).(KubeFedConfigSpecControllerDurationPtrOutput)
}

func (o KubeFedConfigSpecPtrOutput) FeatureGates() KubeFedConfigSpecFeatureGatesArrayOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) []KubeFedConfigSpecFeatureGates {
		if v == nil {
			return nil
		}
		return v.FeatureGates
	}).(KubeFedConfigSpecFeatureGatesArrayOutput)
}

func (o KubeFedConfigSpecPtrOutput) LeaderElect() KubeFedConfigSpecLeaderElectPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) *KubeFedConfigSpecLeaderElect {
		if v == nil {
			return nil
		}
		return v.LeaderElect
	}).(KubeFedConfigSpecLeaderElectPtrOutput)
}

// The scope of the KubeFed control plane should be either `Namespaced` or `Cluster`. `Namespaced` indicates that the KubeFed namespace will be the only target of the control plane.
func (o KubeFedConfigSpecPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

func (o KubeFedConfigSpecPtrOutput) SyncController() KubeFedConfigSpecSyncControllerPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpec) *KubeFedConfigSpecSyncController {
		if v == nil {
			return nil
		}
		return v.SyncController
	}).(KubeFedConfigSpecSyncControllerPtrOutput)
}

type KubeFedConfigSpecClusterHealthCheck struct {
	// Minimum consecutive failures for the cluster health to be considered failed after having succeeded.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// How often to monitor the cluster health.
	Period *string `pulumi:"period"`
	// Minimum consecutive successes for the cluster health to be considered successful after having failed.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// Duration after which the cluster health check times out.
	Timeout *string `pulumi:"timeout"`
}

// KubeFedConfigSpecClusterHealthCheckInput is an input type that accepts KubeFedConfigSpecClusterHealthCheckArgs and KubeFedConfigSpecClusterHealthCheckOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecClusterHealthCheckInput` via:
//
//          KubeFedConfigSpecClusterHealthCheckArgs{...}
type KubeFedConfigSpecClusterHealthCheckInput interface {
	pulumi.Input

	ToKubeFedConfigSpecClusterHealthCheckOutput() KubeFedConfigSpecClusterHealthCheckOutput
	ToKubeFedConfigSpecClusterHealthCheckOutputWithContext(context.Context) KubeFedConfigSpecClusterHealthCheckOutput
}

type KubeFedConfigSpecClusterHealthCheckArgs struct {
	// Minimum consecutive failures for the cluster health to be considered failed after having succeeded.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// How often to monitor the cluster health.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// Minimum consecutive successes for the cluster health to be considered successful after having failed.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// Duration after which the cluster health check times out.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (KubeFedConfigSpecClusterHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecClusterHealthCheck)(nil)).Elem()
}

func (i KubeFedConfigSpecClusterHealthCheckArgs) ToKubeFedConfigSpecClusterHealthCheckOutput() KubeFedConfigSpecClusterHealthCheckOutput {
	return i.ToKubeFedConfigSpecClusterHealthCheckOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecClusterHealthCheckArgs) ToKubeFedConfigSpecClusterHealthCheckOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecClusterHealthCheckOutput)
}

func (i KubeFedConfigSpecClusterHealthCheckArgs) ToKubeFedConfigSpecClusterHealthCheckPtrOutput() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return i.ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecClusterHealthCheckArgs) ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecClusterHealthCheckOutput).ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(ctx)
}

// KubeFedConfigSpecClusterHealthCheckPtrInput is an input type that accepts KubeFedConfigSpecClusterHealthCheckArgs, KubeFedConfigSpecClusterHealthCheckPtr and KubeFedConfigSpecClusterHealthCheckPtrOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecClusterHealthCheckPtrInput` via:
//
//          KubeFedConfigSpecClusterHealthCheckArgs{...}
//
//  or:
//
//          nil
type KubeFedConfigSpecClusterHealthCheckPtrInput interface {
	pulumi.Input

	ToKubeFedConfigSpecClusterHealthCheckPtrOutput() KubeFedConfigSpecClusterHealthCheckPtrOutput
	ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(context.Context) KubeFedConfigSpecClusterHealthCheckPtrOutput
}

type kubeFedConfigSpecClusterHealthCheckPtrType KubeFedConfigSpecClusterHealthCheckArgs

func KubeFedConfigSpecClusterHealthCheckPtr(v *KubeFedConfigSpecClusterHealthCheckArgs) KubeFedConfigSpecClusterHealthCheckPtrInput {
	return (*kubeFedConfigSpecClusterHealthCheckPtrType)(v)
}

func (*kubeFedConfigSpecClusterHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecClusterHealthCheck)(nil)).Elem()
}

func (i *kubeFedConfigSpecClusterHealthCheckPtrType) ToKubeFedConfigSpecClusterHealthCheckPtrOutput() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return i.ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(context.Background())
}

func (i *kubeFedConfigSpecClusterHealthCheckPtrType) ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecClusterHealthCheckPtrOutput)
}

type KubeFedConfigSpecClusterHealthCheckOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecClusterHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecClusterHealthCheck)(nil)).Elem()
}

func (o KubeFedConfigSpecClusterHealthCheckOutput) ToKubeFedConfigSpecClusterHealthCheckOutput() KubeFedConfigSpecClusterHealthCheckOutput {
	return o
}

func (o KubeFedConfigSpecClusterHealthCheckOutput) ToKubeFedConfigSpecClusterHealthCheckOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckOutput {
	return o
}

func (o KubeFedConfigSpecClusterHealthCheckOutput) ToKubeFedConfigSpecClusterHealthCheckPtrOutput() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o.ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(context.Background())
}

func (o KubeFedConfigSpecClusterHealthCheckOutput) ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecClusterHealthCheck) *KubeFedConfigSpecClusterHealthCheck {
		return &v
	}).(KubeFedConfigSpecClusterHealthCheckPtrOutput)
}

// Minimum consecutive failures for the cluster health to be considered failed after having succeeded.
func (o KubeFedConfigSpecClusterHealthCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecClusterHealthCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// How often to monitor the cluster health.
func (o KubeFedConfigSpecClusterHealthCheckOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecClusterHealthCheck) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// Minimum consecutive successes for the cluster health to be considered successful after having failed.
func (o KubeFedConfigSpecClusterHealthCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecClusterHealthCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// Duration after which the cluster health check times out.
func (o KubeFedConfigSpecClusterHealthCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecClusterHealthCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecClusterHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecClusterHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecClusterHealthCheck)(nil)).Elem()
}

func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) ToKubeFedConfigSpecClusterHealthCheckPtrOutput() KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o
}

func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) ToKubeFedConfigSpecClusterHealthCheckPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecClusterHealthCheckPtrOutput {
	return o
}

func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) Elem() KubeFedConfigSpecClusterHealthCheckOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecClusterHealthCheck) KubeFedConfigSpecClusterHealthCheck { return *v }).(KubeFedConfigSpecClusterHealthCheckOutput)
}

// Minimum consecutive failures for the cluster health to be considered failed after having succeeded.
func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecClusterHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// How often to monitor the cluster health.
func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecClusterHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// Minimum consecutive successes for the cluster health to be considered successful after having failed.
func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecClusterHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// Duration after which the cluster health check times out.
func (o KubeFedConfigSpecClusterHealthCheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecClusterHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecControllerDuration struct {
	// Time to wait before reconciling on a healthy cluster.
	AvailableDelay *string `pulumi:"availableDelay"`
	// Time to wait before giving up on an unhealthy cluster.
	UnavailableDelay *string `pulumi:"unavailableDelay"`
}

// KubeFedConfigSpecControllerDurationInput is an input type that accepts KubeFedConfigSpecControllerDurationArgs and KubeFedConfigSpecControllerDurationOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecControllerDurationInput` via:
//
//          KubeFedConfigSpecControllerDurationArgs{...}
type KubeFedConfigSpecControllerDurationInput interface {
	pulumi.Input

	ToKubeFedConfigSpecControllerDurationOutput() KubeFedConfigSpecControllerDurationOutput
	ToKubeFedConfigSpecControllerDurationOutputWithContext(context.Context) KubeFedConfigSpecControllerDurationOutput
}

type KubeFedConfigSpecControllerDurationArgs struct {
	// Time to wait before reconciling on a healthy cluster.
	AvailableDelay pulumi.StringPtrInput `pulumi:"availableDelay"`
	// Time to wait before giving up on an unhealthy cluster.
	UnavailableDelay pulumi.StringPtrInput `pulumi:"unavailableDelay"`
}

func (KubeFedConfigSpecControllerDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecControllerDuration)(nil)).Elem()
}

func (i KubeFedConfigSpecControllerDurationArgs) ToKubeFedConfigSpecControllerDurationOutput() KubeFedConfigSpecControllerDurationOutput {
	return i.ToKubeFedConfigSpecControllerDurationOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecControllerDurationArgs) ToKubeFedConfigSpecControllerDurationOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecControllerDurationOutput)
}

func (i KubeFedConfigSpecControllerDurationArgs) ToKubeFedConfigSpecControllerDurationPtrOutput() KubeFedConfigSpecControllerDurationPtrOutput {
	return i.ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecControllerDurationArgs) ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecControllerDurationOutput).ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(ctx)
}

// KubeFedConfigSpecControllerDurationPtrInput is an input type that accepts KubeFedConfigSpecControllerDurationArgs, KubeFedConfigSpecControllerDurationPtr and KubeFedConfigSpecControllerDurationPtrOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecControllerDurationPtrInput` via:
//
//          KubeFedConfigSpecControllerDurationArgs{...}
//
//  or:
//
//          nil
type KubeFedConfigSpecControllerDurationPtrInput interface {
	pulumi.Input

	ToKubeFedConfigSpecControllerDurationPtrOutput() KubeFedConfigSpecControllerDurationPtrOutput
	ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(context.Context) KubeFedConfigSpecControllerDurationPtrOutput
}

type kubeFedConfigSpecControllerDurationPtrType KubeFedConfigSpecControllerDurationArgs

func KubeFedConfigSpecControllerDurationPtr(v *KubeFedConfigSpecControllerDurationArgs) KubeFedConfigSpecControllerDurationPtrInput {
	return (*kubeFedConfigSpecControllerDurationPtrType)(v)
}

func (*kubeFedConfigSpecControllerDurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecControllerDuration)(nil)).Elem()
}

func (i *kubeFedConfigSpecControllerDurationPtrType) ToKubeFedConfigSpecControllerDurationPtrOutput() KubeFedConfigSpecControllerDurationPtrOutput {
	return i.ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(context.Background())
}

func (i *kubeFedConfigSpecControllerDurationPtrType) ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecControllerDurationPtrOutput)
}

type KubeFedConfigSpecControllerDurationOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecControllerDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecControllerDuration)(nil)).Elem()
}

func (o KubeFedConfigSpecControllerDurationOutput) ToKubeFedConfigSpecControllerDurationOutput() KubeFedConfigSpecControllerDurationOutput {
	return o
}

func (o KubeFedConfigSpecControllerDurationOutput) ToKubeFedConfigSpecControllerDurationOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationOutput {
	return o
}

func (o KubeFedConfigSpecControllerDurationOutput) ToKubeFedConfigSpecControllerDurationPtrOutput() KubeFedConfigSpecControllerDurationPtrOutput {
	return o.ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(context.Background())
}

func (o KubeFedConfigSpecControllerDurationOutput) ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecControllerDuration) *KubeFedConfigSpecControllerDuration {
		return &v
	}).(KubeFedConfigSpecControllerDurationPtrOutput)
}

// Time to wait before reconciling on a healthy cluster.
func (o KubeFedConfigSpecControllerDurationOutput) AvailableDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecControllerDuration) *string { return v.AvailableDelay }).(pulumi.StringPtrOutput)
}

// Time to wait before giving up on an unhealthy cluster.
func (o KubeFedConfigSpecControllerDurationOutput) UnavailableDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecControllerDuration) *string { return v.UnavailableDelay }).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecControllerDurationPtrOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecControllerDurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecControllerDuration)(nil)).Elem()
}

func (o KubeFedConfigSpecControllerDurationPtrOutput) ToKubeFedConfigSpecControllerDurationPtrOutput() KubeFedConfigSpecControllerDurationPtrOutput {
	return o
}

func (o KubeFedConfigSpecControllerDurationPtrOutput) ToKubeFedConfigSpecControllerDurationPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecControllerDurationPtrOutput {
	return o
}

func (o KubeFedConfigSpecControllerDurationPtrOutput) Elem() KubeFedConfigSpecControllerDurationOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecControllerDuration) KubeFedConfigSpecControllerDuration { return *v }).(KubeFedConfigSpecControllerDurationOutput)
}

// Time to wait before reconciling on a healthy cluster.
func (o KubeFedConfigSpecControllerDurationPtrOutput) AvailableDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecControllerDuration) *string {
		if v == nil {
			return nil
		}
		return v.AvailableDelay
	}).(pulumi.StringPtrOutput)
}

// Time to wait before giving up on an unhealthy cluster.
func (o KubeFedConfigSpecControllerDurationPtrOutput) UnavailableDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecControllerDuration) *string {
		if v == nil {
			return nil
		}
		return v.UnavailableDelay
	}).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecFeatureGates struct {
	Configuration string `pulumi:"configuration"`
	Name          string `pulumi:"name"`
}

// KubeFedConfigSpecFeatureGatesInput is an input type that accepts KubeFedConfigSpecFeatureGatesArgs and KubeFedConfigSpecFeatureGatesOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecFeatureGatesInput` via:
//
//          KubeFedConfigSpecFeatureGatesArgs{...}
type KubeFedConfigSpecFeatureGatesInput interface {
	pulumi.Input

	ToKubeFedConfigSpecFeatureGatesOutput() KubeFedConfigSpecFeatureGatesOutput
	ToKubeFedConfigSpecFeatureGatesOutputWithContext(context.Context) KubeFedConfigSpecFeatureGatesOutput
}

type KubeFedConfigSpecFeatureGatesArgs struct {
	Configuration pulumi.StringInput `pulumi:"configuration"`
	Name          pulumi.StringInput `pulumi:"name"`
}

func (KubeFedConfigSpecFeatureGatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecFeatureGates)(nil)).Elem()
}

func (i KubeFedConfigSpecFeatureGatesArgs) ToKubeFedConfigSpecFeatureGatesOutput() KubeFedConfigSpecFeatureGatesOutput {
	return i.ToKubeFedConfigSpecFeatureGatesOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecFeatureGatesArgs) ToKubeFedConfigSpecFeatureGatesOutputWithContext(ctx context.Context) KubeFedConfigSpecFeatureGatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecFeatureGatesOutput)
}

// KubeFedConfigSpecFeatureGatesArrayInput is an input type that accepts KubeFedConfigSpecFeatureGatesArray and KubeFedConfigSpecFeatureGatesArrayOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecFeatureGatesArrayInput` via:
//
//          KubeFedConfigSpecFeatureGatesArray{ KubeFedConfigSpecFeatureGatesArgs{...} }
type KubeFedConfigSpecFeatureGatesArrayInput interface {
	pulumi.Input

	ToKubeFedConfigSpecFeatureGatesArrayOutput() KubeFedConfigSpecFeatureGatesArrayOutput
	ToKubeFedConfigSpecFeatureGatesArrayOutputWithContext(context.Context) KubeFedConfigSpecFeatureGatesArrayOutput
}

type KubeFedConfigSpecFeatureGatesArray []KubeFedConfigSpecFeatureGatesInput

func (KubeFedConfigSpecFeatureGatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubeFedConfigSpecFeatureGates)(nil)).Elem()
}

func (i KubeFedConfigSpecFeatureGatesArray) ToKubeFedConfigSpecFeatureGatesArrayOutput() KubeFedConfigSpecFeatureGatesArrayOutput {
	return i.ToKubeFedConfigSpecFeatureGatesArrayOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecFeatureGatesArray) ToKubeFedConfigSpecFeatureGatesArrayOutputWithContext(ctx context.Context) KubeFedConfigSpecFeatureGatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecFeatureGatesArrayOutput)
}

type KubeFedConfigSpecFeatureGatesOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecFeatureGatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecFeatureGates)(nil)).Elem()
}

func (o KubeFedConfigSpecFeatureGatesOutput) ToKubeFedConfigSpecFeatureGatesOutput() KubeFedConfigSpecFeatureGatesOutput {
	return o
}

func (o KubeFedConfigSpecFeatureGatesOutput) ToKubeFedConfigSpecFeatureGatesOutputWithContext(ctx context.Context) KubeFedConfigSpecFeatureGatesOutput {
	return o
}

func (o KubeFedConfigSpecFeatureGatesOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedConfigSpecFeatureGates) string { return v.Configuration }).(pulumi.StringOutput)
}

func (o KubeFedConfigSpecFeatureGatesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubeFedConfigSpecFeatureGates) string { return v.Name }).(pulumi.StringOutput)
}

type KubeFedConfigSpecFeatureGatesArrayOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecFeatureGatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubeFedConfigSpecFeatureGates)(nil)).Elem()
}

func (o KubeFedConfigSpecFeatureGatesArrayOutput) ToKubeFedConfigSpecFeatureGatesArrayOutput() KubeFedConfigSpecFeatureGatesArrayOutput {
	return o
}

func (o KubeFedConfigSpecFeatureGatesArrayOutput) ToKubeFedConfigSpecFeatureGatesArrayOutputWithContext(ctx context.Context) KubeFedConfigSpecFeatureGatesArrayOutput {
	return o
}

func (o KubeFedConfigSpecFeatureGatesArrayOutput) Index(i pulumi.IntInput) KubeFedConfigSpecFeatureGatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubeFedConfigSpecFeatureGates {
		return vs[0].([]KubeFedConfigSpecFeatureGates)[vs[1].(int)]
	}).(KubeFedConfigSpecFeatureGatesOutput)
}

type KubeFedConfigSpecLeaderElect struct {
	// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
	LeaseDuration *string `pulumi:"leaseDuration"`
	// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
	RenewDeadline *string `pulumi:"renewDeadline"`
	// The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.
	ResourceLock *string `pulumi:"resourceLock"`
	// The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
	RetryPeriod *string `pulumi:"retryPeriod"`
}

// KubeFedConfigSpecLeaderElectInput is an input type that accepts KubeFedConfigSpecLeaderElectArgs and KubeFedConfigSpecLeaderElectOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecLeaderElectInput` via:
//
//          KubeFedConfigSpecLeaderElectArgs{...}
type KubeFedConfigSpecLeaderElectInput interface {
	pulumi.Input

	ToKubeFedConfigSpecLeaderElectOutput() KubeFedConfigSpecLeaderElectOutput
	ToKubeFedConfigSpecLeaderElectOutputWithContext(context.Context) KubeFedConfigSpecLeaderElectOutput
}

type KubeFedConfigSpecLeaderElectArgs struct {
	// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
	LeaseDuration pulumi.StringPtrInput `pulumi:"leaseDuration"`
	// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
	RenewDeadline pulumi.StringPtrInput `pulumi:"renewDeadline"`
	// The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.
	ResourceLock pulumi.StringPtrInput `pulumi:"resourceLock"`
	// The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
	RetryPeriod pulumi.StringPtrInput `pulumi:"retryPeriod"`
}

func (KubeFedConfigSpecLeaderElectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecLeaderElect)(nil)).Elem()
}

func (i KubeFedConfigSpecLeaderElectArgs) ToKubeFedConfigSpecLeaderElectOutput() KubeFedConfigSpecLeaderElectOutput {
	return i.ToKubeFedConfigSpecLeaderElectOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecLeaderElectArgs) ToKubeFedConfigSpecLeaderElectOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecLeaderElectOutput)
}

func (i KubeFedConfigSpecLeaderElectArgs) ToKubeFedConfigSpecLeaderElectPtrOutput() KubeFedConfigSpecLeaderElectPtrOutput {
	return i.ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecLeaderElectArgs) ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecLeaderElectOutput).ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(ctx)
}

// KubeFedConfigSpecLeaderElectPtrInput is an input type that accepts KubeFedConfigSpecLeaderElectArgs, KubeFedConfigSpecLeaderElectPtr and KubeFedConfigSpecLeaderElectPtrOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecLeaderElectPtrInput` via:
//
//          KubeFedConfigSpecLeaderElectArgs{...}
//
//  or:
//
//          nil
type KubeFedConfigSpecLeaderElectPtrInput interface {
	pulumi.Input

	ToKubeFedConfigSpecLeaderElectPtrOutput() KubeFedConfigSpecLeaderElectPtrOutput
	ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(context.Context) KubeFedConfigSpecLeaderElectPtrOutput
}

type kubeFedConfigSpecLeaderElectPtrType KubeFedConfigSpecLeaderElectArgs

func KubeFedConfigSpecLeaderElectPtr(v *KubeFedConfigSpecLeaderElectArgs) KubeFedConfigSpecLeaderElectPtrInput {
	return (*kubeFedConfigSpecLeaderElectPtrType)(v)
}

func (*kubeFedConfigSpecLeaderElectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecLeaderElect)(nil)).Elem()
}

func (i *kubeFedConfigSpecLeaderElectPtrType) ToKubeFedConfigSpecLeaderElectPtrOutput() KubeFedConfigSpecLeaderElectPtrOutput {
	return i.ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(context.Background())
}

func (i *kubeFedConfigSpecLeaderElectPtrType) ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecLeaderElectPtrOutput)
}

type KubeFedConfigSpecLeaderElectOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecLeaderElectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecLeaderElect)(nil)).Elem()
}

func (o KubeFedConfigSpecLeaderElectOutput) ToKubeFedConfigSpecLeaderElectOutput() KubeFedConfigSpecLeaderElectOutput {
	return o
}

func (o KubeFedConfigSpecLeaderElectOutput) ToKubeFedConfigSpecLeaderElectOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectOutput {
	return o
}

func (o KubeFedConfigSpecLeaderElectOutput) ToKubeFedConfigSpecLeaderElectPtrOutput() KubeFedConfigSpecLeaderElectPtrOutput {
	return o.ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(context.Background())
}

func (o KubeFedConfigSpecLeaderElectOutput) ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecLeaderElect) *KubeFedConfigSpecLeaderElect {
		return &v
	}).(KubeFedConfigSpecLeaderElectPtrOutput)
}

// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectOutput) LeaseDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecLeaderElect) *string { return v.LeaseDuration }).(pulumi.StringPtrOutput)
}

// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectOutput) RenewDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecLeaderElect) *string { return v.RenewDeadline }).(pulumi.StringPtrOutput)
}

// The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.
func (o KubeFedConfigSpecLeaderElectOutput) ResourceLock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecLeaderElect) *string { return v.ResourceLock }).(pulumi.StringPtrOutput)
}

// The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectOutput) RetryPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecLeaderElect) *string { return v.RetryPeriod }).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecLeaderElectPtrOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecLeaderElectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecLeaderElect)(nil)).Elem()
}

func (o KubeFedConfigSpecLeaderElectPtrOutput) ToKubeFedConfigSpecLeaderElectPtrOutput() KubeFedConfigSpecLeaderElectPtrOutput {
	return o
}

func (o KubeFedConfigSpecLeaderElectPtrOutput) ToKubeFedConfigSpecLeaderElectPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecLeaderElectPtrOutput {
	return o
}

func (o KubeFedConfigSpecLeaderElectPtrOutput) Elem() KubeFedConfigSpecLeaderElectOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecLeaderElect) KubeFedConfigSpecLeaderElect { return *v }).(KubeFedConfigSpecLeaderElectOutput)
}

// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectPtrOutput) LeaseDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecLeaderElect) *string {
		if v == nil {
			return nil
		}
		return v.LeaseDuration
	}).(pulumi.StringPtrOutput)
}

// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectPtrOutput) RenewDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecLeaderElect) *string {
		if v == nil {
			return nil
		}
		return v.RenewDeadline
	}).(pulumi.StringPtrOutput)
}

// The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.
func (o KubeFedConfigSpecLeaderElectPtrOutput) ResourceLock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecLeaderElect) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLock
	}).(pulumi.StringPtrOutput)
}

// The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
func (o KubeFedConfigSpecLeaderElectPtrOutput) RetryPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecLeaderElect) *string {
		if v == nil {
			return nil
		}
		return v.RetryPeriod
	}).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecSyncController struct {
	// Whether to adopt pre-existing resources in member clusters. Defaults to "Enabled".
	AdoptResources *string `pulumi:"adoptResources"`
}

// KubeFedConfigSpecSyncControllerInput is an input type that accepts KubeFedConfigSpecSyncControllerArgs and KubeFedConfigSpecSyncControllerOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecSyncControllerInput` via:
//
//          KubeFedConfigSpecSyncControllerArgs{...}
type KubeFedConfigSpecSyncControllerInput interface {
	pulumi.Input

	ToKubeFedConfigSpecSyncControllerOutput() KubeFedConfigSpecSyncControllerOutput
	ToKubeFedConfigSpecSyncControllerOutputWithContext(context.Context) KubeFedConfigSpecSyncControllerOutput
}

type KubeFedConfigSpecSyncControllerArgs struct {
	// Whether to adopt pre-existing resources in member clusters. Defaults to "Enabled".
	AdoptResources pulumi.StringPtrInput `pulumi:"adoptResources"`
}

func (KubeFedConfigSpecSyncControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecSyncController)(nil)).Elem()
}

func (i KubeFedConfigSpecSyncControllerArgs) ToKubeFedConfigSpecSyncControllerOutput() KubeFedConfigSpecSyncControllerOutput {
	return i.ToKubeFedConfigSpecSyncControllerOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecSyncControllerArgs) ToKubeFedConfigSpecSyncControllerOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecSyncControllerOutput)
}

func (i KubeFedConfigSpecSyncControllerArgs) ToKubeFedConfigSpecSyncControllerPtrOutput() KubeFedConfigSpecSyncControllerPtrOutput {
	return i.ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(context.Background())
}

func (i KubeFedConfigSpecSyncControllerArgs) ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecSyncControllerOutput).ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(ctx)
}

// KubeFedConfigSpecSyncControllerPtrInput is an input type that accepts KubeFedConfigSpecSyncControllerArgs, KubeFedConfigSpecSyncControllerPtr and KubeFedConfigSpecSyncControllerPtrOutput values.
// You can construct a concrete instance of `KubeFedConfigSpecSyncControllerPtrInput` via:
//
//          KubeFedConfigSpecSyncControllerArgs{...}
//
//  or:
//
//          nil
type KubeFedConfigSpecSyncControllerPtrInput interface {
	pulumi.Input

	ToKubeFedConfigSpecSyncControllerPtrOutput() KubeFedConfigSpecSyncControllerPtrOutput
	ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(context.Context) KubeFedConfigSpecSyncControllerPtrOutput
}

type kubeFedConfigSpecSyncControllerPtrType KubeFedConfigSpecSyncControllerArgs

func KubeFedConfigSpecSyncControllerPtr(v *KubeFedConfigSpecSyncControllerArgs) KubeFedConfigSpecSyncControllerPtrInput {
	return (*kubeFedConfigSpecSyncControllerPtrType)(v)
}

func (*kubeFedConfigSpecSyncControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecSyncController)(nil)).Elem()
}

func (i *kubeFedConfigSpecSyncControllerPtrType) ToKubeFedConfigSpecSyncControllerPtrOutput() KubeFedConfigSpecSyncControllerPtrOutput {
	return i.ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(context.Background())
}

func (i *kubeFedConfigSpecSyncControllerPtrType) ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeFedConfigSpecSyncControllerPtrOutput)
}

type KubeFedConfigSpecSyncControllerOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecSyncControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeFedConfigSpecSyncController)(nil)).Elem()
}

func (o KubeFedConfigSpecSyncControllerOutput) ToKubeFedConfigSpecSyncControllerOutput() KubeFedConfigSpecSyncControllerOutput {
	return o
}

func (o KubeFedConfigSpecSyncControllerOutput) ToKubeFedConfigSpecSyncControllerOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerOutput {
	return o
}

func (o KubeFedConfigSpecSyncControllerOutput) ToKubeFedConfigSpecSyncControllerPtrOutput() KubeFedConfigSpecSyncControllerPtrOutput {
	return o.ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(context.Background())
}

func (o KubeFedConfigSpecSyncControllerOutput) ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecSyncController) *KubeFedConfigSpecSyncController {
		return &v
	}).(KubeFedConfigSpecSyncControllerPtrOutput)
}

// Whether to adopt pre-existing resources in member clusters. Defaults to "Enabled".
func (o KubeFedConfigSpecSyncControllerOutput) AdoptResources() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeFedConfigSpecSyncController) *string { return v.AdoptResources }).(pulumi.StringPtrOutput)
}

type KubeFedConfigSpecSyncControllerPtrOutput struct{ *pulumi.OutputState }

func (KubeFedConfigSpecSyncControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeFedConfigSpecSyncController)(nil)).Elem()
}

func (o KubeFedConfigSpecSyncControllerPtrOutput) ToKubeFedConfigSpecSyncControllerPtrOutput() KubeFedConfigSpecSyncControllerPtrOutput {
	return o
}

func (o KubeFedConfigSpecSyncControllerPtrOutput) ToKubeFedConfigSpecSyncControllerPtrOutputWithContext(ctx context.Context) KubeFedConfigSpecSyncControllerPtrOutput {
	return o
}

func (o KubeFedConfigSpecSyncControllerPtrOutput) Elem() KubeFedConfigSpecSyncControllerOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecSyncController) KubeFedConfigSpecSyncController { return *v }).(KubeFedConfigSpecSyncControllerOutput)
}

// Whether to adopt pre-existing resources in member clusters. Defaults to "Enabled".
func (o KubeFedConfigSpecSyncControllerPtrOutput) AdoptResources() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeFedConfigSpecSyncController) *string {
		if v == nil {
			return nil
		}
		return v.AdoptResources
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FederatedTypeConfigTypeOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigMetadataOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecFederatedTypeOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecFederatedTypePtrOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecStatusTypeOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecStatusTypePtrOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecTargetTypeOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigSpecTargetTypePtrOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigStatusOutput{})
	pulumi.RegisterOutputType(FederatedTypeConfigStatusPtrOutput{})
	pulumi.RegisterOutputType(KubeFedClusterTypeOutput{})
	pulumi.RegisterOutputType(KubeFedClusterMetadataOutput{})
	pulumi.RegisterOutputType(KubeFedClusterSpecOutput{})
	pulumi.RegisterOutputType(KubeFedClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(KubeFedClusterSpecSecretRefOutput{})
	pulumi.RegisterOutputType(KubeFedClusterSpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(KubeFedClusterStatusOutput{})
	pulumi.RegisterOutputType(KubeFedClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(KubeFedClusterStatusConditionsOutput{})
	pulumi.RegisterOutputType(KubeFedClusterStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KubeFedConfigTypeOutput{})
	pulumi.RegisterOutputType(KubeFedConfigMetadataOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecClusterHealthCheckOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecClusterHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecControllerDurationOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecControllerDurationPtrOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecFeatureGatesOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecFeatureGatesArrayOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecLeaderElectOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecLeaderElectPtrOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecSyncControllerOutput{})
	pulumi.RegisterOutputType(KubeFedConfigSpecSyncControllerPtrOutput{})
}

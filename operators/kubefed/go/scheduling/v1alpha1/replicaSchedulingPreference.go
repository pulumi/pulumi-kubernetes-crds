// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ReplicaSchedulingPreference struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput                   `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput                   `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput               `pulumi:"metadata"`
	Spec       ReplicaSchedulingPreferenceSpecPtrOutput `pulumi:"spec"`
	Status     pulumi.MapOutput                         `pulumi:"status"`
}

// NewReplicaSchedulingPreference registers a new resource with the given unique name, arguments, and options.
func NewReplicaSchedulingPreference(ctx *pulumi.Context,
	name string, args *ReplicaSchedulingPreferenceArgs, opts ...pulumi.ResourceOption) (*ReplicaSchedulingPreference, error) {
	if args == nil {
		args = &ReplicaSchedulingPreferenceArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("scheduling.kubefed.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ReplicaSchedulingPreference")
	var resource ReplicaSchedulingPreference
	err := ctx.RegisterResource("kubernetes:scheduling.kubefed.io/v1alpha1:ReplicaSchedulingPreference", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSchedulingPreference gets an existing ReplicaSchedulingPreference resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaSchedulingPreference(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaSchedulingPreferenceState, opts ...pulumi.ResourceOption) (*ReplicaSchedulingPreference, error) {
	var resource ReplicaSchedulingPreference
	err := ctx.ReadResource("kubernetes:scheduling.kubefed.io/v1alpha1:ReplicaSchedulingPreference", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaSchedulingPreference resources.
type replicaSchedulingPreferenceState struct {
	ApiVersion *string                          `pulumi:"apiVersion"`
	Kind       *string                          `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta               `pulumi:"metadata"`
	Spec       *ReplicaSchedulingPreferenceSpec `pulumi:"spec"`
	Status     map[string]interface{}           `pulumi:"status"`
}

type ReplicaSchedulingPreferenceState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       ReplicaSchedulingPreferenceSpecPtrInput
	Status     pulumi.MapInput
}

func (ReplicaSchedulingPreferenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSchedulingPreferenceState)(nil)).Elem()
}

type replicaSchedulingPreferenceArgs struct {
	ApiVersion *string                          `pulumi:"apiVersion"`
	Kind       *string                          `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta               `pulumi:"metadata"`
	Spec       *ReplicaSchedulingPreferenceSpec `pulumi:"spec"`
	Status     map[string]interface{}           `pulumi:"status"`
}

// The set of arguments for constructing a ReplicaSchedulingPreference resource.
type ReplicaSchedulingPreferenceArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       ReplicaSchedulingPreferenceSpecPtrInput
	Status     pulumi.MapInput
}

func (ReplicaSchedulingPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSchedulingPreferenceArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DNSEndpointType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *DNSEndpointSpec   `pulumi:"spec"`
	Status     *DNSEndpointStatus `pulumi:"status"`
}

// DNSEndpointTypeInput is an input type that accepts DNSEndpointTypeArgs and DNSEndpointTypeOutput values.
// You can construct a concrete instance of `DNSEndpointTypeInput` via:
//
//          DNSEndpointTypeArgs{...}
type DNSEndpointTypeInput interface {
	pulumi.Input

	ToDNSEndpointTypeOutput() DNSEndpointTypeOutput
	ToDNSEndpointTypeOutputWithContext(context.Context) DNSEndpointTypeOutput
}

type DNSEndpointTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       DNSEndpointSpecPtrInput   `pulumi:"spec"`
	Status     DNSEndpointStatusPtrInput `pulumi:"status"`
}

func (DNSEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointType)(nil)).Elem()
}

func (i DNSEndpointTypeArgs) ToDNSEndpointTypeOutput() DNSEndpointTypeOutput {
	return i.ToDNSEndpointTypeOutputWithContext(context.Background())
}

func (i DNSEndpointTypeArgs) ToDNSEndpointTypeOutputWithContext(ctx context.Context) DNSEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointTypeOutput)
}

type DNSEndpointTypeOutput struct{ *pulumi.OutputState }

func (DNSEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointType)(nil)).Elem()
}

func (o DNSEndpointTypeOutput) ToDNSEndpointTypeOutput() DNSEndpointTypeOutput {
	return o
}

func (o DNSEndpointTypeOutput) ToDNSEndpointTypeOutputWithContext(ctx context.Context) DNSEndpointTypeOutput {
	return o
}

func (o DNSEndpointTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o DNSEndpointTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o DNSEndpointTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o DNSEndpointTypeOutput) Spec() DNSEndpointSpecPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *DNSEndpointSpec { return v.Spec }).(DNSEndpointSpecPtrOutput)
}

func (o DNSEndpointTypeOutput) Status() DNSEndpointStatusPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *DNSEndpointStatus { return v.Status }).(DNSEndpointStatusPtrOutput)
}

type DNSEndpointMetadata struct {
}

// DNSEndpointMetadataInput is an input type that accepts DNSEndpointMetadataArgs and DNSEndpointMetadataOutput values.
// You can construct a concrete instance of `DNSEndpointMetadataInput` via:
//
//          DNSEndpointMetadataArgs{...}
type DNSEndpointMetadataInput interface {
	pulumi.Input

	ToDNSEndpointMetadataOutput() DNSEndpointMetadataOutput
	ToDNSEndpointMetadataOutputWithContext(context.Context) DNSEndpointMetadataOutput
}

type DNSEndpointMetadataArgs struct {
}

func (DNSEndpointMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointMetadata)(nil)).Elem()
}

func (i DNSEndpointMetadataArgs) ToDNSEndpointMetadataOutput() DNSEndpointMetadataOutput {
	return i.ToDNSEndpointMetadataOutputWithContext(context.Background())
}

func (i DNSEndpointMetadataArgs) ToDNSEndpointMetadataOutputWithContext(ctx context.Context) DNSEndpointMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointMetadataOutput)
}

type DNSEndpointMetadataOutput struct{ *pulumi.OutputState }

func (DNSEndpointMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointMetadata)(nil)).Elem()
}

func (o DNSEndpointMetadataOutput) ToDNSEndpointMetadataOutput() DNSEndpointMetadataOutput {
	return o
}

func (o DNSEndpointMetadataOutput) ToDNSEndpointMetadataOutputWithContext(ctx context.Context) DNSEndpointMetadataOutput {
	return o
}

type DNSEndpointSpec struct {
	Endpoints []DNSEndpointSpecEndpoints `pulumi:"endpoints"`
}

// DNSEndpointSpecInput is an input type that accepts DNSEndpointSpecArgs and DNSEndpointSpecOutput values.
// You can construct a concrete instance of `DNSEndpointSpecInput` via:
//
//          DNSEndpointSpecArgs{...}
type DNSEndpointSpecInput interface {
	pulumi.Input

	ToDNSEndpointSpecOutput() DNSEndpointSpecOutput
	ToDNSEndpointSpecOutputWithContext(context.Context) DNSEndpointSpecOutput
}

type DNSEndpointSpecArgs struct {
	Endpoints DNSEndpointSpecEndpointsArrayInput `pulumi:"endpoints"`
}

func (DNSEndpointSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpec)(nil)).Elem()
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecOutput() DNSEndpointSpecOutput {
	return i.ToDNSEndpointSpecOutputWithContext(context.Background())
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecOutputWithContext(ctx context.Context) DNSEndpointSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecOutput)
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return i.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecOutput).ToDNSEndpointSpecPtrOutputWithContext(ctx)
}

// DNSEndpointSpecPtrInput is an input type that accepts DNSEndpointSpecArgs, DNSEndpointSpecPtr and DNSEndpointSpecPtrOutput values.
// You can construct a concrete instance of `DNSEndpointSpecPtrInput` via:
//
//          DNSEndpointSpecArgs{...}
//
//  or:
//
//          nil
type DNSEndpointSpecPtrInput interface {
	pulumi.Input

	ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput
	ToDNSEndpointSpecPtrOutputWithContext(context.Context) DNSEndpointSpecPtrOutput
}

type dnsendpointSpecPtrType DNSEndpointSpecArgs

func DNSEndpointSpecPtr(v *DNSEndpointSpecArgs) DNSEndpointSpecPtrInput {
	return (*dnsendpointSpecPtrType)(v)
}

func (*dnsendpointSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpec)(nil)).Elem()
}

func (i *dnsendpointSpecPtrType) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return i.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (i *dnsendpointSpecPtrType) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecPtrOutput)
}

type DNSEndpointSpecOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpec)(nil)).Elem()
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecOutput() DNSEndpointSpecOutput {
	return o
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecOutputWithContext(ctx context.Context) DNSEndpointSpecOutput {
	return o
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return o.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpec) *DNSEndpointSpec {
		return &v
	}).(DNSEndpointSpecPtrOutput)
}
func (o DNSEndpointSpecOutput) Endpoints() DNSEndpointSpecEndpointsArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpec) []DNSEndpointSpecEndpoints { return v.Endpoints }).(DNSEndpointSpecEndpointsArrayOutput)
}

type DNSEndpointSpecPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpec)(nil)).Elem()
}

func (o DNSEndpointSpecPtrOutput) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return o
}

func (o DNSEndpointSpecPtrOutput) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return o
}

func (o DNSEndpointSpecPtrOutput) Elem() DNSEndpointSpecOutput {
	return o.ApplyT(func(v *DNSEndpointSpec) DNSEndpointSpec { return *v }).(DNSEndpointSpecOutput)
}

func (o DNSEndpointSpecPtrOutput) Endpoints() DNSEndpointSpecEndpointsArrayOutput {
	return o.ApplyT(func(v *DNSEndpointSpec) []DNSEndpointSpecEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(DNSEndpointSpecEndpointsArrayOutput)
}

type DNSEndpointSpecEndpoints struct {
	// The FQDN of the DNS record.
	DnsName *string `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint.
	Labels map[string]interface{} `pulumi:"labels"`
	// TTL for the record in seconds.
	RecordTTL *int `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, SRV, TXT etc.
	RecordType *string `pulumi:"recordType"`
	// The targets that the DNS record points to.
	Targets []string `pulumi:"targets"`
}

// DNSEndpointSpecEndpointsInput is an input type that accepts DNSEndpointSpecEndpointsArgs and DNSEndpointSpecEndpointsOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsInput` via:
//
//          DNSEndpointSpecEndpointsArgs{...}
type DNSEndpointSpecEndpointsInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput
	ToDNSEndpointSpecEndpointsOutputWithContext(context.Context) DNSEndpointSpecEndpointsOutput
}

type DNSEndpointSpecEndpointsArgs struct {
	// The FQDN of the DNS record.
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint.
	Labels pulumi.MapInput `pulumi:"labels"`
	// TTL for the record in seconds.
	RecordTTL pulumi.IntPtrInput `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, SRV, TXT etc.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// The targets that the DNS record points to.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (DNSEndpointSpecEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsArgs) ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput {
	return i.ToDNSEndpointSpecEndpointsOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsArgs) ToDNSEndpointSpecEndpointsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsOutput)
}

// DNSEndpointSpecEndpointsArrayInput is an input type that accepts DNSEndpointSpecEndpointsArray and DNSEndpointSpecEndpointsArrayOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsArrayInput` via:
//
//          DNSEndpointSpecEndpointsArray{ DNSEndpointSpecEndpointsArgs{...} }
type DNSEndpointSpecEndpointsArrayInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput
	ToDNSEndpointSpecEndpointsArrayOutputWithContext(context.Context) DNSEndpointSpecEndpointsArrayOutput
}

type DNSEndpointSpecEndpointsArray []DNSEndpointSpecEndpointsInput

func (DNSEndpointSpecEndpointsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsArray) ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput {
	return i.ToDNSEndpointSpecEndpointsArrayOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsArray) ToDNSEndpointSpecEndpointsArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsArrayOutput)
}

type DNSEndpointSpecEndpointsOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsOutput) ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput {
	return o
}

func (o DNSEndpointSpecEndpointsOutput) ToDNSEndpointSpecEndpointsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsOutput {
	return o
}

// The FQDN of the DNS record.
func (o DNSEndpointSpecEndpointsOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Labels stores labels defined for the Endpoint.
func (o DNSEndpointSpecEndpointsOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// TTL for the record in seconds.
func (o DNSEndpointSpecEndpointsOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *int { return v.RecordTTL }).(pulumi.IntPtrOutput)
}

// RecordType type of record, e.g. CNAME, A, SRV, TXT etc.
func (o DNSEndpointSpecEndpointsOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// The targets that the DNS record points to.
func (o DNSEndpointSpecEndpointsOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type DNSEndpointSpecEndpointsArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsArrayOutput) ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsArrayOutput) ToDNSEndpointSpecEndpointsArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsArrayOutput) Index(i pulumi.IntInput) DNSEndpointSpecEndpointsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointSpecEndpoints {
		return vs[0].([]DNSEndpointSpecEndpoints)[vs[1].(int)]
	}).(DNSEndpointSpecEndpointsOutput)
}

// Labels stores labels defined for the Endpoint.
type DNSEndpointSpecEndpointsLabels struct {
}

// DNSEndpointSpecEndpointsLabelsInput is an input type that accepts DNSEndpointSpecEndpointsLabelsArgs and DNSEndpointSpecEndpointsLabelsOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsLabelsInput` via:
//
//          DNSEndpointSpecEndpointsLabelsArgs{...}
type DNSEndpointSpecEndpointsLabelsInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsLabelsOutput() DNSEndpointSpecEndpointsLabelsOutput
	ToDNSEndpointSpecEndpointsLabelsOutputWithContext(context.Context) DNSEndpointSpecEndpointsLabelsOutput
}

// Labels stores labels defined for the Endpoint.
type DNSEndpointSpecEndpointsLabelsArgs struct {
}

func (DNSEndpointSpecEndpointsLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsLabels)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsLabelsArgs) ToDNSEndpointSpecEndpointsLabelsOutput() DNSEndpointSpecEndpointsLabelsOutput {
	return i.ToDNSEndpointSpecEndpointsLabelsOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsLabelsArgs) ToDNSEndpointSpecEndpointsLabelsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsLabelsOutput)
}

// Labels stores labels defined for the Endpoint.
type DNSEndpointSpecEndpointsLabelsOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsLabels)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsLabelsOutput) ToDNSEndpointSpecEndpointsLabelsOutput() DNSEndpointSpecEndpointsLabelsOutput {
	return o
}

func (o DNSEndpointSpecEndpointsLabelsOutput) ToDNSEndpointSpecEndpointsLabelsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsLabelsOutput {
	return o
}

type DNSEndpointStatus struct {
	// ObservedGeneration is the generation as observed by the controller consuming the DNSEndpoint.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// DNSEndpointStatusInput is an input type that accepts DNSEndpointStatusArgs and DNSEndpointStatusOutput values.
// You can construct a concrete instance of `DNSEndpointStatusInput` via:
//
//          DNSEndpointStatusArgs{...}
type DNSEndpointStatusInput interface {
	pulumi.Input

	ToDNSEndpointStatusOutput() DNSEndpointStatusOutput
	ToDNSEndpointStatusOutputWithContext(context.Context) DNSEndpointStatusOutput
}

type DNSEndpointStatusArgs struct {
	// ObservedGeneration is the generation as observed by the controller consuming the DNSEndpoint.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (DNSEndpointStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatus)(nil)).Elem()
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusOutput() DNSEndpointStatusOutput {
	return i.ToDNSEndpointStatusOutputWithContext(context.Background())
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusOutputWithContext(ctx context.Context) DNSEndpointStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusOutput)
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return i.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusOutput).ToDNSEndpointStatusPtrOutputWithContext(ctx)
}

// DNSEndpointStatusPtrInput is an input type that accepts DNSEndpointStatusArgs, DNSEndpointStatusPtr and DNSEndpointStatusPtrOutput values.
// You can construct a concrete instance of `DNSEndpointStatusPtrInput` via:
//
//          DNSEndpointStatusArgs{...}
//
//  or:
//
//          nil
type DNSEndpointStatusPtrInput interface {
	pulumi.Input

	ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput
	ToDNSEndpointStatusPtrOutputWithContext(context.Context) DNSEndpointStatusPtrOutput
}

type dnsendpointStatusPtrType DNSEndpointStatusArgs

func DNSEndpointStatusPtr(v *DNSEndpointStatusArgs) DNSEndpointStatusPtrInput {
	return (*dnsendpointStatusPtrType)(v)
}

func (*dnsendpointStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatus)(nil)).Elem()
}

func (i *dnsendpointStatusPtrType) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return i.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (i *dnsendpointStatusPtrType) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusPtrOutput)
}

type DNSEndpointStatusOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatus)(nil)).Elem()
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusOutput() DNSEndpointStatusOutput {
	return o
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusOutputWithContext(ctx context.Context) DNSEndpointStatusOutput {
	return o
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return o.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return o.ApplyT(func(v DNSEndpointStatus) *DNSEndpointStatus {
		return &v
	}).(DNSEndpointStatusPtrOutput)
}

// ObservedGeneration is the generation as observed by the controller consuming the DNSEndpoint.
func (o DNSEndpointStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type DNSEndpointStatusPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatus)(nil)).Elem()
}

func (o DNSEndpointStatusPtrOutput) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return o
}

func (o DNSEndpointStatusPtrOutput) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return o
}

func (o DNSEndpointStatusPtrOutput) Elem() DNSEndpointStatusOutput {
	return o.ApplyT(func(v *DNSEndpointStatus) DNSEndpointStatus { return *v }).(DNSEndpointStatusOutput)
}

// ObservedGeneration is the generation as observed by the controller consuming the DNSEndpoint.
func (o DNSEndpointStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DNSEndpointStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

type DomainType struct {
	ApiVersion *string `pulumi:"apiVersion"`
	// Domain is the DNS zone associated with the KubeFed control plane
	Domain   string             `pulumi:"domain"`
	Kind     *string            `pulumi:"kind"`
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// NameServer is the authoritative DNS name server for the KubeFed domain
	NameServer *string `pulumi:"nameServer"`
}

// DomainTypeInput is an input type that accepts DomainTypeArgs and DomainTypeOutput values.
// You can construct a concrete instance of `DomainTypeInput` via:
//
//          DomainTypeArgs{...}
type DomainTypeInput interface {
	pulumi.Input

	ToDomainTypeOutput() DomainTypeOutput
	ToDomainTypeOutputWithContext(context.Context) DomainTypeOutput
}

type DomainTypeArgs struct {
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Domain is the DNS zone associated with the KubeFed control plane
	Domain   pulumi.StringInput        `pulumi:"domain"`
	Kind     pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// NameServer is the authoritative DNS name server for the KubeFed domain
	NameServer pulumi.StringPtrInput `pulumi:"nameServer"`
}

func (DomainTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainType)(nil)).Elem()
}

func (i DomainTypeArgs) ToDomainTypeOutput() DomainTypeOutput {
	return i.ToDomainTypeOutputWithContext(context.Background())
}

func (i DomainTypeArgs) ToDomainTypeOutputWithContext(ctx context.Context) DomainTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTypeOutput)
}

type DomainTypeOutput struct{ *pulumi.OutputState }

func (DomainTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainType)(nil)).Elem()
}

func (o DomainTypeOutput) ToDomainTypeOutput() DomainTypeOutput {
	return o
}

func (o DomainTypeOutput) ToDomainTypeOutputWithContext(ctx context.Context) DomainTypeOutput {
	return o
}

func (o DomainTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Domain is the DNS zone associated with the KubeFed control plane
func (o DomainTypeOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DomainType) string { return v.Domain }).(pulumi.StringOutput)
}

func (o DomainTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o DomainTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DomainType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// NameServer is the authoritative DNS name server for the KubeFed domain
func (o DomainTypeOutput) NameServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainType) *string { return v.NameServer }).(pulumi.StringPtrOutput)
}

type DomainMetadata struct {
}

// DomainMetadataInput is an input type that accepts DomainMetadataArgs and DomainMetadataOutput values.
// You can construct a concrete instance of `DomainMetadataInput` via:
//
//          DomainMetadataArgs{...}
type DomainMetadataInput interface {
	pulumi.Input

	ToDomainMetadataOutput() DomainMetadataOutput
	ToDomainMetadataOutputWithContext(context.Context) DomainMetadataOutput
}

type DomainMetadataArgs struct {
}

func (DomainMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMetadata)(nil)).Elem()
}

func (i DomainMetadataArgs) ToDomainMetadataOutput() DomainMetadataOutput {
	return i.ToDomainMetadataOutputWithContext(context.Background())
}

func (i DomainMetadataArgs) ToDomainMetadataOutputWithContext(ctx context.Context) DomainMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMetadataOutput)
}

type DomainMetadataOutput struct{ *pulumi.OutputState }

func (DomainMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMetadata)(nil)).Elem()
}

func (o DomainMetadataOutput) ToDomainMetadataOutput() DomainMetadataOutput {
	return o
}

func (o DomainMetadataOutput) ToDomainMetadataOutputWithContext(ctx context.Context) DomainMetadataOutput {
	return o
}

type IngressDNSRecordType struct {
	ApiVersion *string                 `pulumi:"apiVersion"`
	Kind       *string                 `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec       *IngressDNSRecordSpec   `pulumi:"spec"`
	Status     *IngressDNSRecordStatus `pulumi:"status"`
}

// IngressDNSRecordTypeInput is an input type that accepts IngressDNSRecordTypeArgs and IngressDNSRecordTypeOutput values.
// You can construct a concrete instance of `IngressDNSRecordTypeInput` via:
//
//          IngressDNSRecordTypeArgs{...}
type IngressDNSRecordTypeInput interface {
	pulumi.Input

	ToIngressDNSRecordTypeOutput() IngressDNSRecordTypeOutput
	ToIngressDNSRecordTypeOutputWithContext(context.Context) IngressDNSRecordTypeOutput
}

type IngressDNSRecordTypeArgs struct {
	ApiVersion pulumi.StringPtrInput          `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput      `pulumi:"metadata"`
	Spec       IngressDNSRecordSpecPtrInput   `pulumi:"spec"`
	Status     IngressDNSRecordStatusPtrInput `pulumi:"status"`
}

func (IngressDNSRecordTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordType)(nil)).Elem()
}

func (i IngressDNSRecordTypeArgs) ToIngressDNSRecordTypeOutput() IngressDNSRecordTypeOutput {
	return i.ToIngressDNSRecordTypeOutputWithContext(context.Background())
}

func (i IngressDNSRecordTypeArgs) ToIngressDNSRecordTypeOutputWithContext(ctx context.Context) IngressDNSRecordTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordTypeOutput)
}

type IngressDNSRecordTypeOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordType)(nil)).Elem()
}

func (o IngressDNSRecordTypeOutput) ToIngressDNSRecordTypeOutput() IngressDNSRecordTypeOutput {
	return o
}

func (o IngressDNSRecordTypeOutput) ToIngressDNSRecordTypeOutputWithContext(ctx context.Context) IngressDNSRecordTypeOutput {
	return o
}

func (o IngressDNSRecordTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o IngressDNSRecordTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o IngressDNSRecordTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o IngressDNSRecordTypeOutput) Spec() IngressDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordType) *IngressDNSRecordSpec { return v.Spec }).(IngressDNSRecordSpecPtrOutput)
}

func (o IngressDNSRecordTypeOutput) Status() IngressDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordType) *IngressDNSRecordStatus { return v.Status }).(IngressDNSRecordStatusPtrOutput)
}

type IngressDNSRecordMetadata struct {
}

// IngressDNSRecordMetadataInput is an input type that accepts IngressDNSRecordMetadataArgs and IngressDNSRecordMetadataOutput values.
// You can construct a concrete instance of `IngressDNSRecordMetadataInput` via:
//
//          IngressDNSRecordMetadataArgs{...}
type IngressDNSRecordMetadataInput interface {
	pulumi.Input

	ToIngressDNSRecordMetadataOutput() IngressDNSRecordMetadataOutput
	ToIngressDNSRecordMetadataOutputWithContext(context.Context) IngressDNSRecordMetadataOutput
}

type IngressDNSRecordMetadataArgs struct {
}

func (IngressDNSRecordMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordMetadata)(nil)).Elem()
}

func (i IngressDNSRecordMetadataArgs) ToIngressDNSRecordMetadataOutput() IngressDNSRecordMetadataOutput {
	return i.ToIngressDNSRecordMetadataOutputWithContext(context.Background())
}

func (i IngressDNSRecordMetadataArgs) ToIngressDNSRecordMetadataOutputWithContext(ctx context.Context) IngressDNSRecordMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordMetadataOutput)
}

type IngressDNSRecordMetadataOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordMetadata)(nil)).Elem()
}

func (o IngressDNSRecordMetadataOutput) ToIngressDNSRecordMetadataOutput() IngressDNSRecordMetadataOutput {
	return o
}

func (o IngressDNSRecordMetadataOutput) ToIngressDNSRecordMetadataOutputWithContext(ctx context.Context) IngressDNSRecordMetadataOutput {
	return o
}

type IngressDNSRecordSpec struct {
	// Host from the IngressRule in Cluster Ingress Spec
	Hosts []string `pulumi:"hosts"`
	// RecordTTL is the TTL in seconds for DNS records created for the Ingress, if omitted a default would be used
	RecordTTL *int `pulumi:"recordTTL"`
}

// IngressDNSRecordSpecInput is an input type that accepts IngressDNSRecordSpecArgs and IngressDNSRecordSpecOutput values.
// You can construct a concrete instance of `IngressDNSRecordSpecInput` via:
//
//          IngressDNSRecordSpecArgs{...}
type IngressDNSRecordSpecInput interface {
	pulumi.Input

	ToIngressDNSRecordSpecOutput() IngressDNSRecordSpecOutput
	ToIngressDNSRecordSpecOutputWithContext(context.Context) IngressDNSRecordSpecOutput
}

type IngressDNSRecordSpecArgs struct {
	// Host from the IngressRule in Cluster Ingress Spec
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// RecordTTL is the TTL in seconds for DNS records created for the Ingress, if omitted a default would be used
	RecordTTL pulumi.IntPtrInput `pulumi:"recordTTL"`
}

func (IngressDNSRecordSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordSpec)(nil)).Elem()
}

func (i IngressDNSRecordSpecArgs) ToIngressDNSRecordSpecOutput() IngressDNSRecordSpecOutput {
	return i.ToIngressDNSRecordSpecOutputWithContext(context.Background())
}

func (i IngressDNSRecordSpecArgs) ToIngressDNSRecordSpecOutputWithContext(ctx context.Context) IngressDNSRecordSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordSpecOutput)
}

func (i IngressDNSRecordSpecArgs) ToIngressDNSRecordSpecPtrOutput() IngressDNSRecordSpecPtrOutput {
	return i.ToIngressDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i IngressDNSRecordSpecArgs) ToIngressDNSRecordSpecPtrOutputWithContext(ctx context.Context) IngressDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordSpecOutput).ToIngressDNSRecordSpecPtrOutputWithContext(ctx)
}

// IngressDNSRecordSpecPtrInput is an input type that accepts IngressDNSRecordSpecArgs, IngressDNSRecordSpecPtr and IngressDNSRecordSpecPtrOutput values.
// You can construct a concrete instance of `IngressDNSRecordSpecPtrInput` via:
//
//          IngressDNSRecordSpecArgs{...}
//
//  or:
//
//          nil
type IngressDNSRecordSpecPtrInput interface {
	pulumi.Input

	ToIngressDNSRecordSpecPtrOutput() IngressDNSRecordSpecPtrOutput
	ToIngressDNSRecordSpecPtrOutputWithContext(context.Context) IngressDNSRecordSpecPtrOutput
}

type ingressDNSRecordSpecPtrType IngressDNSRecordSpecArgs

func IngressDNSRecordSpecPtr(v *IngressDNSRecordSpecArgs) IngressDNSRecordSpecPtrInput {
	return (*ingressDNSRecordSpecPtrType)(v)
}

func (*ingressDNSRecordSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDNSRecordSpec)(nil)).Elem()
}

func (i *ingressDNSRecordSpecPtrType) ToIngressDNSRecordSpecPtrOutput() IngressDNSRecordSpecPtrOutput {
	return i.ToIngressDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i *ingressDNSRecordSpecPtrType) ToIngressDNSRecordSpecPtrOutputWithContext(ctx context.Context) IngressDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordSpecPtrOutput)
}

type IngressDNSRecordSpecOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordSpec)(nil)).Elem()
}

func (o IngressDNSRecordSpecOutput) ToIngressDNSRecordSpecOutput() IngressDNSRecordSpecOutput {
	return o
}

func (o IngressDNSRecordSpecOutput) ToIngressDNSRecordSpecOutputWithContext(ctx context.Context) IngressDNSRecordSpecOutput {
	return o
}

func (o IngressDNSRecordSpecOutput) ToIngressDNSRecordSpecPtrOutput() IngressDNSRecordSpecPtrOutput {
	return o.ToIngressDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (o IngressDNSRecordSpecOutput) ToIngressDNSRecordSpecPtrOutputWithContext(ctx context.Context) IngressDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordSpec) *IngressDNSRecordSpec {
		return &v
	}).(IngressDNSRecordSpecPtrOutput)
}

// Host from the IngressRule in Cluster Ingress Spec
func (o IngressDNSRecordSpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IngressDNSRecordSpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// RecordTTL is the TTL in seconds for DNS records created for the Ingress, if omitted a default would be used
func (o IngressDNSRecordSpecOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordSpec) *int { return v.RecordTTL }).(pulumi.IntPtrOutput)
}

type IngressDNSRecordSpecPtrOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDNSRecordSpec)(nil)).Elem()
}

func (o IngressDNSRecordSpecPtrOutput) ToIngressDNSRecordSpecPtrOutput() IngressDNSRecordSpecPtrOutput {
	return o
}

func (o IngressDNSRecordSpecPtrOutput) ToIngressDNSRecordSpecPtrOutputWithContext(ctx context.Context) IngressDNSRecordSpecPtrOutput {
	return o
}

func (o IngressDNSRecordSpecPtrOutput) Elem() IngressDNSRecordSpecOutput {
	return o.ApplyT(func(v *IngressDNSRecordSpec) IngressDNSRecordSpec { return *v }).(IngressDNSRecordSpecOutput)
}

// Host from the IngressRule in Cluster Ingress Spec
func (o IngressDNSRecordSpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IngressDNSRecordSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// RecordTTL is the TTL in seconds for DNS records created for the Ingress, if omitted a default would be used
func (o IngressDNSRecordSpecPtrOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IngressDNSRecordSpec) *int {
		if v == nil {
			return nil
		}
		return v.RecordTTL
	}).(pulumi.IntPtrOutput)
}

type IngressDNSRecordStatus struct {
	// Array of Ingress Controller LoadBalancers
	Dns []IngressDNSRecordStatusDns `pulumi:"dns"`
}

// IngressDNSRecordStatusInput is an input type that accepts IngressDNSRecordStatusArgs and IngressDNSRecordStatusOutput values.
// You can construct a concrete instance of `IngressDNSRecordStatusInput` via:
//
//          IngressDNSRecordStatusArgs{...}
type IngressDNSRecordStatusInput interface {
	pulumi.Input

	ToIngressDNSRecordStatusOutput() IngressDNSRecordStatusOutput
	ToIngressDNSRecordStatusOutputWithContext(context.Context) IngressDNSRecordStatusOutput
}

type IngressDNSRecordStatusArgs struct {
	// Array of Ingress Controller LoadBalancers
	Dns IngressDNSRecordStatusDnsArrayInput `pulumi:"dns"`
}

func (IngressDNSRecordStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatus)(nil)).Elem()
}

func (i IngressDNSRecordStatusArgs) ToIngressDNSRecordStatusOutput() IngressDNSRecordStatusOutput {
	return i.ToIngressDNSRecordStatusOutputWithContext(context.Background())
}

func (i IngressDNSRecordStatusArgs) ToIngressDNSRecordStatusOutputWithContext(ctx context.Context) IngressDNSRecordStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusOutput)
}

func (i IngressDNSRecordStatusArgs) ToIngressDNSRecordStatusPtrOutput() IngressDNSRecordStatusPtrOutput {
	return i.ToIngressDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i IngressDNSRecordStatusArgs) ToIngressDNSRecordStatusPtrOutputWithContext(ctx context.Context) IngressDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusOutput).ToIngressDNSRecordStatusPtrOutputWithContext(ctx)
}

// IngressDNSRecordStatusPtrInput is an input type that accepts IngressDNSRecordStatusArgs, IngressDNSRecordStatusPtr and IngressDNSRecordStatusPtrOutput values.
// You can construct a concrete instance of `IngressDNSRecordStatusPtrInput` via:
//
//          IngressDNSRecordStatusArgs{...}
//
//  or:
//
//          nil
type IngressDNSRecordStatusPtrInput interface {
	pulumi.Input

	ToIngressDNSRecordStatusPtrOutput() IngressDNSRecordStatusPtrOutput
	ToIngressDNSRecordStatusPtrOutputWithContext(context.Context) IngressDNSRecordStatusPtrOutput
}

type ingressDNSRecordStatusPtrType IngressDNSRecordStatusArgs

func IngressDNSRecordStatusPtr(v *IngressDNSRecordStatusArgs) IngressDNSRecordStatusPtrInput {
	return (*ingressDNSRecordStatusPtrType)(v)
}

func (*ingressDNSRecordStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDNSRecordStatus)(nil)).Elem()
}

func (i *ingressDNSRecordStatusPtrType) ToIngressDNSRecordStatusPtrOutput() IngressDNSRecordStatusPtrOutput {
	return i.ToIngressDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i *ingressDNSRecordStatusPtrType) ToIngressDNSRecordStatusPtrOutputWithContext(ctx context.Context) IngressDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusPtrOutput)
}

type IngressDNSRecordStatusOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatus)(nil)).Elem()
}

func (o IngressDNSRecordStatusOutput) ToIngressDNSRecordStatusOutput() IngressDNSRecordStatusOutput {
	return o
}

func (o IngressDNSRecordStatusOutput) ToIngressDNSRecordStatusOutputWithContext(ctx context.Context) IngressDNSRecordStatusOutput {
	return o
}

func (o IngressDNSRecordStatusOutput) ToIngressDNSRecordStatusPtrOutput() IngressDNSRecordStatusPtrOutput {
	return o.ToIngressDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (o IngressDNSRecordStatusOutput) ToIngressDNSRecordStatusPtrOutputWithContext(ctx context.Context) IngressDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordStatus) *IngressDNSRecordStatus {
		return &v
	}).(IngressDNSRecordStatusPtrOutput)
}

// Array of Ingress Controller LoadBalancers
func (o IngressDNSRecordStatusOutput) Dns() IngressDNSRecordStatusDnsArrayOutput {
	return o.ApplyT(func(v IngressDNSRecordStatus) []IngressDNSRecordStatusDns { return v.Dns }).(IngressDNSRecordStatusDnsArrayOutput)
}

type IngressDNSRecordStatusPtrOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDNSRecordStatus)(nil)).Elem()
}

func (o IngressDNSRecordStatusPtrOutput) ToIngressDNSRecordStatusPtrOutput() IngressDNSRecordStatusPtrOutput {
	return o
}

func (o IngressDNSRecordStatusPtrOutput) ToIngressDNSRecordStatusPtrOutputWithContext(ctx context.Context) IngressDNSRecordStatusPtrOutput {
	return o
}

func (o IngressDNSRecordStatusPtrOutput) Elem() IngressDNSRecordStatusOutput {
	return o.ApplyT(func(v *IngressDNSRecordStatus) IngressDNSRecordStatus { return *v }).(IngressDNSRecordStatusOutput)
}

// Array of Ingress Controller LoadBalancers
func (o IngressDNSRecordStatusPtrOutput) Dns() IngressDNSRecordStatusDnsArrayOutput {
	return o.ApplyT(func(v *IngressDNSRecordStatus) []IngressDNSRecordStatusDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(IngressDNSRecordStatusDnsArrayOutput)
}

type IngressDNSRecordStatusDns struct {
	// Cluster name
	Cluster *string `pulumi:"cluster"`
	// LoadBalancer for the corresponding ingress controller
	LoadBalancer map[string]interface{} `pulumi:"loadBalancer"`
}

// IngressDNSRecordStatusDnsInput is an input type that accepts IngressDNSRecordStatusDnsArgs and IngressDNSRecordStatusDnsOutput values.
// You can construct a concrete instance of `IngressDNSRecordStatusDnsInput` via:
//
//          IngressDNSRecordStatusDnsArgs{...}
type IngressDNSRecordStatusDnsInput interface {
	pulumi.Input

	ToIngressDNSRecordStatusDnsOutput() IngressDNSRecordStatusDnsOutput
	ToIngressDNSRecordStatusDnsOutputWithContext(context.Context) IngressDNSRecordStatusDnsOutput
}

type IngressDNSRecordStatusDnsArgs struct {
	// Cluster name
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// LoadBalancer for the corresponding ingress controller
	LoadBalancer pulumi.MapInput `pulumi:"loadBalancer"`
}

func (IngressDNSRecordStatusDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatusDns)(nil)).Elem()
}

func (i IngressDNSRecordStatusDnsArgs) ToIngressDNSRecordStatusDnsOutput() IngressDNSRecordStatusDnsOutput {
	return i.ToIngressDNSRecordStatusDnsOutputWithContext(context.Background())
}

func (i IngressDNSRecordStatusDnsArgs) ToIngressDNSRecordStatusDnsOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusDnsOutput)
}

// IngressDNSRecordStatusDnsArrayInput is an input type that accepts IngressDNSRecordStatusDnsArray and IngressDNSRecordStatusDnsArrayOutput values.
// You can construct a concrete instance of `IngressDNSRecordStatusDnsArrayInput` via:
//
//          IngressDNSRecordStatusDnsArray{ IngressDNSRecordStatusDnsArgs{...} }
type IngressDNSRecordStatusDnsArrayInput interface {
	pulumi.Input

	ToIngressDNSRecordStatusDnsArrayOutput() IngressDNSRecordStatusDnsArrayOutput
	ToIngressDNSRecordStatusDnsArrayOutputWithContext(context.Context) IngressDNSRecordStatusDnsArrayOutput
}

type IngressDNSRecordStatusDnsArray []IngressDNSRecordStatusDnsInput

func (IngressDNSRecordStatusDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressDNSRecordStatusDns)(nil)).Elem()
}

func (i IngressDNSRecordStatusDnsArray) ToIngressDNSRecordStatusDnsArrayOutput() IngressDNSRecordStatusDnsArrayOutput {
	return i.ToIngressDNSRecordStatusDnsArrayOutputWithContext(context.Background())
}

func (i IngressDNSRecordStatusDnsArray) ToIngressDNSRecordStatusDnsArrayOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusDnsArrayOutput)
}

type IngressDNSRecordStatusDnsOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordStatusDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatusDns)(nil)).Elem()
}

func (o IngressDNSRecordStatusDnsOutput) ToIngressDNSRecordStatusDnsOutput() IngressDNSRecordStatusDnsOutput {
	return o
}

func (o IngressDNSRecordStatusDnsOutput) ToIngressDNSRecordStatusDnsOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsOutput {
	return o
}

// Cluster name
func (o IngressDNSRecordStatusDnsOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressDNSRecordStatusDns) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// LoadBalancer for the corresponding ingress controller
func (o IngressDNSRecordStatusDnsOutput) LoadBalancer() pulumi.MapOutput {
	return o.ApplyT(func(v IngressDNSRecordStatusDns) map[string]interface{} { return v.LoadBalancer }).(pulumi.MapOutput)
}

type IngressDNSRecordStatusDnsArrayOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordStatusDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressDNSRecordStatusDns)(nil)).Elem()
}

func (o IngressDNSRecordStatusDnsArrayOutput) ToIngressDNSRecordStatusDnsArrayOutput() IngressDNSRecordStatusDnsArrayOutput {
	return o
}

func (o IngressDNSRecordStatusDnsArrayOutput) ToIngressDNSRecordStatusDnsArrayOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsArrayOutput {
	return o
}

func (o IngressDNSRecordStatusDnsArrayOutput) Index(i pulumi.IntInput) IngressDNSRecordStatusDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressDNSRecordStatusDns {
		return vs[0].([]IngressDNSRecordStatusDns)[vs[1].(int)]
	}).(IngressDNSRecordStatusDnsOutput)
}

// LoadBalancer for the corresponding ingress controller
type IngressDNSRecordStatusDnsLoadBalancer struct {
}

// IngressDNSRecordStatusDnsLoadBalancerInput is an input type that accepts IngressDNSRecordStatusDnsLoadBalancerArgs and IngressDNSRecordStatusDnsLoadBalancerOutput values.
// You can construct a concrete instance of `IngressDNSRecordStatusDnsLoadBalancerInput` via:
//
//          IngressDNSRecordStatusDnsLoadBalancerArgs{...}
type IngressDNSRecordStatusDnsLoadBalancerInput interface {
	pulumi.Input

	ToIngressDNSRecordStatusDnsLoadBalancerOutput() IngressDNSRecordStatusDnsLoadBalancerOutput
	ToIngressDNSRecordStatusDnsLoadBalancerOutputWithContext(context.Context) IngressDNSRecordStatusDnsLoadBalancerOutput
}

// LoadBalancer for the corresponding ingress controller
type IngressDNSRecordStatusDnsLoadBalancerArgs struct {
}

func (IngressDNSRecordStatusDnsLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatusDnsLoadBalancer)(nil)).Elem()
}

func (i IngressDNSRecordStatusDnsLoadBalancerArgs) ToIngressDNSRecordStatusDnsLoadBalancerOutput() IngressDNSRecordStatusDnsLoadBalancerOutput {
	return i.ToIngressDNSRecordStatusDnsLoadBalancerOutputWithContext(context.Background())
}

func (i IngressDNSRecordStatusDnsLoadBalancerArgs) ToIngressDNSRecordStatusDnsLoadBalancerOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDNSRecordStatusDnsLoadBalancerOutput)
}

// LoadBalancer for the corresponding ingress controller
type IngressDNSRecordStatusDnsLoadBalancerOutput struct{ *pulumi.OutputState }

func (IngressDNSRecordStatusDnsLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDNSRecordStatusDnsLoadBalancer)(nil)).Elem()
}

func (o IngressDNSRecordStatusDnsLoadBalancerOutput) ToIngressDNSRecordStatusDnsLoadBalancerOutput() IngressDNSRecordStatusDnsLoadBalancerOutput {
	return o
}

func (o IngressDNSRecordStatusDnsLoadBalancerOutput) ToIngressDNSRecordStatusDnsLoadBalancerOutputWithContext(ctx context.Context) IngressDNSRecordStatusDnsLoadBalancerOutput {
	return o
}

type ServiceDNSRecordType struct {
	ApiVersion *string                 `pulumi:"apiVersion"`
	Kind       *string                 `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec       *ServiceDNSRecordSpec   `pulumi:"spec"`
	Status     *ServiceDNSRecordStatus `pulumi:"status"`
}

// ServiceDNSRecordTypeInput is an input type that accepts ServiceDNSRecordTypeArgs and ServiceDNSRecordTypeOutput values.
// You can construct a concrete instance of `ServiceDNSRecordTypeInput` via:
//
//          ServiceDNSRecordTypeArgs{...}
type ServiceDNSRecordTypeInput interface {
	pulumi.Input

	ToServiceDNSRecordTypeOutput() ServiceDNSRecordTypeOutput
	ToServiceDNSRecordTypeOutputWithContext(context.Context) ServiceDNSRecordTypeOutput
}

type ServiceDNSRecordTypeArgs struct {
	ApiVersion pulumi.StringPtrInput          `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput          `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput      `pulumi:"metadata"`
	Spec       ServiceDNSRecordSpecPtrInput   `pulumi:"spec"`
	Status     ServiceDNSRecordStatusPtrInput `pulumi:"status"`
}

func (ServiceDNSRecordTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordType)(nil)).Elem()
}

func (i ServiceDNSRecordTypeArgs) ToServiceDNSRecordTypeOutput() ServiceDNSRecordTypeOutput {
	return i.ToServiceDNSRecordTypeOutputWithContext(context.Background())
}

func (i ServiceDNSRecordTypeArgs) ToServiceDNSRecordTypeOutputWithContext(ctx context.Context) ServiceDNSRecordTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordTypeOutput)
}

type ServiceDNSRecordTypeOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordType)(nil)).Elem()
}

func (o ServiceDNSRecordTypeOutput) ToServiceDNSRecordTypeOutput() ServiceDNSRecordTypeOutput {
	return o
}

func (o ServiceDNSRecordTypeOutput) ToServiceDNSRecordTypeOutputWithContext(ctx context.Context) ServiceDNSRecordTypeOutput {
	return o
}

func (o ServiceDNSRecordTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ServiceDNSRecordTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ServiceDNSRecordTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ServiceDNSRecordTypeOutput) Spec() ServiceDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordType) *ServiceDNSRecordSpec { return v.Spec }).(ServiceDNSRecordSpecPtrOutput)
}

func (o ServiceDNSRecordTypeOutput) Status() ServiceDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordType) *ServiceDNSRecordStatus { return v.Status }).(ServiceDNSRecordStatusPtrOutput)
}

type ServiceDNSRecordMetadata struct {
}

// ServiceDNSRecordMetadataInput is an input type that accepts ServiceDNSRecordMetadataArgs and ServiceDNSRecordMetadataOutput values.
// You can construct a concrete instance of `ServiceDNSRecordMetadataInput` via:
//
//          ServiceDNSRecordMetadataArgs{...}
type ServiceDNSRecordMetadataInput interface {
	pulumi.Input

	ToServiceDNSRecordMetadataOutput() ServiceDNSRecordMetadataOutput
	ToServiceDNSRecordMetadataOutputWithContext(context.Context) ServiceDNSRecordMetadataOutput
}

type ServiceDNSRecordMetadataArgs struct {
}

func (ServiceDNSRecordMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordMetadata)(nil)).Elem()
}

func (i ServiceDNSRecordMetadataArgs) ToServiceDNSRecordMetadataOutput() ServiceDNSRecordMetadataOutput {
	return i.ToServiceDNSRecordMetadataOutputWithContext(context.Background())
}

func (i ServiceDNSRecordMetadataArgs) ToServiceDNSRecordMetadataOutputWithContext(ctx context.Context) ServiceDNSRecordMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordMetadataOutput)
}

type ServiceDNSRecordMetadataOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordMetadata)(nil)).Elem()
}

func (o ServiceDNSRecordMetadataOutput) ToServiceDNSRecordMetadataOutput() ServiceDNSRecordMetadataOutput {
	return o
}

func (o ServiceDNSRecordMetadataOutput) ToServiceDNSRecordMetadataOutputWithContext(ctx context.Context) ServiceDNSRecordMetadataOutput {
	return o
}

type ServiceDNSRecordSpec struct {
	// AllowServiceWithoutEndpoints allows DNS records to be written for Service shards without endpoints
	AllowServiceWithoutEndpoints *bool `pulumi:"allowServiceWithoutEndpoints"`
	// DNSPrefix when specified, an additional DNS record would be created with <DNSPrefix>.<KubeFedDomain>
	DnsPrefix *string `pulumi:"dnsPrefix"`
	// DomainRef is the name of the domain object to which the corresponding federated service belongs
	DomainRef string `pulumi:"domainRef"`
	// ExternalName when specified, replaces the service name portion of a resource record with the value of ExternalName.
	ExternalName *string `pulumi:"externalName"`
	// RecordTTL is the TTL in seconds for DNS records created for this Service, if omitted a default would be used
	RecordTTL *int `pulumi:"recordTTL"`
}

// ServiceDNSRecordSpecInput is an input type that accepts ServiceDNSRecordSpecArgs and ServiceDNSRecordSpecOutput values.
// You can construct a concrete instance of `ServiceDNSRecordSpecInput` via:
//
//          ServiceDNSRecordSpecArgs{...}
type ServiceDNSRecordSpecInput interface {
	pulumi.Input

	ToServiceDNSRecordSpecOutput() ServiceDNSRecordSpecOutput
	ToServiceDNSRecordSpecOutputWithContext(context.Context) ServiceDNSRecordSpecOutput
}

type ServiceDNSRecordSpecArgs struct {
	// AllowServiceWithoutEndpoints allows DNS records to be written for Service shards without endpoints
	AllowServiceWithoutEndpoints pulumi.BoolPtrInput `pulumi:"allowServiceWithoutEndpoints"`
	// DNSPrefix when specified, an additional DNS record would be created with <DNSPrefix>.<KubeFedDomain>
	DnsPrefix pulumi.StringPtrInput `pulumi:"dnsPrefix"`
	// DomainRef is the name of the domain object to which the corresponding federated service belongs
	DomainRef pulumi.StringInput `pulumi:"domainRef"`
	// ExternalName when specified, replaces the service name portion of a resource record with the value of ExternalName.
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// RecordTTL is the TTL in seconds for DNS records created for this Service, if omitted a default would be used
	RecordTTL pulumi.IntPtrInput `pulumi:"recordTTL"`
}

func (ServiceDNSRecordSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordSpec)(nil)).Elem()
}

func (i ServiceDNSRecordSpecArgs) ToServiceDNSRecordSpecOutput() ServiceDNSRecordSpecOutput {
	return i.ToServiceDNSRecordSpecOutputWithContext(context.Background())
}

func (i ServiceDNSRecordSpecArgs) ToServiceDNSRecordSpecOutputWithContext(ctx context.Context) ServiceDNSRecordSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordSpecOutput)
}

func (i ServiceDNSRecordSpecArgs) ToServiceDNSRecordSpecPtrOutput() ServiceDNSRecordSpecPtrOutput {
	return i.ToServiceDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i ServiceDNSRecordSpecArgs) ToServiceDNSRecordSpecPtrOutputWithContext(ctx context.Context) ServiceDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordSpecOutput).ToServiceDNSRecordSpecPtrOutputWithContext(ctx)
}

// ServiceDNSRecordSpecPtrInput is an input type that accepts ServiceDNSRecordSpecArgs, ServiceDNSRecordSpecPtr and ServiceDNSRecordSpecPtrOutput values.
// You can construct a concrete instance of `ServiceDNSRecordSpecPtrInput` via:
//
//          ServiceDNSRecordSpecArgs{...}
//
//  or:
//
//          nil
type ServiceDNSRecordSpecPtrInput interface {
	pulumi.Input

	ToServiceDNSRecordSpecPtrOutput() ServiceDNSRecordSpecPtrOutput
	ToServiceDNSRecordSpecPtrOutputWithContext(context.Context) ServiceDNSRecordSpecPtrOutput
}

type serviceDNSRecordSpecPtrType ServiceDNSRecordSpecArgs

func ServiceDNSRecordSpecPtr(v *ServiceDNSRecordSpecArgs) ServiceDNSRecordSpecPtrInput {
	return (*serviceDNSRecordSpecPtrType)(v)
}

func (*serviceDNSRecordSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDNSRecordSpec)(nil)).Elem()
}

func (i *serviceDNSRecordSpecPtrType) ToServiceDNSRecordSpecPtrOutput() ServiceDNSRecordSpecPtrOutput {
	return i.ToServiceDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i *serviceDNSRecordSpecPtrType) ToServiceDNSRecordSpecPtrOutputWithContext(ctx context.Context) ServiceDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordSpecPtrOutput)
}

type ServiceDNSRecordSpecOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordSpec)(nil)).Elem()
}

func (o ServiceDNSRecordSpecOutput) ToServiceDNSRecordSpecOutput() ServiceDNSRecordSpecOutput {
	return o
}

func (o ServiceDNSRecordSpecOutput) ToServiceDNSRecordSpecOutputWithContext(ctx context.Context) ServiceDNSRecordSpecOutput {
	return o
}

func (o ServiceDNSRecordSpecOutput) ToServiceDNSRecordSpecPtrOutput() ServiceDNSRecordSpecPtrOutput {
	return o.ToServiceDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (o ServiceDNSRecordSpecOutput) ToServiceDNSRecordSpecPtrOutputWithContext(ctx context.Context) ServiceDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) *ServiceDNSRecordSpec {
		return &v
	}).(ServiceDNSRecordSpecPtrOutput)
}

// AllowServiceWithoutEndpoints allows DNS records to be written for Service shards without endpoints
func (o ServiceDNSRecordSpecOutput) AllowServiceWithoutEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) *bool { return v.AllowServiceWithoutEndpoints }).(pulumi.BoolPtrOutput)
}

// DNSPrefix when specified, an additional DNS record would be created with <DNSPrefix>.<KubeFedDomain>
func (o ServiceDNSRecordSpecOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) *string { return v.DnsPrefix }).(pulumi.StringPtrOutput)
}

// DomainRef is the name of the domain object to which the corresponding federated service belongs
func (o ServiceDNSRecordSpecOutput) DomainRef() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) string { return v.DomainRef }).(pulumi.StringOutput)
}

// ExternalName when specified, replaces the service name portion of a resource record with the value of ExternalName.
func (o ServiceDNSRecordSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// RecordTTL is the TTL in seconds for DNS records created for this Service, if omitted a default would be used
func (o ServiceDNSRecordSpecOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordSpec) *int { return v.RecordTTL }).(pulumi.IntPtrOutput)
}

type ServiceDNSRecordSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDNSRecordSpec)(nil)).Elem()
}

func (o ServiceDNSRecordSpecPtrOutput) ToServiceDNSRecordSpecPtrOutput() ServiceDNSRecordSpecPtrOutput {
	return o
}

func (o ServiceDNSRecordSpecPtrOutput) ToServiceDNSRecordSpecPtrOutputWithContext(ctx context.Context) ServiceDNSRecordSpecPtrOutput {
	return o
}

func (o ServiceDNSRecordSpecPtrOutput) Elem() ServiceDNSRecordSpecOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) ServiceDNSRecordSpec { return *v }).(ServiceDNSRecordSpecOutput)
}

// AllowServiceWithoutEndpoints allows DNS records to be written for Service shards without endpoints
func (o ServiceDNSRecordSpecPtrOutput) AllowServiceWithoutEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllowServiceWithoutEndpoints
	}).(pulumi.BoolPtrOutput)
}

// DNSPrefix when specified, an additional DNS record would be created with <DNSPrefix>.<KubeFedDomain>
func (o ServiceDNSRecordSpecPtrOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) *string {
		if v == nil {
			return nil
		}
		return v.DnsPrefix
	}).(pulumi.StringPtrOutput)
}

// DomainRef is the name of the domain object to which the corresponding federated service belongs
func (o ServiceDNSRecordSpecPtrOutput) DomainRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) *string {
		if v == nil {
			return nil
		}
		return &v.DomainRef
	}).(pulumi.StringPtrOutput)
}

// ExternalName when specified, replaces the service name portion of a resource record with the value of ExternalName.
func (o ServiceDNSRecordSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// RecordTTL is the TTL in seconds for DNS records created for this Service, if omitted a default would be used
func (o ServiceDNSRecordSpecPtrOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordSpec) *int {
		if v == nil {
			return nil
		}
		return v.RecordTTL
	}).(pulumi.IntPtrOutput)
}

type ServiceDNSRecordStatus struct {
	Dns []ServiceDNSRecordStatusDns `pulumi:"dns"`
	// Domain is the DNS domain of the KubeFed control plane as in Domain API
	Domain *string `pulumi:"domain"`
}

// ServiceDNSRecordStatusInput is an input type that accepts ServiceDNSRecordStatusArgs and ServiceDNSRecordStatusOutput values.
// You can construct a concrete instance of `ServiceDNSRecordStatusInput` via:
//
//          ServiceDNSRecordStatusArgs{...}
type ServiceDNSRecordStatusInput interface {
	pulumi.Input

	ToServiceDNSRecordStatusOutput() ServiceDNSRecordStatusOutput
	ToServiceDNSRecordStatusOutputWithContext(context.Context) ServiceDNSRecordStatusOutput
}

type ServiceDNSRecordStatusArgs struct {
	Dns ServiceDNSRecordStatusDnsArrayInput `pulumi:"dns"`
	// Domain is the DNS domain of the KubeFed control plane as in Domain API
	Domain pulumi.StringPtrInput `pulumi:"domain"`
}

func (ServiceDNSRecordStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatus)(nil)).Elem()
}

func (i ServiceDNSRecordStatusArgs) ToServiceDNSRecordStatusOutput() ServiceDNSRecordStatusOutput {
	return i.ToServiceDNSRecordStatusOutputWithContext(context.Background())
}

func (i ServiceDNSRecordStatusArgs) ToServiceDNSRecordStatusOutputWithContext(ctx context.Context) ServiceDNSRecordStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusOutput)
}

func (i ServiceDNSRecordStatusArgs) ToServiceDNSRecordStatusPtrOutput() ServiceDNSRecordStatusPtrOutput {
	return i.ToServiceDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i ServiceDNSRecordStatusArgs) ToServiceDNSRecordStatusPtrOutputWithContext(ctx context.Context) ServiceDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusOutput).ToServiceDNSRecordStatusPtrOutputWithContext(ctx)
}

// ServiceDNSRecordStatusPtrInput is an input type that accepts ServiceDNSRecordStatusArgs, ServiceDNSRecordStatusPtr and ServiceDNSRecordStatusPtrOutput values.
// You can construct a concrete instance of `ServiceDNSRecordStatusPtrInput` via:
//
//          ServiceDNSRecordStatusArgs{...}
//
//  or:
//
//          nil
type ServiceDNSRecordStatusPtrInput interface {
	pulumi.Input

	ToServiceDNSRecordStatusPtrOutput() ServiceDNSRecordStatusPtrOutput
	ToServiceDNSRecordStatusPtrOutputWithContext(context.Context) ServiceDNSRecordStatusPtrOutput
}

type serviceDNSRecordStatusPtrType ServiceDNSRecordStatusArgs

func ServiceDNSRecordStatusPtr(v *ServiceDNSRecordStatusArgs) ServiceDNSRecordStatusPtrInput {
	return (*serviceDNSRecordStatusPtrType)(v)
}

func (*serviceDNSRecordStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDNSRecordStatus)(nil)).Elem()
}

func (i *serviceDNSRecordStatusPtrType) ToServiceDNSRecordStatusPtrOutput() ServiceDNSRecordStatusPtrOutput {
	return i.ToServiceDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i *serviceDNSRecordStatusPtrType) ToServiceDNSRecordStatusPtrOutputWithContext(ctx context.Context) ServiceDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusPtrOutput)
}

type ServiceDNSRecordStatusOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatus)(nil)).Elem()
}

func (o ServiceDNSRecordStatusOutput) ToServiceDNSRecordStatusOutput() ServiceDNSRecordStatusOutput {
	return o
}

func (o ServiceDNSRecordStatusOutput) ToServiceDNSRecordStatusOutputWithContext(ctx context.Context) ServiceDNSRecordStatusOutput {
	return o
}

func (o ServiceDNSRecordStatusOutput) ToServiceDNSRecordStatusPtrOutput() ServiceDNSRecordStatusPtrOutput {
	return o.ToServiceDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (o ServiceDNSRecordStatusOutput) ToServiceDNSRecordStatusPtrOutputWithContext(ctx context.Context) ServiceDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatus) *ServiceDNSRecordStatus {
		return &v
	}).(ServiceDNSRecordStatusPtrOutput)
}
func (o ServiceDNSRecordStatusOutput) Dns() ServiceDNSRecordStatusDnsArrayOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatus) []ServiceDNSRecordStatusDns { return v.Dns }).(ServiceDNSRecordStatusDnsArrayOutput)
}

// Domain is the DNS domain of the KubeFed control plane as in Domain API
func (o ServiceDNSRecordStatusOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatus) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

type ServiceDNSRecordStatusPtrOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDNSRecordStatus)(nil)).Elem()
}

func (o ServiceDNSRecordStatusPtrOutput) ToServiceDNSRecordStatusPtrOutput() ServiceDNSRecordStatusPtrOutput {
	return o
}

func (o ServiceDNSRecordStatusPtrOutput) ToServiceDNSRecordStatusPtrOutputWithContext(ctx context.Context) ServiceDNSRecordStatusPtrOutput {
	return o
}

func (o ServiceDNSRecordStatusPtrOutput) Elem() ServiceDNSRecordStatusOutput {
	return o.ApplyT(func(v *ServiceDNSRecordStatus) ServiceDNSRecordStatus { return *v }).(ServiceDNSRecordStatusOutput)
}

func (o ServiceDNSRecordStatusPtrOutput) Dns() ServiceDNSRecordStatusDnsArrayOutput {
	return o.ApplyT(func(v *ServiceDNSRecordStatus) []ServiceDNSRecordStatusDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(ServiceDNSRecordStatusDnsArrayOutput)
}

// Domain is the DNS domain of the KubeFed control plane as in Domain API
func (o ServiceDNSRecordStatusPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDNSRecordStatus) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

type ServiceDNSRecordStatusDns struct {
	// Cluster name
	Cluster *string `pulumi:"cluster"`
	// LoadBalancer for the corresponding service
	LoadBalancer map[string]interface{} `pulumi:"loadBalancer"`
	// Region to which the cluster belongs
	Region *string `pulumi:"region"`
	// Zones to which the cluster belongs
	Zones []string `pulumi:"zones"`
}

// ServiceDNSRecordStatusDnsInput is an input type that accepts ServiceDNSRecordStatusDnsArgs and ServiceDNSRecordStatusDnsOutput values.
// You can construct a concrete instance of `ServiceDNSRecordStatusDnsInput` via:
//
//          ServiceDNSRecordStatusDnsArgs{...}
type ServiceDNSRecordStatusDnsInput interface {
	pulumi.Input

	ToServiceDNSRecordStatusDnsOutput() ServiceDNSRecordStatusDnsOutput
	ToServiceDNSRecordStatusDnsOutputWithContext(context.Context) ServiceDNSRecordStatusDnsOutput
}

type ServiceDNSRecordStatusDnsArgs struct {
	// Cluster name
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// LoadBalancer for the corresponding service
	LoadBalancer pulumi.MapInput `pulumi:"loadBalancer"`
	// Region to which the cluster belongs
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Zones to which the cluster belongs
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (ServiceDNSRecordStatusDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatusDns)(nil)).Elem()
}

func (i ServiceDNSRecordStatusDnsArgs) ToServiceDNSRecordStatusDnsOutput() ServiceDNSRecordStatusDnsOutput {
	return i.ToServiceDNSRecordStatusDnsOutputWithContext(context.Background())
}

func (i ServiceDNSRecordStatusDnsArgs) ToServiceDNSRecordStatusDnsOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusDnsOutput)
}

// ServiceDNSRecordStatusDnsArrayInput is an input type that accepts ServiceDNSRecordStatusDnsArray and ServiceDNSRecordStatusDnsArrayOutput values.
// You can construct a concrete instance of `ServiceDNSRecordStatusDnsArrayInput` via:
//
//          ServiceDNSRecordStatusDnsArray{ ServiceDNSRecordStatusDnsArgs{...} }
type ServiceDNSRecordStatusDnsArrayInput interface {
	pulumi.Input

	ToServiceDNSRecordStatusDnsArrayOutput() ServiceDNSRecordStatusDnsArrayOutput
	ToServiceDNSRecordStatusDnsArrayOutputWithContext(context.Context) ServiceDNSRecordStatusDnsArrayOutput
}

type ServiceDNSRecordStatusDnsArray []ServiceDNSRecordStatusDnsInput

func (ServiceDNSRecordStatusDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDNSRecordStatusDns)(nil)).Elem()
}

func (i ServiceDNSRecordStatusDnsArray) ToServiceDNSRecordStatusDnsArrayOutput() ServiceDNSRecordStatusDnsArrayOutput {
	return i.ToServiceDNSRecordStatusDnsArrayOutputWithContext(context.Background())
}

func (i ServiceDNSRecordStatusDnsArray) ToServiceDNSRecordStatusDnsArrayOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusDnsArrayOutput)
}

type ServiceDNSRecordStatusDnsOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordStatusDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatusDns)(nil)).Elem()
}

func (o ServiceDNSRecordStatusDnsOutput) ToServiceDNSRecordStatusDnsOutput() ServiceDNSRecordStatusDnsOutput {
	return o
}

func (o ServiceDNSRecordStatusDnsOutput) ToServiceDNSRecordStatusDnsOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsOutput {
	return o
}

// Cluster name
func (o ServiceDNSRecordStatusDnsOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatusDns) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// LoadBalancer for the corresponding service
func (o ServiceDNSRecordStatusDnsOutput) LoadBalancer() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatusDns) map[string]interface{} { return v.LoadBalancer }).(pulumi.MapOutput)
}

// Region to which the cluster belongs
func (o ServiceDNSRecordStatusDnsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatusDns) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Zones to which the cluster belongs
func (o ServiceDNSRecordStatusDnsOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceDNSRecordStatusDns) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type ServiceDNSRecordStatusDnsArrayOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordStatusDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDNSRecordStatusDns)(nil)).Elem()
}

func (o ServiceDNSRecordStatusDnsArrayOutput) ToServiceDNSRecordStatusDnsArrayOutput() ServiceDNSRecordStatusDnsArrayOutput {
	return o
}

func (o ServiceDNSRecordStatusDnsArrayOutput) ToServiceDNSRecordStatusDnsArrayOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsArrayOutput {
	return o
}

func (o ServiceDNSRecordStatusDnsArrayOutput) Index(i pulumi.IntInput) ServiceDNSRecordStatusDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDNSRecordStatusDns {
		return vs[0].([]ServiceDNSRecordStatusDns)[vs[1].(int)]
	}).(ServiceDNSRecordStatusDnsOutput)
}

// LoadBalancer for the corresponding service
type ServiceDNSRecordStatusDnsLoadBalancer struct {
}

// ServiceDNSRecordStatusDnsLoadBalancerInput is an input type that accepts ServiceDNSRecordStatusDnsLoadBalancerArgs and ServiceDNSRecordStatusDnsLoadBalancerOutput values.
// You can construct a concrete instance of `ServiceDNSRecordStatusDnsLoadBalancerInput` via:
//
//          ServiceDNSRecordStatusDnsLoadBalancerArgs{...}
type ServiceDNSRecordStatusDnsLoadBalancerInput interface {
	pulumi.Input

	ToServiceDNSRecordStatusDnsLoadBalancerOutput() ServiceDNSRecordStatusDnsLoadBalancerOutput
	ToServiceDNSRecordStatusDnsLoadBalancerOutputWithContext(context.Context) ServiceDNSRecordStatusDnsLoadBalancerOutput
}

// LoadBalancer for the corresponding service
type ServiceDNSRecordStatusDnsLoadBalancerArgs struct {
}

func (ServiceDNSRecordStatusDnsLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatusDnsLoadBalancer)(nil)).Elem()
}

func (i ServiceDNSRecordStatusDnsLoadBalancerArgs) ToServiceDNSRecordStatusDnsLoadBalancerOutput() ServiceDNSRecordStatusDnsLoadBalancerOutput {
	return i.ToServiceDNSRecordStatusDnsLoadBalancerOutputWithContext(context.Background())
}

func (i ServiceDNSRecordStatusDnsLoadBalancerArgs) ToServiceDNSRecordStatusDnsLoadBalancerOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDNSRecordStatusDnsLoadBalancerOutput)
}

// LoadBalancer for the corresponding service
type ServiceDNSRecordStatusDnsLoadBalancerOutput struct{ *pulumi.OutputState }

func (ServiceDNSRecordStatusDnsLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDNSRecordStatusDnsLoadBalancer)(nil)).Elem()
}

func (o ServiceDNSRecordStatusDnsLoadBalancerOutput) ToServiceDNSRecordStatusDnsLoadBalancerOutput() ServiceDNSRecordStatusDnsLoadBalancerOutput {
	return o
}

func (o ServiceDNSRecordStatusDnsLoadBalancerOutput) ToServiceDNSRecordStatusDnsLoadBalancerOutputWithContext(ctx context.Context) ServiceDNSRecordStatusDnsLoadBalancerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DNSEndpointTypeOutput{})
	pulumi.RegisterOutputType(DNSEndpointMetadataOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecPtrOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsLabelsOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusPtrOutput{})
	pulumi.RegisterOutputType(DomainTypeOutput{})
	pulumi.RegisterOutputType(DomainMetadataOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordTypeOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordMetadataOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordSpecOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordSpecPtrOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordStatusOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordStatusPtrOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordStatusDnsOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordStatusDnsArrayOutput{})
	pulumi.RegisterOutputType(IngressDNSRecordStatusDnsLoadBalancerOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordTypeOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordMetadataOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordSpecOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordStatusOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordStatusPtrOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordStatusDnsOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordStatusDnsArrayOutput{})
	pulumi.RegisterOutputType(ServiceDNSRecordStatusDnsLoadBalancerOutput{})
}

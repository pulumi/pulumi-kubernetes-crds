// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DNSEndpoint struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       DNSEndpointSpecPtrOutput   `pulumi:"spec"`
	Status     DNSEndpointStatusPtrOutput `pulumi:"status"`
}

// NewDNSEndpoint registers a new resource with the given unique name, arguments, and options.
func NewDNSEndpoint(ctx *pulumi.Context,
	name string, args *DNSEndpointArgs, opts ...pulumi.ResourceOption) (*DNSEndpoint, error) {
	if args == nil {
		args = &DNSEndpointArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("multiclusterdns.kubefed.io/v1alpha1")
	args.Kind = pulumi.StringPtr("DNSEndpoint")
	var resource DNSEndpoint
	err := ctx.RegisterResource("kubernetes:multiclusterdns.kubefed.io/v1alpha1:DNSEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSEndpoint gets an existing DNSEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSEndpointState, opts ...pulumi.ResourceOption) (*DNSEndpoint, error) {
	var resource DNSEndpoint
	err := ctx.ReadResource("kubernetes:multiclusterdns.kubefed.io/v1alpha1:DNSEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSEndpoint resources.
type dnsendpointState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *DNSEndpointSpec   `pulumi:"spec"`
	Status     *DNSEndpointStatus `pulumi:"status"`
}

type DNSEndpointState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       DNSEndpointSpecPtrInput
	Status     DNSEndpointStatusPtrInput
}

func (DNSEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointState)(nil)).Elem()
}

type dnsendpointArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *DNSEndpointSpec   `pulumi:"spec"`
	Status     *DNSEndpointStatus `pulumi:"status"`
}

// The set of arguments for constructing a DNSEndpoint resource.
type DNSEndpointArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       DNSEndpointSpecPtrInput
	Status     DNSEndpointStatusPtrInput
}

func (DNSEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1Beta1
{

    [OutputType]
    public sealed class KubeFedConfigSpecLeaderElect
    {
        /// <summary>
        /// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
        /// </summary>
        public readonly string LeaseDuration;
        /// <summary>
        /// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
        /// </summary>
        public readonly string RenewDeadline;
        /// <summary>
        /// The type of resource object that is used for locking during leader election. Supported options are `configmaps` (default) and `endpoints`.
        /// </summary>
        public readonly string ResourceLock;
        /// <summary>
        /// The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
        /// </summary>
        public readonly string RetryPeriod;

        [OutputConstructor]
        private KubeFedConfigSpecLeaderElect(
            string leaseDuration,

            string renewDeadline,

            string resourceLock,

            string retryPeriod)
        {
            LeaseDuration = leaseDuration;
            RenewDeadline = renewDeadline;
            ResourceLock = resourceLock;
            RetryPeriod = retryPeriod;
        }
    }
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ReplicaSchedulingPreferenceSpec',
]

@pulumi.output_type
class ReplicaSchedulingPreferenceSpec(dict):
    def __init__(__self__, *,
                 target_kind: str,
                 total_replicas: int,
                 clusters: Optional[Mapping[str, Any]] = None,
                 rebalance: Optional[bool] = None):
        """
        :param str target_kind: TODO (@irfanurrehman); upgrade this to label selector only if need be. The idea of this API is to have a a set of preferences which can be used for a target FederatedDeployment or FederatedReplicaset. Although the set of preferences in question can be applied to multiple target objects using label selectors, but there are no clear advantages of doing that as of now. To keep the implementation and usage simple, matching ns/name of RSP resource to the target resource is sufficient and only additional information needed in RSP resource is a target kind (FederatedDeployment or FederatedReplicaset).
        :param int total_replicas: Total number of pods desired across federated clusters. Replicas specified in the spec for target deployment template or replicaset template will be discarded/overridden when scheduling preferences are specified.
        :param Mapping[str, Any] clusters: A mapping between cluster names and preferences regarding a local workload object (dep, rs, .. ) in these clusters. "*" (if provided) applies to all clusters if an explicit mapping is not provided. If omitted, clusters without explicit preferences should not have any replicas scheduled.
        :param bool rebalance: If set to true then already scheduled and running replicas may be moved to other clusters in order to match current state to the specified preferences. Otherwise, if set to false, up and running replicas will not be moved.
        """
        pulumi.set(__self__, "target_kind", target_kind)
        pulumi.set(__self__, "total_replicas", total_replicas)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if rebalance is not None:
            pulumi.set(__self__, "rebalance", rebalance)

    @property
    @pulumi.getter(name="targetKind")
    def target_kind(self) -> str:
        """
        TODO (@irfanurrehman); upgrade this to label selector only if need be. The idea of this API is to have a a set of preferences which can be used for a target FederatedDeployment or FederatedReplicaset. Although the set of preferences in question can be applied to multiple target objects using label selectors, but there are no clear advantages of doing that as of now. To keep the implementation and usage simple, matching ns/name of RSP resource to the target resource is sufficient and only additional information needed in RSP resource is a target kind (FederatedDeployment or FederatedReplicaset).
        """
        return pulumi.get(self, "target_kind")

    @property
    @pulumi.getter(name="totalReplicas")
    def total_replicas(self) -> int:
        """
        Total number of pods desired across federated clusters. Replicas specified in the spec for target deployment template or replicaset template will be discarded/overridden when scheduling preferences are specified.
        """
        return pulumi.get(self, "total_replicas")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Mapping[str, Any]]:
        """
        A mapping between cluster names and preferences regarding a local workload object (dep, rs, .. ) in these clusters. "*" (if provided) applies to all clusters if an explicit mapping is not provided. If omitted, clusters without explicit preferences should not have any replicas scheduled.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def rebalance(self) -> Optional[bool]:
        """
        If set to true then already scheduled and running replicas may be moved to other clusters in order to match current state to the specified preferences. Otherwise, if set to false, up and running replicas will not be moved.
        """
        return pulumi.get(self, "rebalance")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



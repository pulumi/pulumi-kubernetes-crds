# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ClusterPropagatedVersionStatus',
    'ClusterPropagatedVersionStatusClusterVersions',
    'FederatedServiceStatusClusterStatus',
    'PropagatedVersionStatus',
    'PropagatedVersionStatusClusterVersions',
]

@pulumi.output_type
class ClusterPropagatedVersionStatus(dict):
    def __init__(__self__, *,
                 overrides_version: str,
                 template_version: str,
                 cluster_versions: Optional[Sequence['outputs.ClusterPropagatedVersionStatusClusterVersions']] = None):
        """
        :param str overrides_version: The observed version of the overrides for this resource.
        :param str template_version: The observed version of the template for this resource.
        :param Sequence['ClusterPropagatedVersionStatusClusterVersionsArgs'] cluster_versions: The last versions produced in each cluster for this resource.
        """
        pulumi.set(__self__, "overrides_version", overrides_version)
        pulumi.set(__self__, "template_version", template_version)
        if cluster_versions is not None:
            pulumi.set(__self__, "cluster_versions", cluster_versions)

    @property
    @pulumi.getter(name="overridesVersion")
    def overrides_version(self) -> str:
        """
        The observed version of the overrides for this resource.
        """
        return pulumi.get(self, "overrides_version")

    @property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> str:
        """
        The observed version of the template for this resource.
        """
        return pulumi.get(self, "template_version")

    @property
    @pulumi.getter(name="clusterVersions")
    def cluster_versions(self) -> Optional[Sequence['outputs.ClusterPropagatedVersionStatusClusterVersions']]:
        """
        The last versions produced in each cluster for this resource.
        """
        return pulumi.get(self, "cluster_versions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPropagatedVersionStatusClusterVersions(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 version: str):
        """
        :param str cluster_name: The name of the cluster the version is for.
        :param str version: The last version produced for the resource by a KubeFed operation.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the cluster the version is for.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The last version produced for the resource by a KubeFed operation.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FederatedServiceStatusClusterStatus(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 status: Mapping[str, Any]):
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def status(self) -> Mapping[str, Any]:
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PropagatedVersionStatus(dict):
    def __init__(__self__, *,
                 overrides_version: str,
                 template_version: str,
                 cluster_versions: Optional[Sequence['outputs.PropagatedVersionStatusClusterVersions']] = None):
        """
        :param str overrides_version: The observed version of the overrides for this resource.
        :param str template_version: The observed version of the template for this resource.
        :param Sequence['PropagatedVersionStatusClusterVersionsArgs'] cluster_versions: The last versions produced in each cluster for this resource.
        """
        pulumi.set(__self__, "overrides_version", overrides_version)
        pulumi.set(__self__, "template_version", template_version)
        if cluster_versions is not None:
            pulumi.set(__self__, "cluster_versions", cluster_versions)

    @property
    @pulumi.getter(name="overridesVersion")
    def overrides_version(self) -> str:
        """
        The observed version of the overrides for this resource.
        """
        return pulumi.get(self, "overrides_version")

    @property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> str:
        """
        The observed version of the template for this resource.
        """
        return pulumi.get(self, "template_version")

    @property
    @pulumi.getter(name="clusterVersions")
    def cluster_versions(self) -> Optional[Sequence['outputs.PropagatedVersionStatusClusterVersions']]:
        """
        The last versions produced in each cluster for this resource.
        """
        return pulumi.get(self, "cluster_versions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PropagatedVersionStatusClusterVersions(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 version: str):
        """
        :param str cluster_name: The name of the cluster the version is for.
        :param str version: The last version produced for the resource by a KubeFed operation.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the cluster the version is for.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The last version produced for the resource by a KubeFed operation.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



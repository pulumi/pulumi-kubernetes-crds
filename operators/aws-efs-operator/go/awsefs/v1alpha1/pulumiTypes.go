// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// SharedVolume is the Schema for the sharedvolumes API
type SharedVolumeType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SharedVolumeSpec defines the desired state of SharedVolume
	Spec *SharedVolumeSpec `pulumi:"spec"`
	// SharedVolumeStatus defines the observed state of SharedVolume
	Status *SharedVolumeStatus `pulumi:"status"`
}

// SharedVolumeTypeInput is an input type that accepts SharedVolumeTypeArgs and SharedVolumeTypeOutput values.
// You can construct a concrete instance of `SharedVolumeTypeInput` via:
//
//          SharedVolumeTypeArgs{...}
type SharedVolumeTypeInput interface {
	pulumi.Input

	ToSharedVolumeTypeOutput() SharedVolumeTypeOutput
	ToSharedVolumeTypeOutputWithContext(context.Context) SharedVolumeTypeOutput
}

// SharedVolume is the Schema for the sharedvolumes API
type SharedVolumeTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// SharedVolumeSpec defines the desired state of SharedVolume
	Spec SharedVolumeSpecPtrInput `pulumi:"spec"`
	// SharedVolumeStatus defines the observed state of SharedVolume
	Status SharedVolumeStatusPtrInput `pulumi:"status"`
}

func (SharedVolumeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeType)(nil)).Elem()
}

func (i SharedVolumeTypeArgs) ToSharedVolumeTypeOutput() SharedVolumeTypeOutput {
	return i.ToSharedVolumeTypeOutputWithContext(context.Background())
}

func (i SharedVolumeTypeArgs) ToSharedVolumeTypeOutputWithContext(ctx context.Context) SharedVolumeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeTypeOutput)
}

// SharedVolume is the Schema for the sharedvolumes API
type SharedVolumeTypeOutput struct{ *pulumi.OutputState }

func (SharedVolumeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeType)(nil)).Elem()
}

func (o SharedVolumeTypeOutput) ToSharedVolumeTypeOutput() SharedVolumeTypeOutput {
	return o
}

func (o SharedVolumeTypeOutput) ToSharedVolumeTypeOutputWithContext(ctx context.Context) SharedVolumeTypeOutput {
	return o
}

func (o SharedVolumeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedVolumeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SharedVolumeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedVolumeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SharedVolumeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SharedVolumeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SharedVolumeSpec defines the desired state of SharedVolume
func (o SharedVolumeTypeOutput) Spec() SharedVolumeSpecPtrOutput {
	return o.ApplyT(func(v SharedVolumeType) *SharedVolumeSpec { return v.Spec }).(SharedVolumeSpecPtrOutput)
}

// SharedVolumeStatus defines the observed state of SharedVolume
func (o SharedVolumeTypeOutput) Status() SharedVolumeStatusPtrOutput {
	return o.ApplyT(func(v SharedVolumeType) *SharedVolumeStatus { return v.Status }).(SharedVolumeStatusPtrOutput)
}

type SharedVolumeMetadata struct {
}

// SharedVolumeMetadataInput is an input type that accepts SharedVolumeMetadataArgs and SharedVolumeMetadataOutput values.
// You can construct a concrete instance of `SharedVolumeMetadataInput` via:
//
//          SharedVolumeMetadataArgs{...}
type SharedVolumeMetadataInput interface {
	pulumi.Input

	ToSharedVolumeMetadataOutput() SharedVolumeMetadataOutput
	ToSharedVolumeMetadataOutputWithContext(context.Context) SharedVolumeMetadataOutput
}

type SharedVolumeMetadataArgs struct {
}

func (SharedVolumeMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeMetadata)(nil)).Elem()
}

func (i SharedVolumeMetadataArgs) ToSharedVolumeMetadataOutput() SharedVolumeMetadataOutput {
	return i.ToSharedVolumeMetadataOutputWithContext(context.Background())
}

func (i SharedVolumeMetadataArgs) ToSharedVolumeMetadataOutputWithContext(ctx context.Context) SharedVolumeMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeMetadataOutput)
}

type SharedVolumeMetadataOutput struct{ *pulumi.OutputState }

func (SharedVolumeMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeMetadata)(nil)).Elem()
}

func (o SharedVolumeMetadataOutput) ToSharedVolumeMetadataOutput() SharedVolumeMetadataOutput {
	return o
}

func (o SharedVolumeMetadataOutput) ToSharedVolumeMetadataOutputWithContext(ctx context.Context) SharedVolumeMetadataOutput {
	return o
}

// SharedVolumeSpec defines the desired state of SharedVolume
type SharedVolumeSpec struct {
	// The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
	AccessPointID string `pulumi:"accessPointID"`
	// The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
	FileSystemID string `pulumi:"fileSystemID"`
}

// SharedVolumeSpecInput is an input type that accepts SharedVolumeSpecArgs and SharedVolumeSpecOutput values.
// You can construct a concrete instance of `SharedVolumeSpecInput` via:
//
//          SharedVolumeSpecArgs{...}
type SharedVolumeSpecInput interface {
	pulumi.Input

	ToSharedVolumeSpecOutput() SharedVolumeSpecOutput
	ToSharedVolumeSpecOutputWithContext(context.Context) SharedVolumeSpecOutput
}

// SharedVolumeSpec defines the desired state of SharedVolume
type SharedVolumeSpecArgs struct {
	// The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
	AccessPointID pulumi.StringInput `pulumi:"accessPointID"`
	// The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
	FileSystemID pulumi.StringInput `pulumi:"fileSystemID"`
}

func (SharedVolumeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeSpec)(nil)).Elem()
}

func (i SharedVolumeSpecArgs) ToSharedVolumeSpecOutput() SharedVolumeSpecOutput {
	return i.ToSharedVolumeSpecOutputWithContext(context.Background())
}

func (i SharedVolumeSpecArgs) ToSharedVolumeSpecOutputWithContext(ctx context.Context) SharedVolumeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeSpecOutput)
}

func (i SharedVolumeSpecArgs) ToSharedVolumeSpecPtrOutput() SharedVolumeSpecPtrOutput {
	return i.ToSharedVolumeSpecPtrOutputWithContext(context.Background())
}

func (i SharedVolumeSpecArgs) ToSharedVolumeSpecPtrOutputWithContext(ctx context.Context) SharedVolumeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeSpecOutput).ToSharedVolumeSpecPtrOutputWithContext(ctx)
}

// SharedVolumeSpecPtrInput is an input type that accepts SharedVolumeSpecArgs, SharedVolumeSpecPtr and SharedVolumeSpecPtrOutput values.
// You can construct a concrete instance of `SharedVolumeSpecPtrInput` via:
//
//          SharedVolumeSpecArgs{...}
//
//  or:
//
//          nil
type SharedVolumeSpecPtrInput interface {
	pulumi.Input

	ToSharedVolumeSpecPtrOutput() SharedVolumeSpecPtrOutput
	ToSharedVolumeSpecPtrOutputWithContext(context.Context) SharedVolumeSpecPtrOutput
}

type sharedVolumeSpecPtrType SharedVolumeSpecArgs

func SharedVolumeSpecPtr(v *SharedVolumeSpecArgs) SharedVolumeSpecPtrInput {
	return (*sharedVolumeSpecPtrType)(v)
}

func (*sharedVolumeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeSpec)(nil)).Elem()
}

func (i *sharedVolumeSpecPtrType) ToSharedVolumeSpecPtrOutput() SharedVolumeSpecPtrOutput {
	return i.ToSharedVolumeSpecPtrOutputWithContext(context.Background())
}

func (i *sharedVolumeSpecPtrType) ToSharedVolumeSpecPtrOutputWithContext(ctx context.Context) SharedVolumeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeSpecPtrOutput)
}

// SharedVolumeSpec defines the desired state of SharedVolume
type SharedVolumeSpecOutput struct{ *pulumi.OutputState }

func (SharedVolumeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeSpec)(nil)).Elem()
}

func (o SharedVolumeSpecOutput) ToSharedVolumeSpecOutput() SharedVolumeSpecOutput {
	return o
}

func (o SharedVolumeSpecOutput) ToSharedVolumeSpecOutputWithContext(ctx context.Context) SharedVolumeSpecOutput {
	return o
}

func (o SharedVolumeSpecOutput) ToSharedVolumeSpecPtrOutput() SharedVolumeSpecPtrOutput {
	return o.ToSharedVolumeSpecPtrOutputWithContext(context.Background())
}

func (o SharedVolumeSpecOutput) ToSharedVolumeSpecPtrOutputWithContext(ctx context.Context) SharedVolumeSpecPtrOutput {
	return o.ApplyT(func(v SharedVolumeSpec) *SharedVolumeSpec {
		return &v
	}).(SharedVolumeSpecPtrOutput)
}

// The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
func (o SharedVolumeSpecOutput) AccessPointID() pulumi.StringOutput {
	return o.ApplyT(func(v SharedVolumeSpec) string { return v.AccessPointID }).(pulumi.StringOutput)
}

// The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
func (o SharedVolumeSpecOutput) FileSystemID() pulumi.StringOutput {
	return o.ApplyT(func(v SharedVolumeSpec) string { return v.FileSystemID }).(pulumi.StringOutput)
}

type SharedVolumeSpecPtrOutput struct{ *pulumi.OutputState }

func (SharedVolumeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeSpec)(nil)).Elem()
}

func (o SharedVolumeSpecPtrOutput) ToSharedVolumeSpecPtrOutput() SharedVolumeSpecPtrOutput {
	return o
}

func (o SharedVolumeSpecPtrOutput) ToSharedVolumeSpecPtrOutputWithContext(ctx context.Context) SharedVolumeSpecPtrOutput {
	return o
}

func (o SharedVolumeSpecPtrOutput) Elem() SharedVolumeSpecOutput {
	return o.ApplyT(func(v *SharedVolumeSpec) SharedVolumeSpec { return *v }).(SharedVolumeSpecOutput)
}

// The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
func (o SharedVolumeSpecPtrOutput) AccessPointID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeSpec) *string {
		if v == nil {
			return nil
		}
		return &v.AccessPointID
	}).(pulumi.StringPtrOutput)
}

// The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
func (o SharedVolumeSpecPtrOutput) FileSystemID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeSpec) *string {
		if v == nil {
			return nil
		}
		return &v.FileSystemID
	}).(pulumi.StringPtrOutput)
}

// SharedVolumeStatus defines the observed state of SharedVolume
type SharedVolumeStatus struct {
	// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
	ClaimRef *SharedVolumeStatusClaimRef `pulumi:"claimRef"`
	// Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
	Message *string `pulumi:"message"`
	// Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
	Phase *string `pulumi:"phase"`
}

// SharedVolumeStatusInput is an input type that accepts SharedVolumeStatusArgs and SharedVolumeStatusOutput values.
// You can construct a concrete instance of `SharedVolumeStatusInput` via:
//
//          SharedVolumeStatusArgs{...}
type SharedVolumeStatusInput interface {
	pulumi.Input

	ToSharedVolumeStatusOutput() SharedVolumeStatusOutput
	ToSharedVolumeStatusOutputWithContext(context.Context) SharedVolumeStatusOutput
}

// SharedVolumeStatus defines the observed state of SharedVolume
type SharedVolumeStatusArgs struct {
	// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
	ClaimRef SharedVolumeStatusClaimRefPtrInput `pulumi:"claimRef"`
	// Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (SharedVolumeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeStatus)(nil)).Elem()
}

func (i SharedVolumeStatusArgs) ToSharedVolumeStatusOutput() SharedVolumeStatusOutput {
	return i.ToSharedVolumeStatusOutputWithContext(context.Background())
}

func (i SharedVolumeStatusArgs) ToSharedVolumeStatusOutputWithContext(ctx context.Context) SharedVolumeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusOutput)
}

func (i SharedVolumeStatusArgs) ToSharedVolumeStatusPtrOutput() SharedVolumeStatusPtrOutput {
	return i.ToSharedVolumeStatusPtrOutputWithContext(context.Background())
}

func (i SharedVolumeStatusArgs) ToSharedVolumeStatusPtrOutputWithContext(ctx context.Context) SharedVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusOutput).ToSharedVolumeStatusPtrOutputWithContext(ctx)
}

// SharedVolumeStatusPtrInput is an input type that accepts SharedVolumeStatusArgs, SharedVolumeStatusPtr and SharedVolumeStatusPtrOutput values.
// You can construct a concrete instance of `SharedVolumeStatusPtrInput` via:
//
//          SharedVolumeStatusArgs{...}
//
//  or:
//
//          nil
type SharedVolumeStatusPtrInput interface {
	pulumi.Input

	ToSharedVolumeStatusPtrOutput() SharedVolumeStatusPtrOutput
	ToSharedVolumeStatusPtrOutputWithContext(context.Context) SharedVolumeStatusPtrOutput
}

type sharedVolumeStatusPtrType SharedVolumeStatusArgs

func SharedVolumeStatusPtr(v *SharedVolumeStatusArgs) SharedVolumeStatusPtrInput {
	return (*sharedVolumeStatusPtrType)(v)
}

func (*sharedVolumeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeStatus)(nil)).Elem()
}

func (i *sharedVolumeStatusPtrType) ToSharedVolumeStatusPtrOutput() SharedVolumeStatusPtrOutput {
	return i.ToSharedVolumeStatusPtrOutputWithContext(context.Background())
}

func (i *sharedVolumeStatusPtrType) ToSharedVolumeStatusPtrOutputWithContext(ctx context.Context) SharedVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusPtrOutput)
}

// SharedVolumeStatus defines the observed state of SharedVolume
type SharedVolumeStatusOutput struct{ *pulumi.OutputState }

func (SharedVolumeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeStatus)(nil)).Elem()
}

func (o SharedVolumeStatusOutput) ToSharedVolumeStatusOutput() SharedVolumeStatusOutput {
	return o
}

func (o SharedVolumeStatusOutput) ToSharedVolumeStatusOutputWithContext(ctx context.Context) SharedVolumeStatusOutput {
	return o
}

func (o SharedVolumeStatusOutput) ToSharedVolumeStatusPtrOutput() SharedVolumeStatusPtrOutput {
	return o.ToSharedVolumeStatusPtrOutputWithContext(context.Background())
}

func (o SharedVolumeStatusOutput) ToSharedVolumeStatusPtrOutputWithContext(ctx context.Context) SharedVolumeStatusPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatus) *SharedVolumeStatus {
		return &v
	}).(SharedVolumeStatusPtrOutput)
}

// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
func (o SharedVolumeStatusOutput) ClaimRef() SharedVolumeStatusClaimRefPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatus) *SharedVolumeStatusClaimRef { return v.ClaimRef }).(SharedVolumeStatusClaimRefPtrOutput)
}

// Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
func (o SharedVolumeStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
func (o SharedVolumeStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type SharedVolumeStatusPtrOutput struct{ *pulumi.OutputState }

func (SharedVolumeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeStatus)(nil)).Elem()
}

func (o SharedVolumeStatusPtrOutput) ToSharedVolumeStatusPtrOutput() SharedVolumeStatusPtrOutput {
	return o
}

func (o SharedVolumeStatusPtrOutput) ToSharedVolumeStatusPtrOutputWithContext(ctx context.Context) SharedVolumeStatusPtrOutput {
	return o
}

func (o SharedVolumeStatusPtrOutput) Elem() SharedVolumeStatusOutput {
	return o.ApplyT(func(v *SharedVolumeStatus) SharedVolumeStatus { return *v }).(SharedVolumeStatusOutput)
}

// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
func (o SharedVolumeStatusPtrOutput) ClaimRef() SharedVolumeStatusClaimRefPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatus) *SharedVolumeStatusClaimRef {
		if v == nil {
			return nil
		}
		return v.ClaimRef
	}).(SharedVolumeStatusClaimRefPtrOutput)
}

// Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
func (o SharedVolumeStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
func (o SharedVolumeStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
type SharedVolumeStatusClaimRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// SharedVolumeStatusClaimRefInput is an input type that accepts SharedVolumeStatusClaimRefArgs and SharedVolumeStatusClaimRefOutput values.
// You can construct a concrete instance of `SharedVolumeStatusClaimRefInput` via:
//
//          SharedVolumeStatusClaimRefArgs{...}
type SharedVolumeStatusClaimRefInput interface {
	pulumi.Input

	ToSharedVolumeStatusClaimRefOutput() SharedVolumeStatusClaimRefOutput
	ToSharedVolumeStatusClaimRefOutputWithContext(context.Context) SharedVolumeStatusClaimRefOutput
}

// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
type SharedVolumeStatusClaimRefArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (SharedVolumeStatusClaimRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeStatusClaimRef)(nil)).Elem()
}

func (i SharedVolumeStatusClaimRefArgs) ToSharedVolumeStatusClaimRefOutput() SharedVolumeStatusClaimRefOutput {
	return i.ToSharedVolumeStatusClaimRefOutputWithContext(context.Background())
}

func (i SharedVolumeStatusClaimRefArgs) ToSharedVolumeStatusClaimRefOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusClaimRefOutput)
}

func (i SharedVolumeStatusClaimRefArgs) ToSharedVolumeStatusClaimRefPtrOutput() SharedVolumeStatusClaimRefPtrOutput {
	return i.ToSharedVolumeStatusClaimRefPtrOutputWithContext(context.Background())
}

func (i SharedVolumeStatusClaimRefArgs) ToSharedVolumeStatusClaimRefPtrOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusClaimRefOutput).ToSharedVolumeStatusClaimRefPtrOutputWithContext(ctx)
}

// SharedVolumeStatusClaimRefPtrInput is an input type that accepts SharedVolumeStatusClaimRefArgs, SharedVolumeStatusClaimRefPtr and SharedVolumeStatusClaimRefPtrOutput values.
// You can construct a concrete instance of `SharedVolumeStatusClaimRefPtrInput` via:
//
//          SharedVolumeStatusClaimRefArgs{...}
//
//  or:
//
//          nil
type SharedVolumeStatusClaimRefPtrInput interface {
	pulumi.Input

	ToSharedVolumeStatusClaimRefPtrOutput() SharedVolumeStatusClaimRefPtrOutput
	ToSharedVolumeStatusClaimRefPtrOutputWithContext(context.Context) SharedVolumeStatusClaimRefPtrOutput
}

type sharedVolumeStatusClaimRefPtrType SharedVolumeStatusClaimRefArgs

func SharedVolumeStatusClaimRefPtr(v *SharedVolumeStatusClaimRefArgs) SharedVolumeStatusClaimRefPtrInput {
	return (*sharedVolumeStatusClaimRefPtrType)(v)
}

func (*sharedVolumeStatusClaimRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeStatusClaimRef)(nil)).Elem()
}

func (i *sharedVolumeStatusClaimRefPtrType) ToSharedVolumeStatusClaimRefPtrOutput() SharedVolumeStatusClaimRefPtrOutput {
	return i.ToSharedVolumeStatusClaimRefPtrOutputWithContext(context.Background())
}

func (i *sharedVolumeStatusClaimRefPtrType) ToSharedVolumeStatusClaimRefPtrOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedVolumeStatusClaimRefPtrOutput)
}

// ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
type SharedVolumeStatusClaimRefOutput struct{ *pulumi.OutputState }

func (SharedVolumeStatusClaimRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedVolumeStatusClaimRef)(nil)).Elem()
}

func (o SharedVolumeStatusClaimRefOutput) ToSharedVolumeStatusClaimRefOutput() SharedVolumeStatusClaimRefOutput {
	return o
}

func (o SharedVolumeStatusClaimRefOutput) ToSharedVolumeStatusClaimRefOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefOutput {
	return o
}

func (o SharedVolumeStatusClaimRefOutput) ToSharedVolumeStatusClaimRefPtrOutput() SharedVolumeStatusClaimRefPtrOutput {
	return o.ToSharedVolumeStatusClaimRefPtrOutputWithContext(context.Background())
}

func (o SharedVolumeStatusClaimRefOutput) ToSharedVolumeStatusClaimRefPtrOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatusClaimRef) *SharedVolumeStatusClaimRef {
		return &v
	}).(SharedVolumeStatusClaimRefPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o SharedVolumeStatusClaimRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedVolumeStatusClaimRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o SharedVolumeStatusClaimRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SharedVolumeStatusClaimRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o SharedVolumeStatusClaimRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SharedVolumeStatusClaimRef) string { return v.Name }).(pulumi.StringOutput)
}

type SharedVolumeStatusClaimRefPtrOutput struct{ *pulumi.OutputState }

func (SharedVolumeStatusClaimRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedVolumeStatusClaimRef)(nil)).Elem()
}

func (o SharedVolumeStatusClaimRefPtrOutput) ToSharedVolumeStatusClaimRefPtrOutput() SharedVolumeStatusClaimRefPtrOutput {
	return o
}

func (o SharedVolumeStatusClaimRefPtrOutput) ToSharedVolumeStatusClaimRefPtrOutputWithContext(ctx context.Context) SharedVolumeStatusClaimRefPtrOutput {
	return o
}

func (o SharedVolumeStatusClaimRefPtrOutput) Elem() SharedVolumeStatusClaimRefOutput {
	return o.ApplyT(func(v *SharedVolumeStatusClaimRef) SharedVolumeStatusClaimRef { return *v }).(SharedVolumeStatusClaimRefOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o SharedVolumeStatusClaimRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatusClaimRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o SharedVolumeStatusClaimRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatusClaimRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o SharedVolumeStatusClaimRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedVolumeStatusClaimRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SharedVolumeTypeOutput{})
	pulumi.RegisterOutputType(SharedVolumeMetadataOutput{})
	pulumi.RegisterOutputType(SharedVolumeSpecOutput{})
	pulumi.RegisterOutputType(SharedVolumeSpecPtrOutput{})
	pulumi.RegisterOutputType(SharedVolumeStatusOutput{})
	pulumi.RegisterOutputType(SharedVolumeStatusPtrOutput{})
	pulumi.RegisterOutputType(SharedVolumeStatusClaimRefOutput{})
	pulumi.RegisterOutputType(SharedVolumeStatusClaimRefPtrOutput{})
}

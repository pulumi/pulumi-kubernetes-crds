# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'SharedVolumeSpec',
    'SharedVolumeStatus',
    'SharedVolumeStatusClaimRef',
]

@pulumi.output_type
class SharedVolumeSpec(dict):
    """
    SharedVolumeSpec defines the desired state of SharedVolume
    """
    def __init__(__self__, *,
                 access_point_id: str,
                 file_system_id: str):
        """
        SharedVolumeSpec defines the desired state of SharedVolume
        :param str access_point_id: The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
        :param str file_system_id: The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
        """
        pulumi.set(__self__, "access_point_id", access_point_id)
        pulumi.set(__self__, "file_system_id", file_system_id)

    @property
    @pulumi.getter(name="accessPointID")
    def access_point_id(self) -> str:
        """
        The ID of an EFS volume access point, e.g. `fsap-0123456789abcdef`. The EFS volume will be mounted to the specified access point. Required. Immutable.
        """
        return pulumi.get(self, "access_point_id")

    @property
    @pulumi.getter(name="fileSystemID")
    def file_system_id(self) -> str:
        """
        The ID of the EFS volume, e.g. `fs-0123cdef`. Required. Immutable.
        """
        return pulumi.get(self, "file_system_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SharedVolumeStatus(dict):
    """
    SharedVolumeStatus defines the observed state of SharedVolume
    """
    def __init__(__self__, *,
                 claim_ref: Optional['outputs.SharedVolumeStatusClaimRef'] = None,
                 message: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        SharedVolumeStatus defines the observed state of SharedVolume
        :param 'SharedVolumeStatusClaimRefArgs' claim_ref: ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
        :param str message: Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
        :param str phase: Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
        """
        if claim_ref is not None:
            pulumi.set(__self__, "claim_ref", claim_ref)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="claimRef")
    def claim_ref(self) -> Optional['outputs.SharedVolumeStatusClaimRef']:
        """
        ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
        """
        return pulumi.get(self, "claim_ref")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable string, usually describing what went wrong when `Phase` is `SharedVolumeFailed`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase indicates the state of the PersistentVolume and PersistentVolumeClaim artifacts associated with this SharedVolume. See SharedVolumePhase consts for possible values.
        """
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SharedVolumeStatusClaimRef(dict):
    """
    ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None):
        """
        ClaimRef refers to the PersistentVolumeClaim bound to a PersistentVolume representing the file system access point, both of which are created at the behest of this SharedVolume.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



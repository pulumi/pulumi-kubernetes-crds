# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'KeepalivedGroupSpec',
    'KeepalivedGroupStatus',
    'KeepalivedGroupStatusConditions',
]

@pulumi.output_type
class KeepalivedGroupSpec(dict):
    """
    KeepalivedGroupSpec defines the desired state of KeepalivedGroup
    """
    def __init__(__self__, *,
                 interface: str,
                 image: Optional[str] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 verbatim_config: Optional[Mapping[str, str]] = None):
        """
        KeepalivedGroupSpec defines the desired state of KeepalivedGroup
        """
        pulumi.set(__self__, "interface", interface)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if verbatim_config is not None:
            pulumi.set(__self__, "verbatim_config", verbatim_config)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="verbatimConfig")
    def verbatim_config(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "verbatim_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeepalivedGroupStatus(dict):
    """
    KeepalivedGroupStatus defines the observed state of KeepalivedGroup
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.KeepalivedGroupStatusConditions']] = None,
                 router_ids: Optional[Mapping[str, int]] = None):
        """
        KeepalivedGroupStatus defines the observed state of KeepalivedGroup
        :param Sequence['KeepalivedGroupStatusConditionsArgs'] conditions: INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if router_ids is not None:
            pulumi.set(__self__, "router_ids", router_ids)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.KeepalivedGroupStatusConditions']]:
        """
        INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="routerIDs")
    def router_ids(self) -> Optional[Mapping[str, int]]:
        return pulumi.get(self, "router_ids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeepalivedGroupStatusConditions(dict):
    """
    Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
     Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
         Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
        :param str type: ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
                Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        :param str reason: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
         Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'KogitoBuildSpecArgs',
    'KogitoBuildSpecArtifactArgs',
    'KogitoBuildSpecBuildImageArgs',
    'KogitoBuildSpecEnvsArgs',
    'KogitoBuildSpecEnvsValueFromArgs',
    'KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoBuildSpecEnvsValueFromFieldRefArgs',
    'KogitoBuildSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoBuildSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoBuildSpecGitSourceArgs',
    'KogitoBuildSpecResourcesArgs',
    'KogitoBuildSpecResourcesLimitsArgs',
    'KogitoBuildSpecResourcesRequestsArgs',
    'KogitoBuildSpecRuntimeImageArgs',
    'KogitoBuildSpecWebHooksArgs',
    'KogitoBuildStatusArgs',
    'KogitoBuildStatusBuildsArgs',
    'KogitoBuildStatusConditionsArgs',
    'KogitoDataIndexSpecArgs',
    'KogitoDataIndexSpecEnvsArgs',
    'KogitoDataIndexSpecEnvsValueFromArgs',
    'KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoDataIndexSpecEnvsValueFromFieldRefArgs',
    'KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoDataIndexSpecImageArgs',
    'KogitoDataIndexSpecInfinispanArgs',
    'KogitoDataIndexSpecInfinispanCredentialsArgs',
    'KogitoDataIndexSpecKafkaArgs',
    'KogitoDataIndexSpecResourcesArgs',
    'KogitoDataIndexSpecResourcesLimitsArgs',
    'KogitoDataIndexSpecResourcesRequestsArgs',
    'KogitoDataIndexStatusArgs',
    'KogitoDataIndexStatusConditionsArgs',
    'KogitoDataIndexStatusDeploymentConditionsArgs',
    'KogitoInfraSpecArgs',
    'KogitoInfraStatusArgs',
    'KogitoInfraStatusConditionArgs',
    'KogitoInfraStatusInfinispanArgs',
    'KogitoInfraStatusInfinispanConditionArgs',
    'KogitoInfraStatusKafkaArgs',
    'KogitoInfraStatusKafkaConditionArgs',
    'KogitoInfraStatusKeycloakArgs',
    'KogitoInfraStatusKeycloakConditionArgs',
    'KogitoJobsServiceSpecArgs',
    'KogitoJobsServiceSpecEnvsArgs',
    'KogitoJobsServiceSpecEnvsValueFromArgs',
    'KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoJobsServiceSpecEnvsValueFromFieldRefArgs',
    'KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoJobsServiceSpecImageArgs',
    'KogitoJobsServiceSpecInfinispanArgs',
    'KogitoJobsServiceSpecInfinispanCredentialsArgs',
    'KogitoJobsServiceSpecKafkaArgs',
    'KogitoJobsServiceSpecResourcesArgs',
    'KogitoJobsServiceSpecResourcesLimitsArgs',
    'KogitoJobsServiceSpecResourcesRequestsArgs',
    'KogitoJobsServiceStatusArgs',
    'KogitoJobsServiceStatusConditionsArgs',
    'KogitoJobsServiceStatusDeploymentConditionsArgs',
    'KogitoMgmtConsoleSpecArgs',
    'KogitoMgmtConsoleSpecEnvsArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoMgmtConsoleSpecImageArgs',
    'KogitoMgmtConsoleSpecResourcesArgs',
    'KogitoMgmtConsoleSpecResourcesLimitsArgs',
    'KogitoMgmtConsoleSpecResourcesRequestsArgs',
    'KogitoMgmtConsoleStatusArgs',
    'KogitoMgmtConsoleStatusConditionsArgs',
    'KogitoMgmtConsoleStatusDeploymentConditionsArgs',
    'KogitoRuntimeSpecArgs',
    'KogitoRuntimeSpecEnvsArgs',
    'KogitoRuntimeSpecEnvsValueFromArgs',
    'KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoRuntimeSpecEnvsValueFromFieldRefArgs',
    'KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoRuntimeSpecImageArgs',
    'KogitoRuntimeSpecInfinispanArgs',
    'KogitoRuntimeSpecInfinispanCredentialsArgs',
    'KogitoRuntimeSpecKafkaArgs',
    'KogitoRuntimeSpecResourcesArgs',
    'KogitoRuntimeSpecResourcesLimitsArgs',
    'KogitoRuntimeSpecResourcesRequestsArgs',
    'KogitoRuntimeStatusArgs',
    'KogitoRuntimeStatusConditionsArgs',
    'KogitoRuntimeStatusDeploymentConditionsArgs',
    'KogitoTrustySpecArgs',
    'KogitoTrustySpecEnvsArgs',
    'KogitoTrustySpecEnvsValueFromArgs',
    'KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoTrustySpecEnvsValueFromFieldRefArgs',
    'KogitoTrustySpecEnvsValueFromResourceFieldRefArgs',
    'KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoTrustySpecEnvsValueFromSecretKeyRefArgs',
    'KogitoTrustySpecImageArgs',
    'KogitoTrustySpecInfinispanArgs',
    'KogitoTrustySpecInfinispanCredentialsArgs',
    'KogitoTrustySpecKafkaArgs',
    'KogitoTrustySpecResourcesArgs',
    'KogitoTrustySpecResourcesLimitsArgs',
    'KogitoTrustySpecResourcesRequestsArgs',
    'KogitoTrustyStatusArgs',
    'KogitoTrustyStatusConditionsArgs',
    'KogitoTrustyStatusDeploymentConditionsArgs',
]

@pulumi.input_type
class KogitoBuildSpecArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 artifact: Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']] = None,
                 build_image: Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']] = None,
                 disable_incremental: Optional[pulumi.Input[bool]] = None,
                 enable_maven_download_output: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecEnvsArgs']]]] = None,
                 git_source: Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']] = None,
                 maven_mirror_url: Optional[pulumi.Input[str]] = None,
                 native: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 runtime_image: Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']] = None,
                 target_kogito_runtime: Optional[pulumi.Input[str]] = None,
                 web_hooks: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]] = None):
        """
        KogitoBuildSpec defines the desired state of KogitoBuild.
        :param pulumi.Input[str] type: Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
        :param pulumi.Input['KogitoBuildSpecArtifactArgs'] artifact: Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        :param pulumi.Input['KogitoBuildSpecBuildImageArgs'] build_image: Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input[bool] disable_incremental: DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
        :param pulumi.Input[bool] enable_maven_download_output: If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecEnvsArgs']]] envs: Environment variables used during build time.
        :param pulumi.Input['KogitoBuildSpecGitSourceArgs'] git_source: Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        :param pulumi.Input[str] maven_mirror_url: Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
        :param pulumi.Input[bool] native: Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
        :param pulumi.Input['KogitoBuildSpecResourcesArgs'] resources: Resources Requirements for builder pods.
        :param pulumi.Input[str] runtime: Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
        :param pulumi.Input['KogitoBuildSpecRuntimeImageArgs'] runtime_image: Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input[str] target_kogito_runtime: Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecWebHooksArgs']]] web_hooks: WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
        """
        pulumi.set(__self__, "type", type)
        if artifact is not None:
            pulumi.set(__self__, "artifact", artifact)
        if build_image is not None:
            pulumi.set(__self__, "build_image", build_image)
        if disable_incremental is not None:
            pulumi.set(__self__, "disable_incremental", disable_incremental)
        if enable_maven_download_output is not None:
            pulumi.set(__self__, "enable_maven_download_output", enable_maven_download_output)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git_source is not None:
            pulumi.set(__self__, "git_source", git_source)
        if maven_mirror_url is not None:
            pulumi.set(__self__, "maven_mirror_url", maven_mirror_url)
        if native is not None:
            pulumi.set(__self__, "native", native)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if runtime_image is not None:
            pulumi.set(__self__, "runtime_image", runtime_image)
        if target_kogito_runtime is not None:
            pulumi.set(__self__, "target_kogito_runtime", target_kogito_runtime)
        if web_hooks is not None:
            pulumi.set(__self__, "web_hooks", web_hooks)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def artifact(self) -> Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']]:
        """
        Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        """
        return pulumi.get(self, "artifact")

    @artifact.setter
    def artifact(self, value: Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']]):
        pulumi.set(self, "artifact", value)

    @property
    @pulumi.getter(name="buildImage")
    def build_image(self) -> Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']]:
        """
        Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "build_image")

    @build_image.setter
    def build_image(self, value: Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']]):
        pulumi.set(self, "build_image", value)

    @property
    @pulumi.getter(name="disableIncremental")
    def disable_incremental(self) -> Optional[pulumi.Input[bool]]:
        """
        DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
        """
        return pulumi.get(self, "disable_incremental")

    @disable_incremental.setter
    def disable_incremental(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_incremental", value)

    @property
    @pulumi.getter(name="enableMavenDownloadOutput")
    def enable_maven_download_output(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
        """
        return pulumi.get(self, "enable_maven_download_output")

    @enable_maven_download_output.setter
    def enable_maven_download_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_maven_download_output", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecEnvsArgs']]]]:
        """
        Environment variables used during build time.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="gitSource")
    def git_source(self) -> Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']]:
        """
        Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        """
        return pulumi.get(self, "git_source")

    @git_source.setter
    def git_source(self, value: Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']]):
        pulumi.set(self, "git_source", value)

    @property
    @pulumi.getter(name="mavenMirrorURL")
    def maven_mirror_url(self) -> Optional[pulumi.Input[str]]:
        """
        Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
        """
        return pulumi.get(self, "maven_mirror_url")

    @maven_mirror_url.setter
    def maven_mirror_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maven_mirror_url", value)

    @property
    @pulumi.getter
    def native(self) -> Optional[pulumi.Input[bool]]:
        """
        Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
        """
        return pulumi.get(self, "native")

    @native.setter
    def native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']]:
        """
        Resources Requirements for builder pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="runtimeImage")
    def runtime_image(self) -> Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']]:
        """
        Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "runtime_image")

    @runtime_image.setter
    def runtime_image(self, value: Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']]):
        pulumi.set(self, "runtime_image", value)

    @property
    @pulumi.getter(name="targetKogitoRuntime")
    def target_kogito_runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
        """
        return pulumi.get(self, "target_kogito_runtime")

    @target_kogito_runtime.setter
    def target_kogito_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_kogito_runtime", value)

    @property
    @pulumi.getter(name="webHooks")
    def web_hooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]]:
        """
        WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
        """
        return pulumi.get(self, "web_hooks")

    @web_hooks.setter
    def web_hooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]]):
        pulumi.set(self, "web_hooks", value)


@pulumi.input_type
class KogitoBuildSpecArtifactArgs:
    def __init__(__self__, *,
                 artifact_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        :param pulumi.Input[str] artifact_id: Indicates the unique base name of the primary artifact being generated.
        :param pulumi.Input[str] group_id: Indicates the unique identifier of the organization or group that created the project.
        :param pulumi.Input[str] version: Indicates the version of the artifact generated by the project.
        """
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the unique base name of the primary artifact being generated.
        """
        return pulumi.get(self, "artifact_id")

    @artifact_id.setter
    def artifact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the unique identifier of the organization or group that created the project.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the version of the artifact generated by the project.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KogitoBuildSpecBuildImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoBuildSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoBuildSpecGitSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 context_dir: Optional[pulumi.Input[str]] = None,
                 reference: Optional[pulumi.Input[str]] = None):
        """
        Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        :param pulumi.Input[str] uri: Git URI for the s2i source.
        :param pulumi.Input[str] context_dir: Context/subdirectory where the code is located, relative to the repo root.
        :param pulumi.Input[str] reference: Branch to use in the Git repository.
        """
        pulumi.set(__self__, "uri", uri)
        if context_dir is not None:
            pulumi.set(__self__, "context_dir", context_dir)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        Git URI for the s2i source.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="contextDir")
    def context_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Context/subdirectory where the code is located, relative to the repo root.
        """
        return pulumi.get(self, "context_dir")

    @context_dir.setter
    def context_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_dir", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input[str]]:
        """
        Branch to use in the Git repository.
        """
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference", value)


@pulumi.input_type
class KogitoBuildSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]] = None):
        """
        Resources Requirements for builder pods.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoBuildSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecRuntimeImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoBuildSpecWebHooksArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        WebHookSecret Secret to use for a given webHook.
        :param pulumi.Input[str] secret: Secret value for webHook
        :param pulumi.Input[str] type: WebHook type, either GitHub or Generic.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret value for webHook
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        WebHook type, either GitHub or Generic.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KogitoBuildStatusArgs:
    def __init__(__self__, *,
                 builds: pulumi.Input['KogitoBuildStatusBuildsArgs'],
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoBuildStatusConditionsArgs']]],
                 latest_build: Optional[pulumi.Input[str]] = None):
        """
        KogitoBuildStatus defines the observed state of KogitoBuild.
        :param pulumi.Input['KogitoBuildStatusBuildsArgs'] builds: History of builds
        :param pulumi.Input[Sequence[pulumi.Input['KogitoBuildStatusConditionsArgs']]] conditions: History of conditions for the resource, shows the status of the younger builder controlled by this instance
        """
        pulumi.set(__self__, "builds", builds)
        pulumi.set(__self__, "conditions", conditions)
        if latest_build is not None:
            pulumi.set(__self__, "latest_build", latest_build)

    @property
    @pulumi.getter
    def builds(self) -> pulumi.Input['KogitoBuildStatusBuildsArgs']:
        """
        History of builds
        """
        return pulumi.get(self, "builds")

    @builds.setter
    def builds(self, value: pulumi.Input['KogitoBuildStatusBuildsArgs']):
        pulumi.set(self, "builds", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoBuildStatusConditionsArgs']]]:
        """
        History of conditions for the resource, shows the status of the younger builder controlled by this instance
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoBuildStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="latestBuild")
    def latest_build(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_build")

    @latest_build.setter
    def latest_build(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_build", value)


@pulumi.input_type
class KogitoBuildStatusBuildsArgs:
    def __init__(__self__, *,
                 cancelled: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 complete: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 error: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failed: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 new: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pending: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 running: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        History of builds
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cancelled: Builds have been stopped from executing.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] complete: Builds have executed and succeeded.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] error: Builds have been prevented from executing by an error.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] failed: Builds have executed and failed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] new: Builds are being created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pending: Builds are about to start running.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] running: Builds are running.
        """
        if cancelled is not None:
            pulumi.set(__self__, "cancelled", cancelled)
        if complete is not None:
            pulumi.set(__self__, "complete", complete)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if new is not None:
            pulumi.set(__self__, "new", new)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if running is not None:
            pulumi.set(__self__, "running", running)

    @property
    @pulumi.getter
    def cancelled(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds have been stopped from executing.
        """
        return pulumi.get(self, "cancelled")

    @cancelled.setter
    def cancelled(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cancelled", value)

    @property
    @pulumi.getter
    def complete(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds have executed and succeeded.
        """
        return pulumi.get(self, "complete")

    @complete.setter
    def complete(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "complete", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds have been prevented from executing by an error.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds have executed and failed.
        """
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failed", value)

    @property
    @pulumi.getter
    def new(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds are being created.
        """
        return pulumi.get(self, "new")

    @new.setter
    def new(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "new", value)

    @property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds are about to start running.
        """
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pending", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Builds are running.
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "running", value)


@pulumi.input_type
class KogitoBuildStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
        :param pulumi.Input[str] status: Status ...
        :param pulumi.Input[str] type: Type of this condition
        :param pulumi.Input[str] last_transition_time: LastTransitionTime ...
        :param pulumi.Input[str] message: Message ...
        :param pulumi.Input[str] reason: Reason of this condition
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status ...
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime ...
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message ...
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason of this condition
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoDataIndexSpecArgs:
    def __init__(__self__, *,
                 deployment_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexSpecEnvsArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['KogitoDataIndexSpecImageArgs']] = None,
                 infinispan: Optional[pulumi.Input['KogitoDataIndexSpecInfinispanArgs']] = None,
                 insecure_image_registry: Optional[pulumi.Input[bool]] = None,
                 kafka: Optional[pulumi.Input['KogitoDataIndexSpecKafkaArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['KogitoDataIndexSpecResourcesArgs']] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_labels: Additional labels to be added to the Deployment and Pods managed by the operator.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexSpecEnvsArgs']]] envs: Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        :param pulumi.Input[int] http_port: HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        :param pulumi.Input['KogitoDataIndexSpecImageArgs'] image: Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input['KogitoDataIndexSpecInfinispanArgs'] infinispan: Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[bool] insecure_image_registry: A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        :param pulumi.Input['KogitoDataIndexSpecKafkaArgs'] kafka: Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[int] replicas: Number of replicas that the service will have deployed in the cluster. Default value: 1.
        :param pulumi.Input['KogitoDataIndexSpecResourcesArgs'] resources: Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Additional labels to be added to the Service managed by the operator.
        """
        if deployment_labels is not None:
            pulumi.set(__self__, "deployment_labels", deployment_labels)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if infinispan is not None:
            pulumi.set(__self__, "infinispan", infinispan)
        if insecure_image_registry is not None:
            pulumi.set(__self__, "insecure_image_registry", insecure_image_registry)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)

    @property
    @pulumi.getter(name="deploymentLabels")
    def deployment_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Deployment and Pods managed by the operator.
        """
        return pulumi.get(self, "deployment_labels")

    @deployment_labels.setter
    def deployment_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_labels", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexSpecEnvsArgs']]]]:
        """
        Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['KogitoDataIndexSpecImageArgs']]:
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['KogitoDataIndexSpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def infinispan(self) -> Optional[pulumi.Input['KogitoDataIndexSpecInfinispanArgs']]:
        """
        Has the data used by the service to connect to the Infinispan cluster.
        """
        return pulumi.get(self, "infinispan")

    @infinispan.setter
    def infinispan(self, value: Optional[pulumi.Input['KogitoDataIndexSpecInfinispanArgs']]):
        pulumi.set(self, "infinispan", value)

    @property
    @pulumi.getter(name="insecureImageRegistry")
    def insecure_image_registry(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        """
        return pulumi.get(self, "insecure_image_registry")

    @insecure_image_registry.setter
    def insecure_image_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_image_registry", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KogitoDataIndexSpecKafkaArgs']]:
        """
        Has the data used by the service to connect to the Kafka cluster.
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KogitoDataIndexSpecKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas that the service will have deployed in the cluster. Default value: 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoDataIndexSpecResourcesArgs']]:
        """
        Defined compute resource requirements for the deployed service.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoDataIndexSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Service managed by the operator.
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoDataIndexSpecImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoDataIndexSpecInfinispanArgs:
    def __init__(__self__, *,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['KogitoDataIndexSpecInfinispanCredentialsArgs']] = None,
                 sasl_mechanism: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_auth: Optional[pulumi.Input[bool]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[str] auth_realm: Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        :param pulumi.Input['KogitoDataIndexSpecInfinispanCredentialsArgs'] credentials: SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] sasl_mechanism: SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        :param pulumi.Input[str] uri: URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        :param pulumi.Input[bool] use_auth: UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_auth is not None:
            pulumi.set(__self__, "use_auth", use_auth)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['KogitoDataIndexSpecInfinispanCredentialsArgs']]:
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['KogitoDataIndexSpecInfinispanCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        """
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useAuth")
    def use_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        """
        return pulumi.get(self, "use_auth")

    @use_auth.setter
    def use_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auth", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoDataIndexSpecInfinispanCredentialsArgs:
    def __init__(__self__, *,
                 password_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] password_key: PasswordKey is the key pointing to a value in a Secret holding the password value.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret where the credentials are set.
        :param pulumi.Input[str] username_key: UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        if password_key is not None:
            pulumi.set(__self__, "password_key", password_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter(name="passwordKey")
    def password_key(self) -> Optional[pulumi.Input[str]]:
        """
        PasswordKey is the key pointing to a value in a Secret holding the password value.
        """
        return pulumi.get(self, "password_key")

    @password_key.setter
    def password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret where the credentials are set.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        """
        UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class KogitoDataIndexSpecKafkaArgs:
    def __init__(__self__, *,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[str] external_uri: URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        :param pulumi.Input[str] instance: Instance is the Kafka instance to be used, for example, kogito-kafka.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance is the Kafka instance to be used, for example, kogito-kafka.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoDataIndexSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesRequestsArgs']]]] = None):
        """
        Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoDataIndexSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoDataIndexSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoDataIndexSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoDataIndexStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusConditionsArgs']]],
                 deployment_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusDeploymentConditionsArgs']]]] = None,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusConditionsArgs']]] conditions: History of conditions for the resource
        :param pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusDeploymentConditionsArgs']]] deployment_conditions: General conditions for the Kogito Service deployment.
        :param pulumi.Input[str] external_uri: URI is where the service is exposed.
        :param pulumi.Input[str] image: Image is the resolved image for this service.
        """
        pulumi.set(__self__, "conditions", conditions)
        if deployment_conditions is not None:
            pulumi.set(__self__, "deployment_conditions", deployment_conditions)
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusConditionsArgs']]]:
        """
        History of conditions for the resource
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="deploymentConditions")
    def deployment_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusDeploymentConditionsArgs']]]]:
        """
        General conditions for the Kogito Service deployment.
        """
        return pulumi.get(self, "deployment_conditions")

    @deployment_conditions.setter
    def deployment_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoDataIndexStatusDeploymentConditionsArgs']]]]):
        pulumi.set(self, "deployment_conditions", value)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is where the service is exposed.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the resolved image for this service.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KogitoDataIndexStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition is the detailed condition for the resource
        :param pulumi.Input[str] type: ConditionType is the type of condition
        :param pulumi.Input[str] reason: ReasonType is the type of reason
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ReasonType is the type of reason
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoDataIndexStatusDeploymentConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoInfraSpecArgs:
    def __init__(__self__, *,
                 install_infinispan: Optional[pulumi.Input[bool]] = None,
                 install_kafka: Optional[pulumi.Input[bool]] = None,
                 install_keycloak: Optional[pulumi.Input[bool]] = None):
        """
        KogitoInfraSpec defines the desired state of KogitoInfra.
        :param pulumi.Input[bool] install_infinispan: Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
        :param pulumi.Input[bool] install_kafka: Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
        :param pulumi.Input[bool] install_keycloak: Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
        """
        if install_infinispan is not None:
            pulumi.set(__self__, "install_infinispan", install_infinispan)
        if install_kafka is not None:
            pulumi.set(__self__, "install_kafka", install_kafka)
        if install_keycloak is not None:
            pulumi.set(__self__, "install_keycloak", install_keycloak)

    @property
    @pulumi.getter(name="installInfinispan")
    def install_infinispan(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
        """
        return pulumi.get(self, "install_infinispan")

    @install_infinispan.setter
    def install_infinispan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_infinispan", value)

    @property
    @pulumi.getter(name="installKafka")
    def install_kafka(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
        """
        return pulumi.get(self, "install_kafka")

    @install_kafka.setter
    def install_kafka(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_kafka", value)

    @property
    @pulumi.getter(name="installKeycloak")
    def install_keycloak(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
        """
        return pulumi.get(self, "install_keycloak")

    @install_keycloak.setter
    def install_keycloak(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_keycloak", value)


@pulumi.input_type
class KogitoInfraStatusArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['KogitoInfraStatusConditionArgs']] = None,
                 infinispan: Optional[pulumi.Input['KogitoInfraStatusInfinispanArgs']] = None,
                 kafka: Optional[pulumi.Input['KogitoInfraStatusKafkaArgs']] = None,
                 keycloak: Optional[pulumi.Input['KogitoInfraStatusKeycloakArgs']] = None):
        """
        KogitoInfraStatus defines the observed state of KogitoInfra.
        :param pulumi.Input['KogitoInfraStatusConditionArgs'] condition: KogitoInfraCondition ...
        :param pulumi.Input['KogitoInfraStatusInfinispanArgs'] infinispan: InfinispanInstallStatus defines the Infinispan installation status.
        :param pulumi.Input['KogitoInfraStatusKafkaArgs'] kafka: InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        :param pulumi.Input['KogitoInfraStatusKeycloakArgs'] keycloak: InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if infinispan is not None:
            pulumi.set(__self__, "infinispan", infinispan)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if keycloak is not None:
            pulumi.set(__self__, "keycloak", keycloak)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['KogitoInfraStatusConditionArgs']]:
        """
        KogitoInfraCondition ...
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['KogitoInfraStatusConditionArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def infinispan(self) -> Optional[pulumi.Input['KogitoInfraStatusInfinispanArgs']]:
        """
        InfinispanInstallStatus defines the Infinispan installation status.
        """
        return pulumi.get(self, "infinispan")

    @infinispan.setter
    def infinispan(self, value: Optional[pulumi.Input['KogitoInfraStatusInfinispanArgs']]):
        pulumi.set(self, "infinispan", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KogitoInfraStatusKafkaArgs']]:
        """
        InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KogitoInfraStatusKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def keycloak(self) -> Optional[pulumi.Input['KogitoInfraStatusKeycloakArgs']]:
        """
        InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        """
        return pulumi.get(self, "keycloak")

    @keycloak.setter
    def keycloak(self, value: Optional[pulumi.Input['KogitoInfraStatusKeycloakArgs']]):
        pulumi.set(self, "keycloak", value)


@pulumi.input_type
class KogitoInfraStatusConditionArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        KogitoInfraCondition ...
        :param pulumi.Input[str] type: KogitoInfraConditionType ...
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        KogitoInfraConditionType ...
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class KogitoInfraStatusInfinispanArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusInfinispanConditionArgs']]]] = None,
                 credential_secret: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        InfinispanInstallStatus defines the Infinispan installation status.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if credential_secret is not None:
            pulumi.set(__self__, "credential_secret", credential_secret)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusInfinispanConditionArgs']]]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusInfinispanConditionArgs']]]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="credentialSecret")
    def credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credential_secret")

    @credential_secret.setter
    def credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_secret", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class KogitoInfraStatusInfinispanConditionArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        InstallCondition defines the installation condition for the infrastructure actor.
        :param pulumi.Input[str] type: InstallConditionType defines the possibles conditions that a install might have.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstallConditionType defines the possibles conditions that a install might have.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class KogitoInfraStatusKafkaArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKafkaConditionArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKafkaConditionArgs']]]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKafkaConditionArgs']]]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class KogitoInfraStatusKafkaConditionArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        InstallCondition defines the installation condition for the infrastructure actor.
        :param pulumi.Input[str] type: InstallConditionType defines the possibles conditions that a install might have.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstallConditionType defines the possibles conditions that a install might have.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class KogitoInfraStatusKeycloakArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKeycloakConditionArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKeycloakConditionArgs']]]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoInfraStatusKeycloakConditionArgs']]]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class KogitoInfraStatusKeycloakConditionArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        InstallCondition defines the installation condition for the infrastructure actor.
        :param pulumi.Input[str] type: InstallConditionType defines the possibles conditions that a install might have.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstallConditionType defines the possibles conditions that a install might have.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class KogitoJobsServiceSpecArgs:
    def __init__(__self__, *,
                 back_off_retry_millis: Optional[pulumi.Input[int]] = None,
                 deployment_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceSpecEnvsArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['KogitoJobsServiceSpecImageArgs']] = None,
                 infinispan: Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanArgs']] = None,
                 insecure_image_registry: Optional[pulumi.Input[bool]] = None,
                 kafka: Optional[pulumi.Input['KogitoJobsServiceSpecKafkaArgs']] = None,
                 max_interval_limit_to_retry_millis: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['KogitoJobsServiceSpecResourcesArgs']] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
        :param pulumi.Input[int] back_off_retry_millis: Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_labels: Additional labels to be added to the Deployment and Pods managed by the operator.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceSpecEnvsArgs']]] envs: Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        :param pulumi.Input[int] http_port: HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        :param pulumi.Input['KogitoJobsServiceSpecImageArgs'] image: Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input['KogitoJobsServiceSpecInfinispanArgs'] infinispan: Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[bool] insecure_image_registry: A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        :param pulumi.Input['KogitoJobsServiceSpecKafkaArgs'] kafka: Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[int] max_interval_limit_to_retry_millis: Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
        :param pulumi.Input[int] replicas: Number of replicas that the service will have deployed in the cluster. Default value: 1.
        :param pulumi.Input['KogitoJobsServiceSpecResourcesArgs'] resources: Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Additional labels to be added to the Service managed by the operator.
        """
        if back_off_retry_millis is not None:
            pulumi.set(__self__, "back_off_retry_millis", back_off_retry_millis)
        if deployment_labels is not None:
            pulumi.set(__self__, "deployment_labels", deployment_labels)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if infinispan is not None:
            pulumi.set(__self__, "infinispan", infinispan)
        if insecure_image_registry is not None:
            pulumi.set(__self__, "insecure_image_registry", insecure_image_registry)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if max_interval_limit_to_retry_millis is not None:
            pulumi.set(__self__, "max_interval_limit_to_retry_millis", max_interval_limit_to_retry_millis)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)

    @property
    @pulumi.getter(name="backOffRetryMillis")
    def back_off_retry_millis(self) -> Optional[pulumi.Input[int]]:
        """
        Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
        """
        return pulumi.get(self, "back_off_retry_millis")

    @back_off_retry_millis.setter
    def back_off_retry_millis(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "back_off_retry_millis", value)

    @property
    @pulumi.getter(name="deploymentLabels")
    def deployment_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Deployment and Pods managed by the operator.
        """
        return pulumi.get(self, "deployment_labels")

    @deployment_labels.setter
    def deployment_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_labels", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceSpecEnvsArgs']]]]:
        """
        Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecImageArgs']]:
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def infinispan(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanArgs']]:
        """
        Has the data used by the service to connect to the Infinispan cluster.
        """
        return pulumi.get(self, "infinispan")

    @infinispan.setter
    def infinispan(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanArgs']]):
        pulumi.set(self, "infinispan", value)

    @property
    @pulumi.getter(name="insecureImageRegistry")
    def insecure_image_registry(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        """
        return pulumi.get(self, "insecure_image_registry")

    @insecure_image_registry.setter
    def insecure_image_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_image_registry", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecKafkaArgs']]:
        """
        Has the data used by the service to connect to the Kafka cluster.
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter(name="maxIntervalLimitToRetryMillis")
    def max_interval_limit_to_retry_millis(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
        """
        return pulumi.get(self, "max_interval_limit_to_retry_millis")

    @max_interval_limit_to_retry_millis.setter
    def max_interval_limit_to_retry_millis(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_interval_limit_to_retry_millis", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas that the service will have deployed in the cluster. Default value: 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecResourcesArgs']]:
        """
        Defined compute resource requirements for the deployed service.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Service managed by the operator.
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoJobsServiceSpecImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoJobsServiceSpecInfinispanArgs:
    def __init__(__self__, *,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanCredentialsArgs']] = None,
                 sasl_mechanism: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_auth: Optional[pulumi.Input[bool]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[str] auth_realm: Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        :param pulumi.Input['KogitoJobsServiceSpecInfinispanCredentialsArgs'] credentials: SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] sasl_mechanism: SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        :param pulumi.Input[str] uri: URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        :param pulumi.Input[bool] use_auth: UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_auth is not None:
            pulumi.set(__self__, "use_auth", use_auth)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanCredentialsArgs']]:
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['KogitoJobsServiceSpecInfinispanCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        """
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useAuth")
    def use_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        """
        return pulumi.get(self, "use_auth")

    @use_auth.setter
    def use_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auth", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoJobsServiceSpecInfinispanCredentialsArgs:
    def __init__(__self__, *,
                 password_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] password_key: PasswordKey is the key pointing to a value in a Secret holding the password value.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret where the credentials are set.
        :param pulumi.Input[str] username_key: UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        if password_key is not None:
            pulumi.set(__self__, "password_key", password_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter(name="passwordKey")
    def password_key(self) -> Optional[pulumi.Input[str]]:
        """
        PasswordKey is the key pointing to a value in a Secret holding the password value.
        """
        return pulumi.get(self, "password_key")

    @password_key.setter
    def password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret where the credentials are set.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        """
        UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class KogitoJobsServiceSpecKafkaArgs:
    def __init__(__self__, *,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[str] external_uri: URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        :param pulumi.Input[str] instance: Instance is the Kafka instance to be used, for example, kogito-kafka.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance is the Kafka instance to be used, for example, kogito-kafka.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoJobsServiceSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesRequestsArgs']]]] = None):
        """
        Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoJobsServiceSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoJobsServiceSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoJobsServiceSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoJobsServiceStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusConditionsArgs']]],
                 deployment_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusDeploymentConditionsArgs']]]] = None,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusConditionsArgs']]] conditions: History of conditions for the resource
        :param pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusDeploymentConditionsArgs']]] deployment_conditions: General conditions for the Kogito Service deployment.
        :param pulumi.Input[str] external_uri: URI is where the service is exposed.
        :param pulumi.Input[str] image: Image is the resolved image for this service.
        """
        pulumi.set(__self__, "conditions", conditions)
        if deployment_conditions is not None:
            pulumi.set(__self__, "deployment_conditions", deployment_conditions)
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusConditionsArgs']]]:
        """
        History of conditions for the resource
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="deploymentConditions")
    def deployment_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusDeploymentConditionsArgs']]]]:
        """
        General conditions for the Kogito Service deployment.
        """
        return pulumi.get(self, "deployment_conditions")

    @deployment_conditions.setter
    def deployment_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoJobsServiceStatusDeploymentConditionsArgs']]]]):
        pulumi.set(self, "deployment_conditions", value)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is where the service is exposed.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the resolved image for this service.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KogitoJobsServiceStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition is the detailed condition for the resource
        :param pulumi.Input[str] type: ConditionType is the type of condition
        :param pulumi.Input[str] reason: ReasonType is the type of reason
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ReasonType is the type of reason
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoJobsServiceStatusDeploymentConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecArgs:
    def __init__(__self__, *,
                 deployment_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleSpecEnvsArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['KogitoMgmtConsoleSpecImageArgs']] = None,
                 insecure_image_registry: Optional[pulumi.Input[bool]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['KogitoMgmtConsoleSpecResourcesArgs']] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_labels: Additional labels to be added to the Deployment and Pods managed by the operator.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleSpecEnvsArgs']]] envs: Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        :param pulumi.Input[int] http_port: HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        :param pulumi.Input['KogitoMgmtConsoleSpecImageArgs'] image: Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input[bool] insecure_image_registry: A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        :param pulumi.Input[int] replicas: Number of replicas that the service will have deployed in the cluster. Default value: 1.
        :param pulumi.Input['KogitoMgmtConsoleSpecResourcesArgs'] resources: Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Additional labels to be added to the Service managed by the operator.
        """
        if deployment_labels is not None:
            pulumi.set(__self__, "deployment_labels", deployment_labels)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if insecure_image_registry is not None:
            pulumi.set(__self__, "insecure_image_registry", insecure_image_registry)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)

    @property
    @pulumi.getter(name="deploymentLabels")
    def deployment_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Deployment and Pods managed by the operator.
        """
        return pulumi.get(self, "deployment_labels")

    @deployment_labels.setter
    def deployment_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_labels", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleSpecEnvsArgs']]]]:
        """
        Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecImageArgs']]:
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="insecureImageRegistry")
    def insecure_image_registry(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        """
        return pulumi.get(self, "insecure_image_registry")

    @insecure_image_registry.setter
    def insecure_image_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_image_registry", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas that the service will have deployed in the cluster. Default value: 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecResourcesArgs']]:
        """
        Defined compute resource requirements for the deployed service.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Service managed by the operator.
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesRequestsArgs']]]] = None):
        """
        Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoMgmtConsoleSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoMgmtConsoleSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoMgmtConsoleSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoMgmtConsoleStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusConditionsArgs']]],
                 deployment_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusDeploymentConditionsArgs']]]] = None,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusConditionsArgs']]] conditions: History of conditions for the resource
        :param pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusDeploymentConditionsArgs']]] deployment_conditions: General conditions for the Kogito Service deployment.
        :param pulumi.Input[str] external_uri: URI is where the service is exposed.
        :param pulumi.Input[str] image: Image is the resolved image for this service.
        """
        pulumi.set(__self__, "conditions", conditions)
        if deployment_conditions is not None:
            pulumi.set(__self__, "deployment_conditions", deployment_conditions)
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusConditionsArgs']]]:
        """
        History of conditions for the resource
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="deploymentConditions")
    def deployment_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusDeploymentConditionsArgs']]]]:
        """
        General conditions for the Kogito Service deployment.
        """
        return pulumi.get(self, "deployment_conditions")

    @deployment_conditions.setter
    def deployment_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoMgmtConsoleStatusDeploymentConditionsArgs']]]]):
        pulumi.set(self, "deployment_conditions", value)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is where the service is exposed.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the resolved image for this service.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KogitoMgmtConsoleStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition is the detailed condition for the resource
        :param pulumi.Input[str] type: ConditionType is the type of condition
        :param pulumi.Input[str] reason: ReasonType is the type of reason
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ReasonType is the type of reason
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoMgmtConsoleStatusDeploymentConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoRuntimeSpecArgs:
    def __init__(__self__, *,
                 deployment_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enable_istio: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeSpecEnvsArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['KogitoRuntimeSpecImageArgs']] = None,
                 infinispan: Optional[pulumi.Input['KogitoRuntimeSpecInfinispanArgs']] = None,
                 insecure_image_registry: Optional[pulumi.Input[bool]] = None,
                 kafka: Optional[pulumi.Input['KogitoRuntimeSpecKafkaArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['KogitoRuntimeSpecResourcesArgs']] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        KogitoRuntimeSpec defines the desired state of KogitoRuntime.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_labels: Additional labels to be added to the Deployment and Pods managed by the operator.
        :param pulumi.Input[bool] enable_istio: Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeSpecEnvsArgs']]] envs: Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        :param pulumi.Input[int] http_port: HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        :param pulumi.Input['KogitoRuntimeSpecImageArgs'] image: Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input['KogitoRuntimeSpecInfinispanArgs'] infinispan: Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[bool] insecure_image_registry: A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        :param pulumi.Input['KogitoRuntimeSpecKafkaArgs'] kafka: Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[int] replicas: Number of replicas that the service will have deployed in the cluster. Default value: 1.
        :param pulumi.Input['KogitoRuntimeSpecResourcesArgs'] resources: Defined compute resource requirements for the deployed service.
        :param pulumi.Input[str] runtime: The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Additional labels to be added to the Service managed by the operator.
        """
        if deployment_labels is not None:
            pulumi.set(__self__, "deployment_labels", deployment_labels)
        if enable_istio is not None:
            pulumi.set(__self__, "enable_istio", enable_istio)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if infinispan is not None:
            pulumi.set(__self__, "infinispan", infinispan)
        if insecure_image_registry is not None:
            pulumi.set(__self__, "insecure_image_registry", insecure_image_registry)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)

    @property
    @pulumi.getter(name="deploymentLabels")
    def deployment_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Deployment and Pods managed by the operator.
        """
        return pulumi.get(self, "deployment_labels")

    @deployment_labels.setter
    def deployment_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_labels", value)

    @property
    @pulumi.getter(name="enableIstio")
    def enable_istio(self) -> Optional[pulumi.Input[bool]]:
        """
        Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
        """
        return pulumi.get(self, "enable_istio")

    @enable_istio.setter
    def enable_istio(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_istio", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeSpecEnvsArgs']]]]:
        """
        Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['KogitoRuntimeSpecImageArgs']]:
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['KogitoRuntimeSpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def infinispan(self) -> Optional[pulumi.Input['KogitoRuntimeSpecInfinispanArgs']]:
        """
        Has the data used by the service to connect to the Infinispan cluster.
        """
        return pulumi.get(self, "infinispan")

    @infinispan.setter
    def infinispan(self, value: Optional[pulumi.Input['KogitoRuntimeSpecInfinispanArgs']]):
        pulumi.set(self, "infinispan", value)

    @property
    @pulumi.getter(name="insecureImageRegistry")
    def insecure_image_registry(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        """
        return pulumi.get(self, "insecure_image_registry")

    @insecure_image_registry.setter
    def insecure_image_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_image_registry", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KogitoRuntimeSpecKafkaArgs']]:
        """
        Has the data used by the service to connect to the Kafka cluster.
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KogitoRuntimeSpecKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas that the service will have deployed in the cluster. Default value: 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoRuntimeSpecResourcesArgs']]:
        """
        Defined compute resource requirements for the deployed service.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoRuntimeSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Service managed by the operator.
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoRuntimeSpecImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoRuntimeSpecInfinispanArgs:
    def __init__(__self__, *,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['KogitoRuntimeSpecInfinispanCredentialsArgs']] = None,
                 sasl_mechanism: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_auth: Optional[pulumi.Input[bool]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[str] auth_realm: Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        :param pulumi.Input['KogitoRuntimeSpecInfinispanCredentialsArgs'] credentials: SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] sasl_mechanism: SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        :param pulumi.Input[str] uri: URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        :param pulumi.Input[bool] use_auth: UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_auth is not None:
            pulumi.set(__self__, "use_auth", use_auth)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['KogitoRuntimeSpecInfinispanCredentialsArgs']]:
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['KogitoRuntimeSpecInfinispanCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        """
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useAuth")
    def use_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        """
        return pulumi.get(self, "use_auth")

    @use_auth.setter
    def use_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auth", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoRuntimeSpecInfinispanCredentialsArgs:
    def __init__(__self__, *,
                 password_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] password_key: PasswordKey is the key pointing to a value in a Secret holding the password value.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret where the credentials are set.
        :param pulumi.Input[str] username_key: UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        if password_key is not None:
            pulumi.set(__self__, "password_key", password_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter(name="passwordKey")
    def password_key(self) -> Optional[pulumi.Input[str]]:
        """
        PasswordKey is the key pointing to a value in a Secret holding the password value.
        """
        return pulumi.get(self, "password_key")

    @password_key.setter
    def password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret where the credentials are set.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        """
        UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class KogitoRuntimeSpecKafkaArgs:
    def __init__(__self__, *,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[str] external_uri: URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        :param pulumi.Input[str] instance: Instance is the Kafka instance to be used, for example, kogito-kafka.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance is the Kafka instance to be used, for example, kogito-kafka.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoRuntimeSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesRequestsArgs']]]] = None):
        """
        Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoRuntimeSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoRuntimeSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoRuntimeSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoRuntimeStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusConditionsArgs']]],
                 deployment_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusDeploymentConditionsArgs']]]] = None,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        KogitoRuntimeStatus defines the observed state of KogitoRuntime.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusConditionsArgs']]] conditions: History of conditions for the resource
        :param pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusDeploymentConditionsArgs']]] deployment_conditions: General conditions for the Kogito Service deployment.
        :param pulumi.Input[str] external_uri: URI is where the service is exposed.
        :param pulumi.Input[str] image: Image is the resolved image for this service.
        """
        pulumi.set(__self__, "conditions", conditions)
        if deployment_conditions is not None:
            pulumi.set(__self__, "deployment_conditions", deployment_conditions)
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusConditionsArgs']]]:
        """
        History of conditions for the resource
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="deploymentConditions")
    def deployment_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusDeploymentConditionsArgs']]]]:
        """
        General conditions for the Kogito Service deployment.
        """
        return pulumi.get(self, "deployment_conditions")

    @deployment_conditions.setter
    def deployment_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoRuntimeStatusDeploymentConditionsArgs']]]]):
        pulumi.set(self, "deployment_conditions", value)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is where the service is exposed.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the resolved image for this service.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KogitoRuntimeStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition is the detailed condition for the resource
        :param pulumi.Input[str] type: ConditionType is the type of condition
        :param pulumi.Input[str] reason: ReasonType is the type of reason
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ReasonType is the type of reason
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoRuntimeStatusDeploymentConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoTrustySpecArgs:
    def __init__(__self__, *,
                 deployment_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustySpecEnvsArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['KogitoTrustySpecImageArgs']] = None,
                 infinispan: Optional[pulumi.Input['KogitoTrustySpecInfinispanArgs']] = None,
                 insecure_image_registry: Optional[pulumi.Input[bool]] = None,
                 kafka: Optional[pulumi.Input['KogitoTrustySpecKafkaArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['KogitoTrustySpecResourcesArgs']] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        KogitoTrustySpec defines the desired state of KogitoTrusty.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_labels: Additional labels to be added to the Deployment and Pods managed by the operator.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoTrustySpecEnvsArgs']]] envs: Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        :param pulumi.Input[int] http_port: HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        :param pulumi.Input['KogitoTrustySpecImageArgs'] image: Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input['KogitoTrustySpecInfinispanArgs'] infinispan: Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[bool] insecure_image_registry: A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        :param pulumi.Input['KogitoTrustySpecKafkaArgs'] kafka: Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[int] replicas: Number of replicas that the service will have deployed in the cluster. Default value: 1.
        :param pulumi.Input['KogitoTrustySpecResourcesArgs'] resources: Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Additional labels to be added to the Service managed by the operator.
        """
        if deployment_labels is not None:
            pulumi.set(__self__, "deployment_labels", deployment_labels)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if infinispan is not None:
            pulumi.set(__self__, "infinispan", infinispan)
        if insecure_image_registry is not None:
            pulumi.set(__self__, "insecure_image_registry", insecure_image_registry)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)

    @property
    @pulumi.getter(name="deploymentLabels")
    def deployment_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Deployment and Pods managed by the operator.
        """
        return pulumi.get(self, "deployment_labels")

    @deployment_labels.setter
    def deployment_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_labels", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustySpecEnvsArgs']]]]:
        """
        Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustySpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['KogitoTrustySpecImageArgs']]:
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['KogitoTrustySpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def infinispan(self) -> Optional[pulumi.Input['KogitoTrustySpecInfinispanArgs']]:
        """
        Has the data used by the service to connect to the Infinispan cluster.
        """
        return pulumi.get(self, "infinispan")

    @infinispan.setter
    def infinispan(self, value: Optional[pulumi.Input['KogitoTrustySpecInfinispanArgs']]):
        pulumi.set(self, "infinispan", value)

    @property
    @pulumi.getter(name="insecureImageRegistry")
    def insecure_image_registry(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
        """
        return pulumi.get(self, "insecure_image_registry")

    @insecure_image_registry.setter
    def insecure_image_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_image_registry", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['KogitoTrustySpecKafkaArgs']]:
        """
        Has the data used by the service to connect to the Kafka cluster.
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['KogitoTrustySpecKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of replicas that the service will have deployed in the cluster. Default value: 1.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoTrustySpecResourcesArgs']]:
        """
        Defined compute resource requirements for the deployed service.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoTrustySpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional labels to be added to the Service managed by the operator.
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)


@pulumi.input_type
class KogitoTrustySpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoTrustySpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoTrustySpecImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoTrustySpecInfinispanArgs:
    def __init__(__self__, *,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['KogitoTrustySpecInfinispanCredentialsArgs']] = None,
                 sasl_mechanism: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_auth: Optional[pulumi.Input[bool]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Infinispan cluster.
        :param pulumi.Input[str] auth_realm: Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        :param pulumi.Input['KogitoTrustySpecInfinispanCredentialsArgs'] credentials: SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] sasl_mechanism: SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        :param pulumi.Input[str] uri: URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        :param pulumi.Input[bool] use_auth: UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_auth is not None:
            pulumi.set(__self__, "use_auth", use_auth)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['KogitoTrustySpecInfinispanCredentialsArgs']]:
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['KogitoTrustySpecInfinispanCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
        """
        return pulumi.get(self, "sasl_mechanism")

    @sasl_mechanism.setter
    def sasl_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sasl_mechanism", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useAuth")
    def use_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
        """
        return pulumi.get(self, "use_auth")

    @use_auth.setter
    def use_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auth", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoTrustySpecInfinispanCredentialsArgs:
    def __init__(__self__, *,
                 password_key: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username_key: Optional[pulumi.Input[str]] = None):
        """
        SecretCredentialsType is the data structure for specifying credentials within a Secret.
        :param pulumi.Input[str] password_key: PasswordKey is the key pointing to a value in a Secret holding the password value.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret where the credentials are set.
        :param pulumi.Input[str] username_key: UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        if password_key is not None:
            pulumi.set(__self__, "password_key", password_key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username_key is not None:
            pulumi.set(__self__, "username_key", username_key)

    @property
    @pulumi.getter(name="passwordKey")
    def password_key(self) -> Optional[pulumi.Input[str]]:
        """
        PasswordKey is the key pointing to a value in a Secret holding the password value.
        """
        return pulumi.get(self, "password_key")

    @password_key.setter
    def password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret where the credentials are set.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="usernameKey")
    def username_key(self) -> Optional[pulumi.Input[str]]:
        """
        UsernameKey is the key pointing to a value in a Secret holding the username value.
        """
        return pulumi.get(self, "username_key")

    @username_key.setter
    def username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_key", value)


@pulumi.input_type
class KogitoTrustySpecKafkaArgs:
    def __init__(__self__, *,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 use_kogito_infra: Optional[pulumi.Input[bool]] = None):
        """
        Has the data used by the service to connect to the Kafka cluster.
        :param pulumi.Input[str] external_uri: URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        :param pulumi.Input[str] instance: Instance is the Kafka instance to be used, for example, kogito-kafka.
        :param pulumi.Input[bool] use_kogito_infra: UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if use_kogito_infra is not None:
            pulumi.set(__self__, "use_kogito_infra", use_kogito_infra)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance is the Kafka instance to be used, for example, kogito-kafka.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="useKogitoInfra")
    def use_kogito_infra(self) -> Optional[pulumi.Input[bool]]:
        """
        UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
        """
        return pulumi.get(self, "use_kogito_infra")

    @use_kogito_infra.setter
    def use_kogito_infra(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kogito_infra", value)


@pulumi.input_type
class KogitoTrustySpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesRequestsArgs']]]] = None):
        """
        Defined compute resource requirements for the deployed service.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoTrustySpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoTrustySpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoTrustySpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoTrustyStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusConditionsArgs']]],
                 deployment_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusDeploymentConditionsArgs']]]] = None,
                 external_uri: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        KogitoTrustyStatus defines the observed state of KogitoTrusty.
        :param pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusConditionsArgs']]] conditions: History of conditions for the resource
        :param pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusDeploymentConditionsArgs']]] deployment_conditions: General conditions for the Kogito Service deployment.
        :param pulumi.Input[str] external_uri: URI is where the service is exposed.
        :param pulumi.Input[str] image: Image is the resolved image for this service.
        """
        pulumi.set(__self__, "conditions", conditions)
        if deployment_conditions is not None:
            pulumi.set(__self__, "deployment_conditions", deployment_conditions)
        if external_uri is not None:
            pulumi.set(__self__, "external_uri", external_uri)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusConditionsArgs']]]:
        """
        History of conditions for the resource
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="deploymentConditions")
    def deployment_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusDeploymentConditionsArgs']]]]:
        """
        General conditions for the Kogito Service deployment.
        """
        return pulumi.get(self, "deployment_conditions")

    @deployment_conditions.setter
    def deployment_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KogitoTrustyStatusDeploymentConditionsArgs']]]]):
        pulumi.set(self, "deployment_conditions", value)

    @property
    @pulumi.getter(name="externalURI")
    def external_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is where the service is exposed.
        """
        return pulumi.get(self, "external_uri")

    @external_uri.setter
    def external_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_uri", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the resolved image for this service.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KogitoTrustyStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition is the detailed condition for the resource
        :param pulumi.Input[str] type: ConditionType is the type of condition
        :param pulumi.Input[str] reason: ReasonType is the type of reason
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the type of condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        ReasonType is the type of reason
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KogitoTrustyStatusDeploymentConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of deployment condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



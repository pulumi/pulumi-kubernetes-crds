// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuild struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrOutput `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrOutput `pulumi:"status"`
}

// NewKogitoBuild registers a new resource with the given unique name, arguments, and options.
func NewKogitoBuild(ctx *pulumi.Context,
	name string, args *KogitoBuildArgs, opts ...pulumi.ResourceOption) (*KogitoBuild, error) {
	if args == nil {
		args = &KogitoBuildArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("app.kiegroup.org/v1beta1")
	args.Kind = pulumi.StringPtr("KogitoBuild")
	var resource KogitoBuild
	err := ctx.RegisterResource("kubernetes:app.kiegroup.org/v1beta1:KogitoBuild", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKogitoBuild gets an existing KogitoBuild resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKogitoBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KogitoBuildState, opts ...pulumi.ResourceOption) (*KogitoBuild, error) {
	var resource KogitoBuild
	err := ctx.ReadResource("kubernetes:app.kiegroup.org/v1beta1:KogitoBuild", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KogitoBuild resources.
type kogitoBuildState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec *KogitoBuildSpec `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status *KogitoBuildStatus `pulumi:"status"`
}

type KogitoBuildState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrInput
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrInput
}

func (KogitoBuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoBuildState)(nil)).Elem()
}

type kogitoBuildArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec *KogitoBuildSpec `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status *KogitoBuildStatus `pulumi:"status"`
}

// The set of arguments for constructing a KogitoBuild resource.
type KogitoBuildArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrInput
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrInput
}

func (KogitoBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoBuildArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.
type KogitoInfra struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec KogitoInfraSpecPtrOutput `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status KogitoInfraStatusPtrOutput `pulumi:"status"`
}

// NewKogitoInfra registers a new resource with the given unique name, arguments, and options.
func NewKogitoInfra(ctx *pulumi.Context,
	name string, args *KogitoInfraArgs, opts ...pulumi.ResourceOption) (*KogitoInfra, error) {
	if args == nil {
		args = &KogitoInfraArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("app.kiegroup.org/v1beta1")
	args.Kind = pulumi.StringPtr("KogitoInfra")
	var resource KogitoInfra
	err := ctx.RegisterResource("kubernetes:app.kiegroup.org/v1beta1:KogitoInfra", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKogitoInfra gets an existing KogitoInfra resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKogitoInfra(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KogitoInfraState, opts ...pulumi.ResourceOption) (*KogitoInfra, error) {
	var resource KogitoInfra
	err := ctx.ReadResource("kubernetes:app.kiegroup.org/v1beta1:KogitoInfra", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KogitoInfra resources.
type kogitoInfraState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec *KogitoInfraSpec `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status *KogitoInfraStatus `pulumi:"status"`
}

type KogitoInfraState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec KogitoInfraSpecPtrInput
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status KogitoInfraStatusPtrInput
}

func (KogitoInfraState) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoInfraState)(nil)).Elem()
}

type kogitoInfraArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec *KogitoInfraSpec `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status *KogitoInfraStatus `pulumi:"status"`
}

// The set of arguments for constructing a KogitoInfra resource.
type KogitoInfraArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec KogitoInfraSpecPtrInput
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status KogitoInfraStatusPtrInput
}

func (KogitoInfraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoInfraArgs)(nil)).Elem()
}

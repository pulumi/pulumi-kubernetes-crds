// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoSupportingService deploys the Supporting service in the given namespace.
type KogitoSupportingService struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec KogitoSupportingServiceSpecPtrOutput `pulumi:"spec"`
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status KogitoSupportingServiceStatusPtrOutput `pulumi:"status"`
}

// NewKogitoSupportingService registers a new resource with the given unique name, arguments, and options.
func NewKogitoSupportingService(ctx *pulumi.Context,
	name string, args *KogitoSupportingServiceArgs, opts ...pulumi.ResourceOption) (*KogitoSupportingService, error) {
	if args == nil {
		args = &KogitoSupportingServiceArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("app.kiegroup.org/v1beta1")
	args.Kind = pulumi.StringPtr("KogitoSupportingService")
	var resource KogitoSupportingService
	err := ctx.RegisterResource("kubernetes:app.kiegroup.org/v1beta1:KogitoSupportingService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKogitoSupportingService gets an existing KogitoSupportingService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKogitoSupportingService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KogitoSupportingServiceState, opts ...pulumi.ResourceOption) (*KogitoSupportingService, error) {
	var resource KogitoSupportingService
	err := ctx.ReadResource("kubernetes:app.kiegroup.org/v1beta1:KogitoSupportingService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KogitoSupportingService resources.
type kogitoSupportingServiceState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec *KogitoSupportingServiceSpec `pulumi:"spec"`
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status *KogitoSupportingServiceStatus `pulumi:"status"`
}

type KogitoSupportingServiceState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec KogitoSupportingServiceSpecPtrInput
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status KogitoSupportingServiceStatusPtrInput
}

func (KogitoSupportingServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoSupportingServiceState)(nil)).Elem()
}

type kogitoSupportingServiceArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec *KogitoSupportingServiceSpec `pulumi:"spec"`
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status *KogitoSupportingServiceStatus `pulumi:"status"`
}

// The set of arguments for constructing a KogitoSupportingService resource.
type KogitoSupportingServiceArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec KogitoSupportingServiceSpecPtrInput
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status KogitoSupportingServiceStatusPtrInput
}

func (KogitoSupportingServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kogitoSupportingServiceArgs)(nil)).Elem()
}

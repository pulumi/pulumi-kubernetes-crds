// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec *KogitoBuildSpec `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status *KogitoBuildStatus `pulumi:"status"`
}

// KogitoBuildTypeInput is an input type that accepts KogitoBuildTypeArgs and KogitoBuildTypeOutput values.
// You can construct a concrete instance of `KogitoBuildTypeInput` via:
//
//          KogitoBuildTypeArgs{...}
type KogitoBuildTypeInput interface {
	pulumi.Input

	ToKogitoBuildTypeOutput() KogitoBuildTypeOutput
	ToKogitoBuildTypeOutputWithContext(context.Context) KogitoBuildTypeOutput
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrInput `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrInput `pulumi:"status"`
}

func (KogitoBuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return i.ToKogitoBuildTypeOutputWithContext(context.Background())
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildTypeOutput)
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeOutput struct{ *pulumi.OutputState }

func (KogitoBuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
func (o KogitoBuildTypeOutput) Spec() KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildSpec { return v.Spec }).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
func (o KogitoBuildTypeOutput) Status() KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildStatus { return v.Status }).(KogitoBuildStatusPtrOutput)
}

type KogitoBuildMetadata struct {
}

// KogitoBuildMetadataInput is an input type that accepts KogitoBuildMetadataArgs and KogitoBuildMetadataOutput values.
// You can construct a concrete instance of `KogitoBuildMetadataInput` via:
//
//          KogitoBuildMetadataArgs{...}
type KogitoBuildMetadataInput interface {
	pulumi.Input

	ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput
	ToKogitoBuildMetadataOutputWithContext(context.Context) KogitoBuildMetadataOutput
}

type KogitoBuildMetadataArgs struct {
}

func (KogitoBuildMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildMetadata)(nil)).Elem()
}

func (i KogitoBuildMetadataArgs) ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput {
	return i.ToKogitoBuildMetadataOutputWithContext(context.Background())
}

func (i KogitoBuildMetadataArgs) ToKogitoBuildMetadataOutputWithContext(ctx context.Context) KogitoBuildMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildMetadataOutput)
}

type KogitoBuildMetadataOutput struct{ *pulumi.OutputState }

func (KogitoBuildMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildMetadata)(nil)).Elem()
}

func (o KogitoBuildMetadataOutput) ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput {
	return o
}

func (o KogitoBuildMetadataOutput) ToKogitoBuildMetadataOutputWithContext(ctx context.Context) KogitoBuildMetadataOutput {
	return o
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpec struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact *KogitoBuildSpecArtifact `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage *string `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental *bool `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput *bool `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Env []KogitoBuildSpecEnv `pulumi:"env"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource *KogitoBuildSpecGitSource `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL *string `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native *bool `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources *KogitoBuildSpecResources `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime *string `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage *string `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime *string `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type string `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks []KogitoBuildSpecWebHooks `pulumi:"webHooks"`
}

// KogitoBuildSpecInput is an input type that accepts KogitoBuildSpecArgs and KogitoBuildSpecOutput values.
// You can construct a concrete instance of `KogitoBuildSpecInput` via:
//
//          KogitoBuildSpecArgs{...}
type KogitoBuildSpecInput interface {
	pulumi.Input

	ToKogitoBuildSpecOutput() KogitoBuildSpecOutput
	ToKogitoBuildSpecOutputWithContext(context.Context) KogitoBuildSpecOutput
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecArgs struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact KogitoBuildSpecArtifactPtrInput `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage pulumi.StringPtrInput `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental pulumi.BoolPtrInput `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput pulumi.BoolPtrInput `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Env KogitoBuildSpecEnvArrayInput `pulumi:"env"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource KogitoBuildSpecGitSourcePtrInput `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL pulumi.StringPtrInput `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native pulumi.BoolPtrInput `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources KogitoBuildSpecResourcesPtrInput `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage pulumi.StringPtrInput `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime pulumi.StringPtrInput `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type pulumi.StringInput `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks KogitoBuildSpecWebHooksArrayInput `pulumi:"webHooks"`
}

func (KogitoBuildSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return i.ToKogitoBuildSpecOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput)
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput).ToKogitoBuildSpecPtrOutputWithContext(ctx)
}

// KogitoBuildSpecPtrInput is an input type that accepts KogitoBuildSpecArgs, KogitoBuildSpecPtr and KogitoBuildSpecPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecPtrInput` via:
//
//          KogitoBuildSpecArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput
	ToKogitoBuildSpecPtrOutputWithContext(context.Context) KogitoBuildSpecPtrOutput
}

type kogitoBuildSpecPtrType KogitoBuildSpecArgs

func KogitoBuildSpecPtr(v *KogitoBuildSpecArgs) KogitoBuildSpecPtrInput {
	return (*kogitoBuildSpecPtrType)(v)
}

func (*kogitoBuildSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpec {
		return &v
	}).(KogitoBuildSpecPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecArtifact { return v.Artifact }).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) BuildImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.BuildImage }).(pulumi.StringPtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.DisableIncremental }).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.EnableMavenDownloadOutput }).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecOutput) Env() KogitoBuildSpecEnvArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecEnv { return v.Env }).(KogitoBuildSpecEnvArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecGitSource { return v.GitSource }).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.MavenMirrorURL }).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.Native }).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecResources { return v.Resources }).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) RuntimeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.RuntimeImage }).(pulumi.StringPtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.TargetKogitoRuntime }).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpec) string { return v.Type }).(pulumi.StringOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecWebHooks { return v.WebHooks }).(KogitoBuildSpecWebHooksArrayOutput)
}

type KogitoBuildSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) Elem() KogitoBuildSpecOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) KogitoBuildSpec { return *v }).(KogitoBuildSpecOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecPtrOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) BuildImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.BuildImage
	}).(pulumi.StringPtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecPtrOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableIncremental
	}).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecPtrOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMavenDownloadOutput
	}).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecPtrOutput) Env() KogitoBuildSpecEnvArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(KogitoBuildSpecEnvArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecPtrOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecGitSource {
		if v == nil {
			return nil
		}
		return v.GitSource
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecPtrOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.MavenMirrorURL
	}).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecPtrOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Native
	}).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecPtrOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) RuntimeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeImage
	}).(pulumi.StringPtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecPtrOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.TargetKogitoRuntime
	}).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecPtrOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecWebHooks {
		if v == nil {
			return nil
		}
		return v.WebHooks
	}).(KogitoBuildSpecWebHooksArrayOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifact struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId *string `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId *string `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version *string `pulumi:"version"`
}

// KogitoBuildSpecArtifactInput is an input type that accepts KogitoBuildSpecArtifactArgs and KogitoBuildSpecArtifactOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
type KogitoBuildSpecArtifactInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput
	ToKogitoBuildSpecArtifactOutputWithContext(context.Context) KogitoBuildSpecArtifactOutput
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactArgs struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KogitoBuildSpecArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return i.ToKogitoBuildSpecArtifactOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput)
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput).ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx)
}

// KogitoBuildSpecArtifactPtrInput is an input type that accepts KogitoBuildSpecArtifactArgs, KogitoBuildSpecArtifactPtr and KogitoBuildSpecArtifactPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactPtrInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecArtifactPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput
	ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Context) KogitoBuildSpecArtifactPtrOutput
}

type kogitoBuildSpecArtifactPtrType KogitoBuildSpecArtifactArgs

func KogitoBuildSpecArtifactPtr(v *KogitoBuildSpecArtifactArgs) KogitoBuildSpecArtifactPtrInput {
	return (*kogitoBuildSpecArtifactPtrType)(v)
}

func (*kogitoBuildSpecArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *KogitoBuildSpecArtifact {
		return &v
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecArtifactPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) Elem() KogitoBuildSpecArtifactOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) KogitoBuildSpecArtifact { return *v }).(KogitoBuildSpecArtifactOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactPtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoBuildSpecEnvValueFrom `pulumi:"valueFrom"`
}

// KogitoBuildSpecEnvInput is an input type that accepts KogitoBuildSpecEnvArgs and KogitoBuildSpecEnvOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvInput` via:
//
//          KogitoBuildSpecEnvArgs{...}
type KogitoBuildSpecEnvInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvOutput() KogitoBuildSpecEnvOutput
	ToKogitoBuildSpecEnvOutputWithContext(context.Context) KogitoBuildSpecEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoBuildSpecEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoBuildSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnv)(nil)).Elem()
}

func (i KogitoBuildSpecEnvArgs) ToKogitoBuildSpecEnvOutput() KogitoBuildSpecEnvOutput {
	return i.ToKogitoBuildSpecEnvOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvArgs) ToKogitoBuildSpecEnvOutputWithContext(ctx context.Context) KogitoBuildSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvOutput)
}

// KogitoBuildSpecEnvArrayInput is an input type that accepts KogitoBuildSpecEnvArray and KogitoBuildSpecEnvArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvArrayInput` via:
//
//          KogitoBuildSpecEnvArray{ KogitoBuildSpecEnvArgs{...} }
type KogitoBuildSpecEnvArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvArrayOutput() KogitoBuildSpecEnvArrayOutput
	ToKogitoBuildSpecEnvArrayOutputWithContext(context.Context) KogitoBuildSpecEnvArrayOutput
}

type KogitoBuildSpecEnvArray []KogitoBuildSpecEnvInput

func (KogitoBuildSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnv)(nil)).Elem()
}

func (i KogitoBuildSpecEnvArray) ToKogitoBuildSpecEnvArrayOutput() KogitoBuildSpecEnvArrayOutput {
	return i.ToKogitoBuildSpecEnvArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvArray) ToKogitoBuildSpecEnvArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnv)(nil)).Elem()
}

func (o KogitoBuildSpecEnvOutput) ToKogitoBuildSpecEnvOutput() KogitoBuildSpecEnvOutput {
	return o
}

func (o KogitoBuildSpecEnvOutput) ToKogitoBuildSpecEnvOutputWithContext(ctx context.Context) KogitoBuildSpecEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoBuildSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoBuildSpecEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoBuildSpecEnvOutput) ValueFrom() KogitoBuildSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnv) *KogitoBuildSpecEnvValueFrom { return v.ValueFrom }).(KogitoBuildSpecEnvValueFromPtrOutput)
}

type KogitoBuildSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnv)(nil)).Elem()
}

func (o KogitoBuildSpecEnvArrayOutput) ToKogitoBuildSpecEnvArrayOutput() KogitoBuildSpecEnvArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvArrayOutput) ToKogitoBuildSpecEnvArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecEnv {
		return vs[0].([]KogitoBuildSpecEnv)[vs[1].(int)]
	}).(KogitoBuildSpecEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoBuildSpecEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoBuildSpecEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoBuildSpecEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoBuildSpecEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoBuildSpecEnvValueFromInput is an input type that accepts KogitoBuildSpecEnvValueFromArgs and KogitoBuildSpecEnvValueFromOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromInput` via:
//
//          KogitoBuildSpecEnvValueFromArgs{...}
type KogitoBuildSpecEnvValueFromInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromOutput() KogitoBuildSpecEnvValueFromOutput
	ToKogitoBuildSpecEnvValueFromOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoBuildSpecEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoBuildSpecEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoBuildSpecEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoBuildSpecEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFrom)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromArgs) ToKogitoBuildSpecEnvValueFromOutput() KogitoBuildSpecEnvValueFromOutput {
	return i.ToKogitoBuildSpecEnvValueFromOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromArgs) ToKogitoBuildSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromOutput)
}

func (i KogitoBuildSpecEnvValueFromArgs) ToKogitoBuildSpecEnvValueFromPtrOutput() KogitoBuildSpecEnvValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromArgs) ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromOutput).ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromArgs, KogitoBuildSpecEnvValueFromPtr and KogitoBuildSpecEnvValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromPtrOutput() KogitoBuildSpecEnvValueFromPtrOutput
	ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromPtrOutput
}

type kogitoBuildSpecEnvValueFromPtrType KogitoBuildSpecEnvValueFromArgs

func KogitoBuildSpecEnvValueFromPtr(v *KogitoBuildSpecEnvValueFromArgs) KogitoBuildSpecEnvValueFromPtrInput {
	return (*kogitoBuildSpecEnvValueFromPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFrom)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromPtrType) ToKogitoBuildSpecEnvValueFromPtrOutput() KogitoBuildSpecEnvValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromPtrType) ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvValueFromOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromOutput) ToKogitoBuildSpecEnvValueFromOutput() KogitoBuildSpecEnvValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromOutput) ToKogitoBuildSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromOutput) ToKogitoBuildSpecEnvValueFromPtrOutput() KogitoBuildSpecEnvValueFromPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromOutput) ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFrom {
		return &v
	}).(KogitoBuildSpecEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvValueFromOutput) ConfigMapKeyRef() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvValueFromOutput) FieldRef() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromFieldRef { return v.FieldRef }).(KogitoBuildSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvValueFromOutput) ResourceFieldRef() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvValueFromOutput) SecretKeyRef() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromSecretKeyRef { return v.SecretKeyRef }).(KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput)
}

type KogitoBuildSpecEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromPtrOutput) ToKogitoBuildSpecEnvValueFromPtrOutput() KogitoBuildSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromPtrOutput) ToKogitoBuildSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromPtrOutput) Elem() KogitoBuildSpecEnvValueFromOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFrom) KogitoBuildSpecEnvValueFrom { return *v }).(KogitoBuildSpecEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvValueFromPtrOutput) ConfigMapKeyRef() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvValueFromPtrOutput) FieldRef() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoBuildSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvValueFromPtrOutput) ResourceFieldRef() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvValueFromPtrOutput) SecretKeyRef() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFrom) *KogitoBuildSpecEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvValueFromConfigMapKeyRefInput is an input type that accepts KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs and KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromConfigMapKeyRefInput` via:
//
//          KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs{...}
type KogitoBuildSpecEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput
	ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput {
	return i.ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput)
}

func (i KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput).ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs, KogitoBuildSpecEnvValueFromConfigMapKeyRefPtr and KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput
	ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput
}

type kogitoBuildSpecEnvValueFromConfigMapKeyRefPtrType KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs

func KogitoBuildSpecEnvValueFromConfigMapKeyRefPtr(v *KogitoBuildSpecEnvValueFromConfigMapKeyRefArgs) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrInput {
	return (*kogitoBuildSpecEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromConfigMapKeyRef) *KogitoBuildSpecEnvValueFromConfigMapKeyRef {
		return &v
	}).(KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) Elem() KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromConfigMapKeyRef) KogitoBuildSpecEnvValueFromConfigMapKeyRef {
		return *v
	}).(KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoBuildSpecEnvValueFromFieldRefInput is an input type that accepts KogitoBuildSpecEnvValueFromFieldRefArgs and KogitoBuildSpecEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromFieldRefInput` via:
//
//          KogitoBuildSpecEnvValueFromFieldRefArgs{...}
type KogitoBuildSpecEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromFieldRefOutput() KogitoBuildSpecEnvValueFromFieldRefOutput
	ToKogitoBuildSpecEnvValueFromFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoBuildSpecEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromFieldRefArgs) ToKogitoBuildSpecEnvValueFromFieldRefOutput() KogitoBuildSpecEnvValueFromFieldRefOutput {
	return i.ToKogitoBuildSpecEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromFieldRefArgs) ToKogitoBuildSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromFieldRefOutput)
}

func (i KogitoBuildSpecEnvValueFromFieldRefArgs) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutput() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromFieldRefArgs) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromFieldRefOutput).ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromFieldRefArgs, KogitoBuildSpecEnvValueFromFieldRefPtr and KogitoBuildSpecEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromFieldRefPtrOutput() KogitoBuildSpecEnvValueFromFieldRefPtrOutput
	ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromFieldRefPtrOutput
}

type kogitoBuildSpecEnvValueFromFieldRefPtrType KogitoBuildSpecEnvValueFromFieldRefArgs

func KogitoBuildSpecEnvValueFromFieldRefPtr(v *KogitoBuildSpecEnvValueFromFieldRefArgs) KogitoBuildSpecEnvValueFromFieldRefPtrInput {
	return (*kogitoBuildSpecEnvValueFromFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromFieldRefPtrType) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutput() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromFieldRefPtrType) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromFieldRefOutput) ToKogitoBuildSpecEnvValueFromFieldRefOutput() KogitoBuildSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromFieldRefOutput) ToKogitoBuildSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromFieldRefOutput) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutput() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromFieldRefOutput) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromFieldRef) *KogitoBuildSpecEnvValueFromFieldRef {
		return &v
	}).(KogitoBuildSpecEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutput() KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromFieldRefPtrOutput) Elem() KogitoBuildSpecEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromFieldRef) KogitoBuildSpecEnvValueFromFieldRef { return *v }).(KogitoBuildSpecEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoBuildSpecEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoBuildSpecEnvValueFromResourceFieldRefInput is an input type that accepts KogitoBuildSpecEnvValueFromResourceFieldRefArgs and KogitoBuildSpecEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromResourceFieldRefInput` via:
//
//          KogitoBuildSpecEnvValueFromResourceFieldRefArgs{...}
type KogitoBuildSpecEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromResourceFieldRefOutput() KogitoBuildSpecEnvValueFromResourceFieldRefOutput
	ToKogitoBuildSpecEnvValueFromResourceFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoBuildSpecEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefOutput() KogitoBuildSpecEnvValueFromResourceFieldRefOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefOutput)
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefOutput).ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromResourceFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromResourceFieldRefArgs, KogitoBuildSpecEnvValueFromResourceFieldRefPtr and KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromResourceFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput
	ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput
}

type kogitoBuildSpecEnvValueFromResourceFieldRefPtrType KogitoBuildSpecEnvValueFromResourceFieldRefArgs

func KogitoBuildSpecEnvValueFromResourceFieldRefPtr(v *KogitoBuildSpecEnvValueFromResourceFieldRefArgs) KogitoBuildSpecEnvValueFromResourceFieldRefPtrInput {
	return (*kogitoBuildSpecEnvValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefOutput() KogitoBuildSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromResourceFieldRef) *KogitoBuildSpecEnvValueFromResourceFieldRef {
		return &v
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) Divisor() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromResourceFieldRef) *KogitoBuildSpecEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) Elem() KogitoBuildSpecEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromResourceFieldRef) KogitoBuildSpecEnvValueFromResourceFieldRef {
		return *v
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) Divisor() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromResourceFieldRef) *KogitoBuildSpecEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecEnvValueFromResourceFieldRefDivisor struct {
}

// KogitoBuildSpecEnvValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs and KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs{...}
type KogitoBuildSpecEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput
	ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput
}

type KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput).ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs, KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtr and KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrType KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs

func KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtr(v *KogitoBuildSpecEnvValueFromResourceFieldRefDivisorArgs) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromResourceFieldRefDivisor) *KogitoBuildSpecEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromResourceFieldRefDivisor) KogitoBuildSpecEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvValueFromSecretKeyRefInput is an input type that accepts KogitoBuildSpecEnvValueFromSecretKeyRefArgs and KogitoBuildSpecEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromSecretKeyRefInput` via:
//
//          KogitoBuildSpecEnvValueFromSecretKeyRefArgs{...}
type KogitoBuildSpecEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromSecretKeyRefOutput() KogitoBuildSpecEnvValueFromSecretKeyRefOutput
	ToKogitoBuildSpecEnvValueFromSecretKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvValueFromSecretKeyRefOutput() KogitoBuildSpecEnvValueFromSecretKeyRefOutput {
	return i.ToKogitoBuildSpecEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromSecretKeyRefOutput)
}

func (i KogitoBuildSpecEnvValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromSecretKeyRefOutput).ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvValueFromSecretKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvValueFromSecretKeyRefArgs, KogitoBuildSpecEnvValueFromSecretKeyRefPtr and KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvValueFromSecretKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput
	ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput
}

type kogitoBuildSpecEnvValueFromSecretKeyRefPtrType KogitoBuildSpecEnvValueFromSecretKeyRefArgs

func KogitoBuildSpecEnvValueFromSecretKeyRefPtr(v *KogitoBuildSpecEnvValueFromSecretKeyRefArgs) KogitoBuildSpecEnvValueFromSecretKeyRefPtrInput {
	return (*kogitoBuildSpecEnvValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefOutput() KogitoBuildSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromSecretKeyRef) *KogitoBuildSpecEnvValueFromSecretKeyRef {
		return &v
	}).(KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) Elem() KogitoBuildSpecEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromSecretKeyRef) KogitoBuildSpecEnvValueFromSecretKeyRef { return *v }).(KogitoBuildSpecEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSource struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir *string `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference *string `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri string `pulumi:"uri"`
}

// KogitoBuildSpecGitSourceInput is an input type that accepts KogitoBuildSpecGitSourceArgs and KogitoBuildSpecGitSourceOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourceInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
type KogitoBuildSpecGitSourceInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput
	ToKogitoBuildSpecGitSourceOutputWithContext(context.Context) KogitoBuildSpecGitSourceOutput
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceArgs struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir pulumi.StringPtrInput `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (KogitoBuildSpecGitSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return i.ToKogitoBuildSpecGitSourceOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput)
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput).ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx)
}

// KogitoBuildSpecGitSourcePtrInput is an input type that accepts KogitoBuildSpecGitSourceArgs, KogitoBuildSpecGitSourcePtr and KogitoBuildSpecGitSourcePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourcePtrInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecGitSourcePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput
	ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Context) KogitoBuildSpecGitSourcePtrOutput
}

type kogitoBuildSpecGitSourcePtrType KogitoBuildSpecGitSourceArgs

func KogitoBuildSpecGitSourcePtr(v *KogitoBuildSpecGitSourceArgs) KogitoBuildSpecGitSourcePtrInput {
	return (*kogitoBuildSpecGitSourcePtrType)(v)
}

func (*kogitoBuildSpecGitSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourcePtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *KogitoBuildSpecGitSource {
		return &v
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourceOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.ContextDir }).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourceOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) string { return v.Uri }).(pulumi.StringOutput)
}

type KogitoBuildSpecGitSourcePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) Elem() KogitoBuildSpecGitSourceOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) KogitoBuildSpecGitSource { return *v }).(KogitoBuildSpecGitSourceOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourcePtrOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.ContextDir
	}).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourcePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoBuildSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoBuildSpecResourcesRequests `pulumi:"requests"`
}

// KogitoBuildSpecResourcesInput is an input type that accepts KogitoBuildSpecResourcesArgs and KogitoBuildSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
type KogitoBuildSpecResourcesInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput
	ToKogitoBuildSpecResourcesOutputWithContext(context.Context) KogitoBuildSpecResourcesOutput
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoBuildSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoBuildSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoBuildSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return i.ToKogitoBuildSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput)
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput).ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoBuildSpecResourcesPtrInput is an input type that accepts KogitoBuildSpecResourcesArgs, KogitoBuildSpecResourcesPtr and KogitoBuildSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesPtrInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput
	ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Context) KogitoBuildSpecResourcesPtrOutput
}

type kogitoBuildSpecResourcesPtrType KogitoBuildSpecResourcesArgs

func KogitoBuildSpecResourcesPtr(v *KogitoBuildSpecResourcesArgs) KogitoBuildSpecResourcesPtrInput {
	return (*kogitoBuildSpecResourcesPtrType)(v)
}

func (*kogitoBuildSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) *KogitoBuildSpecResources {
		return &v
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits { return v.Limits }).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests { return v.Requests }).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) Elem() KogitoBuildSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) KogitoBuildSpecResources { return *v }).(KogitoBuildSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesLimits struct {
}

// KogitoBuildSpecResourcesLimitsInput is an input type that accepts KogitoBuildSpecResourcesLimitsArgs and KogitoBuildSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsInput` via:
//
//          KogitoBuildSpecResourcesLimitsArgs{...}
type KogitoBuildSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput
	ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsOutput
}

type KogitoBuildSpecResourcesLimitsArgs struct {
}

func (KogitoBuildSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return i.ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsOutput)
}

// KogitoBuildSpecResourcesLimitsMapInput is an input type that accepts KogitoBuildSpecResourcesLimitsMap and KogitoBuildSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsMapInput` via:
//
//          KogitoBuildSpecResourcesLimitsMap{ "key": KogitoBuildSpecResourcesLimitsArgs{...} }
type KogitoBuildSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput
	ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsMapOutput
}

type KogitoBuildSpecResourcesLimitsMap map[string]KogitoBuildSpecResourcesLimitsInput

func (KogitoBuildSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return i.ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsMapOutput)
}

type KogitoBuildSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return o
}

type KogitoBuildSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesLimits {
		return vs[0].(map[string]KogitoBuildSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesLimitsOutput)
}

type KogitoBuildSpecResourcesRequests struct {
}

// KogitoBuildSpecResourcesRequestsInput is an input type that accepts KogitoBuildSpecResourcesRequestsArgs and KogitoBuildSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsInput` via:
//
//          KogitoBuildSpecResourcesRequestsArgs{...}
type KogitoBuildSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput
	ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsOutput
}

type KogitoBuildSpecResourcesRequestsArgs struct {
}

func (KogitoBuildSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return i.ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsOutput)
}

// KogitoBuildSpecResourcesRequestsMapInput is an input type that accepts KogitoBuildSpecResourcesRequestsMap and KogitoBuildSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsMapInput` via:
//
//          KogitoBuildSpecResourcesRequestsMap{ "key": KogitoBuildSpecResourcesRequestsArgs{...} }
type KogitoBuildSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput
	ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsMapOutput
}

type KogitoBuildSpecResourcesRequestsMap map[string]KogitoBuildSpecResourcesRequestsInput

func (KogitoBuildSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return i.ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return o
}

type KogitoBuildSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesRequests {
		return vs[0].(map[string]KogitoBuildSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesRequestsOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooks struct {
	// Secret value for webHook
	Secret *string `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type *string `pulumi:"type"`
}

// KogitoBuildSpecWebHooksInput is an input type that accepts KogitoBuildSpecWebHooksArgs and KogitoBuildSpecWebHooksOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksInput` via:
//
//          KogitoBuildSpecWebHooksArgs{...}
type KogitoBuildSpecWebHooksInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput
	ToKogitoBuildSpecWebHooksOutputWithContext(context.Context) KogitoBuildSpecWebHooksOutput
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksArgs struct {
	// Secret value for webHook
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KogitoBuildSpecWebHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return i.ToKogitoBuildSpecWebHooksOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildSpecWebHooksArrayInput is an input type that accepts KogitoBuildSpecWebHooksArray and KogitoBuildSpecWebHooksArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksArrayInput` via:
//
//          KogitoBuildSpecWebHooksArray{ KogitoBuildSpecWebHooksArgs{...} }
type KogitoBuildSpecWebHooksArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput
	ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Context) KogitoBuildSpecWebHooksArrayOutput
}

type KogitoBuildSpecWebHooksArray []KogitoBuildSpecWebHooksInput

func (KogitoBuildSpecWebHooksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return i.ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksArrayOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return o
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return o
}

// Secret value for webHook
func (o KogitoBuildSpecWebHooksOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// WebHook type, either GitHub or Generic.
func (o KogitoBuildSpecWebHooksOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecWebHooksArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecWebHooksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecWebHooks {
		return vs[0].([]KogitoBuildSpecWebHooks)[vs[1].(int)]
	}).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatus struct {
	// History of builds
	Builds KogitoBuildStatusBuilds `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  []KogitoBuildStatusConditions `pulumi:"conditions"`
	LatestBuild *string                       `pulumi:"latestBuild"`
}

// KogitoBuildStatusInput is an input type that accepts KogitoBuildStatusArgs and KogitoBuildStatusOutput values.
// You can construct a concrete instance of `KogitoBuildStatusInput` via:
//
//          KogitoBuildStatusArgs{...}
type KogitoBuildStatusInput interface {
	pulumi.Input

	ToKogitoBuildStatusOutput() KogitoBuildStatusOutput
	ToKogitoBuildStatusOutputWithContext(context.Context) KogitoBuildStatusOutput
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusArgs struct {
	// History of builds
	Builds KogitoBuildStatusBuildsInput `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  KogitoBuildStatusConditionsArrayInput `pulumi:"conditions"`
	LatestBuild pulumi.StringPtrInput                 `pulumi:"latestBuild"`
}

func (KogitoBuildStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return i.ToKogitoBuildStatusOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput)
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput).ToKogitoBuildStatusPtrOutputWithContext(ctx)
}

// KogitoBuildStatusPtrInput is an input type that accepts KogitoBuildStatusArgs, KogitoBuildStatusPtr and KogitoBuildStatusPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusPtrInput` via:
//
//          KogitoBuildStatusArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput
	ToKogitoBuildStatusPtrOutputWithContext(context.Context) KogitoBuildStatusPtrOutput
}

type kogitoBuildStatusPtrType KogitoBuildStatusArgs

func KogitoBuildStatusPtr(v *KogitoBuildStatusArgs) KogitoBuildStatusPtrInput {
	return (*kogitoBuildStatusPtrType)(v)
}

func (*kogitoBuildStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *KogitoBuildStatus {
		return &v
	}).(KogitoBuildStatusPtrOutput)
}

// History of builds
func (o KogitoBuildStatusOutput) Builds() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v KogitoBuildStatus) KogitoBuildStatusBuilds { return v.Builds }).(KogitoBuildStatusBuildsOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatus) []KogitoBuildStatusConditions { return v.Conditions }).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *string { return v.LatestBuild }).(pulumi.StringPtrOutput)
}

type KogitoBuildStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) Elem() KogitoBuildStatusOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) KogitoBuildStatus { return *v }).(KogitoBuildStatusOutput)
}

// History of builds
func (o KogitoBuildStatusPtrOutput) Builds() KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *KogitoBuildStatusBuilds {
		if v == nil {
			return nil
		}
		return &v.Builds
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusPtrOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) []KogitoBuildStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusPtrOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestBuild
	}).(pulumi.StringPtrOutput)
}

// History of builds
type KogitoBuildStatusBuilds struct {
	// Builds have been stopped from executing.
	Cancelled []string `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete []string `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error []string `pulumi:"error"`
	// Builds have executed and failed.
	Failed []string `pulumi:"failed"`
	// Builds are being created.
	New []string `pulumi:"new"`
	// Builds are about to start running.
	Pending []string `pulumi:"pending"`
	// Builds are running.
	Running []string `pulumi:"running"`
}

// KogitoBuildStatusBuildsInput is an input type that accepts KogitoBuildStatusBuildsArgs and KogitoBuildStatusBuildsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
type KogitoBuildStatusBuildsInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput
	ToKogitoBuildStatusBuildsOutputWithContext(context.Context) KogitoBuildStatusBuildsOutput
}

// History of builds
type KogitoBuildStatusBuildsArgs struct {
	// Builds have been stopped from executing.
	Cancelled pulumi.StringArrayInput `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete pulumi.StringArrayInput `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error pulumi.StringArrayInput `pulumi:"error"`
	// Builds have executed and failed.
	Failed pulumi.StringArrayInput `pulumi:"failed"`
	// Builds are being created.
	New pulumi.StringArrayInput `pulumi:"new"`
	// Builds are about to start running.
	Pending pulumi.StringArrayInput `pulumi:"pending"`
	// Builds are running.
	Running pulumi.StringArrayInput `pulumi:"running"`
}

func (KogitoBuildStatusBuildsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return i.ToKogitoBuildStatusBuildsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput)
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput).ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx)
}

// KogitoBuildStatusBuildsPtrInput is an input type that accepts KogitoBuildStatusBuildsArgs, KogitoBuildStatusBuildsPtr and KogitoBuildStatusBuildsPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsPtrInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusBuildsPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput
	ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Context) KogitoBuildStatusBuildsPtrOutput
}

type kogitoBuildStatusBuildsPtrType KogitoBuildStatusBuildsArgs

func KogitoBuildStatusBuildsPtr(v *KogitoBuildStatusBuildsArgs) KogitoBuildStatusBuildsPtrInput {
	return (*kogitoBuildStatusBuildsPtrType)(v)
}

func (*kogitoBuildStatusBuildsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsPtrOutput)
}

// History of builds
type KogitoBuildStatusBuildsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) *KogitoBuildStatusBuilds {
		return &v
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Cancelled }).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Complete }).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Error }).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Failed }).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.New }).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Pending }).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Running }).(pulumi.StringArrayOutput)
}

type KogitoBuildStatusBuildsPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) Elem() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) KogitoBuildStatusBuilds { return *v }).(KogitoBuildStatusBuildsOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsPtrOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Cancelled
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsPtrOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Complete
	}).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsPtrOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsPtrOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsPtrOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsPtrOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Pending
	}).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsPtrOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Running
	}).(pulumi.StringArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditions struct {
	// LastTransitionTime ...
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message ...
	Message *string `pulumi:"message"`
	// Reason of this condition
	Reason *string `pulumi:"reason"`
	// Status ...
	Status string `pulumi:"status"`
	// Type of this condition
	Type string `pulumi:"type"`
}

// KogitoBuildStatusConditionsInput is an input type that accepts KogitoBuildStatusConditionsArgs and KogitoBuildStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsInput` via:
//
//          KogitoBuildStatusConditionsArgs{...}
type KogitoBuildStatusConditionsInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput
	ToKogitoBuildStatusConditionsOutputWithContext(context.Context) KogitoBuildStatusConditionsOutput
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsArgs struct {
	// LastTransitionTime ...
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message ...
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason of this condition
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status ...
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoBuildStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return i.ToKogitoBuildStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsOutput)
}

// KogitoBuildStatusConditionsArrayInput is an input type that accepts KogitoBuildStatusConditionsArray and KogitoBuildStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsArrayInput` via:
//
//          KogitoBuildStatusConditionsArray{ KogitoBuildStatusConditionsArgs{...} }
type KogitoBuildStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput
	ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Context) KogitoBuildStatusConditionsArrayOutput
}

type KogitoBuildStatusConditionsArray []KogitoBuildStatusConditionsInput

func (KogitoBuildStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return i.ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return o
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return o
}

// LastTransitionTime ...
func (o KogitoBuildStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message ...
func (o KogitoBuildStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason of this condition
func (o KogitoBuildStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status ...
func (o KogitoBuildStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition
func (o KogitoBuildStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoBuildStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoBuildStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildStatusConditions {
		return vs[0].([]KogitoBuildStatusConditions)[vs[1].(int)]
	}).(KogitoBuildStatusConditionsOutput)
}

// KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.
type KogitoInfraType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec *KogitoInfraSpec `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status *KogitoInfraStatus `pulumi:"status"`
}

// KogitoInfraTypeInput is an input type that accepts KogitoInfraTypeArgs and KogitoInfraTypeOutput values.
// You can construct a concrete instance of `KogitoInfraTypeInput` via:
//
//          KogitoInfraTypeArgs{...}
type KogitoInfraTypeInput interface {
	pulumi.Input

	ToKogitoInfraTypeOutput() KogitoInfraTypeOutput
	ToKogitoInfraTypeOutputWithContext(context.Context) KogitoInfraTypeOutput
}

// KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.
type KogitoInfraTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec KogitoInfraSpecPtrInput `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status KogitoInfraStatusPtrInput `pulumi:"status"`
}

func (KogitoInfraTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraType)(nil)).Elem()
}

func (i KogitoInfraTypeArgs) ToKogitoInfraTypeOutput() KogitoInfraTypeOutput {
	return i.ToKogitoInfraTypeOutputWithContext(context.Background())
}

func (i KogitoInfraTypeArgs) ToKogitoInfraTypeOutputWithContext(ctx context.Context) KogitoInfraTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraTypeOutput)
}

// KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.
type KogitoInfraTypeOutput struct{ *pulumi.OutputState }

func (KogitoInfraTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraType)(nil)).Elem()
}

func (o KogitoInfraTypeOutput) ToKogitoInfraTypeOutput() KogitoInfraTypeOutput {
	return o
}

func (o KogitoInfraTypeOutput) ToKogitoInfraTypeOutputWithContext(ctx context.Context) KogitoInfraTypeOutput {
	return o
}

func (o KogitoInfraTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
func (o KogitoInfraTypeOutput) Spec() KogitoInfraSpecPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *KogitoInfraSpec { return v.Spec }).(KogitoInfraSpecPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
func (o KogitoInfraTypeOutput) Status() KogitoInfraStatusPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *KogitoInfraStatus { return v.Status }).(KogitoInfraStatusPtrOutput)
}

type KogitoInfraMetadata struct {
}

// KogitoInfraMetadataInput is an input type that accepts KogitoInfraMetadataArgs and KogitoInfraMetadataOutput values.
// You can construct a concrete instance of `KogitoInfraMetadataInput` via:
//
//          KogitoInfraMetadataArgs{...}
type KogitoInfraMetadataInput interface {
	pulumi.Input

	ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput
	ToKogitoInfraMetadataOutputWithContext(context.Context) KogitoInfraMetadataOutput
}

type KogitoInfraMetadataArgs struct {
}

func (KogitoInfraMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraMetadata)(nil)).Elem()
}

func (i KogitoInfraMetadataArgs) ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput {
	return i.ToKogitoInfraMetadataOutputWithContext(context.Background())
}

func (i KogitoInfraMetadataArgs) ToKogitoInfraMetadataOutputWithContext(ctx context.Context) KogitoInfraMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraMetadataOutput)
}

type KogitoInfraMetadataOutput struct{ *pulumi.OutputState }

func (KogitoInfraMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraMetadata)(nil)).Elem()
}

func (o KogitoInfraMetadataOutput) ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput {
	return o
}

func (o KogitoInfraMetadataOutput) ToKogitoInfraMetadataOutputWithContext(ctx context.Context) KogitoInfraMetadataOutput {
	return o
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpec struct {
	// Resource for the service. Example: Infinispan/Kafka/Keycloak.
	Resource *KogitoInfraSpecResource `pulumi:"resource"`
}

// KogitoInfraSpecInput is an input type that accepts KogitoInfraSpecArgs and KogitoInfraSpecOutput values.
// You can construct a concrete instance of `KogitoInfraSpecInput` via:
//
//          KogitoInfraSpecArgs{...}
type KogitoInfraSpecInput interface {
	pulumi.Input

	ToKogitoInfraSpecOutput() KogitoInfraSpecOutput
	ToKogitoInfraSpecOutputWithContext(context.Context) KogitoInfraSpecOutput
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpecArgs struct {
	// Resource for the service. Example: Infinispan/Kafka/Keycloak.
	Resource KogitoInfraSpecResourcePtrInput `pulumi:"resource"`
}

func (KogitoInfraSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpec)(nil)).Elem()
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecOutput() KogitoInfraSpecOutput {
	return i.ToKogitoInfraSpecOutputWithContext(context.Background())
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecOutputWithContext(ctx context.Context) KogitoInfraSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecOutput)
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return i.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecOutput).ToKogitoInfraSpecPtrOutputWithContext(ctx)
}

// KogitoInfraSpecPtrInput is an input type that accepts KogitoInfraSpecArgs, KogitoInfraSpecPtr and KogitoInfraSpecPtrOutput values.
// You can construct a concrete instance of `KogitoInfraSpecPtrInput` via:
//
//          KogitoInfraSpecArgs{...}
//
//  or:
//
//          nil
type KogitoInfraSpecPtrInput interface {
	pulumi.Input

	ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput
	ToKogitoInfraSpecPtrOutputWithContext(context.Context) KogitoInfraSpecPtrOutput
}

type kogitoInfraSpecPtrType KogitoInfraSpecArgs

func KogitoInfraSpecPtr(v *KogitoInfraSpecArgs) KogitoInfraSpecPtrInput {
	return (*kogitoInfraSpecPtrType)(v)
}

func (*kogitoInfraSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpec)(nil)).Elem()
}

func (i *kogitoInfraSpecPtrType) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return i.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraSpecPtrType) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecPtrOutput)
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpecOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpec)(nil)).Elem()
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecOutput() KogitoInfraSpecOutput {
	return o
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecOutputWithContext(ctx context.Context) KogitoInfraSpecOutput {
	return o
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return o.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *KogitoInfraSpec {
		return &v
	}).(KogitoInfraSpecPtrOutput)
}

// Resource for the service. Example: Infinispan/Kafka/Keycloak.
func (o KogitoInfraSpecOutput) Resource() KogitoInfraSpecResourcePtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *KogitoInfraSpecResource { return v.Resource }).(KogitoInfraSpecResourcePtrOutput)
}

type KogitoInfraSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpec)(nil)).Elem()
}

func (o KogitoInfraSpecPtrOutput) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return o
}

func (o KogitoInfraSpecPtrOutput) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return o
}

func (o KogitoInfraSpecPtrOutput) Elem() KogitoInfraSpecOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) KogitoInfraSpec { return *v }).(KogitoInfraSpecOutput)
}

// Resource for the service. Example: Infinispan/Kafka/Keycloak.
func (o KogitoInfraSpecPtrOutput) Resource() KogitoInfraSpecResourcePtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) *KogitoInfraSpecResource {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(KogitoInfraSpecResourcePtrOutput)
}

// Resource for the service. Example: Infinispan/Kafka/Keycloak.
type KogitoInfraSpecResource struct {
	// APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1
	ApiVersion string `pulumi:"apiVersion"`
	// Kind describes the kind of referred Kubernetes resource for example, Infinispan
	Kind string `pulumi:"kind"`
	// Name of referred resource.
	Name *string `pulumi:"name"`
	// Namespace where referred resource exists.
	Namespace *string `pulumi:"namespace"`
}

// KogitoInfraSpecResourceInput is an input type that accepts KogitoInfraSpecResourceArgs and KogitoInfraSpecResourceOutput values.
// You can construct a concrete instance of `KogitoInfraSpecResourceInput` via:
//
//          KogitoInfraSpecResourceArgs{...}
type KogitoInfraSpecResourceInput interface {
	pulumi.Input

	ToKogitoInfraSpecResourceOutput() KogitoInfraSpecResourceOutput
	ToKogitoInfraSpecResourceOutputWithContext(context.Context) KogitoInfraSpecResourceOutput
}

// Resource for the service. Example: Infinispan/Kafka/Keycloak.
type KogitoInfraSpecResourceArgs struct {
	// APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind describes the kind of referred Kubernetes resource for example, Infinispan
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of referred resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace where referred resource exists.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (KogitoInfraSpecResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpecResource)(nil)).Elem()
}

func (i KogitoInfraSpecResourceArgs) ToKogitoInfraSpecResourceOutput() KogitoInfraSpecResourceOutput {
	return i.ToKogitoInfraSpecResourceOutputWithContext(context.Background())
}

func (i KogitoInfraSpecResourceArgs) ToKogitoInfraSpecResourceOutputWithContext(ctx context.Context) KogitoInfraSpecResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecResourceOutput)
}

func (i KogitoInfraSpecResourceArgs) ToKogitoInfraSpecResourcePtrOutput() KogitoInfraSpecResourcePtrOutput {
	return i.ToKogitoInfraSpecResourcePtrOutputWithContext(context.Background())
}

func (i KogitoInfraSpecResourceArgs) ToKogitoInfraSpecResourcePtrOutputWithContext(ctx context.Context) KogitoInfraSpecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecResourceOutput).ToKogitoInfraSpecResourcePtrOutputWithContext(ctx)
}

// KogitoInfraSpecResourcePtrInput is an input type that accepts KogitoInfraSpecResourceArgs, KogitoInfraSpecResourcePtr and KogitoInfraSpecResourcePtrOutput values.
// You can construct a concrete instance of `KogitoInfraSpecResourcePtrInput` via:
//
//          KogitoInfraSpecResourceArgs{...}
//
//  or:
//
//          nil
type KogitoInfraSpecResourcePtrInput interface {
	pulumi.Input

	ToKogitoInfraSpecResourcePtrOutput() KogitoInfraSpecResourcePtrOutput
	ToKogitoInfraSpecResourcePtrOutputWithContext(context.Context) KogitoInfraSpecResourcePtrOutput
}

type kogitoInfraSpecResourcePtrType KogitoInfraSpecResourceArgs

func KogitoInfraSpecResourcePtr(v *KogitoInfraSpecResourceArgs) KogitoInfraSpecResourcePtrInput {
	return (*kogitoInfraSpecResourcePtrType)(v)
}

func (*kogitoInfraSpecResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpecResource)(nil)).Elem()
}

func (i *kogitoInfraSpecResourcePtrType) ToKogitoInfraSpecResourcePtrOutput() KogitoInfraSpecResourcePtrOutput {
	return i.ToKogitoInfraSpecResourcePtrOutputWithContext(context.Background())
}

func (i *kogitoInfraSpecResourcePtrType) ToKogitoInfraSpecResourcePtrOutputWithContext(ctx context.Context) KogitoInfraSpecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecResourcePtrOutput)
}

// Resource for the service. Example: Infinispan/Kafka/Keycloak.
type KogitoInfraSpecResourceOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpecResource)(nil)).Elem()
}

func (o KogitoInfraSpecResourceOutput) ToKogitoInfraSpecResourceOutput() KogitoInfraSpecResourceOutput {
	return o
}

func (o KogitoInfraSpecResourceOutput) ToKogitoInfraSpecResourceOutputWithContext(ctx context.Context) KogitoInfraSpecResourceOutput {
	return o
}

func (o KogitoInfraSpecResourceOutput) ToKogitoInfraSpecResourcePtrOutput() KogitoInfraSpecResourcePtrOutput {
	return o.ToKogitoInfraSpecResourcePtrOutputWithContext(context.Background())
}

func (o KogitoInfraSpecResourceOutput) ToKogitoInfraSpecResourcePtrOutputWithContext(ctx context.Context) KogitoInfraSpecResourcePtrOutput {
	return o.ApplyT(func(v KogitoInfraSpecResource) *KogitoInfraSpecResource {
		return &v
	}).(KogitoInfraSpecResourcePtrOutput)
}

// APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1
func (o KogitoInfraSpecResourceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraSpecResource) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind describes the kind of referred Kubernetes resource for example, Infinispan
func (o KogitoInfraSpecResourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraSpecResource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of referred resource.
func (o KogitoInfraSpecResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpecResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace where referred resource exists.
func (o KogitoInfraSpecResourceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpecResource) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type KogitoInfraSpecResourcePtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpecResource)(nil)).Elem()
}

func (o KogitoInfraSpecResourcePtrOutput) ToKogitoInfraSpecResourcePtrOutput() KogitoInfraSpecResourcePtrOutput {
	return o
}

func (o KogitoInfraSpecResourcePtrOutput) ToKogitoInfraSpecResourcePtrOutputWithContext(ctx context.Context) KogitoInfraSpecResourcePtrOutput {
	return o
}

func (o KogitoInfraSpecResourcePtrOutput) Elem() KogitoInfraSpecResourceOutput {
	return o.ApplyT(func(v *KogitoInfraSpecResource) KogitoInfraSpecResource { return *v }).(KogitoInfraSpecResourceOutput)
}

// APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1
func (o KogitoInfraSpecResourcePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpecResource) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind describes the kind of referred Kubernetes resource for example, Infinispan
func (o KogitoInfraSpecResourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpecResource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of referred resource.
func (o KogitoInfraSpecResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpecResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace where referred resource exists.
func (o KogitoInfraSpecResourcePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpecResource) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatus struct {
	// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
	AppProps map[string]string `pulumi:"appProps"`
	// KogitoInfraCondition ...
	Condition *KogitoInfraStatusCondition `pulumi:"condition"`
	// Environment variables extracted from the linked resource that will be added to the deployed Kogito service.
	Env []KogitoInfraStatusEnv `pulumi:"env"`
	// List of volumes that should be added to the services bound to this infra instance
	Volumes []KogitoInfraStatusVolumes `pulumi:"volumes"`
}

// KogitoInfraStatusInput is an input type that accepts KogitoInfraStatusArgs and KogitoInfraStatusOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInput` via:
//
//          KogitoInfraStatusArgs{...}
type KogitoInfraStatusInput interface {
	pulumi.Input

	ToKogitoInfraStatusOutput() KogitoInfraStatusOutput
	ToKogitoInfraStatusOutputWithContext(context.Context) KogitoInfraStatusOutput
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatusArgs struct {
	// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
	AppProps pulumi.StringMapInput `pulumi:"appProps"`
	// KogitoInfraCondition ...
	Condition KogitoInfraStatusConditionPtrInput `pulumi:"condition"`
	// Environment variables extracted from the linked resource that will be added to the deployed Kogito service.
	Env KogitoInfraStatusEnvArrayInput `pulumi:"env"`
	// List of volumes that should be added to the services bound to this infra instance
	Volumes KogitoInfraStatusVolumesArrayInput `pulumi:"volumes"`
}

func (KogitoInfraStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatus)(nil)).Elem()
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusOutput() KogitoInfraStatusOutput {
	return i.ToKogitoInfraStatusOutputWithContext(context.Background())
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusOutputWithContext(ctx context.Context) KogitoInfraStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusOutput)
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return i.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusOutput).ToKogitoInfraStatusPtrOutputWithContext(ctx)
}

// KogitoInfraStatusPtrInput is an input type that accepts KogitoInfraStatusArgs, KogitoInfraStatusPtr and KogitoInfraStatusPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusPtrInput` via:
//
//          KogitoInfraStatusArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput
	ToKogitoInfraStatusPtrOutputWithContext(context.Context) KogitoInfraStatusPtrOutput
}

type kogitoInfraStatusPtrType KogitoInfraStatusArgs

func KogitoInfraStatusPtr(v *KogitoInfraStatusArgs) KogitoInfraStatusPtrInput {
	return (*kogitoInfraStatusPtrType)(v)
}

func (*kogitoInfraStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatus)(nil)).Elem()
}

func (i *kogitoInfraStatusPtrType) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return i.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusPtrType) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatusOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatus)(nil)).Elem()
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusOutput() KogitoInfraStatusOutput {
	return o
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusOutputWithContext(ctx context.Context) KogitoInfraStatusOutput {
	return o
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return o.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatus {
		return &v
	}).(KogitoInfraStatusPtrOutput)
}

// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
func (o KogitoInfraStatusOutput) AppProps() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoInfraStatus) map[string]string { return v.AppProps }).(pulumi.StringMapOutput)
}

// KogitoInfraCondition ...
func (o KogitoInfraStatusOutput) Condition() KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatusCondition { return v.Condition }).(KogitoInfraStatusConditionPtrOutput)
}

// Environment variables extracted from the linked resource that will be added to the deployed Kogito service.
func (o KogitoInfraStatusOutput) Env() KogitoInfraStatusEnvArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatus) []KogitoInfraStatusEnv { return v.Env }).(KogitoInfraStatusEnvArrayOutput)
}

// List of volumes that should be added to the services bound to this infra instance
func (o KogitoInfraStatusOutput) Volumes() KogitoInfraStatusVolumesArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatus) []KogitoInfraStatusVolumes { return v.Volumes }).(KogitoInfraStatusVolumesArrayOutput)
}

type KogitoInfraStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatus)(nil)).Elem()
}

func (o KogitoInfraStatusPtrOutput) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return o
}

func (o KogitoInfraStatusPtrOutput) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return o
}

func (o KogitoInfraStatusPtrOutput) Elem() KogitoInfraStatusOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) KogitoInfraStatus { return *v }).(KogitoInfraStatusOutput)
}

// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
func (o KogitoInfraStatusPtrOutput) AppProps() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AppProps
	}).(pulumi.StringMapOutput)
}

// KogitoInfraCondition ...
func (o KogitoInfraStatusPtrOutput) Condition() KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) *KogitoInfraStatusCondition {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(KogitoInfraStatusConditionPtrOutput)
}

// Environment variables extracted from the linked resource that will be added to the deployed Kogito service.
func (o KogitoInfraStatusPtrOutput) Env() KogitoInfraStatusEnvArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) []KogitoInfraStatusEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(KogitoInfraStatusEnvArrayOutput)
}

// List of volumes that should be added to the services bound to this infra instance
func (o KogitoInfraStatusPtrOutput) Volumes() KogitoInfraStatusVolumesArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) []KogitoInfraStatusVolumes {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(KogitoInfraStatusVolumesArrayOutput)
}

// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
type KogitoInfraStatusAppProps struct {
}

// KogitoInfraStatusAppPropsInput is an input type that accepts KogitoInfraStatusAppPropsArgs and KogitoInfraStatusAppPropsOutput values.
// You can construct a concrete instance of `KogitoInfraStatusAppPropsInput` via:
//
//          KogitoInfraStatusAppPropsArgs{...}
type KogitoInfraStatusAppPropsInput interface {
	pulumi.Input

	ToKogitoInfraStatusAppPropsOutput() KogitoInfraStatusAppPropsOutput
	ToKogitoInfraStatusAppPropsOutputWithContext(context.Context) KogitoInfraStatusAppPropsOutput
}

// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
type KogitoInfraStatusAppPropsArgs struct {
}

func (KogitoInfraStatusAppPropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusAppProps)(nil)).Elem()
}

func (i KogitoInfraStatusAppPropsArgs) ToKogitoInfraStatusAppPropsOutput() KogitoInfraStatusAppPropsOutput {
	return i.ToKogitoInfraStatusAppPropsOutputWithContext(context.Background())
}

func (i KogitoInfraStatusAppPropsArgs) ToKogitoInfraStatusAppPropsOutputWithContext(ctx context.Context) KogitoInfraStatusAppPropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusAppPropsOutput)
}

// Application properties extracted from the linked resource that will be added to the deployed Kogito service.
type KogitoInfraStatusAppPropsOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusAppPropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusAppProps)(nil)).Elem()
}

func (o KogitoInfraStatusAppPropsOutput) ToKogitoInfraStatusAppPropsOutput() KogitoInfraStatusAppPropsOutput {
	return o
}

func (o KogitoInfraStatusAppPropsOutput) ToKogitoInfraStatusAppPropsOutputWithContext(ctx context.Context) KogitoInfraStatusAppPropsOutput {
	return o
}

// KogitoInfraCondition ...
type KogitoInfraStatusCondition struct {
	// LastTransitionTime ...
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message ...
	Message *string `pulumi:"message"`
	// Reason ...
	Reason *string `pulumi:"reason"`
	// Status ...
	Status string `pulumi:"status"`
	// Type ...
	Type string `pulumi:"type"`
}

// KogitoInfraStatusConditionInput is an input type that accepts KogitoInfraStatusConditionArgs and KogitoInfraStatusConditionOutput values.
// You can construct a concrete instance of `KogitoInfraStatusConditionInput` via:
//
//          KogitoInfraStatusConditionArgs{...}
type KogitoInfraStatusConditionInput interface {
	pulumi.Input

	ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput
	ToKogitoInfraStatusConditionOutputWithContext(context.Context) KogitoInfraStatusConditionOutput
}

// KogitoInfraCondition ...
type KogitoInfraStatusConditionArgs struct {
	// LastTransitionTime ...
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message ...
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason ...
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status ...
	Status pulumi.StringInput `pulumi:"status"`
	// Type ...
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoInfraStatusConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusCondition)(nil)).Elem()
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput {
	return i.ToKogitoInfraStatusConditionOutputWithContext(context.Background())
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionOutputWithContext(ctx context.Context) KogitoInfraStatusConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionOutput)
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return i.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionOutput).ToKogitoInfraStatusConditionPtrOutputWithContext(ctx)
}

// KogitoInfraStatusConditionPtrInput is an input type that accepts KogitoInfraStatusConditionArgs, KogitoInfraStatusConditionPtr and KogitoInfraStatusConditionPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusConditionPtrInput` via:
//
//          KogitoInfraStatusConditionArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusConditionPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput
	ToKogitoInfraStatusConditionPtrOutputWithContext(context.Context) KogitoInfraStatusConditionPtrOutput
}

type kogitoInfraStatusConditionPtrType KogitoInfraStatusConditionArgs

func KogitoInfraStatusConditionPtr(v *KogitoInfraStatusConditionArgs) KogitoInfraStatusConditionPtrInput {
	return (*kogitoInfraStatusConditionPtrType)(v)
}

func (*kogitoInfraStatusConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusCondition)(nil)).Elem()
}

func (i *kogitoInfraStatusConditionPtrType) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return i.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusConditionPtrType) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionPtrOutput)
}

// KogitoInfraCondition ...
type KogitoInfraStatusConditionOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusCondition)(nil)).Elem()
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput {
	return o
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionOutputWithContext(ctx context.Context) KogitoInfraStatusConditionOutput {
	return o
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return o.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *KogitoInfraStatusCondition {
		return &v
	}).(KogitoInfraStatusConditionPtrOutput)
}

// LastTransitionTime ...
func (o KogitoInfraStatusConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message ...
func (o KogitoInfraStatusConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason ...
func (o KogitoInfraStatusConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status ...
func (o KogitoInfraStatusConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type ...
func (o KogitoInfraStatusConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoInfraStatusConditionPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusCondition)(nil)).Elem()
}

func (o KogitoInfraStatusConditionPtrOutput) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return o
}

func (o KogitoInfraStatusConditionPtrOutput) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return o
}

func (o KogitoInfraStatusConditionPtrOutput) Elem() KogitoInfraStatusConditionOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) KogitoInfraStatusCondition { return *v }).(KogitoInfraStatusConditionOutput)
}

// LastTransitionTime ...
func (o KogitoInfraStatusConditionPtrOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return v.LastTransitionTime
	}).(pulumi.StringPtrOutput)
}

// Message ...
func (o KogitoInfraStatusConditionPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Reason ...
func (o KogitoInfraStatusConditionPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Status ...
func (o KogitoInfraStatusConditionPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Type ...
func (o KogitoInfraStatusConditionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoInfraStatusEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoInfraStatusEnvValueFrom `pulumi:"valueFrom"`
}

// KogitoInfraStatusEnvInput is an input type that accepts KogitoInfraStatusEnvArgs and KogitoInfraStatusEnvOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvInput` via:
//
//          KogitoInfraStatusEnvArgs{...}
type KogitoInfraStatusEnvInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvOutput() KogitoInfraStatusEnvOutput
	ToKogitoInfraStatusEnvOutputWithContext(context.Context) KogitoInfraStatusEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoInfraStatusEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoInfraStatusEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoInfraStatusEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnv)(nil)).Elem()
}

func (i KogitoInfraStatusEnvArgs) ToKogitoInfraStatusEnvOutput() KogitoInfraStatusEnvOutput {
	return i.ToKogitoInfraStatusEnvOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvArgs) ToKogitoInfraStatusEnvOutputWithContext(ctx context.Context) KogitoInfraStatusEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvOutput)
}

// KogitoInfraStatusEnvArrayInput is an input type that accepts KogitoInfraStatusEnvArray and KogitoInfraStatusEnvArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvArrayInput` via:
//
//          KogitoInfraStatusEnvArray{ KogitoInfraStatusEnvArgs{...} }
type KogitoInfraStatusEnvArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvArrayOutput() KogitoInfraStatusEnvArrayOutput
	ToKogitoInfraStatusEnvArrayOutputWithContext(context.Context) KogitoInfraStatusEnvArrayOutput
}

type KogitoInfraStatusEnvArray []KogitoInfraStatusEnvInput

func (KogitoInfraStatusEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusEnv)(nil)).Elem()
}

func (i KogitoInfraStatusEnvArray) ToKogitoInfraStatusEnvArrayOutput() KogitoInfraStatusEnvArrayOutput {
	return i.ToKogitoInfraStatusEnvArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvArray) ToKogitoInfraStatusEnvArrayOutputWithContext(ctx context.Context) KogitoInfraStatusEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoInfraStatusEnvOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnv)(nil)).Elem()
}

func (o KogitoInfraStatusEnvOutput) ToKogitoInfraStatusEnvOutput() KogitoInfraStatusEnvOutput {
	return o
}

func (o KogitoInfraStatusEnvOutput) ToKogitoInfraStatusEnvOutputWithContext(ctx context.Context) KogitoInfraStatusEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoInfraStatusEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoInfraStatusEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoInfraStatusEnvOutput) ValueFrom() KogitoInfraStatusEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnv) *KogitoInfraStatusEnvValueFrom { return v.ValueFrom }).(KogitoInfraStatusEnvValueFromPtrOutput)
}

type KogitoInfraStatusEnvArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusEnv)(nil)).Elem()
}

func (o KogitoInfraStatusEnvArrayOutput) ToKogitoInfraStatusEnvArrayOutput() KogitoInfraStatusEnvArrayOutput {
	return o
}

func (o KogitoInfraStatusEnvArrayOutput) ToKogitoInfraStatusEnvArrayOutputWithContext(ctx context.Context) KogitoInfraStatusEnvArrayOutput {
	return o
}

func (o KogitoInfraStatusEnvArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusEnv {
		return vs[0].([]KogitoInfraStatusEnv)[vs[1].(int)]
	}).(KogitoInfraStatusEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoInfraStatusEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoInfraStatusEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoInfraStatusEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoInfraStatusEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoInfraStatusEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoInfraStatusEnvValueFromInput is an input type that accepts KogitoInfraStatusEnvValueFromArgs and KogitoInfraStatusEnvValueFromOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromInput` via:
//
//          KogitoInfraStatusEnvValueFromArgs{...}
type KogitoInfraStatusEnvValueFromInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromOutput() KogitoInfraStatusEnvValueFromOutput
	ToKogitoInfraStatusEnvValueFromOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoInfraStatusEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoInfraStatusEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoInfraStatusEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoInfraStatusEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoInfraStatusEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFrom)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromArgs) ToKogitoInfraStatusEnvValueFromOutput() KogitoInfraStatusEnvValueFromOutput {
	return i.ToKogitoInfraStatusEnvValueFromOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromArgs) ToKogitoInfraStatusEnvValueFromOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromOutput)
}

func (i KogitoInfraStatusEnvValueFromArgs) ToKogitoInfraStatusEnvValueFromPtrOutput() KogitoInfraStatusEnvValueFromPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromArgs) ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromOutput).ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromArgs, KogitoInfraStatusEnvValueFromPtr and KogitoInfraStatusEnvValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromPtrOutput() KogitoInfraStatusEnvValueFromPtrOutput
	ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromPtrOutput
}

type kogitoInfraStatusEnvValueFromPtrType KogitoInfraStatusEnvValueFromArgs

func KogitoInfraStatusEnvValueFromPtr(v *KogitoInfraStatusEnvValueFromArgs) KogitoInfraStatusEnvValueFromPtrInput {
	return (*kogitoInfraStatusEnvValueFromPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFrom)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromPtrType) ToKogitoInfraStatusEnvValueFromPtrOutput() KogitoInfraStatusEnvValueFromPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromPtrType) ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoInfraStatusEnvValueFromOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFrom)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromOutput) ToKogitoInfraStatusEnvValueFromOutput() KogitoInfraStatusEnvValueFromOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromOutput) ToKogitoInfraStatusEnvValueFromOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromOutput) ToKogitoInfraStatusEnvValueFromPtrOutput() KogitoInfraStatusEnvValueFromPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromOutput) ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFrom {
		return &v
	}).(KogitoInfraStatusEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoInfraStatusEnvValueFromOutput) ConfigMapKeyRef() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoInfraStatusEnvValueFromOutput) FieldRef() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromFieldRef { return v.FieldRef }).(KogitoInfraStatusEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoInfraStatusEnvValueFromOutput) ResourceFieldRef() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoInfraStatusEnvValueFromOutput) SecretKeyRef() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput)
}

type KogitoInfraStatusEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFrom)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromPtrOutput) ToKogitoInfraStatusEnvValueFromPtrOutput() KogitoInfraStatusEnvValueFromPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromPtrOutput) ToKogitoInfraStatusEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromPtrOutput) Elem() KogitoInfraStatusEnvValueFromOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFrom) KogitoInfraStatusEnvValueFrom { return *v }).(KogitoInfraStatusEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoInfraStatusEnvValueFromPtrOutput) ConfigMapKeyRef() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoInfraStatusEnvValueFromPtrOutput) FieldRef() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoInfraStatusEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoInfraStatusEnvValueFromPtrOutput) ResourceFieldRef() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoInfraStatusEnvValueFromPtrOutput) SecretKeyRef() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFrom) *KogitoInfraStatusEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoInfraStatusEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoInfraStatusEnvValueFromConfigMapKeyRefInput is an input type that accepts KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs and KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromConfigMapKeyRefInput` via:
//
//          KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs{...}
type KogitoInfraStatusEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput
	ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput {
	return i.ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput)
}

func (i KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput).ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs, KogitoInfraStatusEnvValueFromConfigMapKeyRefPtr and KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput
	ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput
}

type kogitoInfraStatusEnvValueFromConfigMapKeyRefPtrType KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs

func KogitoInfraStatusEnvValueFromConfigMapKeyRefPtr(v *KogitoInfraStatusEnvValueFromConfigMapKeyRefArgs) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrInput {
	return (*kogitoInfraStatusEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromConfigMapKeyRefPtrType) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromConfigMapKeyRefPtrType) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromConfigMapKeyRef) *KogitoInfraStatusEnvValueFromConfigMapKeyRef {
		return &v
	}).(KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput() KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) Elem() KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromConfigMapKeyRef) KogitoInfraStatusEnvValueFromConfigMapKeyRef {
		return *v
	}).(KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoInfraStatusEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoInfraStatusEnvValueFromFieldRefInput is an input type that accepts KogitoInfraStatusEnvValueFromFieldRefArgs and KogitoInfraStatusEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromFieldRefInput` via:
//
//          KogitoInfraStatusEnvValueFromFieldRefArgs{...}
type KogitoInfraStatusEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromFieldRefOutput() KogitoInfraStatusEnvValueFromFieldRefOutput
	ToKogitoInfraStatusEnvValueFromFieldRefOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoInfraStatusEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoInfraStatusEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromFieldRef)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromFieldRefArgs) ToKogitoInfraStatusEnvValueFromFieldRefOutput() KogitoInfraStatusEnvValueFromFieldRefOutput {
	return i.ToKogitoInfraStatusEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromFieldRefArgs) ToKogitoInfraStatusEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromFieldRefOutput)
}

func (i KogitoInfraStatusEnvValueFromFieldRefArgs) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutput() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromFieldRefArgs) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromFieldRefOutput).ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromFieldRefPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromFieldRefArgs, KogitoInfraStatusEnvValueFromFieldRefPtr and KogitoInfraStatusEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromFieldRefPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromFieldRefPtrOutput() KogitoInfraStatusEnvValueFromFieldRefPtrOutput
	ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromFieldRefPtrOutput
}

type kogitoInfraStatusEnvValueFromFieldRefPtrType KogitoInfraStatusEnvValueFromFieldRefArgs

func KogitoInfraStatusEnvValueFromFieldRefPtr(v *KogitoInfraStatusEnvValueFromFieldRefArgs) KogitoInfraStatusEnvValueFromFieldRefPtrInput {
	return (*kogitoInfraStatusEnvValueFromFieldRefPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromFieldRefPtrType) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutput() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromFieldRefPtrType) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoInfraStatusEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromFieldRefOutput) ToKogitoInfraStatusEnvValueFromFieldRefOutput() KogitoInfraStatusEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromFieldRefOutput) ToKogitoInfraStatusEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromFieldRefOutput) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutput() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromFieldRefOutput) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromFieldRef) *KogitoInfraStatusEnvValueFromFieldRef {
		return &v
	}).(KogitoInfraStatusEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoInfraStatusEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoInfraStatusEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoInfraStatusEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromFieldRefPtrOutput) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutput() KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromFieldRefPtrOutput) ToKogitoInfraStatusEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromFieldRefPtrOutput) Elem() KogitoInfraStatusEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromFieldRef) KogitoInfraStatusEnvValueFromFieldRef { return *v }).(KogitoInfraStatusEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoInfraStatusEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoInfraStatusEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoInfraStatusEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoInfraStatusEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoInfraStatusEnvValueFromResourceFieldRefInput is an input type that accepts KogitoInfraStatusEnvValueFromResourceFieldRefArgs and KogitoInfraStatusEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromResourceFieldRefInput` via:
//
//          KogitoInfraStatusEnvValueFromResourceFieldRefArgs{...}
type KogitoInfraStatusEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromResourceFieldRefOutput() KogitoInfraStatusEnvValueFromResourceFieldRefOutput
	ToKogitoInfraStatusEnvValueFromResourceFieldRefOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoInfraStatusEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoInfraStatusEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefOutput() KogitoInfraStatusEnvValueFromResourceFieldRefOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefOutput)
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefOutput).ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromResourceFieldRefPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromResourceFieldRefArgs, KogitoInfraStatusEnvValueFromResourceFieldRefPtr and KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromResourceFieldRefPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput
	ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput
}

type kogitoInfraStatusEnvValueFromResourceFieldRefPtrType KogitoInfraStatusEnvValueFromResourceFieldRefArgs

func KogitoInfraStatusEnvValueFromResourceFieldRefPtr(v *KogitoInfraStatusEnvValueFromResourceFieldRefArgs) KogitoInfraStatusEnvValueFromResourceFieldRefPtrInput {
	return (*kogitoInfraStatusEnvValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromResourceFieldRefPtrType) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromResourceFieldRefPtrType) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoInfraStatusEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefOutput() KogitoInfraStatusEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromResourceFieldRef) *KogitoInfraStatusEnvValueFromResourceFieldRef {
		return &v
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) Divisor() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromResourceFieldRef) *KogitoInfraStatusEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoInfraStatusEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) Elem() KogitoInfraStatusEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromResourceFieldRef) KogitoInfraStatusEnvValueFromResourceFieldRef {
		return *v
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) Divisor() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromResourceFieldRef) *KogitoInfraStatusEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoInfraStatusEnvValueFromResourceFieldRefDivisor struct {
}

// KogitoInfraStatusEnvValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs and KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs{...}
type KogitoInfraStatusEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput
	ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput
}

type KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput).ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs, KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtr and KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrType KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs

func KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtr(v *KogitoInfraStatusEnvValueFromResourceFieldRefDivisorArgs) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromResourceFieldRefDivisor) *KogitoInfraStatusEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromResourceFieldRefDivisor) KogitoInfraStatusEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoInfraStatusEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoInfraStatusEnvValueFromSecretKeyRefInput is an input type that accepts KogitoInfraStatusEnvValueFromSecretKeyRefArgs and KogitoInfraStatusEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromSecretKeyRefInput` via:
//
//          KogitoInfraStatusEnvValueFromSecretKeyRefArgs{...}
type KogitoInfraStatusEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromSecretKeyRefOutput() KogitoInfraStatusEnvValueFromSecretKeyRefOutput
	ToKogitoInfraStatusEnvValueFromSecretKeyRefOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoInfraStatusEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoInfraStatusEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoInfraStatusEnvValueFromSecretKeyRefArgs) ToKogitoInfraStatusEnvValueFromSecretKeyRefOutput() KogitoInfraStatusEnvValueFromSecretKeyRefOutput {
	return i.ToKogitoInfraStatusEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromSecretKeyRefArgs) ToKogitoInfraStatusEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromSecretKeyRefOutput)
}

func (i KogitoInfraStatusEnvValueFromSecretKeyRefArgs) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusEnvValueFromSecretKeyRefArgs) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromSecretKeyRefOutput).ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoInfraStatusEnvValueFromSecretKeyRefPtrInput is an input type that accepts KogitoInfraStatusEnvValueFromSecretKeyRefArgs, KogitoInfraStatusEnvValueFromSecretKeyRefPtr and KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusEnvValueFromSecretKeyRefPtrInput` via:
//
//          KogitoInfraStatusEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput
	ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput
}

type kogitoInfraStatusEnvValueFromSecretKeyRefPtrType KogitoInfraStatusEnvValueFromSecretKeyRefArgs

func KogitoInfraStatusEnvValueFromSecretKeyRefPtr(v *KogitoInfraStatusEnvValueFromSecretKeyRefArgs) KogitoInfraStatusEnvValueFromSecretKeyRefPtrInput {
	return (*kogitoInfraStatusEnvValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoInfraStatusEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoInfraStatusEnvValueFromSecretKeyRefPtrType) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusEnvValueFromSecretKeyRefPtrType) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoInfraStatusEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefOutput() KogitoInfraStatusEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromSecretKeyRef) *KogitoInfraStatusEnvValueFromSecretKeyRef {
		return &v
	}).(KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoInfraStatusEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput() KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) ToKogitoInfraStatusEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) Elem() KogitoInfraStatusEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromSecretKeyRef) KogitoInfraStatusEnvValueFromSecretKeyRef {
		return *v
	}).(KogitoInfraStatusEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// KogitoInfraVolume describes the data structure for volumes that should be mounted in the given service provided by this infra instance
type KogitoInfraStatusVolumes struct {
	// Mount is the Kubernetes VolumeMount referenced by this instance
	Mount KogitoInfraStatusVolumesMount `pulumi:"mount"`
	// NamedVolume describes the pod Volume reference
	Volume KogitoInfraStatusVolumesVolume `pulumi:"volume"`
}

// KogitoInfraStatusVolumesInput is an input type that accepts KogitoInfraStatusVolumesArgs and KogitoInfraStatusVolumesOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesInput` via:
//
//          KogitoInfraStatusVolumesArgs{...}
type KogitoInfraStatusVolumesInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesOutput() KogitoInfraStatusVolumesOutput
	ToKogitoInfraStatusVolumesOutputWithContext(context.Context) KogitoInfraStatusVolumesOutput
}

// KogitoInfraVolume describes the data structure for volumes that should be mounted in the given service provided by this infra instance
type KogitoInfraStatusVolumesArgs struct {
	// Mount is the Kubernetes VolumeMount referenced by this instance
	Mount KogitoInfraStatusVolumesMountInput `pulumi:"mount"`
	// NamedVolume describes the pod Volume reference
	Volume KogitoInfraStatusVolumesVolumeInput `pulumi:"volume"`
}

func (KogitoInfraStatusVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumes)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesArgs) ToKogitoInfraStatusVolumesOutput() KogitoInfraStatusVolumesOutput {
	return i.ToKogitoInfraStatusVolumesOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesArgs) ToKogitoInfraStatusVolumesOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesOutput)
}

// KogitoInfraStatusVolumesArrayInput is an input type that accepts KogitoInfraStatusVolumesArray and KogitoInfraStatusVolumesArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesArrayInput` via:
//
//          KogitoInfraStatusVolumesArray{ KogitoInfraStatusVolumesArgs{...} }
type KogitoInfraStatusVolumesArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesArrayOutput() KogitoInfraStatusVolumesArrayOutput
	ToKogitoInfraStatusVolumesArrayOutputWithContext(context.Context) KogitoInfraStatusVolumesArrayOutput
}

type KogitoInfraStatusVolumesArray []KogitoInfraStatusVolumesInput

func (KogitoInfraStatusVolumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumes)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesArray) ToKogitoInfraStatusVolumesArrayOutput() KogitoInfraStatusVolumesArrayOutput {
	return i.ToKogitoInfraStatusVolumesArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesArray) ToKogitoInfraStatusVolumesArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesArrayOutput)
}

// KogitoInfraVolume describes the data structure for volumes that should be mounted in the given service provided by this infra instance
type KogitoInfraStatusVolumesOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumes)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesOutput) ToKogitoInfraStatusVolumesOutput() KogitoInfraStatusVolumesOutput {
	return o
}

func (o KogitoInfraStatusVolumesOutput) ToKogitoInfraStatusVolumesOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesOutput {
	return o
}

// Mount is the Kubernetes VolumeMount referenced by this instance
func (o KogitoInfraStatusVolumesOutput) Mount() KogitoInfraStatusVolumesMountOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumes) KogitoInfraStatusVolumesMount { return v.Mount }).(KogitoInfraStatusVolumesMountOutput)
}

// NamedVolume describes the pod Volume reference
func (o KogitoInfraStatusVolumesOutput) Volume() KogitoInfraStatusVolumesVolumeOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumes) KogitoInfraStatusVolumesVolume { return v.Volume }).(KogitoInfraStatusVolumesVolumeOutput)
}

type KogitoInfraStatusVolumesArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumes)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesArrayOutput) ToKogitoInfraStatusVolumesArrayOutput() KogitoInfraStatusVolumesArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesArrayOutput) ToKogitoInfraStatusVolumesArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusVolumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusVolumes {
		return vs[0].([]KogitoInfraStatusVolumes)[vs[1].(int)]
	}).(KogitoInfraStatusVolumesOutput)
}

// Mount is the Kubernetes VolumeMount referenced by this instance
type KogitoInfraStatusVolumesMount struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// KogitoInfraStatusVolumesMountInput is an input type that accepts KogitoInfraStatusVolumesMountArgs and KogitoInfraStatusVolumesMountOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesMountInput` via:
//
//          KogitoInfraStatusVolumesMountArgs{...}
type KogitoInfraStatusVolumesMountInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesMountOutput() KogitoInfraStatusVolumesMountOutput
	ToKogitoInfraStatusVolumesMountOutputWithContext(context.Context) KogitoInfraStatusVolumesMountOutput
}

// Mount is the Kubernetes VolumeMount referenced by this instance
type KogitoInfraStatusVolumesMountArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (KogitoInfraStatusVolumesMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesMount)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesMountArgs) ToKogitoInfraStatusVolumesMountOutput() KogitoInfraStatusVolumesMountOutput {
	return i.ToKogitoInfraStatusVolumesMountOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesMountArgs) ToKogitoInfraStatusVolumesMountOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesMountOutput)
}

// Mount is the Kubernetes VolumeMount referenced by this instance
type KogitoInfraStatusVolumesMountOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesMount)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesMountOutput) ToKogitoInfraStatusVolumesMountOutput() KogitoInfraStatusVolumesMountOutput {
	return o
}

func (o KogitoInfraStatusVolumesMountOutput) ToKogitoInfraStatusVolumesMountOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesMountOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o KogitoInfraStatusVolumesMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o KogitoInfraStatusVolumesMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o KogitoInfraStatusVolumesMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o KogitoInfraStatusVolumesMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o KogitoInfraStatusVolumesMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o KogitoInfraStatusVolumesMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

// NamedVolume describes the pod Volume reference
type KogitoInfraStatusVolumesVolume struct {
	// ConfigMap represents a configMap that should populate this volume
	ConfigMap *KogitoInfraStatusVolumesVolumeConfigMap `pulumi:"configMap"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *KogitoInfraStatusVolumesVolumeSecret `pulumi:"secret"`
}

// KogitoInfraStatusVolumesVolumeInput is an input type that accepts KogitoInfraStatusVolumesVolumeArgs and KogitoInfraStatusVolumesVolumeOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeInput` via:
//
//          KogitoInfraStatusVolumesVolumeArgs{...}
type KogitoInfraStatusVolumesVolumeInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeOutput() KogitoInfraStatusVolumesVolumeOutput
	ToKogitoInfraStatusVolumesVolumeOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeOutput
}

// NamedVolume describes the pod Volume reference
type KogitoInfraStatusVolumesVolumeArgs struct {
	// ConfigMap represents a configMap that should populate this volume
	ConfigMap KogitoInfraStatusVolumesVolumeConfigMapPtrInput `pulumi:"configMap"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret KogitoInfraStatusVolumesVolumeSecretPtrInput `pulumi:"secret"`
}

func (KogitoInfraStatusVolumesVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolume)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeArgs) ToKogitoInfraStatusVolumesVolumeOutput() KogitoInfraStatusVolumesVolumeOutput {
	return i.ToKogitoInfraStatusVolumesVolumeOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeArgs) ToKogitoInfraStatusVolumesVolumeOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeOutput)
}

// NamedVolume describes the pod Volume reference
type KogitoInfraStatusVolumesVolumeOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolume)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeOutput) ToKogitoInfraStatusVolumesVolumeOutput() KogitoInfraStatusVolumesVolumeOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeOutput) ToKogitoInfraStatusVolumesVolumeOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeOutput {
	return o
}

// ConfigMap represents a configMap that should populate this volume
func (o KogitoInfraStatusVolumesVolumeOutput) ConfigMap() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolume) *KogitoInfraStatusVolumesVolumeConfigMap { return v.ConfigMap }).(KogitoInfraStatusVolumesVolumeConfigMapPtrOutput)
}

// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o KogitoInfraStatusVolumesVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolume) string { return v.Name }).(pulumi.StringOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o KogitoInfraStatusVolumesVolumeOutput) Secret() KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolume) *KogitoInfraStatusVolumesVolumeSecret { return v.Secret }).(KogitoInfraStatusVolumesVolumeSecretPtrOutput)
}

// ConfigMap represents a configMap that should populate this volume
type KogitoInfraStatusVolumesVolumeConfigMap struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KogitoInfraStatusVolumesVolumeConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoInfraStatusVolumesVolumeConfigMapInput is an input type that accepts KogitoInfraStatusVolumesVolumeConfigMap and KogitoInfraStatusVolumesVolumeConfigMapOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeConfigMapInput` via:
//
//          KogitoInfraStatusVolumesVolumeConfigMap{ "key": KogitoInfraStatusVolumesVolumeConfigArgs{...} }
type KogitoInfraStatusVolumesVolumeConfigMapInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeConfigMapOutput() KogitoInfraStatusVolumesVolumeConfigMapOutput
	ToKogitoInfraStatusVolumesVolumeConfigMapOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeConfigMapOutput
}

// ConfigMap represents a configMap that should populate this volume
type KogitoInfraStatusVolumesVolumeConfigMapArgs struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KogitoInfraStatusVolumesVolumeConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoInfraStatusVolumesVolumeConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeConfigMap)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeConfigMapArgs) ToKogitoInfraStatusVolumesVolumeConfigMapOutput() KogitoInfraStatusVolumesVolumeConfigMapOutput {
	return i.ToKogitoInfraStatusVolumesVolumeConfigMapOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeConfigMapArgs) ToKogitoInfraStatusVolumesVolumeConfigMapOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeConfigMapOutput)
}

func (i KogitoInfraStatusVolumesVolumeConfigMapArgs) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutput() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return i.ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeConfigMapArgs) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeConfigMapOutput).ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(ctx)
}

// KogitoInfraStatusVolumesVolumeConfigMapPtrInput is an input type that accepts KogitoInfraStatusVolumesVolumeConfigMapArgs, KogitoInfraStatusVolumesVolumeConfigMapPtr and KogitoInfraStatusVolumesVolumeConfigMapPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeConfigMapPtrInput` via:
//
//          KogitoInfraStatusVolumesVolumeConfigMapArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusVolumesVolumeConfigMapPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutput() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput
	ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeConfigMapPtrOutput
}

type kogitoInfraStatusVolumesVolumeConfigMapPtrType KogitoInfraStatusVolumesVolumeConfigMapArgs

func KogitoInfraStatusVolumesVolumeConfigMapPtr(v *KogitoInfraStatusVolumesVolumeConfigMapArgs) KogitoInfraStatusVolumesVolumeConfigMapPtrInput {
	return (*kogitoInfraStatusVolumesVolumeConfigMapPtrType)(v)
}

func (*kogitoInfraStatusVolumesVolumeConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusVolumesVolumeConfigMap)(nil)).Elem()
}

func (i *kogitoInfraStatusVolumesVolumeConfigMapPtrType) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutput() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return i.ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusVolumesVolumeConfigMapPtrType) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeConfigMapPtrOutput)
}

// ConfigMap represents a configMap that should populate this volume
type KogitoInfraStatusVolumesVolumeConfigMapOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeConfigMap)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) ToKogitoInfraStatusVolumesVolumeConfigMapOutput() KogitoInfraStatusVolumesVolumeConfigMapOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) ToKogitoInfraStatusVolumesVolumeConfigMapOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutput() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return o.ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMap) *KogitoInfraStatusVolumesVolumeConfigMap {
		return &v
	}).(KogitoInfraStatusVolumesVolumeConfigMapPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMap) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) Items() KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMap) []KogitoInfraStatusVolumesVolumeConfigMapItems {
		return v.Items
	}).(KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o KogitoInfraStatusVolumesVolumeConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoInfraStatusVolumesVolumeConfigMapPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusVolumesVolumeConfigMap)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutput() KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) ToKogitoInfraStatusVolumesVolumeConfigMapPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapPtrOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) Elem() KogitoInfraStatusVolumesVolumeConfigMapOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeConfigMap) KogitoInfraStatusVolumesVolumeConfigMap { return *v }).(KogitoInfraStatusVolumesVolumeConfigMapOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeConfigMap) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) Items() KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeConfigMap) []KogitoInfraStatusVolumesVolumeConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o KogitoInfraStatusVolumesVolumeConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeConfigMapItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// KogitoInfraStatusVolumesVolumeConfigMapItemsInput is an input type that accepts KogitoInfraStatusVolumesVolumeConfigMapItemsArgs and KogitoInfraStatusVolumesVolumeConfigMapItemsOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeConfigMapItemsInput` via:
//
//          KogitoInfraStatusVolumesVolumeConfigMapItemsArgs{...}
type KogitoInfraStatusVolumesVolumeConfigMapItemsInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsOutput
	ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeConfigMapItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (KogitoInfraStatusVolumesVolumeConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeConfigMapItems)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeConfigMapItemsArgs) ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsOutput {
	return i.ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeConfigMapItemsArgs) ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeConfigMapItemsOutput)
}

// KogitoInfraStatusVolumesVolumeConfigMapItemsArrayInput is an input type that accepts KogitoInfraStatusVolumesVolumeConfigMapItemsArray and KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeConfigMapItemsArrayInput` via:
//
//          KogitoInfraStatusVolumesVolumeConfigMapItemsArray{ KogitoInfraStatusVolumesVolumeConfigMapItemsArgs{...} }
type KogitoInfraStatusVolumesVolumeConfigMapItemsArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput
	ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput
}

type KogitoInfraStatusVolumesVolumeConfigMapItemsArray []KogitoInfraStatusVolumesVolumeConfigMapItemsInput

func (KogitoInfraStatusVolumesVolumeConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumesVolumeConfigMapItems)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeConfigMapItemsArray) ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return i.ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeConfigMapItemsArray) ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeConfigMapItemsOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeConfigMapItems)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) ToKogitoInfraStatusVolumesVolumeConfigMapItemsOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsOutput {
	return o
}

// The key to project.
func (o KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMapItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KogitoInfraStatusVolumesVolumeConfigMapItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeConfigMapItems) string { return v.Path }).(pulumi.StringOutput)
}

type KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumesVolumeConfigMapItems)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput) ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput() KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput) ToKogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusVolumesVolumeConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusVolumesVolumeConfigMapItems {
		return vs[0].([]KogitoInfraStatusVolumesVolumeConfigMapItems)[vs[1].(int)]
	}).(KogitoInfraStatusVolumesVolumeConfigMapItemsOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type KogitoInfraStatusVolumesVolumeSecret struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []KogitoInfraStatusVolumesVolumeSecretItems `pulumi:"items"`
	// Specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// KogitoInfraStatusVolumesVolumeSecretInput is an input type that accepts KogitoInfraStatusVolumesVolumeSecretArgs and KogitoInfraStatusVolumesVolumeSecretOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeSecretInput` via:
//
//          KogitoInfraStatusVolumesVolumeSecretArgs{...}
type KogitoInfraStatusVolumesVolumeSecretInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeSecretOutput() KogitoInfraStatusVolumesVolumeSecretOutput
	ToKogitoInfraStatusVolumesVolumeSecretOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeSecretOutput
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type KogitoInfraStatusVolumesVolumeSecretArgs struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items KogitoInfraStatusVolumesVolumeSecretItemsArrayInput `pulumi:"items"`
	// Specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (KogitoInfraStatusVolumesVolumeSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeSecret)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeSecretArgs) ToKogitoInfraStatusVolumesVolumeSecretOutput() KogitoInfraStatusVolumesVolumeSecretOutput {
	return i.ToKogitoInfraStatusVolumesVolumeSecretOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeSecretArgs) ToKogitoInfraStatusVolumesVolumeSecretOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeSecretOutput)
}

func (i KogitoInfraStatusVolumesVolumeSecretArgs) ToKogitoInfraStatusVolumesVolumeSecretPtrOutput() KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return i.ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeSecretArgs) ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeSecretOutput).ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(ctx)
}

// KogitoInfraStatusVolumesVolumeSecretPtrInput is an input type that accepts KogitoInfraStatusVolumesVolumeSecretArgs, KogitoInfraStatusVolumesVolumeSecretPtr and KogitoInfraStatusVolumesVolumeSecretPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeSecretPtrInput` via:
//
//          KogitoInfraStatusVolumesVolumeSecretArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusVolumesVolumeSecretPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeSecretPtrOutput() KogitoInfraStatusVolumesVolumeSecretPtrOutput
	ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeSecretPtrOutput
}

type kogitoInfraStatusVolumesVolumeSecretPtrType KogitoInfraStatusVolumesVolumeSecretArgs

func KogitoInfraStatusVolumesVolumeSecretPtr(v *KogitoInfraStatusVolumesVolumeSecretArgs) KogitoInfraStatusVolumesVolumeSecretPtrInput {
	return (*kogitoInfraStatusVolumesVolumeSecretPtrType)(v)
}

func (*kogitoInfraStatusVolumesVolumeSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusVolumesVolumeSecret)(nil)).Elem()
}

func (i *kogitoInfraStatusVolumesVolumeSecretPtrType) ToKogitoInfraStatusVolumesVolumeSecretPtrOutput() KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return i.ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusVolumesVolumeSecretPtrType) ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeSecretPtrOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type KogitoInfraStatusVolumesVolumeSecretOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeSecret)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeSecretOutput) ToKogitoInfraStatusVolumesVolumeSecretOutput() KogitoInfraStatusVolumesVolumeSecretOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretOutput) ToKogitoInfraStatusVolumesVolumeSecretOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretOutput) ToKogitoInfraStatusVolumesVolumeSecretPtrOutput() KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return o.ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusVolumesVolumeSecretOutput) ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecret) *KogitoInfraStatusVolumesVolumeSecret {
		return &v
	}).(KogitoInfraStatusVolumesVolumeSecretPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o KogitoInfraStatusVolumesVolumeSecretOutput) Items() KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecret) []KogitoInfraStatusVolumesVolumeSecretItems {
		return v.Items
	}).(KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput)
}

// Specify whether the Secret or its keys must be defined
func (o KogitoInfraStatusVolumesVolumeSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o KogitoInfraStatusVolumesVolumeSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type KogitoInfraStatusVolumesVolumeSecretPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusVolumesVolumeSecret)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) ToKogitoInfraStatusVolumesVolumeSecretPtrOutput() KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) ToKogitoInfraStatusVolumesVolumeSecretPtrOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretPtrOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) Elem() KogitoInfraStatusVolumesVolumeSecretOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeSecret) KogitoInfraStatusVolumesVolumeSecret { return *v }).(KogitoInfraStatusVolumesVolumeSecretOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) Items() KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeSecret) []KogitoInfraStatusVolumesVolumeSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput)
}

// Specify whether the Secret or its keys must be defined
func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o KogitoInfraStatusVolumesVolumeSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusVolumesVolumeSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeSecretItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// KogitoInfraStatusVolumesVolumeSecretItemsInput is an input type that accepts KogitoInfraStatusVolumesVolumeSecretItemsArgs and KogitoInfraStatusVolumesVolumeSecretItemsOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeSecretItemsInput` via:
//
//          KogitoInfraStatusVolumesVolumeSecretItemsArgs{...}
type KogitoInfraStatusVolumesVolumeSecretItemsInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeSecretItemsOutput() KogitoInfraStatusVolumesVolumeSecretItemsOutput
	ToKogitoInfraStatusVolumesVolumeSecretItemsOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeSecretItemsOutput
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeSecretItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (KogitoInfraStatusVolumesVolumeSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeSecretItems)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeSecretItemsArgs) ToKogitoInfraStatusVolumesVolumeSecretItemsOutput() KogitoInfraStatusVolumesVolumeSecretItemsOutput {
	return i.ToKogitoInfraStatusVolumesVolumeSecretItemsOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeSecretItemsArgs) ToKogitoInfraStatusVolumesVolumeSecretItemsOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeSecretItemsOutput)
}

// KogitoInfraStatusVolumesVolumeSecretItemsArrayInput is an input type that accepts KogitoInfraStatusVolumesVolumeSecretItemsArray and KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusVolumesVolumeSecretItemsArrayInput` via:
//
//          KogitoInfraStatusVolumesVolumeSecretItemsArray{ KogitoInfraStatusVolumesVolumeSecretItemsArgs{...} }
type KogitoInfraStatusVolumesVolumeSecretItemsArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutput() KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput
	ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutputWithContext(context.Context) KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput
}

type KogitoInfraStatusVolumesVolumeSecretItemsArray []KogitoInfraStatusVolumesVolumeSecretItemsInput

func (KogitoInfraStatusVolumesVolumeSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumesVolumeSecretItems)(nil)).Elem()
}

func (i KogitoInfraStatusVolumesVolumeSecretItemsArray) ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutput() KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return i.ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusVolumesVolumeSecretItemsArray) ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type KogitoInfraStatusVolumesVolumeSecretItemsOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusVolumesVolumeSecretItems)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeSecretItemsOutput) ToKogitoInfraStatusVolumesVolumeSecretItemsOutput() KogitoInfraStatusVolumesVolumeSecretItemsOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretItemsOutput) ToKogitoInfraStatusVolumesVolumeSecretItemsOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretItemsOutput {
	return o
}

// The key to project.
func (o KogitoInfraStatusVolumesVolumeSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KogitoInfraStatusVolumesVolumeSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KogitoInfraStatusVolumesVolumeSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusVolumesVolumeSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusVolumesVolumeSecretItems)(nil)).Elem()
}

func (o KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput) ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutput() KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput) ToKogitoInfraStatusVolumesVolumeSecretItemsArrayOutputWithContext(ctx context.Context) KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput {
	return o
}

func (o KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusVolumesVolumeSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusVolumesVolumeSecretItems {
		return vs[0].([]KogitoInfraStatusVolumesVolumeSecretItems)[vs[1].(int)]
	}).(KogitoInfraStatusVolumesVolumeSecretItemsOutput)
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
	Spec *KogitoRuntimeSpec `pulumi:"spec"`
	// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
	Status *KogitoRuntimeStatus `pulumi:"status"`
}

// KogitoRuntimeTypeInput is an input type that accepts KogitoRuntimeTypeArgs and KogitoRuntimeTypeOutput values.
// You can construct a concrete instance of `KogitoRuntimeTypeInput` via:
//
//          KogitoRuntimeTypeArgs{...}
type KogitoRuntimeTypeInput interface {
	pulumi.Input

	ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput
	ToKogitoRuntimeTypeOutputWithContext(context.Context) KogitoRuntimeTypeOutput
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
	Spec KogitoRuntimeSpecPtrInput `pulumi:"spec"`
	// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
	Status KogitoRuntimeStatusPtrInput `pulumi:"status"`
}

func (KogitoRuntimeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeType)(nil)).Elem()
}

func (i KogitoRuntimeTypeArgs) ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput {
	return i.ToKogitoRuntimeTypeOutputWithContext(context.Background())
}

func (i KogitoRuntimeTypeArgs) ToKogitoRuntimeTypeOutputWithContext(ctx context.Context) KogitoRuntimeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeTypeOutput)
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeTypeOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeType)(nil)).Elem()
}

func (o KogitoRuntimeTypeOutput) ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput {
	return o
}

func (o KogitoRuntimeTypeOutput) ToKogitoRuntimeTypeOutputWithContext(ctx context.Context) KogitoRuntimeTypeOutput {
	return o
}

func (o KogitoRuntimeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
func (o KogitoRuntimeTypeOutput) Spec() KogitoRuntimeSpecPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *KogitoRuntimeSpec { return v.Spec }).(KogitoRuntimeSpecPtrOutput)
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
func (o KogitoRuntimeTypeOutput) Status() KogitoRuntimeStatusPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *KogitoRuntimeStatus { return v.Status }).(KogitoRuntimeStatusPtrOutput)
}

type KogitoRuntimeMetadata struct {
}

// KogitoRuntimeMetadataInput is an input type that accepts KogitoRuntimeMetadataArgs and KogitoRuntimeMetadataOutput values.
// You can construct a concrete instance of `KogitoRuntimeMetadataInput` via:
//
//          KogitoRuntimeMetadataArgs{...}
type KogitoRuntimeMetadataInput interface {
	pulumi.Input

	ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput
	ToKogitoRuntimeMetadataOutputWithContext(context.Context) KogitoRuntimeMetadataOutput
}

type KogitoRuntimeMetadataArgs struct {
}

func (KogitoRuntimeMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeMetadata)(nil)).Elem()
}

func (i KogitoRuntimeMetadataArgs) ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput {
	return i.ToKogitoRuntimeMetadataOutputWithContext(context.Background())
}

func (i KogitoRuntimeMetadataArgs) ToKogitoRuntimeMetadataOutputWithContext(ctx context.Context) KogitoRuntimeMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeMetadataOutput)
}

type KogitoRuntimeMetadataOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeMetadata)(nil)).Elem()
}

func (o KogitoRuntimeMetadataOutput) ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput {
	return o
}

func (o KogitoRuntimeMetadataOutput) ToKogitoRuntimeMetadataOutputWithContext(ctx context.Context) KogitoRuntimeMetadataOutput {
	return o
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpec struct {
	// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
	Config map[string]string `pulumi:"config"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
	EnableIstio *bool `pulumi:"enableIstio"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Env []KogitoRuntimeSpecEnv `pulumi:"env"`
	// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *string `pulumi:"image"`
	// Infra provides list of dependent KogitoInfra objects.
	Infra []string `pulumi:"infra"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Create Service monitor instance to connect with Monitoring service
	Monitoring *KogitoRuntimeSpecMonitoring `pulumi:"monitoring"`
	// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
	PropertiesConfigMap *string `pulumi:"propertiesConfigMap"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoRuntimeSpecResources `pulumi:"resources"`
	// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
	Runtime *string `pulumi:"runtime"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoRuntimeSpecInput is an input type that accepts KogitoRuntimeSpecArgs and KogitoRuntimeSpecOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInput` via:
//
//          KogitoRuntimeSpecArgs{...}
type KogitoRuntimeSpecInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput
	ToKogitoRuntimeSpecOutputWithContext(context.Context) KogitoRuntimeSpecOutput
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpecArgs struct {
	// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
	EnableIstio pulumi.BoolPtrInput `pulumi:"enableIstio"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Env KogitoRuntimeSpecEnvArrayInput `pulumi:"env"`
	// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Infra provides list of dependent KogitoInfra objects.
	Infra pulumi.StringArrayInput `pulumi:"infra"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Create Service monitor instance to connect with Monitoring service
	Monitoring KogitoRuntimeSpecMonitoringPtrInput `pulumi:"monitoring"`
	// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
	PropertiesConfigMap pulumi.StringPtrInput `pulumi:"propertiesConfigMap"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoRuntimeSpecResourcesPtrInput `pulumi:"resources"`
	// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoRuntimeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpec)(nil)).Elem()
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput {
	return i.ToKogitoRuntimeSpecOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecOutputWithContext(ctx context.Context) KogitoRuntimeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecOutput)
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return i.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecOutput).ToKogitoRuntimeSpecPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecPtrInput is an input type that accepts KogitoRuntimeSpecArgs, KogitoRuntimeSpecPtr and KogitoRuntimeSpecPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecPtrInput` via:
//
//          KogitoRuntimeSpecArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput
	ToKogitoRuntimeSpecPtrOutputWithContext(context.Context) KogitoRuntimeSpecPtrOutput
}

type kogitoRuntimeSpecPtrType KogitoRuntimeSpecArgs

func KogitoRuntimeSpecPtr(v *KogitoRuntimeSpecArgs) KogitoRuntimeSpecPtrInput {
	return (*kogitoRuntimeSpecPtrType)(v)
}

func (*kogitoRuntimeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpec)(nil)).Elem()
}

func (i *kogitoRuntimeSpecPtrType) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return i.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecPtrType) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecPtrOutput)
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpecOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpec)(nil)).Elem()
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput {
	return o
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecOutputWithContext(ctx context.Context) KogitoRuntimeSpecOutput {
	return o
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return o.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpec {
		return &v
	}).(KogitoRuntimeSpecPtrOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
func (o KogitoRuntimeSpecOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoRuntimeSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
func (o KogitoRuntimeSpecOutput) EnableIstio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *bool { return v.EnableIstio }).(pulumi.BoolPtrOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecOutput) Env() KogitoRuntimeSpecEnvArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) []KogitoRuntimeSpecEnv { return v.Env }).(KogitoRuntimeSpecEnvArrayOutput)
}

// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoRuntimeSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Infra provides list of dependent KogitoInfra objects.
func (o KogitoRuntimeSpecOutput) Infra() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) []string { return v.Infra }).(pulumi.StringArrayOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoRuntimeSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
func (o KogitoRuntimeSpecOutput) Monitoring() KogitoRuntimeSpecMonitoringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecMonitoring { return v.Monitoring }).(KogitoRuntimeSpecMonitoringPtrOutput)
}

// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
func (o KogitoRuntimeSpecOutput) PropertiesConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *string { return v.PropertiesConfigMap }).(pulumi.StringPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoRuntimeSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoRuntimeSpecOutput) Resources() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecResources { return v.Resources }).(KogitoRuntimeSpecResourcesPtrOutput)
}

// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
func (o KogitoRuntimeSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoRuntimeSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoRuntimeSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpec)(nil)).Elem()
}

func (o KogitoRuntimeSpecPtrOutput) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return o
}

func (o KogitoRuntimeSpecPtrOutput) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return o
}

func (o KogitoRuntimeSpecPtrOutput) Elem() KogitoRuntimeSpecOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) KogitoRuntimeSpec { return *v }).(KogitoRuntimeSpecOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
func (o KogitoRuntimeSpecPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoRuntimeSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
func (o KogitoRuntimeSpecPtrOutput) EnableIstio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIstio
	}).(pulumi.BoolPtrOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecPtrOutput) Env() KogitoRuntimeSpecEnvArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) []KogitoRuntimeSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(KogitoRuntimeSpecEnvArrayOutput)
}

// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoRuntimeSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Infra provides list of dependent KogitoInfra objects.
func (o KogitoRuntimeSpecPtrOutput) Infra() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) []string {
		if v == nil {
			return nil
		}
		return v.Infra
	}).(pulumi.StringArrayOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoRuntimeSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
func (o KogitoRuntimeSpecPtrOutput) Monitoring() KogitoRuntimeSpecMonitoringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(KogitoRuntimeSpecMonitoringPtrOutput)
}

// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
func (o KogitoRuntimeSpecPtrOutput) PropertiesConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *string {
		if v == nil {
			return nil
		}
		return v.PropertiesConfigMap
	}).(pulumi.StringPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoRuntimeSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoRuntimeSpecPtrOutput) Resources() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoRuntimeSpecResourcesPtrOutput)
}

// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
func (o KogitoRuntimeSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoRuntimeSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoRuntimeSpecConfig struct {
}

// KogitoRuntimeSpecConfigInput is an input type that accepts KogitoRuntimeSpecConfigArgs and KogitoRuntimeSpecConfigOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecConfigInput` via:
//
//          KogitoRuntimeSpecConfigArgs{...}
type KogitoRuntimeSpecConfigInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecConfigOutput() KogitoRuntimeSpecConfigOutput
	ToKogitoRuntimeSpecConfigOutputWithContext(context.Context) KogitoRuntimeSpecConfigOutput
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoRuntimeSpecConfigArgs struct {
}

func (KogitoRuntimeSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecConfig)(nil)).Elem()
}

func (i KogitoRuntimeSpecConfigArgs) ToKogitoRuntimeSpecConfigOutput() KogitoRuntimeSpecConfigOutput {
	return i.ToKogitoRuntimeSpecConfigOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecConfigArgs) ToKogitoRuntimeSpecConfigOutputWithContext(ctx context.Context) KogitoRuntimeSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecConfigOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoRuntimeSpecConfigOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecConfig)(nil)).Elem()
}

func (o KogitoRuntimeSpecConfigOutput) ToKogitoRuntimeSpecConfigOutput() KogitoRuntimeSpecConfigOutput {
	return o
}

func (o KogitoRuntimeSpecConfigOutput) ToKogitoRuntimeSpecConfigOutputWithContext(ctx context.Context) KogitoRuntimeSpecConfigOutput {
	return o
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabels struct {
}

// KogitoRuntimeSpecDeploymentLabelsInput is an input type that accepts KogitoRuntimeSpecDeploymentLabelsArgs and KogitoRuntimeSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecDeploymentLabelsInput` via:
//
//          KogitoRuntimeSpecDeploymentLabelsArgs{...}
type KogitoRuntimeSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput
	ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(context.Context) KogitoRuntimeSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabelsArgs struct {
}

func (KogitoRuntimeSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoRuntimeSpecDeploymentLabelsArgs) ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput {
	return i.ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecDeploymentLabelsArgs) ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoRuntimeSpecDeploymentLabelsOutput) ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoRuntimeSpecDeploymentLabelsOutput) ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoRuntimeSpecEnvValueFrom `pulumi:"valueFrom"`
}

// KogitoRuntimeSpecEnvInput is an input type that accepts KogitoRuntimeSpecEnvArgs and KogitoRuntimeSpecEnvOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvInput` via:
//
//          KogitoRuntimeSpecEnvArgs{...}
type KogitoRuntimeSpecEnvInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvOutput() KogitoRuntimeSpecEnvOutput
	ToKogitoRuntimeSpecEnvOutputWithContext(context.Context) KogitoRuntimeSpecEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoRuntimeSpecEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoRuntimeSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnv)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvArgs) ToKogitoRuntimeSpecEnvOutput() KogitoRuntimeSpecEnvOutput {
	return i.ToKogitoRuntimeSpecEnvOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvArgs) ToKogitoRuntimeSpecEnvOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvOutput)
}

// KogitoRuntimeSpecEnvArrayInput is an input type that accepts KogitoRuntimeSpecEnvArray and KogitoRuntimeSpecEnvArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvArrayInput` via:
//
//          KogitoRuntimeSpecEnvArray{ KogitoRuntimeSpecEnvArgs{...} }
type KogitoRuntimeSpecEnvArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvArrayOutput() KogitoRuntimeSpecEnvArrayOutput
	ToKogitoRuntimeSpecEnvArrayOutputWithContext(context.Context) KogitoRuntimeSpecEnvArrayOutput
}

type KogitoRuntimeSpecEnvArray []KogitoRuntimeSpecEnvInput

func (KogitoRuntimeSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeSpecEnv)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvArray) ToKogitoRuntimeSpecEnvArrayOutput() KogitoRuntimeSpecEnvArrayOutput {
	return i.ToKogitoRuntimeSpecEnvArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvArray) ToKogitoRuntimeSpecEnvArrayOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnvOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnv)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvOutput) ToKogitoRuntimeSpecEnvOutput() KogitoRuntimeSpecEnvOutput {
	return o
}

func (o KogitoRuntimeSpecEnvOutput) ToKogitoRuntimeSpecEnvOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoRuntimeSpecEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoRuntimeSpecEnvOutput) ValueFrom() KogitoRuntimeSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnv) *KogitoRuntimeSpecEnvValueFrom { return v.ValueFrom }).(KogitoRuntimeSpecEnvValueFromPtrOutput)
}

type KogitoRuntimeSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeSpecEnv)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvArrayOutput) ToKogitoRuntimeSpecEnvArrayOutput() KogitoRuntimeSpecEnvArrayOutput {
	return o
}

func (o KogitoRuntimeSpecEnvArrayOutput) ToKogitoRuntimeSpecEnvArrayOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvArrayOutput {
	return o
}

func (o KogitoRuntimeSpecEnvArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeSpecEnv {
		return vs[0].([]KogitoRuntimeSpecEnv)[vs[1].(int)]
	}).(KogitoRuntimeSpecEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoRuntimeSpecEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoRuntimeSpecEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoRuntimeSpecEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoRuntimeSpecEnvValueFromInput is an input type that accepts KogitoRuntimeSpecEnvValueFromArgs and KogitoRuntimeSpecEnvValueFromOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromInput` via:
//
//          KogitoRuntimeSpecEnvValueFromArgs{...}
type KogitoRuntimeSpecEnvValueFromInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromOutput() KogitoRuntimeSpecEnvValueFromOutput
	ToKogitoRuntimeSpecEnvValueFromOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoRuntimeSpecEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoRuntimeSpecEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFrom)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromArgs) ToKogitoRuntimeSpecEnvValueFromOutput() KogitoRuntimeSpecEnvValueFromOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromArgs) ToKogitoRuntimeSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromOutput)
}

func (i KogitoRuntimeSpecEnvValueFromArgs) ToKogitoRuntimeSpecEnvValueFromPtrOutput() KogitoRuntimeSpecEnvValueFromPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromArgs) ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromOutput).ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromArgs, KogitoRuntimeSpecEnvValueFromPtr and KogitoRuntimeSpecEnvValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromPtrOutput() KogitoRuntimeSpecEnvValueFromPtrOutput
	ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromPtrOutput
}

type kogitoRuntimeSpecEnvValueFromPtrType KogitoRuntimeSpecEnvValueFromArgs

func KogitoRuntimeSpecEnvValueFromPtr(v *KogitoRuntimeSpecEnvValueFromArgs) KogitoRuntimeSpecEnvValueFromPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFrom)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromPtrType) ToKogitoRuntimeSpecEnvValueFromPtrOutput() KogitoRuntimeSpecEnvValueFromPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromPtrType) ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvValueFromOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromOutput) ToKogitoRuntimeSpecEnvValueFromOutput() KogitoRuntimeSpecEnvValueFromOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromOutput) ToKogitoRuntimeSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromOutput) ToKogitoRuntimeSpecEnvValueFromPtrOutput() KogitoRuntimeSpecEnvValueFromPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromOutput) ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFrom {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoRuntimeSpecEnvValueFromOutput) ConfigMapKeyRef() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoRuntimeSpecEnvValueFromOutput) FieldRef() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromFieldRef { return v.FieldRef }).(KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoRuntimeSpecEnvValueFromOutput) ResourceFieldRef() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoRuntimeSpecEnvValueFromOutput) SecretKeyRef() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromPtrOutput) ToKogitoRuntimeSpecEnvValueFromPtrOutput() KogitoRuntimeSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromPtrOutput) ToKogitoRuntimeSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFrom) KogitoRuntimeSpecEnvValueFrom { return *v }).(KogitoRuntimeSpecEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoRuntimeSpecEnvValueFromPtrOutput) ConfigMapKeyRef() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoRuntimeSpecEnvValueFromPtrOutput) FieldRef() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoRuntimeSpecEnvValueFromPtrOutput) ResourceFieldRef() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoRuntimeSpecEnvValueFromPtrOutput) SecretKeyRef() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFrom) *KogitoRuntimeSpecEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoRuntimeSpecEnvValueFromConfigMapKeyRefInput is an input type that accepts KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs and KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromConfigMapKeyRefInput` via:
//
//          KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs{...}
type KogitoRuntimeSpecEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput
	ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput)
}

func (i KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput).ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs, KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtr and KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput
	ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput
}

type kogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrType KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs

func KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtr(v *KogitoRuntimeSpecEnvValueFromConfigMapKeyRefArgs) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) KogitoRuntimeSpecEnvValueFromConfigMapKeyRef {
		return *v
	}).(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoRuntimeSpecEnvValueFromFieldRefInput is an input type that accepts KogitoRuntimeSpecEnvValueFromFieldRefArgs and KogitoRuntimeSpecEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromFieldRefInput` via:
//
//          KogitoRuntimeSpecEnvValueFromFieldRefArgs{...}
type KogitoRuntimeSpecEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromFieldRefOutput() KogitoRuntimeSpecEnvValueFromFieldRefOutput
	ToKogitoRuntimeSpecEnvValueFromFieldRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoRuntimeSpecEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromFieldRefOutput() KogitoRuntimeSpecEnvValueFromFieldRefOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromFieldRefOutput)
}

func (i KogitoRuntimeSpecEnvValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromFieldRefOutput).ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromFieldRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromFieldRefArgs, KogitoRuntimeSpecEnvValueFromFieldRefPtr and KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromFieldRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput
	ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput
}

type kogitoRuntimeSpecEnvValueFromFieldRefPtrType KogitoRuntimeSpecEnvValueFromFieldRefArgs

func KogitoRuntimeSpecEnvValueFromFieldRefPtr(v *KogitoRuntimeSpecEnvValueFromFieldRefArgs) KogitoRuntimeSpecEnvValueFromFieldRefPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromFieldRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromFieldRefPtrType) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromFieldRefPtrType) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefOutput() KogitoRuntimeSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromFieldRef) *KogitoRuntimeSpecEnvValueFromFieldRef {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoRuntimeSpecEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromFieldRef) KogitoRuntimeSpecEnvValueFromFieldRef { return *v }).(KogitoRuntimeSpecEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoRuntimeSpecEnvValueFromResourceFieldRefInput is an input type that accepts KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs and KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromResourceFieldRefInput` via:
//
//          KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs{...}
type KogitoRuntimeSpecEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput
	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput)
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput).ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs, KogitoRuntimeSpecEnvValueFromResourceFieldRefPtr and KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput
	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput
}

type kogitoRuntimeSpecEnvValueFromResourceFieldRefPtrType KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs

func KogitoRuntimeSpecEnvValueFromResourceFieldRefPtr(v *KogitoRuntimeSpecEnvValueFromResourceFieldRefArgs) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromResourceFieldRefPtrType) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromResourceFieldRefPtrType) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromResourceFieldRef) *KogitoRuntimeSpecEnvValueFromResourceFieldRef {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) Divisor() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromResourceFieldRef) *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromResourceFieldRef) KogitoRuntimeSpecEnvValueFromResourceFieldRef {
		return *v
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) Divisor() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromResourceFieldRef) *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor struct {
}

// KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs and KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs{...}
type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput
	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput
}

type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput).ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs, KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtr and KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrType KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs

func KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtr(v *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorArgs) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor) *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor) KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoRuntimeSpecEnvValueFromSecretKeyRefInput is an input type that accepts KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs and KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromSecretKeyRefInput` via:
//
//          KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs{...}
type KogitoRuntimeSpecEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput
	ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput)
}

func (i KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput).ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs, KogitoRuntimeSpecEnvValueFromSecretKeyRefPtr and KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput
	ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput
}

type kogitoRuntimeSpecEnvValueFromSecretKeyRefPtrType KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs

func KogitoRuntimeSpecEnvValueFromSecretKeyRefPtr(v *KogitoRuntimeSpecEnvValueFromSecretKeyRefArgs) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrInput {
	return (*kogitoRuntimeSpecEnvValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvValueFromSecretKeyRefPtrType) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvValueFromSecretKeyRefPtrType) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromSecretKeyRef) *KogitoRuntimeSpecEnvValueFromSecretKeyRef {
		return &v
	}).(KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) Elem() KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromSecretKeyRef) KogitoRuntimeSpecEnvValueFromSecretKeyRef {
		return *v
	}).(KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
type KogitoRuntimeSpecMonitoring struct {
	// HTTP path to scrape for metrics.
	Path *string `pulumi:"path"`
	// HTTP scheme to use for scraping.
	Scheme *string `pulumi:"scheme"`
}

// KogitoRuntimeSpecMonitoringInput is an input type that accepts KogitoRuntimeSpecMonitoringArgs and KogitoRuntimeSpecMonitoringOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecMonitoringInput` via:
//
//          KogitoRuntimeSpecMonitoringArgs{...}
type KogitoRuntimeSpecMonitoringInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecMonitoringOutput() KogitoRuntimeSpecMonitoringOutput
	ToKogitoRuntimeSpecMonitoringOutputWithContext(context.Context) KogitoRuntimeSpecMonitoringOutput
}

// Create Service monitor instance to connect with Monitoring service
type KogitoRuntimeSpecMonitoringArgs struct {
	// HTTP path to scrape for metrics.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// HTTP scheme to use for scraping.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (KogitoRuntimeSpecMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecMonitoring)(nil)).Elem()
}

func (i KogitoRuntimeSpecMonitoringArgs) ToKogitoRuntimeSpecMonitoringOutput() KogitoRuntimeSpecMonitoringOutput {
	return i.ToKogitoRuntimeSpecMonitoringOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecMonitoringArgs) ToKogitoRuntimeSpecMonitoringOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecMonitoringOutput)
}

func (i KogitoRuntimeSpecMonitoringArgs) ToKogitoRuntimeSpecMonitoringPtrOutput() KogitoRuntimeSpecMonitoringPtrOutput {
	return i.ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecMonitoringArgs) ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecMonitoringOutput).ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecMonitoringPtrInput is an input type that accepts KogitoRuntimeSpecMonitoringArgs, KogitoRuntimeSpecMonitoringPtr and KogitoRuntimeSpecMonitoringPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecMonitoringPtrInput` via:
//
//          KogitoRuntimeSpecMonitoringArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecMonitoringPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecMonitoringPtrOutput() KogitoRuntimeSpecMonitoringPtrOutput
	ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(context.Context) KogitoRuntimeSpecMonitoringPtrOutput
}

type kogitoRuntimeSpecMonitoringPtrType KogitoRuntimeSpecMonitoringArgs

func KogitoRuntimeSpecMonitoringPtr(v *KogitoRuntimeSpecMonitoringArgs) KogitoRuntimeSpecMonitoringPtrInput {
	return (*kogitoRuntimeSpecMonitoringPtrType)(v)
}

func (*kogitoRuntimeSpecMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecMonitoring)(nil)).Elem()
}

func (i *kogitoRuntimeSpecMonitoringPtrType) ToKogitoRuntimeSpecMonitoringPtrOutput() KogitoRuntimeSpecMonitoringPtrOutput {
	return i.ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecMonitoringPtrType) ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecMonitoringPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
type KogitoRuntimeSpecMonitoringOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecMonitoring)(nil)).Elem()
}

func (o KogitoRuntimeSpecMonitoringOutput) ToKogitoRuntimeSpecMonitoringOutput() KogitoRuntimeSpecMonitoringOutput {
	return o
}

func (o KogitoRuntimeSpecMonitoringOutput) ToKogitoRuntimeSpecMonitoringOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringOutput {
	return o
}

func (o KogitoRuntimeSpecMonitoringOutput) ToKogitoRuntimeSpecMonitoringPtrOutput() KogitoRuntimeSpecMonitoringPtrOutput {
	return o.ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecMonitoringOutput) ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecMonitoring) *KogitoRuntimeSpecMonitoring {
		return &v
	}).(KogitoRuntimeSpecMonitoringPtrOutput)
}

// HTTP path to scrape for metrics.
func (o KogitoRuntimeSpecMonitoringOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecMonitoring) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// HTTP scheme to use for scraping.
func (o KogitoRuntimeSpecMonitoringOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecMonitoring) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type KogitoRuntimeSpecMonitoringPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecMonitoring)(nil)).Elem()
}

func (o KogitoRuntimeSpecMonitoringPtrOutput) ToKogitoRuntimeSpecMonitoringPtrOutput() KogitoRuntimeSpecMonitoringPtrOutput {
	return o
}

func (o KogitoRuntimeSpecMonitoringPtrOutput) ToKogitoRuntimeSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecMonitoringPtrOutput {
	return o
}

func (o KogitoRuntimeSpecMonitoringPtrOutput) Elem() KogitoRuntimeSpecMonitoringOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecMonitoring) KogitoRuntimeSpecMonitoring { return *v }).(KogitoRuntimeSpecMonitoringOutput)
}

// HTTP path to scrape for metrics.
func (o KogitoRuntimeSpecMonitoringPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecMonitoring) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// HTTP scheme to use for scraping.
func (o KogitoRuntimeSpecMonitoringPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecMonitoring) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoRuntimeSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoRuntimeSpecResourcesRequests `pulumi:"requests"`
}

// KogitoRuntimeSpecResourcesInput is an input type that accepts KogitoRuntimeSpecResourcesArgs and KogitoRuntimeSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesInput` via:
//
//          KogitoRuntimeSpecResourcesArgs{...}
type KogitoRuntimeSpecResourcesInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput
	ToKogitoRuntimeSpecResourcesOutputWithContext(context.Context) KogitoRuntimeSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoRuntimeSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoRuntimeSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoRuntimeSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResources)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput {
	return i.ToKogitoRuntimeSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesOutput)
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return i.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesOutput).ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecResourcesPtrInput is an input type that accepts KogitoRuntimeSpecResourcesArgs, KogitoRuntimeSpecResourcesPtr and KogitoRuntimeSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesPtrInput` via:
//
//          KogitoRuntimeSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput
	ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Context) KogitoRuntimeSpecResourcesPtrOutput
}

type kogitoRuntimeSpecResourcesPtrType KogitoRuntimeSpecResourcesArgs

func KogitoRuntimeSpecResourcesPtr(v *KogitoRuntimeSpecResourcesArgs) KogitoRuntimeSpecResourcesPtrInput {
	return (*kogitoRuntimeSpecResourcesPtrType)(v)
}

func (*kogitoRuntimeSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecResources)(nil)).Elem()
}

func (i *kogitoRuntimeSpecResourcesPtrType) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return i.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecResourcesPtrType) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResources)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) *KogitoRuntimeSpecResources {
		return &v
	}).(KogitoRuntimeSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesOutput) Limits() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesLimits { return v.Limits }).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesOutput) Requests() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesRequests { return v.Requests }).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecResources)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesPtrOutput) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesPtrOutput) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesPtrOutput) Elem() KogitoRuntimeSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) KogitoRuntimeSpecResources { return *v }).(KogitoRuntimeSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesPtrOutput) Limits() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesPtrOutput) Requests() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesLimits struct {
}

// KogitoRuntimeSpecResourcesLimitsInput is an input type that accepts KogitoRuntimeSpecResourcesLimitsArgs and KogitoRuntimeSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesLimitsInput` via:
//
//          KogitoRuntimeSpecResourcesLimitsArgs{...}
type KogitoRuntimeSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput
	ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(context.Context) KogitoRuntimeSpecResourcesLimitsOutput
}

type KogitoRuntimeSpecResourcesLimitsArgs struct {
}

func (KogitoRuntimeSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesLimitsArgs) ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput {
	return i.ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesLimitsArgs) ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesLimitsOutput)
}

// KogitoRuntimeSpecResourcesLimitsMapInput is an input type that accepts KogitoRuntimeSpecResourcesLimitsMap and KogitoRuntimeSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesLimitsMapInput` via:
//
//          KogitoRuntimeSpecResourcesLimitsMap{ "key": KogitoRuntimeSpecResourcesLimitsArgs{...} }
type KogitoRuntimeSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput
	ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput
}

type KogitoRuntimeSpecResourcesLimitsMap map[string]KogitoRuntimeSpecResourcesLimitsInput

func (KogitoRuntimeSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesLimitsMap) ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return i.ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesLimitsMap) ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

type KogitoRuntimeSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesLimitsOutput) ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsOutput) ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsOutput {
	return o
}

type KogitoRuntimeSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoRuntimeSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoRuntimeSpecResourcesLimits {
		return vs[0].(map[string]KogitoRuntimeSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoRuntimeSpecResourcesLimitsOutput)
}

type KogitoRuntimeSpecResourcesRequests struct {
}

// KogitoRuntimeSpecResourcesRequestsInput is an input type that accepts KogitoRuntimeSpecResourcesRequestsArgs and KogitoRuntimeSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesRequestsInput` via:
//
//          KogitoRuntimeSpecResourcesRequestsArgs{...}
type KogitoRuntimeSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput
	ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(context.Context) KogitoRuntimeSpecResourcesRequestsOutput
}

type KogitoRuntimeSpecResourcesRequestsArgs struct {
}

func (KogitoRuntimeSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesRequestsArgs) ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput {
	return i.ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesRequestsArgs) ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesRequestsOutput)
}

// KogitoRuntimeSpecResourcesRequestsMapInput is an input type that accepts KogitoRuntimeSpecResourcesRequestsMap and KogitoRuntimeSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesRequestsMapInput` via:
//
//          KogitoRuntimeSpecResourcesRequestsMap{ "key": KogitoRuntimeSpecResourcesRequestsArgs{...} }
type KogitoRuntimeSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput
	ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput
}

type KogitoRuntimeSpecResourcesRequestsMap map[string]KogitoRuntimeSpecResourcesRequestsInput

func (KogitoRuntimeSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesRequestsMap) ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return i.ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesRequestsMap) ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesRequestsOutput) ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsOutput) ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsOutput {
	return o
}

type KogitoRuntimeSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoRuntimeSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoRuntimeSpecResourcesRequests {
		return vs[0].(map[string]KogitoRuntimeSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoRuntimeSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabels struct {
}

// KogitoRuntimeSpecServiceLabelsInput is an input type that accepts KogitoRuntimeSpecServiceLabelsArgs and KogitoRuntimeSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecServiceLabelsInput` via:
//
//          KogitoRuntimeSpecServiceLabelsArgs{...}
type KogitoRuntimeSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput
	ToKogitoRuntimeSpecServiceLabelsOutputWithContext(context.Context) KogitoRuntimeSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabelsArgs struct {
}

func (KogitoRuntimeSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecServiceLabels)(nil)).Elem()
}

func (i KogitoRuntimeSpecServiceLabelsArgs) ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput {
	return i.ToKogitoRuntimeSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecServiceLabelsArgs) ToKogitoRuntimeSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecServiceLabels)(nil)).Elem()
}

func (o KogitoRuntimeSpecServiceLabelsOutput) ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput {
	return o
}

func (o KogitoRuntimeSpecServiceLabelsOutput) ToKogitoRuntimeSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecServiceLabelsOutput {
	return o
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatus struct {
	// Describes the CloudEvents that this instance can consume or produce
	CloudEvents *KogitoRuntimeStatusCloudEvents `pulumi:"cloudEvents"`
	// History of conditions for the resource
	Conditions []KogitoRuntimeStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoRuntimeStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoRuntimeStatusInput is an input type that accepts KogitoRuntimeStatusArgs and KogitoRuntimeStatusOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusInput` via:
//
//          KogitoRuntimeStatusArgs{...}
type KogitoRuntimeStatusInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput
	ToKogitoRuntimeStatusOutputWithContext(context.Context) KogitoRuntimeStatusOutput
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatusArgs struct {
	// Describes the CloudEvents that this instance can consume or produce
	CloudEvents KogitoRuntimeStatusCloudEventsPtrInput `pulumi:"cloudEvents"`
	// History of conditions for the resource
	Conditions KogitoRuntimeStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoRuntimeStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoRuntimeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatus)(nil)).Elem()
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput {
	return i.ToKogitoRuntimeStatusOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusOutputWithContext(ctx context.Context) KogitoRuntimeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusOutput)
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return i.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusOutput).ToKogitoRuntimeStatusPtrOutputWithContext(ctx)
}

// KogitoRuntimeStatusPtrInput is an input type that accepts KogitoRuntimeStatusArgs, KogitoRuntimeStatusPtr and KogitoRuntimeStatusPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusPtrInput` via:
//
//          KogitoRuntimeStatusArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeStatusPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput
	ToKogitoRuntimeStatusPtrOutputWithContext(context.Context) KogitoRuntimeStatusPtrOutput
}

type kogitoRuntimeStatusPtrType KogitoRuntimeStatusArgs

func KogitoRuntimeStatusPtr(v *KogitoRuntimeStatusArgs) KogitoRuntimeStatusPtrInput {
	return (*kogitoRuntimeStatusPtrType)(v)
}

func (*kogitoRuntimeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatus)(nil)).Elem()
}

func (i *kogitoRuntimeStatusPtrType) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return i.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeStatusPtrType) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusPtrOutput)
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatusOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatus)(nil)).Elem()
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput {
	return o
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusOutputWithContext(ctx context.Context) KogitoRuntimeStatusOutput {
	return o
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return o.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *KogitoRuntimeStatus {
		return &v
	}).(KogitoRuntimeStatusPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
func (o KogitoRuntimeStatusOutput) CloudEvents() KogitoRuntimeStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *KogitoRuntimeStatusCloudEvents { return v.CloudEvents }).(KogitoRuntimeStatusCloudEventsPtrOutput)
}

// History of conditions for the resource
func (o KogitoRuntimeStatusOutput) Conditions() KogitoRuntimeStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) []KogitoRuntimeStatusConditions { return v.Conditions }).(KogitoRuntimeStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoRuntimeStatusOutput) DeploymentConditions() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) []KogitoRuntimeStatusDeploymentConditions { return v.DeploymentConditions }).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoRuntimeStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoRuntimeStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoRuntimeStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatus)(nil)).Elem()
}

func (o KogitoRuntimeStatusPtrOutput) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return o
}

func (o KogitoRuntimeStatusPtrOutput) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return o
}

func (o KogitoRuntimeStatusPtrOutput) Elem() KogitoRuntimeStatusOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) KogitoRuntimeStatus { return *v }).(KogitoRuntimeStatusOutput)
}

// Describes the CloudEvents that this instance can consume or produce
func (o KogitoRuntimeStatusPtrOutput) CloudEvents() KogitoRuntimeStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) *KogitoRuntimeStatusCloudEvents {
		if v == nil {
			return nil
		}
		return v.CloudEvents
	}).(KogitoRuntimeStatusCloudEventsPtrOutput)
}

// History of conditions for the resource
func (o KogitoRuntimeStatusPtrOutput) Conditions() KogitoRuntimeStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) []KogitoRuntimeStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoRuntimeStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoRuntimeStatusPtrOutput) DeploymentConditions() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) []KogitoRuntimeStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoRuntimeStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoRuntimeStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoRuntimeStatusCloudEvents struct {
	Consumes []KogitoRuntimeStatusCloudEventsConsumes `pulumi:"consumes"`
	Produces []KogitoRuntimeStatusCloudEventsProduces `pulumi:"produces"`
}

// KogitoRuntimeStatusCloudEventsInput is an input type that accepts KogitoRuntimeStatusCloudEventsArgs and KogitoRuntimeStatusCloudEventsOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsInput` via:
//
//          KogitoRuntimeStatusCloudEventsArgs{...}
type KogitoRuntimeStatusCloudEventsInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsOutput() KogitoRuntimeStatusCloudEventsOutput
	ToKogitoRuntimeStatusCloudEventsOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsOutput
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoRuntimeStatusCloudEventsArgs struct {
	Consumes KogitoRuntimeStatusCloudEventsConsumesArrayInput `pulumi:"consumes"`
	Produces KogitoRuntimeStatusCloudEventsProducesArrayInput `pulumi:"produces"`
}

func (KogitoRuntimeStatusCloudEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEvents)(nil)).Elem()
}

func (i KogitoRuntimeStatusCloudEventsArgs) ToKogitoRuntimeStatusCloudEventsOutput() KogitoRuntimeStatusCloudEventsOutput {
	return i.ToKogitoRuntimeStatusCloudEventsOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsArgs) ToKogitoRuntimeStatusCloudEventsOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsOutput)
}

func (i KogitoRuntimeStatusCloudEventsArgs) ToKogitoRuntimeStatusCloudEventsPtrOutput() KogitoRuntimeStatusCloudEventsPtrOutput {
	return i.ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsArgs) ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsOutput).ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(ctx)
}

// KogitoRuntimeStatusCloudEventsPtrInput is an input type that accepts KogitoRuntimeStatusCloudEventsArgs, KogitoRuntimeStatusCloudEventsPtr and KogitoRuntimeStatusCloudEventsPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsPtrInput` via:
//
//          KogitoRuntimeStatusCloudEventsArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeStatusCloudEventsPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsPtrOutput() KogitoRuntimeStatusCloudEventsPtrOutput
	ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsPtrOutput
}

type kogitoRuntimeStatusCloudEventsPtrType KogitoRuntimeStatusCloudEventsArgs

func KogitoRuntimeStatusCloudEventsPtr(v *KogitoRuntimeStatusCloudEventsArgs) KogitoRuntimeStatusCloudEventsPtrInput {
	return (*kogitoRuntimeStatusCloudEventsPtrType)(v)
}

func (*kogitoRuntimeStatusCloudEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatusCloudEvents)(nil)).Elem()
}

func (i *kogitoRuntimeStatusCloudEventsPtrType) ToKogitoRuntimeStatusCloudEventsPtrOutput() KogitoRuntimeStatusCloudEventsPtrOutput {
	return i.ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeStatusCloudEventsPtrType) ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoRuntimeStatusCloudEventsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEvents)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsOutput) ToKogitoRuntimeStatusCloudEventsOutput() KogitoRuntimeStatusCloudEventsOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsOutput) ToKogitoRuntimeStatusCloudEventsOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsOutput) ToKogitoRuntimeStatusCloudEventsPtrOutput() KogitoRuntimeStatusCloudEventsPtrOutput {
	return o.ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeStatusCloudEventsOutput) ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEvents) *KogitoRuntimeStatusCloudEvents {
		return &v
	}).(KogitoRuntimeStatusCloudEventsPtrOutput)
}
func (o KogitoRuntimeStatusCloudEventsOutput) Consumes() KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEvents) []KogitoRuntimeStatusCloudEventsConsumes { return v.Consumes }).(KogitoRuntimeStatusCloudEventsConsumesArrayOutput)
}

func (o KogitoRuntimeStatusCloudEventsOutput) Produces() KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEvents) []KogitoRuntimeStatusCloudEventsProduces { return v.Produces }).(KogitoRuntimeStatusCloudEventsProducesArrayOutput)
}

type KogitoRuntimeStatusCloudEventsPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatusCloudEvents)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsPtrOutput) ToKogitoRuntimeStatusCloudEventsPtrOutput() KogitoRuntimeStatusCloudEventsPtrOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsPtrOutput) ToKogitoRuntimeStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsPtrOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsPtrOutput) Elem() KogitoRuntimeStatusCloudEventsOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatusCloudEvents) KogitoRuntimeStatusCloudEvents { return *v }).(KogitoRuntimeStatusCloudEventsOutput)
}

func (o KogitoRuntimeStatusCloudEventsPtrOutput) Consumes() KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatusCloudEvents) []KogitoRuntimeStatusCloudEventsConsumes {
		if v == nil {
			return nil
		}
		return v.Consumes
	}).(KogitoRuntimeStatusCloudEventsConsumesArrayOutput)
}

func (o KogitoRuntimeStatusCloudEventsPtrOutput) Produces() KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatusCloudEvents) []KogitoRuntimeStatusCloudEventsProduces {
		if v == nil {
			return nil
		}
		return v.Produces
	}).(KogitoRuntimeStatusCloudEventsProducesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsConsumes struct {
	Source *string `pulumi:"source"`
	Type   string  `pulumi:"type"`
}

// KogitoRuntimeStatusCloudEventsConsumesInput is an input type that accepts KogitoRuntimeStatusCloudEventsConsumesArgs and KogitoRuntimeStatusCloudEventsConsumesOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsConsumesInput` via:
//
//          KogitoRuntimeStatusCloudEventsConsumesArgs{...}
type KogitoRuntimeStatusCloudEventsConsumesInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsConsumesOutput() KogitoRuntimeStatusCloudEventsConsumesOutput
	ToKogitoRuntimeStatusCloudEventsConsumesOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsConsumesOutput
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsConsumesArgs struct {
	Source pulumi.StringPtrInput `pulumi:"source"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (KogitoRuntimeStatusCloudEventsConsumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEventsConsumes)(nil)).Elem()
}

func (i KogitoRuntimeStatusCloudEventsConsumesArgs) ToKogitoRuntimeStatusCloudEventsConsumesOutput() KogitoRuntimeStatusCloudEventsConsumesOutput {
	return i.ToKogitoRuntimeStatusCloudEventsConsumesOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsConsumesArgs) ToKogitoRuntimeStatusCloudEventsConsumesOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsConsumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsConsumesOutput)
}

// KogitoRuntimeStatusCloudEventsConsumesArrayInput is an input type that accepts KogitoRuntimeStatusCloudEventsConsumesArray and KogitoRuntimeStatusCloudEventsConsumesArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsConsumesArrayInput` via:
//
//          KogitoRuntimeStatusCloudEventsConsumesArray{ KogitoRuntimeStatusCloudEventsConsumesArgs{...} }
type KogitoRuntimeStatusCloudEventsConsumesArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsConsumesArrayOutput() KogitoRuntimeStatusCloudEventsConsumesArrayOutput
	ToKogitoRuntimeStatusCloudEventsConsumesArrayOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsConsumesArrayOutput
}

type KogitoRuntimeStatusCloudEventsConsumesArray []KogitoRuntimeStatusCloudEventsConsumesInput

func (KogitoRuntimeStatusCloudEventsConsumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusCloudEventsConsumes)(nil)).Elem()
}

func (i KogitoRuntimeStatusCloudEventsConsumesArray) ToKogitoRuntimeStatusCloudEventsConsumesArrayOutput() KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return i.ToKogitoRuntimeStatusCloudEventsConsumesArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsConsumesArray) ToKogitoRuntimeStatusCloudEventsConsumesArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsConsumesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsConsumesOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsConsumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEventsConsumes)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsConsumesOutput) ToKogitoRuntimeStatusCloudEventsConsumesOutput() KogitoRuntimeStatusCloudEventsConsumesOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsConsumesOutput) ToKogitoRuntimeStatusCloudEventsConsumesOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsConsumesOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsConsumesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEventsConsumes) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusCloudEventsConsumesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEventsConsumes) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusCloudEventsConsumesArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsConsumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusCloudEventsConsumes)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsConsumesArrayOutput) ToKogitoRuntimeStatusCloudEventsConsumesArrayOutput() KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsConsumesArrayOutput) ToKogitoRuntimeStatusCloudEventsConsumesArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsConsumesArrayOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsConsumesArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusCloudEventsConsumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusCloudEventsConsumes {
		return vs[0].([]KogitoRuntimeStatusCloudEventsConsumes)[vs[1].(int)]
	}).(KogitoRuntimeStatusCloudEventsConsumesOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsProduces struct {
	Source *string `pulumi:"source"`
	Type   string  `pulumi:"type"`
}

// KogitoRuntimeStatusCloudEventsProducesInput is an input type that accepts KogitoRuntimeStatusCloudEventsProducesArgs and KogitoRuntimeStatusCloudEventsProducesOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsProducesInput` via:
//
//          KogitoRuntimeStatusCloudEventsProducesArgs{...}
type KogitoRuntimeStatusCloudEventsProducesInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsProducesOutput() KogitoRuntimeStatusCloudEventsProducesOutput
	ToKogitoRuntimeStatusCloudEventsProducesOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsProducesOutput
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsProducesArgs struct {
	Source pulumi.StringPtrInput `pulumi:"source"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (KogitoRuntimeStatusCloudEventsProducesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEventsProduces)(nil)).Elem()
}

func (i KogitoRuntimeStatusCloudEventsProducesArgs) ToKogitoRuntimeStatusCloudEventsProducesOutput() KogitoRuntimeStatusCloudEventsProducesOutput {
	return i.ToKogitoRuntimeStatusCloudEventsProducesOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsProducesArgs) ToKogitoRuntimeStatusCloudEventsProducesOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsProducesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsProducesOutput)
}

// KogitoRuntimeStatusCloudEventsProducesArrayInput is an input type that accepts KogitoRuntimeStatusCloudEventsProducesArray and KogitoRuntimeStatusCloudEventsProducesArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusCloudEventsProducesArrayInput` via:
//
//          KogitoRuntimeStatusCloudEventsProducesArray{ KogitoRuntimeStatusCloudEventsProducesArgs{...} }
type KogitoRuntimeStatusCloudEventsProducesArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusCloudEventsProducesArrayOutput() KogitoRuntimeStatusCloudEventsProducesArrayOutput
	ToKogitoRuntimeStatusCloudEventsProducesArrayOutputWithContext(context.Context) KogitoRuntimeStatusCloudEventsProducesArrayOutput
}

type KogitoRuntimeStatusCloudEventsProducesArray []KogitoRuntimeStatusCloudEventsProducesInput

func (KogitoRuntimeStatusCloudEventsProducesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusCloudEventsProduces)(nil)).Elem()
}

func (i KogitoRuntimeStatusCloudEventsProducesArray) ToKogitoRuntimeStatusCloudEventsProducesArrayOutput() KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return i.ToKogitoRuntimeStatusCloudEventsProducesArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusCloudEventsProducesArray) ToKogitoRuntimeStatusCloudEventsProducesArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusCloudEventsProducesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoRuntimeStatusCloudEventsProducesOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsProducesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusCloudEventsProduces)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsProducesOutput) ToKogitoRuntimeStatusCloudEventsProducesOutput() KogitoRuntimeStatusCloudEventsProducesOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsProducesOutput) ToKogitoRuntimeStatusCloudEventsProducesOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsProducesOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsProducesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEventsProduces) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusCloudEventsProducesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusCloudEventsProduces) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusCloudEventsProducesArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusCloudEventsProducesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusCloudEventsProduces)(nil)).Elem()
}

func (o KogitoRuntimeStatusCloudEventsProducesArrayOutput) ToKogitoRuntimeStatusCloudEventsProducesArrayOutput() KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsProducesArrayOutput) ToKogitoRuntimeStatusCloudEventsProducesArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusCloudEventsProducesArrayOutput {
	return o
}

func (o KogitoRuntimeStatusCloudEventsProducesArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusCloudEventsProducesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusCloudEventsProduces {
		return vs[0].([]KogitoRuntimeStatusCloudEventsProduces)[vs[1].(int)]
	}).(KogitoRuntimeStatusCloudEventsProducesOutput)
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// KogitoServiceConditionReason is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoRuntimeStatusConditionsInput is an input type that accepts KogitoRuntimeStatusConditionsArgs and KogitoRuntimeStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusConditionsInput` via:
//
//          KogitoRuntimeStatusConditionsArgs{...}
type KogitoRuntimeStatusConditionsInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput
	ToKogitoRuntimeStatusConditionsOutputWithContext(context.Context) KogitoRuntimeStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// KogitoServiceConditionReason is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoRuntimeStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusConditionsArgs) ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput {
	return i.ToKogitoRuntimeStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusConditionsArgs) ToKogitoRuntimeStatusConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusConditionsOutput)
}

// KogitoRuntimeStatusConditionsArrayInput is an input type that accepts KogitoRuntimeStatusConditionsArray and KogitoRuntimeStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusConditionsArrayInput` via:
//
//          KogitoRuntimeStatusConditionsArray{ KogitoRuntimeStatusConditionsArgs{...} }
type KogitoRuntimeStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput
	ToKogitoRuntimeStatusConditionsArrayOutputWithContext(context.Context) KogitoRuntimeStatusConditionsArrayOutput
}

type KogitoRuntimeStatusConditionsArray []KogitoRuntimeStatusConditionsInput

func (KogitoRuntimeStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusConditionsArray) ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput {
	return i.ToKogitoRuntimeStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusConditionsArray) ToKogitoRuntimeStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusConditionsOutput) ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsOutput) ToKogitoRuntimeStatusConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// KogitoServiceConditionReason is the type of reason
func (o KogitoRuntimeStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoRuntimeStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusConditionsArrayOutput) ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsArrayOutput) ToKogitoRuntimeStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusConditions {
		return vs[0].([]KogitoRuntimeStatusConditions)[vs[1].(int)]
	}).(KogitoRuntimeStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoRuntimeStatusDeploymentConditionsInput is an input type that accepts KogitoRuntimeStatusDeploymentConditionsArgs and KogitoRuntimeStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusDeploymentConditionsInput` via:
//
//          KogitoRuntimeStatusDeploymentConditionsArgs{...}
type KogitoRuntimeStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput
	ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(context.Context) KogitoRuntimeStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoRuntimeStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusDeploymentConditionsArgs) ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput {
	return i.ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusDeploymentConditionsArgs) ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusDeploymentConditionsOutput)
}

// KogitoRuntimeStatusDeploymentConditionsArrayInput is an input type that accepts KogitoRuntimeStatusDeploymentConditionsArray and KogitoRuntimeStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusDeploymentConditionsArrayInput` via:
//
//          KogitoRuntimeStatusDeploymentConditionsArray{ KogitoRuntimeStatusDeploymentConditionsArgs{...} }
type KogitoRuntimeStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput
	ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput
}

type KogitoRuntimeStatusDeploymentConditionsArray []KogitoRuntimeStatusDeploymentConditionsInput

func (KogitoRuntimeStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusDeploymentConditionsArray) ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusDeploymentConditionsArray) ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusDeploymentConditionsOutput) ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsOutput) ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusDeploymentConditions {
		return vs[0].([]KogitoRuntimeStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoRuntimeStatusDeploymentConditionsOutput)
}

// KogitoSupportingService deploys the Supporting service in the given namespace.
type KogitoSupportingServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec *KogitoSupportingServiceSpec `pulumi:"spec"`
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status *KogitoSupportingServiceStatus `pulumi:"status"`
}

// KogitoSupportingServiceTypeInput is an input type that accepts KogitoSupportingServiceTypeArgs and KogitoSupportingServiceTypeOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceTypeInput` via:
//
//          KogitoSupportingServiceTypeArgs{...}
type KogitoSupportingServiceTypeInput interface {
	pulumi.Input

	ToKogitoSupportingServiceTypeOutput() KogitoSupportingServiceTypeOutput
	ToKogitoSupportingServiceTypeOutputWithContext(context.Context) KogitoSupportingServiceTypeOutput
}

// KogitoSupportingService deploys the Supporting service in the given namespace.
type KogitoSupportingServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
	Spec KogitoSupportingServiceSpecPtrInput `pulumi:"spec"`
	// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
	Status KogitoSupportingServiceStatusPtrInput `pulumi:"status"`
}

func (KogitoSupportingServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceType)(nil)).Elem()
}

func (i KogitoSupportingServiceTypeArgs) ToKogitoSupportingServiceTypeOutput() KogitoSupportingServiceTypeOutput {
	return i.ToKogitoSupportingServiceTypeOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceTypeArgs) ToKogitoSupportingServiceTypeOutputWithContext(ctx context.Context) KogitoSupportingServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceTypeOutput)
}

// KogitoSupportingService deploys the Supporting service in the given namespace.
type KogitoSupportingServiceTypeOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceType)(nil)).Elem()
}

func (o KogitoSupportingServiceTypeOutput) ToKogitoSupportingServiceTypeOutput() KogitoSupportingServiceTypeOutput {
	return o
}

func (o KogitoSupportingServiceTypeOutput) ToKogitoSupportingServiceTypeOutputWithContext(ctx context.Context) KogitoSupportingServiceTypeOutput {
	return o
}

func (o KogitoSupportingServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
func (o KogitoSupportingServiceTypeOutput) Spec() KogitoSupportingServiceSpecPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceType) *KogitoSupportingServiceSpec { return v.Spec }).(KogitoSupportingServiceSpecPtrOutput)
}

// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
func (o KogitoSupportingServiceTypeOutput) Status() KogitoSupportingServiceStatusPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceType) *KogitoSupportingServiceStatus { return v.Status }).(KogitoSupportingServiceStatusPtrOutput)
}

type KogitoSupportingServiceMetadata struct {
}

// KogitoSupportingServiceMetadataInput is an input type that accepts KogitoSupportingServiceMetadataArgs and KogitoSupportingServiceMetadataOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceMetadataInput` via:
//
//          KogitoSupportingServiceMetadataArgs{...}
type KogitoSupportingServiceMetadataInput interface {
	pulumi.Input

	ToKogitoSupportingServiceMetadataOutput() KogitoSupportingServiceMetadataOutput
	ToKogitoSupportingServiceMetadataOutputWithContext(context.Context) KogitoSupportingServiceMetadataOutput
}

type KogitoSupportingServiceMetadataArgs struct {
}

func (KogitoSupportingServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceMetadata)(nil)).Elem()
}

func (i KogitoSupportingServiceMetadataArgs) ToKogitoSupportingServiceMetadataOutput() KogitoSupportingServiceMetadataOutput {
	return i.ToKogitoSupportingServiceMetadataOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceMetadataArgs) ToKogitoSupportingServiceMetadataOutputWithContext(ctx context.Context) KogitoSupportingServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceMetadataOutput)
}

type KogitoSupportingServiceMetadataOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceMetadata)(nil)).Elem()
}

func (o KogitoSupportingServiceMetadataOutput) ToKogitoSupportingServiceMetadataOutput() KogitoSupportingServiceMetadataOutput {
	return o
}

func (o KogitoSupportingServiceMetadataOutput) ToKogitoSupportingServiceMetadataOutputWithContext(ctx context.Context) KogitoSupportingServiceMetadataOutput {
	return o
}

// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
type KogitoSupportingServiceSpec struct {
	// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
	Config map[string]string `pulumi:"config"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Env []KogitoSupportingServiceSpecEnv `pulumi:"env"`
	// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *string `pulumi:"image"`
	// Infra provides list of dependent KogitoInfra objects.
	Infra []string `pulumi:"infra"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Create Service monitor instance to connect with Monitoring service
	Monitoring *KogitoSupportingServiceSpecMonitoring `pulumi:"monitoring"`
	// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
	PropertiesConfigMap *string `pulumi:"propertiesConfigMap"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoSupportingServiceSpecResources `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
	// Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService
	ServiceType string `pulumi:"serviceType"`
}

// KogitoSupportingServiceSpecInput is an input type that accepts KogitoSupportingServiceSpecArgs and KogitoSupportingServiceSpecOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecInput` via:
//
//          KogitoSupportingServiceSpecArgs{...}
type KogitoSupportingServiceSpecInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecOutput() KogitoSupportingServiceSpecOutput
	ToKogitoSupportingServiceSpecOutputWithContext(context.Context) KogitoSupportingServiceSpecOutput
}

// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
type KogitoSupportingServiceSpecArgs struct {
	// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Env KogitoSupportingServiceSpecEnvArrayInput `pulumi:"env"`
	// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Infra provides list of dependent KogitoInfra objects.
	Infra pulumi.StringArrayInput `pulumi:"infra"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Create Service monitor instance to connect with Monitoring service
	Monitoring KogitoSupportingServiceSpecMonitoringPtrInput `pulumi:"monitoring"`
	// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
	PropertiesConfigMap pulumi.StringPtrInput `pulumi:"propertiesConfigMap"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoSupportingServiceSpecResourcesPtrInput `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
	// Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
}

func (KogitoSupportingServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpec)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecArgs) ToKogitoSupportingServiceSpecOutput() KogitoSupportingServiceSpecOutput {
	return i.ToKogitoSupportingServiceSpecOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecArgs) ToKogitoSupportingServiceSpecOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecOutput)
}

func (i KogitoSupportingServiceSpecArgs) ToKogitoSupportingServiceSpecPtrOutput() KogitoSupportingServiceSpecPtrOutput {
	return i.ToKogitoSupportingServiceSpecPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecArgs) ToKogitoSupportingServiceSpecPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecOutput).ToKogitoSupportingServiceSpecPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecPtrInput is an input type that accepts KogitoSupportingServiceSpecArgs, KogitoSupportingServiceSpecPtr and KogitoSupportingServiceSpecPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecPtrInput` via:
//
//          KogitoSupportingServiceSpecArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecPtrOutput() KogitoSupportingServiceSpecPtrOutput
	ToKogitoSupportingServiceSpecPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecPtrOutput
}

type kogitoSupportingServiceSpecPtrType KogitoSupportingServiceSpecArgs

func KogitoSupportingServiceSpecPtr(v *KogitoSupportingServiceSpecArgs) KogitoSupportingServiceSpecPtrInput {
	return (*kogitoSupportingServiceSpecPtrType)(v)
}

func (*kogitoSupportingServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpec)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecPtrType) ToKogitoSupportingServiceSpecPtrOutput() KogitoSupportingServiceSpecPtrOutput {
	return i.ToKogitoSupportingServiceSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecPtrType) ToKogitoSupportingServiceSpecPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecPtrOutput)
}

// KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
type KogitoSupportingServiceSpecOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpec)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecOutput) ToKogitoSupportingServiceSpecOutput() KogitoSupportingServiceSpecOutput {
	return o
}

func (o KogitoSupportingServiceSpecOutput) ToKogitoSupportingServiceSpecOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecOutput {
	return o
}

func (o KogitoSupportingServiceSpecOutput) ToKogitoSupportingServiceSpecPtrOutput() KogitoSupportingServiceSpecPtrOutput {
	return o.ToKogitoSupportingServiceSpecPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecOutput) ToKogitoSupportingServiceSpecPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *KogitoSupportingServiceSpec {
		return &v
	}).(KogitoSupportingServiceSpecPtrOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
func (o KogitoSupportingServiceSpecOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoSupportingServiceSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoSupportingServiceSpecOutput) Env() KogitoSupportingServiceSpecEnvArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) []KogitoSupportingServiceSpecEnv { return v.Env }).(KogitoSupportingServiceSpecEnvArrayOutput)
}

// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoSupportingServiceSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Infra provides list of dependent KogitoInfra objects.
func (o KogitoSupportingServiceSpecOutput) Infra() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) []string { return v.Infra }).(pulumi.StringArrayOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoSupportingServiceSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
func (o KogitoSupportingServiceSpecOutput) Monitoring() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *KogitoSupportingServiceSpecMonitoring { return v.Monitoring }).(KogitoSupportingServiceSpecMonitoringPtrOutput)
}

// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
func (o KogitoSupportingServiceSpecOutput) PropertiesConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *string { return v.PropertiesConfigMap }).(pulumi.StringPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoSupportingServiceSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoSupportingServiceSpecOutput) Resources() KogitoSupportingServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) *KogitoSupportingServiceSpecResources { return v.Resources }).(KogitoSupportingServiceSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoSupportingServiceSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

// Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService
func (o KogitoSupportingServiceSpecOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpec) string { return v.ServiceType }).(pulumi.StringOutput)
}

type KogitoSupportingServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpec)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecPtrOutput) ToKogitoSupportingServiceSpecPtrOutput() KogitoSupportingServiceSpecPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecPtrOutput) ToKogitoSupportingServiceSpecPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecPtrOutput) Elem() KogitoSupportingServiceSpecOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) KogitoSupportingServiceSpec { return *v }).(KogitoSupportingServiceSpecOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
func (o KogitoSupportingServiceSpecPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoSupportingServiceSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoSupportingServiceSpecPtrOutput) Env() KogitoSupportingServiceSpecEnvArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) []KogitoSupportingServiceSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(KogitoSupportingServiceSpecEnvArrayOutput)
}

// Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoSupportingServiceSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Infra provides list of dependent KogitoInfra objects.
func (o KogitoSupportingServiceSpecPtrOutput) Infra() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Infra
	}).(pulumi.StringArrayOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoSupportingServiceSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
func (o KogitoSupportingServiceSpecPtrOutput) Monitoring() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *KogitoSupportingServiceSpecMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(KogitoSupportingServiceSpecMonitoringPtrOutput)
}

// Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
func (o KogitoSupportingServiceSpecPtrOutput) PropertiesConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.PropertiesConfigMap
	}).(pulumi.StringPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoSupportingServiceSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoSupportingServiceSpecPtrOutput) Resources() KogitoSupportingServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *KogitoSupportingServiceSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoSupportingServiceSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoSupportingServiceSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService
func (o KogitoSupportingServiceSpecPtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceType
	}).(pulumi.StringPtrOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoSupportingServiceSpecConfig struct {
}

// KogitoSupportingServiceSpecConfigInput is an input type that accepts KogitoSupportingServiceSpecConfigArgs and KogitoSupportingServiceSpecConfigOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecConfigInput` via:
//
//          KogitoSupportingServiceSpecConfigArgs{...}
type KogitoSupportingServiceSpecConfigInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecConfigOutput() KogitoSupportingServiceSpecConfigOutput
	ToKogitoSupportingServiceSpecConfigOutputWithContext(context.Context) KogitoSupportingServiceSpecConfigOutput
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoSupportingServiceSpecConfigArgs struct {
}

func (KogitoSupportingServiceSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecConfig)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecConfigArgs) ToKogitoSupportingServiceSpecConfigOutput() KogitoSupportingServiceSpecConfigOutput {
	return i.ToKogitoSupportingServiceSpecConfigOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecConfigArgs) ToKogitoSupportingServiceSpecConfigOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecConfigOutput)
}

// Application properties that will be set to the service. For example 'MY_VAR: my_value'.
type KogitoSupportingServiceSpecConfigOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecConfig)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecConfigOutput) ToKogitoSupportingServiceSpecConfigOutput() KogitoSupportingServiceSpecConfigOutput {
	return o
}

func (o KogitoSupportingServiceSpecConfigOutput) ToKogitoSupportingServiceSpecConfigOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecConfigOutput {
	return o
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoSupportingServiceSpecDeploymentLabels struct {
}

// KogitoSupportingServiceSpecDeploymentLabelsInput is an input type that accepts KogitoSupportingServiceSpecDeploymentLabelsArgs and KogitoSupportingServiceSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecDeploymentLabelsInput` via:
//
//          KogitoSupportingServiceSpecDeploymentLabelsArgs{...}
type KogitoSupportingServiceSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecDeploymentLabelsOutput() KogitoSupportingServiceSpecDeploymentLabelsOutput
	ToKogitoSupportingServiceSpecDeploymentLabelsOutputWithContext(context.Context) KogitoSupportingServiceSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoSupportingServiceSpecDeploymentLabelsArgs struct {
}

func (KogitoSupportingServiceSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecDeploymentLabelsArgs) ToKogitoSupportingServiceSpecDeploymentLabelsOutput() KogitoSupportingServiceSpecDeploymentLabelsOutput {
	return i.ToKogitoSupportingServiceSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecDeploymentLabelsArgs) ToKogitoSupportingServiceSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoSupportingServiceSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecDeploymentLabelsOutput) ToKogitoSupportingServiceSpecDeploymentLabelsOutput() KogitoSupportingServiceSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoSupportingServiceSpecDeploymentLabelsOutput) ToKogitoSupportingServiceSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoSupportingServiceSpecEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoSupportingServiceSpecEnvValueFrom `pulumi:"valueFrom"`
}

// KogitoSupportingServiceSpecEnvInput is an input type that accepts KogitoSupportingServiceSpecEnvArgs and KogitoSupportingServiceSpecEnvOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvInput` via:
//
//          KogitoSupportingServiceSpecEnvArgs{...}
type KogitoSupportingServiceSpecEnvInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvOutput() KogitoSupportingServiceSpecEnvOutput
	ToKogitoSupportingServiceSpecEnvOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoSupportingServiceSpecEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoSupportingServiceSpecEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoSupportingServiceSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnv)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvArgs) ToKogitoSupportingServiceSpecEnvOutput() KogitoSupportingServiceSpecEnvOutput {
	return i.ToKogitoSupportingServiceSpecEnvOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvArgs) ToKogitoSupportingServiceSpecEnvOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvOutput)
}

// KogitoSupportingServiceSpecEnvArrayInput is an input type that accepts KogitoSupportingServiceSpecEnvArray and KogitoSupportingServiceSpecEnvArrayOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvArrayInput` via:
//
//          KogitoSupportingServiceSpecEnvArray{ KogitoSupportingServiceSpecEnvArgs{...} }
type KogitoSupportingServiceSpecEnvArrayInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvArrayOutput() KogitoSupportingServiceSpecEnvArrayOutput
	ToKogitoSupportingServiceSpecEnvArrayOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvArrayOutput
}

type KogitoSupportingServiceSpecEnvArray []KogitoSupportingServiceSpecEnvInput

func (KogitoSupportingServiceSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceSpecEnv)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvArray) ToKogitoSupportingServiceSpecEnvArrayOutput() KogitoSupportingServiceSpecEnvArrayOutput {
	return i.ToKogitoSupportingServiceSpecEnvArrayOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvArray) ToKogitoSupportingServiceSpecEnvArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoSupportingServiceSpecEnvOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnv)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvOutput) ToKogitoSupportingServiceSpecEnvOutput() KogitoSupportingServiceSpecEnvOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvOutput) ToKogitoSupportingServiceSpecEnvOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoSupportingServiceSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoSupportingServiceSpecEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoSupportingServiceSpecEnvOutput) ValueFrom() KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnv) *KogitoSupportingServiceSpecEnvValueFrom { return v.ValueFrom }).(KogitoSupportingServiceSpecEnvValueFromPtrOutput)
}

type KogitoSupportingServiceSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceSpecEnv)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvArrayOutput) ToKogitoSupportingServiceSpecEnvArrayOutput() KogitoSupportingServiceSpecEnvArrayOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvArrayOutput) ToKogitoSupportingServiceSpecEnvArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvArrayOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvArrayOutput) Index(i pulumi.IntInput) KogitoSupportingServiceSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoSupportingServiceSpecEnv {
		return vs[0].([]KogitoSupportingServiceSpecEnv)[vs[1].(int)]
	}).(KogitoSupportingServiceSpecEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoSupportingServiceSpecEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoSupportingServiceSpecEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoSupportingServiceSpecEnvValueFromInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromArgs and KogitoSupportingServiceSpecEnvValueFromOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromArgs{...}
type KogitoSupportingServiceSpecEnvValueFromInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromOutput() KogitoSupportingServiceSpecEnvValueFromOutput
	ToKogitoSupportingServiceSpecEnvValueFromOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoSupportingServiceSpecEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoSupportingServiceSpecEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoSupportingServiceSpecEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFrom)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromArgs) ToKogitoSupportingServiceSpecEnvValueFromOutput() KogitoSupportingServiceSpecEnvValueFromOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromArgs) ToKogitoSupportingServiceSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromArgs) ToKogitoSupportingServiceSpecEnvValueFromPtrOutput() KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromArgs) ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromOutput).ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromArgs, KogitoSupportingServiceSpecEnvValueFromPtr and KogitoSupportingServiceSpecEnvValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromPtrOutput() KogitoSupportingServiceSpecEnvValueFromPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromPtrType KogitoSupportingServiceSpecEnvValueFromArgs

func KogitoSupportingServiceSpecEnvValueFromPtr(v *KogitoSupportingServiceSpecEnvValueFromArgs) KogitoSupportingServiceSpecEnvValueFromPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFrom)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromPtrType) ToKogitoSupportingServiceSpecEnvValueFromPtrOutput() KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromPtrType) ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoSupportingServiceSpecEnvValueFromOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromOutput) ToKogitoSupportingServiceSpecEnvValueFromOutput() KogitoSupportingServiceSpecEnvValueFromOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromOutput) ToKogitoSupportingServiceSpecEnvValueFromOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromOutput) ToKogitoSupportingServiceSpecEnvValueFromPtrOutput() KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromOutput) ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFrom {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoSupportingServiceSpecEnvValueFromOutput) ConfigMapKeyRef() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoSupportingServiceSpecEnvValueFromOutput) FieldRef() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromFieldRef {
		return v.FieldRef
	}).(KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoSupportingServiceSpecEnvValueFromOutput) ResourceFieldRef() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoSupportingServiceSpecEnvValueFromOutput) SecretKeyRef() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFrom)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromPtrOutput() KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFrom) KogitoSupportingServiceSpecEnvValueFrom { return *v }).(KogitoSupportingServiceSpecEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) ConfigMapKeyRef() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) FieldRef() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) ResourceFieldRef() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoSupportingServiceSpecEnvValueFromPtrOutput) SecretKeyRef() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFrom) *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs and KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs{...}
type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput
	ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput).ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs, KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtr and KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrType KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs

func KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtr(v *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefArgs) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef {
		return *v
	}).(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoSupportingServiceSpecEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoSupportingServiceSpecEnvValueFromFieldRefInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromFieldRefArgs and KogitoSupportingServiceSpecEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromFieldRefInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromFieldRefArgs{...}
type KogitoSupportingServiceSpecEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefOutput
	ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoSupportingServiceSpecEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromFieldRefOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromFieldRefOutput).ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromFieldRefPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromFieldRefArgs, KogitoSupportingServiceSpecEnvValueFromFieldRefPtr and KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromFieldRefPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromFieldRefPtrType KogitoSupportingServiceSpecEnvValueFromFieldRefArgs

func KogitoSupportingServiceSpecEnvValueFromFieldRefPtr(v *KogitoSupportingServiceSpecEnvValueFromFieldRefArgs) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromFieldRefPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromFieldRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromFieldRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoSupportingServiceSpecEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromFieldRef) *KogitoSupportingServiceSpecEnvValueFromFieldRef {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoSupportingServiceSpecEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromFieldRef) KogitoSupportingServiceSpecEnvValueFromFieldRef {
		return *v
	}).(KogitoSupportingServiceSpecEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoSupportingServiceSpecEnvValueFromResourceFieldRefInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs and KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromResourceFieldRefInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs{...}
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput
	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput).ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs, KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtr and KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrType KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs

func KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtr(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefArgs) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) Divisor() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) KogitoSupportingServiceSpecEnvValueFromResourceFieldRef {
		return *v
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) Divisor() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor struct {
}

// KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs and KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs{...}
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput
	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput
}

type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput).ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs, KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtr and KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrType KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs

func KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtr(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorArgs) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrType) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor) *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor) KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoSupportingServiceSpecEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoSupportingServiceSpecEnvValueFromSecretKeyRefInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs and KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromSecretKeyRefInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs{...}
type KogitoSupportingServiceSpecEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput
	ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput)
}

func (i KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput).ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrInput is an input type that accepts KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs, KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtr and KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrInput` via:
//
//          KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput
	ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput
}

type kogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrType KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs

func KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtr(v *KogitoSupportingServiceSpecEnvValueFromSecretKeyRefArgs) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrInput {
	return (*kogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrType) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef {
		return &v
	}).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) ToKogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) Elem() KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) KogitoSupportingServiceSpecEnvValueFromSecretKeyRef {
		return *v
	}).(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
type KogitoSupportingServiceSpecMonitoring struct {
	// HTTP path to scrape for metrics.
	Path *string `pulumi:"path"`
	// HTTP scheme to use for scraping.
	Scheme *string `pulumi:"scheme"`
}

// KogitoSupportingServiceSpecMonitoringInput is an input type that accepts KogitoSupportingServiceSpecMonitoringArgs and KogitoSupportingServiceSpecMonitoringOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecMonitoringInput` via:
//
//          KogitoSupportingServiceSpecMonitoringArgs{...}
type KogitoSupportingServiceSpecMonitoringInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecMonitoringOutput() KogitoSupportingServiceSpecMonitoringOutput
	ToKogitoSupportingServiceSpecMonitoringOutputWithContext(context.Context) KogitoSupportingServiceSpecMonitoringOutput
}

// Create Service monitor instance to connect with Monitoring service
type KogitoSupportingServiceSpecMonitoringArgs struct {
	// HTTP path to scrape for metrics.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// HTTP scheme to use for scraping.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (KogitoSupportingServiceSpecMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecMonitoring)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecMonitoringArgs) ToKogitoSupportingServiceSpecMonitoringOutput() KogitoSupportingServiceSpecMonitoringOutput {
	return i.ToKogitoSupportingServiceSpecMonitoringOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecMonitoringArgs) ToKogitoSupportingServiceSpecMonitoringOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecMonitoringOutput)
}

func (i KogitoSupportingServiceSpecMonitoringArgs) ToKogitoSupportingServiceSpecMonitoringPtrOutput() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return i.ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecMonitoringArgs) ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecMonitoringOutput).ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecMonitoringPtrInput is an input type that accepts KogitoSupportingServiceSpecMonitoringArgs, KogitoSupportingServiceSpecMonitoringPtr and KogitoSupportingServiceSpecMonitoringPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecMonitoringPtrInput` via:
//
//          KogitoSupportingServiceSpecMonitoringArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecMonitoringPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecMonitoringPtrOutput() KogitoSupportingServiceSpecMonitoringPtrOutput
	ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecMonitoringPtrOutput
}

type kogitoSupportingServiceSpecMonitoringPtrType KogitoSupportingServiceSpecMonitoringArgs

func KogitoSupportingServiceSpecMonitoringPtr(v *KogitoSupportingServiceSpecMonitoringArgs) KogitoSupportingServiceSpecMonitoringPtrInput {
	return (*kogitoSupportingServiceSpecMonitoringPtrType)(v)
}

func (*kogitoSupportingServiceSpecMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecMonitoring)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecMonitoringPtrType) ToKogitoSupportingServiceSpecMonitoringPtrOutput() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return i.ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecMonitoringPtrType) ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecMonitoringPtrOutput)
}

// Create Service monitor instance to connect with Monitoring service
type KogitoSupportingServiceSpecMonitoringOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecMonitoring)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecMonitoringOutput) ToKogitoSupportingServiceSpecMonitoringOutput() KogitoSupportingServiceSpecMonitoringOutput {
	return o
}

func (o KogitoSupportingServiceSpecMonitoringOutput) ToKogitoSupportingServiceSpecMonitoringOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringOutput {
	return o
}

func (o KogitoSupportingServiceSpecMonitoringOutput) ToKogitoSupportingServiceSpecMonitoringPtrOutput() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o.ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecMonitoringOutput) ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecMonitoring) *KogitoSupportingServiceSpecMonitoring {
		return &v
	}).(KogitoSupportingServiceSpecMonitoringPtrOutput)
}

// HTTP path to scrape for metrics.
func (o KogitoSupportingServiceSpecMonitoringOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecMonitoring) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// HTTP scheme to use for scraping.
func (o KogitoSupportingServiceSpecMonitoringOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecMonitoring) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type KogitoSupportingServiceSpecMonitoringPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecMonitoring)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecMonitoringPtrOutput) ToKogitoSupportingServiceSpecMonitoringPtrOutput() KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecMonitoringPtrOutput) ToKogitoSupportingServiceSpecMonitoringPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecMonitoringPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecMonitoringPtrOutput) Elem() KogitoSupportingServiceSpecMonitoringOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecMonitoring) KogitoSupportingServiceSpecMonitoring { return *v }).(KogitoSupportingServiceSpecMonitoringOutput)
}

// HTTP path to scrape for metrics.
func (o KogitoSupportingServiceSpecMonitoringPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecMonitoring) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// HTTP scheme to use for scraping.
func (o KogitoSupportingServiceSpecMonitoringPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecMonitoring) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoSupportingServiceSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoSupportingServiceSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoSupportingServiceSpecResourcesRequests `pulumi:"requests"`
}

// KogitoSupportingServiceSpecResourcesInput is an input type that accepts KogitoSupportingServiceSpecResourcesArgs and KogitoSupportingServiceSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesInput` via:
//
//          KogitoSupportingServiceSpecResourcesArgs{...}
type KogitoSupportingServiceSpecResourcesInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesOutput() KogitoSupportingServiceSpecResourcesOutput
	ToKogitoSupportingServiceSpecResourcesOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoSupportingServiceSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoSupportingServiceSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoSupportingServiceSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoSupportingServiceSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResources)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecResourcesArgs) ToKogitoSupportingServiceSpecResourcesOutput() KogitoSupportingServiceSpecResourcesOutput {
	return i.ToKogitoSupportingServiceSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesArgs) ToKogitoSupportingServiceSpecResourcesOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesOutput)
}

func (i KogitoSupportingServiceSpecResourcesArgs) ToKogitoSupportingServiceSpecResourcesPtrOutput() KogitoSupportingServiceSpecResourcesPtrOutput {
	return i.ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesArgs) ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesOutput).ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceSpecResourcesPtrInput is an input type that accepts KogitoSupportingServiceSpecResourcesArgs, KogitoSupportingServiceSpecResourcesPtr and KogitoSupportingServiceSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesPtrInput` via:
//
//          KogitoSupportingServiceSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesPtrOutput() KogitoSupportingServiceSpecResourcesPtrOutput
	ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesPtrOutput
}

type kogitoSupportingServiceSpecResourcesPtrType KogitoSupportingServiceSpecResourcesArgs

func KogitoSupportingServiceSpecResourcesPtr(v *KogitoSupportingServiceSpecResourcesArgs) KogitoSupportingServiceSpecResourcesPtrInput {
	return (*kogitoSupportingServiceSpecResourcesPtrType)(v)
}

func (*kogitoSupportingServiceSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecResources)(nil)).Elem()
}

func (i *kogitoSupportingServiceSpecResourcesPtrType) ToKogitoSupportingServiceSpecResourcesPtrOutput() KogitoSupportingServiceSpecResourcesPtrOutput {
	return i.ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceSpecResourcesPtrType) ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoSupportingServiceSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResources)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesOutput) ToKogitoSupportingServiceSpecResourcesOutput() KogitoSupportingServiceSpecResourcesOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesOutput) ToKogitoSupportingServiceSpecResourcesOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesOutput) ToKogitoSupportingServiceSpecResourcesPtrOutput() KogitoSupportingServiceSpecResourcesPtrOutput {
	return o.ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceSpecResourcesOutput) ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecResources) *KogitoSupportingServiceSpecResources {
		return &v
	}).(KogitoSupportingServiceSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoSupportingServiceSpecResourcesOutput) Limits() KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecResources) map[string]KogitoSupportingServiceSpecResourcesLimits {
		return v.Limits
	}).(KogitoSupportingServiceSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoSupportingServiceSpecResourcesOutput) Requests() KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoSupportingServiceSpecResources) map[string]KogitoSupportingServiceSpecResourcesRequests {
		return v.Requests
	}).(KogitoSupportingServiceSpecResourcesRequestsMapOutput)
}

type KogitoSupportingServiceSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceSpecResources)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesPtrOutput) ToKogitoSupportingServiceSpecResourcesPtrOutput() KogitoSupportingServiceSpecResourcesPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesPtrOutput) ToKogitoSupportingServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesPtrOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesPtrOutput) Elem() KogitoSupportingServiceSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecResources) KogitoSupportingServiceSpecResources { return *v }).(KogitoSupportingServiceSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoSupportingServiceSpecResourcesPtrOutput) Limits() KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecResources) map[string]KogitoSupportingServiceSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoSupportingServiceSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoSupportingServiceSpecResourcesPtrOutput) Requests() KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceSpecResources) map[string]KogitoSupportingServiceSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoSupportingServiceSpecResourcesRequestsMapOutput)
}

type KogitoSupportingServiceSpecResourcesLimits struct {
}

// KogitoSupportingServiceSpecResourcesLimitsInput is an input type that accepts KogitoSupportingServiceSpecResourcesLimitsArgs and KogitoSupportingServiceSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesLimitsInput` via:
//
//          KogitoSupportingServiceSpecResourcesLimitsArgs{...}
type KogitoSupportingServiceSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesLimitsOutput() KogitoSupportingServiceSpecResourcesLimitsOutput
	ToKogitoSupportingServiceSpecResourcesLimitsOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesLimitsOutput
}

type KogitoSupportingServiceSpecResourcesLimitsArgs struct {
}

func (KogitoSupportingServiceSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecResourcesLimitsArgs) ToKogitoSupportingServiceSpecResourcesLimitsOutput() KogitoSupportingServiceSpecResourcesLimitsOutput {
	return i.ToKogitoSupportingServiceSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesLimitsArgs) ToKogitoSupportingServiceSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesLimitsOutput)
}

// KogitoSupportingServiceSpecResourcesLimitsMapInput is an input type that accepts KogitoSupportingServiceSpecResourcesLimitsMap and KogitoSupportingServiceSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesLimitsMapInput` via:
//
//          KogitoSupportingServiceSpecResourcesLimitsMap{ "key": KogitoSupportingServiceSpecResourcesLimitsArgs{...} }
type KogitoSupportingServiceSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesLimitsMapOutput() KogitoSupportingServiceSpecResourcesLimitsMapOutput
	ToKogitoSupportingServiceSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesLimitsMapOutput
}

type KogitoSupportingServiceSpecResourcesLimitsMap map[string]KogitoSupportingServiceSpecResourcesLimitsInput

func (KogitoSupportingServiceSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoSupportingServiceSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecResourcesLimitsMap) ToKogitoSupportingServiceSpecResourcesLimitsMapOutput() KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return i.ToKogitoSupportingServiceSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesLimitsMap) ToKogitoSupportingServiceSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesLimitsMapOutput)
}

type KogitoSupportingServiceSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesLimitsOutput) ToKogitoSupportingServiceSpecResourcesLimitsOutput() KogitoSupportingServiceSpecResourcesLimitsOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesLimitsOutput) ToKogitoSupportingServiceSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesLimitsOutput {
	return o
}

type KogitoSupportingServiceSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoSupportingServiceSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesLimitsMapOutput) ToKogitoSupportingServiceSpecResourcesLimitsMapOutput() KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesLimitsMapOutput) ToKogitoSupportingServiceSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoSupportingServiceSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoSupportingServiceSpecResourcesLimits {
		return vs[0].(map[string]KogitoSupportingServiceSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoSupportingServiceSpecResourcesLimitsOutput)
}

type KogitoSupportingServiceSpecResourcesRequests struct {
}

// KogitoSupportingServiceSpecResourcesRequestsInput is an input type that accepts KogitoSupportingServiceSpecResourcesRequestsArgs and KogitoSupportingServiceSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesRequestsInput` via:
//
//          KogitoSupportingServiceSpecResourcesRequestsArgs{...}
type KogitoSupportingServiceSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesRequestsOutput() KogitoSupportingServiceSpecResourcesRequestsOutput
	ToKogitoSupportingServiceSpecResourcesRequestsOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesRequestsOutput
}

type KogitoSupportingServiceSpecResourcesRequestsArgs struct {
}

func (KogitoSupportingServiceSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecResourcesRequestsArgs) ToKogitoSupportingServiceSpecResourcesRequestsOutput() KogitoSupportingServiceSpecResourcesRequestsOutput {
	return i.ToKogitoSupportingServiceSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesRequestsArgs) ToKogitoSupportingServiceSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesRequestsOutput)
}

// KogitoSupportingServiceSpecResourcesRequestsMapInput is an input type that accepts KogitoSupportingServiceSpecResourcesRequestsMap and KogitoSupportingServiceSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecResourcesRequestsMapInput` via:
//
//          KogitoSupportingServiceSpecResourcesRequestsMap{ "key": KogitoSupportingServiceSpecResourcesRequestsArgs{...} }
type KogitoSupportingServiceSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecResourcesRequestsMapOutput() KogitoSupportingServiceSpecResourcesRequestsMapOutput
	ToKogitoSupportingServiceSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoSupportingServiceSpecResourcesRequestsMapOutput
}

type KogitoSupportingServiceSpecResourcesRequestsMap map[string]KogitoSupportingServiceSpecResourcesRequestsInput

func (KogitoSupportingServiceSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoSupportingServiceSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecResourcesRequestsMap) ToKogitoSupportingServiceSpecResourcesRequestsMapOutput() KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return i.ToKogitoSupportingServiceSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecResourcesRequestsMap) ToKogitoSupportingServiceSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecResourcesRequestsMapOutput)
}

type KogitoSupportingServiceSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesRequestsOutput) ToKogitoSupportingServiceSpecResourcesRequestsOutput() KogitoSupportingServiceSpecResourcesRequestsOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesRequestsOutput) ToKogitoSupportingServiceSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesRequestsOutput {
	return o
}

type KogitoSupportingServiceSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoSupportingServiceSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecResourcesRequestsMapOutput) ToKogitoSupportingServiceSpecResourcesRequestsMapOutput() KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesRequestsMapOutput) ToKogitoSupportingServiceSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoSupportingServiceSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoSupportingServiceSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoSupportingServiceSpecResourcesRequests {
		return vs[0].(map[string]KogitoSupportingServiceSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoSupportingServiceSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoSupportingServiceSpecServiceLabels struct {
}

// KogitoSupportingServiceSpecServiceLabelsInput is an input type that accepts KogitoSupportingServiceSpecServiceLabelsArgs and KogitoSupportingServiceSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceSpecServiceLabelsInput` via:
//
//          KogitoSupportingServiceSpecServiceLabelsArgs{...}
type KogitoSupportingServiceSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceSpecServiceLabelsOutput() KogitoSupportingServiceSpecServiceLabelsOutput
	ToKogitoSupportingServiceSpecServiceLabelsOutputWithContext(context.Context) KogitoSupportingServiceSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoSupportingServiceSpecServiceLabelsArgs struct {
}

func (KogitoSupportingServiceSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecServiceLabels)(nil)).Elem()
}

func (i KogitoSupportingServiceSpecServiceLabelsArgs) ToKogitoSupportingServiceSpecServiceLabelsOutput() KogitoSupportingServiceSpecServiceLabelsOutput {
	return i.ToKogitoSupportingServiceSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceSpecServiceLabelsArgs) ToKogitoSupportingServiceSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoSupportingServiceSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceSpecServiceLabels)(nil)).Elem()
}

func (o KogitoSupportingServiceSpecServiceLabelsOutput) ToKogitoSupportingServiceSpecServiceLabelsOutput() KogitoSupportingServiceSpecServiceLabelsOutput {
	return o
}

func (o KogitoSupportingServiceSpecServiceLabelsOutput) ToKogitoSupportingServiceSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoSupportingServiceSpecServiceLabelsOutput {
	return o
}

// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
type KogitoSupportingServiceStatus struct {
	// Describes the CloudEvents that this instance can consume or produce
	CloudEvents *KogitoSupportingServiceStatusCloudEvents `pulumi:"cloudEvents"`
	// History of conditions for the resource
	Conditions []KogitoSupportingServiceStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoSupportingServiceStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoSupportingServiceStatusInput is an input type that accepts KogitoSupportingServiceStatusArgs and KogitoSupportingServiceStatusOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusInput` via:
//
//          KogitoSupportingServiceStatusArgs{...}
type KogitoSupportingServiceStatusInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusOutput() KogitoSupportingServiceStatusOutput
	ToKogitoSupportingServiceStatusOutputWithContext(context.Context) KogitoSupportingServiceStatusOutput
}

// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
type KogitoSupportingServiceStatusArgs struct {
	// Describes the CloudEvents that this instance can consume or produce
	CloudEvents KogitoSupportingServiceStatusCloudEventsPtrInput `pulumi:"cloudEvents"`
	// History of conditions for the resource
	Conditions KogitoSupportingServiceStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoSupportingServiceStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoSupportingServiceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatus)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusArgs) ToKogitoSupportingServiceStatusOutput() KogitoSupportingServiceStatusOutput {
	return i.ToKogitoSupportingServiceStatusOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusArgs) ToKogitoSupportingServiceStatusOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusOutput)
}

func (i KogitoSupportingServiceStatusArgs) ToKogitoSupportingServiceStatusPtrOutput() KogitoSupportingServiceStatusPtrOutput {
	return i.ToKogitoSupportingServiceStatusPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusArgs) ToKogitoSupportingServiceStatusPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusOutput).ToKogitoSupportingServiceStatusPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceStatusPtrInput is an input type that accepts KogitoSupportingServiceStatusArgs, KogitoSupportingServiceStatusPtr and KogitoSupportingServiceStatusPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusPtrInput` via:
//
//          KogitoSupportingServiceStatusArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceStatusPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusPtrOutput() KogitoSupportingServiceStatusPtrOutput
	ToKogitoSupportingServiceStatusPtrOutputWithContext(context.Context) KogitoSupportingServiceStatusPtrOutput
}

type kogitoSupportingServiceStatusPtrType KogitoSupportingServiceStatusArgs

func KogitoSupportingServiceStatusPtr(v *KogitoSupportingServiceStatusArgs) KogitoSupportingServiceStatusPtrInput {
	return (*kogitoSupportingServiceStatusPtrType)(v)
}

func (*kogitoSupportingServiceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceStatus)(nil)).Elem()
}

func (i *kogitoSupportingServiceStatusPtrType) ToKogitoSupportingServiceStatusPtrOutput() KogitoSupportingServiceStatusPtrOutput {
	return i.ToKogitoSupportingServiceStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceStatusPtrType) ToKogitoSupportingServiceStatusPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusPtrOutput)
}

// KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
type KogitoSupportingServiceStatusOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatus)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusOutput) ToKogitoSupportingServiceStatusOutput() KogitoSupportingServiceStatusOutput {
	return o
}

func (o KogitoSupportingServiceStatusOutput) ToKogitoSupportingServiceStatusOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusOutput {
	return o
}

func (o KogitoSupportingServiceStatusOutput) ToKogitoSupportingServiceStatusPtrOutput() KogitoSupportingServiceStatusPtrOutput {
	return o.ToKogitoSupportingServiceStatusPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceStatusOutput) ToKogitoSupportingServiceStatusPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) *KogitoSupportingServiceStatus {
		return &v
	}).(KogitoSupportingServiceStatusPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
func (o KogitoSupportingServiceStatusOutput) CloudEvents() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) *KogitoSupportingServiceStatusCloudEvents { return v.CloudEvents }).(KogitoSupportingServiceStatusCloudEventsPtrOutput)
}

// History of conditions for the resource
func (o KogitoSupportingServiceStatusOutput) Conditions() KogitoSupportingServiceStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) []KogitoSupportingServiceStatusConditions { return v.Conditions }).(KogitoSupportingServiceStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoSupportingServiceStatusOutput) DeploymentConditions() KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) []KogitoSupportingServiceStatusDeploymentConditions {
		return v.DeploymentConditions
	}).(KogitoSupportingServiceStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoSupportingServiceStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoSupportingServiceStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoSupportingServiceStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceStatus)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusPtrOutput) ToKogitoSupportingServiceStatusPtrOutput() KogitoSupportingServiceStatusPtrOutput {
	return o
}

func (o KogitoSupportingServiceStatusPtrOutput) ToKogitoSupportingServiceStatusPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusPtrOutput {
	return o
}

func (o KogitoSupportingServiceStatusPtrOutput) Elem() KogitoSupportingServiceStatusOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) KogitoSupportingServiceStatus { return *v }).(KogitoSupportingServiceStatusOutput)
}

// Describes the CloudEvents that this instance can consume or produce
func (o KogitoSupportingServiceStatusPtrOutput) CloudEvents() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) *KogitoSupportingServiceStatusCloudEvents {
		if v == nil {
			return nil
		}
		return v.CloudEvents
	}).(KogitoSupportingServiceStatusCloudEventsPtrOutput)
}

// History of conditions for the resource
func (o KogitoSupportingServiceStatusPtrOutput) Conditions() KogitoSupportingServiceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) []KogitoSupportingServiceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoSupportingServiceStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoSupportingServiceStatusPtrOutput) DeploymentConditions() KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) []KogitoSupportingServiceStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoSupportingServiceStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoSupportingServiceStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoSupportingServiceStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoSupportingServiceStatusCloudEvents struct {
	Consumes []KogitoSupportingServiceStatusCloudEventsConsumes `pulumi:"consumes"`
	Produces []KogitoSupportingServiceStatusCloudEventsProduces `pulumi:"produces"`
}

// KogitoSupportingServiceStatusCloudEventsInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsArgs and KogitoSupportingServiceStatusCloudEventsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsArgs{...}
type KogitoSupportingServiceStatusCloudEventsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsOutput() KogitoSupportingServiceStatusCloudEventsOutput
	ToKogitoSupportingServiceStatusCloudEventsOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsOutput
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoSupportingServiceStatusCloudEventsArgs struct {
	Consumes KogitoSupportingServiceStatusCloudEventsConsumesArrayInput `pulumi:"consumes"`
	Produces KogitoSupportingServiceStatusCloudEventsProducesArrayInput `pulumi:"produces"`
}

func (KogitoSupportingServiceStatusCloudEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEvents)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusCloudEventsArgs) ToKogitoSupportingServiceStatusCloudEventsOutput() KogitoSupportingServiceStatusCloudEventsOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsArgs) ToKogitoSupportingServiceStatusCloudEventsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsOutput)
}

func (i KogitoSupportingServiceStatusCloudEventsArgs) ToKogitoSupportingServiceStatusCloudEventsPtrOutput() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsArgs) ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsOutput).ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(ctx)
}

// KogitoSupportingServiceStatusCloudEventsPtrInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsArgs, KogitoSupportingServiceStatusCloudEventsPtr and KogitoSupportingServiceStatusCloudEventsPtrOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsPtrInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsArgs{...}
//
//  or:
//
//          nil
type KogitoSupportingServiceStatusCloudEventsPtrInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsPtrOutput() KogitoSupportingServiceStatusCloudEventsPtrOutput
	ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsPtrOutput
}

type kogitoSupportingServiceStatusCloudEventsPtrType KogitoSupportingServiceStatusCloudEventsArgs

func KogitoSupportingServiceStatusCloudEventsPtr(v *KogitoSupportingServiceStatusCloudEventsArgs) KogitoSupportingServiceStatusCloudEventsPtrInput {
	return (*kogitoSupportingServiceStatusCloudEventsPtrType)(v)
}

func (*kogitoSupportingServiceStatusCloudEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceStatusCloudEvents)(nil)).Elem()
}

func (i *kogitoSupportingServiceStatusCloudEventsPtrType) ToKogitoSupportingServiceStatusCloudEventsPtrOutput() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (i *kogitoSupportingServiceStatusCloudEventsPtrType) ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsPtrOutput)
}

// Describes the CloudEvents that this instance can consume or produce
type KogitoSupportingServiceStatusCloudEventsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEvents)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsOutput) ToKogitoSupportingServiceStatusCloudEventsOutput() KogitoSupportingServiceStatusCloudEventsOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsOutput) ToKogitoSupportingServiceStatusCloudEventsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsOutput) ToKogitoSupportingServiceStatusCloudEventsPtrOutput() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o.ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(context.Background())
}

func (o KogitoSupportingServiceStatusCloudEventsOutput) ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEvents) *KogitoSupportingServiceStatusCloudEvents {
		return &v
	}).(KogitoSupportingServiceStatusCloudEventsPtrOutput)
}
func (o KogitoSupportingServiceStatusCloudEventsOutput) Consumes() KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEvents) []KogitoSupportingServiceStatusCloudEventsConsumes {
		return v.Consumes
	}).(KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput)
}

func (o KogitoSupportingServiceStatusCloudEventsOutput) Produces() KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEvents) []KogitoSupportingServiceStatusCloudEventsProduces {
		return v.Produces
	}).(KogitoSupportingServiceStatusCloudEventsProducesArrayOutput)
}

type KogitoSupportingServiceStatusCloudEventsPtrOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoSupportingServiceStatusCloudEvents)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsPtrOutput) ToKogitoSupportingServiceStatusCloudEventsPtrOutput() KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsPtrOutput) ToKogitoSupportingServiceStatusCloudEventsPtrOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsPtrOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsPtrOutput) Elem() KogitoSupportingServiceStatusCloudEventsOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatusCloudEvents) KogitoSupportingServiceStatusCloudEvents { return *v }).(KogitoSupportingServiceStatusCloudEventsOutput)
}

func (o KogitoSupportingServiceStatusCloudEventsPtrOutput) Consumes() KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatusCloudEvents) []KogitoSupportingServiceStatusCloudEventsConsumes {
		if v == nil {
			return nil
		}
		return v.Consumes
	}).(KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput)
}

func (o KogitoSupportingServiceStatusCloudEventsPtrOutput) Produces() KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return o.ApplyT(func(v *KogitoSupportingServiceStatusCloudEvents) []KogitoSupportingServiceStatusCloudEventsProduces {
		if v == nil {
			return nil
		}
		return v.Produces
	}).(KogitoSupportingServiceStatusCloudEventsProducesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsConsumes struct {
	Source *string `pulumi:"source"`
	Type   string  `pulumi:"type"`
}

// KogitoSupportingServiceStatusCloudEventsConsumesInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsConsumesArgs and KogitoSupportingServiceStatusCloudEventsConsumesOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsConsumesInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsConsumesArgs{...}
type KogitoSupportingServiceStatusCloudEventsConsumesInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsConsumesOutput() KogitoSupportingServiceStatusCloudEventsConsumesOutput
	ToKogitoSupportingServiceStatusCloudEventsConsumesOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsConsumesOutput
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsConsumesArgs struct {
	Source pulumi.StringPtrInput `pulumi:"source"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (KogitoSupportingServiceStatusCloudEventsConsumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEventsConsumes)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusCloudEventsConsumesArgs) ToKogitoSupportingServiceStatusCloudEventsConsumesOutput() KogitoSupportingServiceStatusCloudEventsConsumesOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsConsumesOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsConsumesArgs) ToKogitoSupportingServiceStatusCloudEventsConsumesOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsConsumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsConsumesOutput)
}

// KogitoSupportingServiceStatusCloudEventsConsumesArrayInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsConsumesArray and KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsConsumesArrayInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsConsumesArray{ KogitoSupportingServiceStatusCloudEventsConsumesArgs{...} }
type KogitoSupportingServiceStatusCloudEventsConsumesArrayInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutput() KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput
	ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput
}

type KogitoSupportingServiceStatusCloudEventsConsumesArray []KogitoSupportingServiceStatusCloudEventsConsumesInput

func (KogitoSupportingServiceStatusCloudEventsConsumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusCloudEventsConsumes)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusCloudEventsConsumesArray) ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutput() KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsConsumesArray) ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsConsumesOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsConsumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEventsConsumes)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesOutput) ToKogitoSupportingServiceStatusCloudEventsConsumesOutput() KogitoSupportingServiceStatusCloudEventsConsumesOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesOutput) ToKogitoSupportingServiceStatusCloudEventsConsumesOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsConsumesOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEventsConsumes) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEventsConsumes) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusCloudEventsConsumes)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput) ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutput() KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput) ToKogitoSupportingServiceStatusCloudEventsConsumesArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput) Index(i pulumi.IntInput) KogitoSupportingServiceStatusCloudEventsConsumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoSupportingServiceStatusCloudEventsConsumes {
		return vs[0].([]KogitoSupportingServiceStatusCloudEventsConsumes)[vs[1].(int)]
	}).(KogitoSupportingServiceStatusCloudEventsConsumesOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsProduces struct {
	Source *string `pulumi:"source"`
	Type   string  `pulumi:"type"`
}

// KogitoSupportingServiceStatusCloudEventsProducesInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsProducesArgs and KogitoSupportingServiceStatusCloudEventsProducesOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsProducesInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsProducesArgs{...}
type KogitoSupportingServiceStatusCloudEventsProducesInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsProducesOutput() KogitoSupportingServiceStatusCloudEventsProducesOutput
	ToKogitoSupportingServiceStatusCloudEventsProducesOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsProducesOutput
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsProducesArgs struct {
	Source pulumi.StringPtrInput `pulumi:"source"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (KogitoSupportingServiceStatusCloudEventsProducesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEventsProduces)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusCloudEventsProducesArgs) ToKogitoSupportingServiceStatusCloudEventsProducesOutput() KogitoSupportingServiceStatusCloudEventsProducesOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsProducesOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsProducesArgs) ToKogitoSupportingServiceStatusCloudEventsProducesOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsProducesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsProducesOutput)
}

// KogitoSupportingServiceStatusCloudEventsProducesArrayInput is an input type that accepts KogitoSupportingServiceStatusCloudEventsProducesArray and KogitoSupportingServiceStatusCloudEventsProducesArrayOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusCloudEventsProducesArrayInput` via:
//
//          KogitoSupportingServiceStatusCloudEventsProducesArray{ KogitoSupportingServiceStatusCloudEventsProducesArgs{...} }
type KogitoSupportingServiceStatusCloudEventsProducesArrayInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutput() KogitoSupportingServiceStatusCloudEventsProducesArrayOutput
	ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutputWithContext(context.Context) KogitoSupportingServiceStatusCloudEventsProducesArrayOutput
}

type KogitoSupportingServiceStatusCloudEventsProducesArray []KogitoSupportingServiceStatusCloudEventsProducesInput

func (KogitoSupportingServiceStatusCloudEventsProducesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusCloudEventsProduces)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusCloudEventsProducesArray) ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutput() KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return i.ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusCloudEventsProducesArray) ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusCloudEventsProducesArrayOutput)
}

// KogitoCloudEventInfo describes the CloudEvent information based on the specification
type KogitoSupportingServiceStatusCloudEventsProducesOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsProducesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusCloudEventsProduces)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsProducesOutput) ToKogitoSupportingServiceStatusCloudEventsProducesOutput() KogitoSupportingServiceStatusCloudEventsProducesOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsProducesOutput) ToKogitoSupportingServiceStatusCloudEventsProducesOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsProducesOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsProducesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEventsProduces) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceStatusCloudEventsProducesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusCloudEventsProduces) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoSupportingServiceStatusCloudEventsProducesArrayOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusCloudEventsProducesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusCloudEventsProduces)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusCloudEventsProducesArrayOutput) ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutput() KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsProducesArrayOutput) ToKogitoSupportingServiceStatusCloudEventsProducesArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusCloudEventsProducesArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusCloudEventsProducesArrayOutput) Index(i pulumi.IntInput) KogitoSupportingServiceStatusCloudEventsProducesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoSupportingServiceStatusCloudEventsProduces {
		return vs[0].([]KogitoSupportingServiceStatusCloudEventsProduces)[vs[1].(int)]
	}).(KogitoSupportingServiceStatusCloudEventsProducesOutput)
}

// Condition is the detailed condition for the resource
type KogitoSupportingServiceStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// KogitoServiceConditionReason is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoSupportingServiceStatusConditionsInput is an input type that accepts KogitoSupportingServiceStatusConditionsArgs and KogitoSupportingServiceStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusConditionsInput` via:
//
//          KogitoSupportingServiceStatusConditionsArgs{...}
type KogitoSupportingServiceStatusConditionsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusConditionsOutput() KogitoSupportingServiceStatusConditionsOutput
	ToKogitoSupportingServiceStatusConditionsOutputWithContext(context.Context) KogitoSupportingServiceStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoSupportingServiceStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// KogitoServiceConditionReason is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoSupportingServiceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusConditions)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusConditionsArgs) ToKogitoSupportingServiceStatusConditionsOutput() KogitoSupportingServiceStatusConditionsOutput {
	return i.ToKogitoSupportingServiceStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusConditionsArgs) ToKogitoSupportingServiceStatusConditionsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusConditionsOutput)
}

// KogitoSupportingServiceStatusConditionsArrayInput is an input type that accepts KogitoSupportingServiceStatusConditionsArray and KogitoSupportingServiceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusConditionsArrayInput` via:
//
//          KogitoSupportingServiceStatusConditionsArray{ KogitoSupportingServiceStatusConditionsArgs{...} }
type KogitoSupportingServiceStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusConditionsArrayOutput() KogitoSupportingServiceStatusConditionsArrayOutput
	ToKogitoSupportingServiceStatusConditionsArrayOutputWithContext(context.Context) KogitoSupportingServiceStatusConditionsArrayOutput
}

type KogitoSupportingServiceStatusConditionsArray []KogitoSupportingServiceStatusConditionsInput

func (KogitoSupportingServiceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusConditions)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusConditionsArray) ToKogitoSupportingServiceStatusConditionsArrayOutput() KogitoSupportingServiceStatusConditionsArrayOutput {
	return i.ToKogitoSupportingServiceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusConditionsArray) ToKogitoSupportingServiceStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoSupportingServiceStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusConditions)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusConditionsOutput) ToKogitoSupportingServiceStatusConditionsOutput() KogitoSupportingServiceStatusConditionsOutput {
	return o
}

func (o KogitoSupportingServiceStatusConditionsOutput) ToKogitoSupportingServiceStatusConditionsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusConditionsOutput {
	return o
}

func (o KogitoSupportingServiceStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// KogitoServiceConditionReason is the type of reason
func (o KogitoSupportingServiceStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoSupportingServiceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoSupportingServiceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoSupportingServiceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusConditions)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusConditionsArrayOutput) ToKogitoSupportingServiceStatusConditionsArrayOutput() KogitoSupportingServiceStatusConditionsArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusConditionsArrayOutput) ToKogitoSupportingServiceStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusConditionsArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoSupportingServiceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoSupportingServiceStatusConditions {
		return vs[0].([]KogitoSupportingServiceStatusConditions)[vs[1].(int)]
	}).(KogitoSupportingServiceStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoSupportingServiceStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoSupportingServiceStatusDeploymentConditionsInput is an input type that accepts KogitoSupportingServiceStatusDeploymentConditionsArgs and KogitoSupportingServiceStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusDeploymentConditionsInput` via:
//
//          KogitoSupportingServiceStatusDeploymentConditionsArgs{...}
type KogitoSupportingServiceStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusDeploymentConditionsOutput() KogitoSupportingServiceStatusDeploymentConditionsOutput
	ToKogitoSupportingServiceStatusDeploymentConditionsOutputWithContext(context.Context) KogitoSupportingServiceStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoSupportingServiceStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoSupportingServiceStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusDeploymentConditionsArgs) ToKogitoSupportingServiceStatusDeploymentConditionsOutput() KogitoSupportingServiceStatusDeploymentConditionsOutput {
	return i.ToKogitoSupportingServiceStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusDeploymentConditionsArgs) ToKogitoSupportingServiceStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusDeploymentConditionsOutput)
}

// KogitoSupportingServiceStatusDeploymentConditionsArrayInput is an input type that accepts KogitoSupportingServiceStatusDeploymentConditionsArray and KogitoSupportingServiceStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoSupportingServiceStatusDeploymentConditionsArrayInput` via:
//
//          KogitoSupportingServiceStatusDeploymentConditionsArray{ KogitoSupportingServiceStatusDeploymentConditionsArgs{...} }
type KogitoSupportingServiceStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutput() KogitoSupportingServiceStatusDeploymentConditionsArrayOutput
	ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoSupportingServiceStatusDeploymentConditionsArrayOutput
}

type KogitoSupportingServiceStatusDeploymentConditionsArray []KogitoSupportingServiceStatusDeploymentConditionsInput

func (KogitoSupportingServiceStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoSupportingServiceStatusDeploymentConditionsArray) ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutput() KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoSupportingServiceStatusDeploymentConditionsArray) ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoSupportingServiceStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoSupportingServiceStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoSupportingServiceStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) ToKogitoSupportingServiceStatusDeploymentConditionsOutput() KogitoSupportingServiceStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) ToKogitoSupportingServiceStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoSupportingServiceStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoSupportingServiceStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoSupportingServiceStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoSupportingServiceStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoSupportingServiceStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoSupportingServiceStatusDeploymentConditionsArrayOutput) ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutput() KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusDeploymentConditionsArrayOutput) ToKogitoSupportingServiceStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoSupportingServiceStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoSupportingServiceStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoSupportingServiceStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoSupportingServiceStatusDeploymentConditions {
		return vs[0].([]KogitoSupportingServiceStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoSupportingServiceStatusDeploymentConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(KogitoBuildTypeOutput{})
	pulumi.RegisterOutputType(KogitoBuildMetadataOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourceOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourcePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraTypeOutput{})
	pulumi.RegisterOutputType(KogitoInfraMetadataOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecResourceOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecResourcePtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusAppPropsOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusConditionOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusConditionPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesMountOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeConfigMapOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeConfigMapPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeConfigMapItemsOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeSecretOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeSecretPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeSecretItemsOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusVolumesVolumeSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeTypeOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeMetadataOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecConfigOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecMonitoringOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecMonitoringPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsConsumesOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsConsumesArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsProducesOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusCloudEventsProducesArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusDeploymentConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceTypeOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceMetadataOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecConfigOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecMonitoringOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecMonitoringPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsPtrOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsConsumesOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsConsumesArrayOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsProducesOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusCloudEventsProducesArrayOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoSupportingServiceStatusDeploymentConditionsArrayOutput{})
}

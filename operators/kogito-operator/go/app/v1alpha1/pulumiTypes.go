// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec *KogitoBuildSpec `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status *KogitoBuildStatus `pulumi:"status"`
}

// KogitoBuildTypeInput is an input type that accepts KogitoBuildTypeArgs and KogitoBuildTypeOutput values.
// You can construct a concrete instance of `KogitoBuildTypeInput` via:
//
//          KogitoBuildTypeArgs{...}
type KogitoBuildTypeInput interface {
	pulumi.Input

	ToKogitoBuildTypeOutput() KogitoBuildTypeOutput
	ToKogitoBuildTypeOutputWithContext(context.Context) KogitoBuildTypeOutput
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrInput `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrInput `pulumi:"status"`
}

func (KogitoBuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return i.ToKogitoBuildTypeOutputWithContext(context.Background())
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildTypeOutput)
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeOutput struct{ *pulumi.OutputState }

func (KogitoBuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
func (o KogitoBuildTypeOutput) Spec() KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildSpec { return v.Spec }).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
func (o KogitoBuildTypeOutput) Status() KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildStatus { return v.Status }).(KogitoBuildStatusPtrOutput)
}

type KogitoBuildMetadata struct {
}

// KogitoBuildMetadataInput is an input type that accepts KogitoBuildMetadataArgs and KogitoBuildMetadataOutput values.
// You can construct a concrete instance of `KogitoBuildMetadataInput` via:
//
//          KogitoBuildMetadataArgs{...}
type KogitoBuildMetadataInput interface {
	pulumi.Input

	ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput
	ToKogitoBuildMetadataOutputWithContext(context.Context) KogitoBuildMetadataOutput
}

type KogitoBuildMetadataArgs struct {
}

func (KogitoBuildMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildMetadata)(nil)).Elem()
}

func (i KogitoBuildMetadataArgs) ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput {
	return i.ToKogitoBuildMetadataOutputWithContext(context.Background())
}

func (i KogitoBuildMetadataArgs) ToKogitoBuildMetadataOutputWithContext(ctx context.Context) KogitoBuildMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildMetadataOutput)
}

type KogitoBuildMetadataOutput struct{ *pulumi.OutputState }

func (KogitoBuildMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildMetadata)(nil)).Elem()
}

func (o KogitoBuildMetadataOutput) ToKogitoBuildMetadataOutput() KogitoBuildMetadataOutput {
	return o
}

func (o KogitoBuildMetadataOutput) ToKogitoBuildMetadataOutputWithContext(ctx context.Context) KogitoBuildMetadataOutput {
	return o
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpec struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact *KogitoBuildSpecArtifact `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage *KogitoBuildSpecBuildImage `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental *bool `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput *bool `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Envs []KogitoBuildSpecEnvs `pulumi:"envs"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource *KogitoBuildSpecGitSource `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL *string `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native *bool `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources *KogitoBuildSpecResources `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime *string `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage *KogitoBuildSpecRuntimeImage `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime *string `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type string `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks []KogitoBuildSpecWebHooks `pulumi:"webHooks"`
}

// KogitoBuildSpecInput is an input type that accepts KogitoBuildSpecArgs and KogitoBuildSpecOutput values.
// You can construct a concrete instance of `KogitoBuildSpecInput` via:
//
//          KogitoBuildSpecArgs{...}
type KogitoBuildSpecInput interface {
	pulumi.Input

	ToKogitoBuildSpecOutput() KogitoBuildSpecOutput
	ToKogitoBuildSpecOutputWithContext(context.Context) KogitoBuildSpecOutput
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecArgs struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact KogitoBuildSpecArtifactPtrInput `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage KogitoBuildSpecBuildImagePtrInput `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental pulumi.BoolPtrInput `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput pulumi.BoolPtrInput `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Envs KogitoBuildSpecEnvsArrayInput `pulumi:"envs"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource KogitoBuildSpecGitSourcePtrInput `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL pulumi.StringPtrInput `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native pulumi.BoolPtrInput `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources KogitoBuildSpecResourcesPtrInput `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage KogitoBuildSpecRuntimeImagePtrInput `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime pulumi.StringPtrInput `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type pulumi.StringInput `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks KogitoBuildSpecWebHooksArrayInput `pulumi:"webHooks"`
}

func (KogitoBuildSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return i.ToKogitoBuildSpecOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput)
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput).ToKogitoBuildSpecPtrOutputWithContext(ctx)
}

// KogitoBuildSpecPtrInput is an input type that accepts KogitoBuildSpecArgs, KogitoBuildSpecPtr and KogitoBuildSpecPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecPtrInput` via:
//
//          KogitoBuildSpecArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput
	ToKogitoBuildSpecPtrOutputWithContext(context.Context) KogitoBuildSpecPtrOutput
}

type kogitoBuildSpecPtrType KogitoBuildSpecArgs

func KogitoBuildSpecPtr(v *KogitoBuildSpecArgs) KogitoBuildSpecPtrInput {
	return (*kogitoBuildSpecPtrType)(v)
}

func (*kogitoBuildSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpec {
		return &v
	}).(KogitoBuildSpecPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecArtifact { return v.Artifact }).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) BuildImage() KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecBuildImage { return v.BuildImage }).(KogitoBuildSpecBuildImagePtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.DisableIncremental }).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.EnableMavenDownloadOutput }).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecOutput) Envs() KogitoBuildSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecEnvs { return v.Envs }).(KogitoBuildSpecEnvsArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecGitSource { return v.GitSource }).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.MavenMirrorURL }).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.Native }).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecResources { return v.Resources }).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) RuntimeImage() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecRuntimeImage { return v.RuntimeImage }).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.TargetKogitoRuntime }).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpec) string { return v.Type }).(pulumi.StringOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecWebHooks { return v.WebHooks }).(KogitoBuildSpecWebHooksArrayOutput)
}

type KogitoBuildSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) Elem() KogitoBuildSpecOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) KogitoBuildSpec { return *v }).(KogitoBuildSpecOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecPtrOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) BuildImage() KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecBuildImage {
		if v == nil {
			return nil
		}
		return v.BuildImage
	}).(KogitoBuildSpecBuildImagePtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecPtrOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableIncremental
	}).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecPtrOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMavenDownloadOutput
	}).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecPtrOutput) Envs() KogitoBuildSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoBuildSpecEnvsArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecPtrOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecGitSource {
		if v == nil {
			return nil
		}
		return v.GitSource
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecPtrOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.MavenMirrorURL
	}).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecPtrOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Native
	}).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecPtrOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) RuntimeImage() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecRuntimeImage {
		if v == nil {
			return nil
		}
		return v.RuntimeImage
	}).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecPtrOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.TargetKogitoRuntime
	}).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecPtrOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecWebHooks {
		if v == nil {
			return nil
		}
		return v.WebHooks
	}).(KogitoBuildSpecWebHooksArrayOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifact struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId *string `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId *string `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version *string `pulumi:"version"`
}

// KogitoBuildSpecArtifactInput is an input type that accepts KogitoBuildSpecArtifactArgs and KogitoBuildSpecArtifactOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
type KogitoBuildSpecArtifactInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput
	ToKogitoBuildSpecArtifactOutputWithContext(context.Context) KogitoBuildSpecArtifactOutput
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactArgs struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KogitoBuildSpecArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return i.ToKogitoBuildSpecArtifactOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput)
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput).ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx)
}

// KogitoBuildSpecArtifactPtrInput is an input type that accepts KogitoBuildSpecArtifactArgs, KogitoBuildSpecArtifactPtr and KogitoBuildSpecArtifactPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactPtrInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecArtifactPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput
	ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Context) KogitoBuildSpecArtifactPtrOutput
}

type kogitoBuildSpecArtifactPtrType KogitoBuildSpecArtifactArgs

func KogitoBuildSpecArtifactPtr(v *KogitoBuildSpecArtifactArgs) KogitoBuildSpecArtifactPtrInput {
	return (*kogitoBuildSpecArtifactPtrType)(v)
}

func (*kogitoBuildSpecArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *KogitoBuildSpecArtifact {
		return &v
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecArtifactPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) Elem() KogitoBuildSpecArtifactOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) KogitoBuildSpecArtifact { return *v }).(KogitoBuildSpecArtifactOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactPtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoBuildSpecBuildImageInput is an input type that accepts KogitoBuildSpecBuildImageArgs and KogitoBuildSpecBuildImageOutput values.
// You can construct a concrete instance of `KogitoBuildSpecBuildImageInput` via:
//
//          KogitoBuildSpecBuildImageArgs{...}
type KogitoBuildSpecBuildImageInput interface {
	pulumi.Input

	ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput
	ToKogitoBuildSpecBuildImageOutputWithContext(context.Context) KogitoBuildSpecBuildImageOutput
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoBuildSpecBuildImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput {
	return i.ToKogitoBuildSpecBuildImageOutputWithContext(context.Background())
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImageOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImageOutput)
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return i.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImageOutput).ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx)
}

// KogitoBuildSpecBuildImagePtrInput is an input type that accepts KogitoBuildSpecBuildImageArgs, KogitoBuildSpecBuildImagePtr and KogitoBuildSpecBuildImagePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecBuildImagePtrInput` via:
//
//          KogitoBuildSpecBuildImageArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecBuildImagePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput
	ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Context) KogitoBuildSpecBuildImagePtrOutput
}

type kogitoBuildSpecBuildImagePtrType KogitoBuildSpecBuildImageArgs

func KogitoBuildSpecBuildImagePtr(v *KogitoBuildSpecBuildImageArgs) KogitoBuildSpecBuildImagePtrInput {
	return (*kogitoBuildSpecBuildImagePtrType)(v)
}

func (*kogitoBuildSpecBuildImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (i *kogitoBuildSpecBuildImagePtrType) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return i.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecBuildImagePtrType) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImagePtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImageOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecBuildImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput {
	return o
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImageOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImageOutput {
	return o
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return o.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *KogitoBuildSpecBuildImage {
		return &v
	}).(KogitoBuildSpecBuildImagePtrOutput)
}
func (o KogitoBuildSpecBuildImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecBuildImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecBuildImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (o KogitoBuildSpecBuildImagePtrOutput) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return o
}

func (o KogitoBuildSpecBuildImagePtrOutput) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return o
}

func (o KogitoBuildSpecBuildImagePtrOutput) Elem() KogitoBuildSpecBuildImageOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) KogitoBuildSpecBuildImage { return *v }).(KogitoBuildSpecBuildImageOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoBuildSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoBuildSpecEnvsInput is an input type that accepts KogitoBuildSpecEnvsArgs and KogitoBuildSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsInput` via:
//
//          KogitoBuildSpecEnvsArgs{...}
type KogitoBuildSpecEnvsInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput
	ToKogitoBuildSpecEnvsOutputWithContext(context.Context) KogitoBuildSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoBuildSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoBuildSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvs)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsArgs) ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput {
	return i.ToKogitoBuildSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsArgs) ToKogitoBuildSpecEnvsOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsOutput)
}

// KogitoBuildSpecEnvsArrayInput is an input type that accepts KogitoBuildSpecEnvsArray and KogitoBuildSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsArrayInput` via:
//
//          KogitoBuildSpecEnvsArray{ KogitoBuildSpecEnvsArgs{...} }
type KogitoBuildSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput
	ToKogitoBuildSpecEnvsArrayOutputWithContext(context.Context) KogitoBuildSpecEnvsArrayOutput
}

type KogitoBuildSpecEnvsArray []KogitoBuildSpecEnvsInput

func (KogitoBuildSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnvs)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsArray) ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput {
	return i.ToKogitoBuildSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsArray) ToKogitoBuildSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvs)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsOutput) ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput {
	return o
}

func (o KogitoBuildSpecEnvsOutput) ToKogitoBuildSpecEnvsOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoBuildSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoBuildSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoBuildSpecEnvsOutput) ValueFrom() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) *KogitoBuildSpecEnvsValueFrom { return v.ValueFrom }).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

type KogitoBuildSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnvs)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsArrayOutput) ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvsArrayOutput) ToKogitoBuildSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecEnvs {
		return vs[0].([]KogitoBuildSpecEnvs)[vs[1].(int)]
	}).(KogitoBuildSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoBuildSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoBuildSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoBuildSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoBuildSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoBuildSpecEnvsValueFromInput is an input type that accepts KogitoBuildSpecEnvsValueFromArgs and KogitoBuildSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromInput` via:
//
//          KogitoBuildSpecEnvsValueFromArgs{...}
type KogitoBuildSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput
	ToKogitoBuildSpecEnvsValueFromOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoBuildSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoBuildSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput {
	return i.ToKogitoBuildSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromOutput)
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromOutput).ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromArgs, KogitoBuildSpecEnvsValueFromPtr and KogitoBuildSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput
	ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromPtrOutput
}

type kogitoBuildSpecEnvsValueFromPtrType KogitoBuildSpecEnvsValueFromArgs

func KogitoBuildSpecEnvsValueFromPtr(v *KogitoBuildSpecEnvsValueFromArgs) KogitoBuildSpecEnvsValueFromPtrInput {
	return (*kogitoBuildSpecEnvsValueFromPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromPtrType) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromPtrType) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFrom {
		return &v
	}).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvsValueFromOutput) FieldRef() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromFieldRef { return v.FieldRef }).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvsValueFromOutput) ResourceFieldRef() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvsValueFromOutput) SecretKeyRef() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromSecretKeyRef { return v.SecretKeyRef }).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoBuildSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) Elem() KogitoBuildSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) KogitoBuildSpecEnvsValueFrom { return *v }).(KogitoBuildSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) FieldRef() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs and KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs, KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtr and KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoBuildSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromFieldRefArgs and KogitoBuildSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromFieldRefArgs{...}
type KogitoBuildSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput
	ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoBuildSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefOutput).ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromFieldRefArgs, KogitoBuildSpecEnvsValueFromFieldRefPtr and KogitoBuildSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromFieldRefPtrType KogitoBuildSpecEnvsValueFromFieldRefArgs

func KogitoBuildSpecEnvsValueFromFieldRefPtr(v *KogitoBuildSpecEnvsValueFromFieldRefArgs) KogitoBuildSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) *KogitoBuildSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) KogitoBuildSpecEnvsValueFromFieldRef { return *v }).(KogitoBuildSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefArgs and KogitoBuildSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoBuildSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput).ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefArgs, KogitoBuildSpecEnvsValueFromResourceFieldRefPtr and KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType KogitoBuildSpecEnvsValueFromResourceFieldRefArgs

func KogitoBuildSpecEnvsValueFromResourceFieldRefPtr(v *KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromSecretKeyRefArgs and KogitoBuildSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoBuildSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput).ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromSecretKeyRefArgs, KogitoBuildSpecEnvsValueFromSecretKeyRefPtr and KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType KogitoBuildSpecEnvsValueFromSecretKeyRefArgs

func KogitoBuildSpecEnvsValueFromSecretKeyRefPtr(v *KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *KogitoBuildSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) KogitoBuildSpecEnvsValueFromSecretKeyRef { return *v }).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSource struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir *string `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference *string `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri string `pulumi:"uri"`
}

// KogitoBuildSpecGitSourceInput is an input type that accepts KogitoBuildSpecGitSourceArgs and KogitoBuildSpecGitSourceOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourceInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
type KogitoBuildSpecGitSourceInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput
	ToKogitoBuildSpecGitSourceOutputWithContext(context.Context) KogitoBuildSpecGitSourceOutput
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceArgs struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir pulumi.StringPtrInput `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (KogitoBuildSpecGitSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return i.ToKogitoBuildSpecGitSourceOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput)
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput).ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx)
}

// KogitoBuildSpecGitSourcePtrInput is an input type that accepts KogitoBuildSpecGitSourceArgs, KogitoBuildSpecGitSourcePtr and KogitoBuildSpecGitSourcePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourcePtrInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecGitSourcePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput
	ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Context) KogitoBuildSpecGitSourcePtrOutput
}

type kogitoBuildSpecGitSourcePtrType KogitoBuildSpecGitSourceArgs

func KogitoBuildSpecGitSourcePtr(v *KogitoBuildSpecGitSourceArgs) KogitoBuildSpecGitSourcePtrInput {
	return (*kogitoBuildSpecGitSourcePtrType)(v)
}

func (*kogitoBuildSpecGitSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourcePtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *KogitoBuildSpecGitSource {
		return &v
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourceOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.ContextDir }).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourceOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) string { return v.Uri }).(pulumi.StringOutput)
}

type KogitoBuildSpecGitSourcePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) Elem() KogitoBuildSpecGitSourceOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) KogitoBuildSpecGitSource { return *v }).(KogitoBuildSpecGitSourceOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourcePtrOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.ContextDir
	}).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourcePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoBuildSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoBuildSpecResourcesRequests `pulumi:"requests"`
}

// KogitoBuildSpecResourcesInput is an input type that accepts KogitoBuildSpecResourcesArgs and KogitoBuildSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
type KogitoBuildSpecResourcesInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput
	ToKogitoBuildSpecResourcesOutputWithContext(context.Context) KogitoBuildSpecResourcesOutput
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoBuildSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoBuildSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoBuildSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return i.ToKogitoBuildSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput)
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput).ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoBuildSpecResourcesPtrInput is an input type that accepts KogitoBuildSpecResourcesArgs, KogitoBuildSpecResourcesPtr and KogitoBuildSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesPtrInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput
	ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Context) KogitoBuildSpecResourcesPtrOutput
}

type kogitoBuildSpecResourcesPtrType KogitoBuildSpecResourcesArgs

func KogitoBuildSpecResourcesPtr(v *KogitoBuildSpecResourcesArgs) KogitoBuildSpecResourcesPtrInput {
	return (*kogitoBuildSpecResourcesPtrType)(v)
}

func (*kogitoBuildSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) *KogitoBuildSpecResources {
		return &v
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits { return v.Limits }).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests { return v.Requests }).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) Elem() KogitoBuildSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) KogitoBuildSpecResources { return *v }).(KogitoBuildSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesLimits struct {
}

// KogitoBuildSpecResourcesLimitsInput is an input type that accepts KogitoBuildSpecResourcesLimitsArgs and KogitoBuildSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsInput` via:
//
//          KogitoBuildSpecResourcesLimitsArgs{...}
type KogitoBuildSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput
	ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsOutput
}

type KogitoBuildSpecResourcesLimitsArgs struct {
}

func (KogitoBuildSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return i.ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsOutput)
}

// KogitoBuildSpecResourcesLimitsMapInput is an input type that accepts KogitoBuildSpecResourcesLimitsMap and KogitoBuildSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsMapInput` via:
//
//          KogitoBuildSpecResourcesLimitsMap{ "key": KogitoBuildSpecResourcesLimitsArgs{...} }
type KogitoBuildSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput
	ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsMapOutput
}

type KogitoBuildSpecResourcesLimitsMap map[string]KogitoBuildSpecResourcesLimitsInput

func (KogitoBuildSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return i.ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsMapOutput)
}

type KogitoBuildSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return o
}

type KogitoBuildSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesLimits {
		return vs[0].(map[string]KogitoBuildSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesLimitsOutput)
}

type KogitoBuildSpecResourcesRequests struct {
}

// KogitoBuildSpecResourcesRequestsInput is an input type that accepts KogitoBuildSpecResourcesRequestsArgs and KogitoBuildSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsInput` via:
//
//          KogitoBuildSpecResourcesRequestsArgs{...}
type KogitoBuildSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput
	ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsOutput
}

type KogitoBuildSpecResourcesRequestsArgs struct {
}

func (KogitoBuildSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return i.ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsOutput)
}

// KogitoBuildSpecResourcesRequestsMapInput is an input type that accepts KogitoBuildSpecResourcesRequestsMap and KogitoBuildSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsMapInput` via:
//
//          KogitoBuildSpecResourcesRequestsMap{ "key": KogitoBuildSpecResourcesRequestsArgs{...} }
type KogitoBuildSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput
	ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsMapOutput
}

type KogitoBuildSpecResourcesRequestsMap map[string]KogitoBuildSpecResourcesRequestsInput

func (KogitoBuildSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return i.ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return o
}

type KogitoBuildSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesRequests {
		return vs[0].(map[string]KogitoBuildSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesRequestsOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoBuildSpecRuntimeImageInput is an input type that accepts KogitoBuildSpecRuntimeImageArgs and KogitoBuildSpecRuntimeImageOutput values.
// You can construct a concrete instance of `KogitoBuildSpecRuntimeImageInput` via:
//
//          KogitoBuildSpecRuntimeImageArgs{...}
type KogitoBuildSpecRuntimeImageInput interface {
	pulumi.Input

	ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput
	ToKogitoBuildSpecRuntimeImageOutputWithContext(context.Context) KogitoBuildSpecRuntimeImageOutput
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoBuildSpecRuntimeImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput {
	return i.ToKogitoBuildSpecRuntimeImageOutputWithContext(context.Background())
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImageOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImageOutput)
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return i.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImageOutput).ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx)
}

// KogitoBuildSpecRuntimeImagePtrInput is an input type that accepts KogitoBuildSpecRuntimeImageArgs, KogitoBuildSpecRuntimeImagePtr and KogitoBuildSpecRuntimeImagePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecRuntimeImagePtrInput` via:
//
//          KogitoBuildSpecRuntimeImageArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecRuntimeImagePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput
	ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Context) KogitoBuildSpecRuntimeImagePtrOutput
}

type kogitoBuildSpecRuntimeImagePtrType KogitoBuildSpecRuntimeImageArgs

func KogitoBuildSpecRuntimeImagePtr(v *KogitoBuildSpecRuntimeImageArgs) KogitoBuildSpecRuntimeImagePtrInput {
	return (*kogitoBuildSpecRuntimeImagePtrType)(v)
}

func (*kogitoBuildSpecRuntimeImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (i *kogitoBuildSpecRuntimeImagePtrType) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return i.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecRuntimeImagePtrType) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImageOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecRuntimeImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImageOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImageOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *KogitoBuildSpecRuntimeImage {
		return &v
	}).(KogitoBuildSpecRuntimeImagePtrOutput)
}
func (o KogitoBuildSpecRuntimeImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecRuntimeImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecRuntimeImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Elem() KogitoBuildSpecRuntimeImageOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) KogitoBuildSpecRuntimeImage { return *v }).(KogitoBuildSpecRuntimeImageOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooks struct {
	// Secret value for webHook
	Secret *string `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type *string `pulumi:"type"`
}

// KogitoBuildSpecWebHooksInput is an input type that accepts KogitoBuildSpecWebHooksArgs and KogitoBuildSpecWebHooksOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksInput` via:
//
//          KogitoBuildSpecWebHooksArgs{...}
type KogitoBuildSpecWebHooksInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput
	ToKogitoBuildSpecWebHooksOutputWithContext(context.Context) KogitoBuildSpecWebHooksOutput
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksArgs struct {
	// Secret value for webHook
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KogitoBuildSpecWebHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return i.ToKogitoBuildSpecWebHooksOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildSpecWebHooksArrayInput is an input type that accepts KogitoBuildSpecWebHooksArray and KogitoBuildSpecWebHooksArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksArrayInput` via:
//
//          KogitoBuildSpecWebHooksArray{ KogitoBuildSpecWebHooksArgs{...} }
type KogitoBuildSpecWebHooksArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput
	ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Context) KogitoBuildSpecWebHooksArrayOutput
}

type KogitoBuildSpecWebHooksArray []KogitoBuildSpecWebHooksInput

func (KogitoBuildSpecWebHooksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return i.ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksArrayOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return o
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return o
}

// Secret value for webHook
func (o KogitoBuildSpecWebHooksOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// WebHook type, either GitHub or Generic.
func (o KogitoBuildSpecWebHooksOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecWebHooksArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecWebHooksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecWebHooks {
		return vs[0].([]KogitoBuildSpecWebHooks)[vs[1].(int)]
	}).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatus struct {
	// History of builds
	Builds KogitoBuildStatusBuilds `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  []KogitoBuildStatusConditions `pulumi:"conditions"`
	LatestBuild *string                       `pulumi:"latestBuild"`
}

// KogitoBuildStatusInput is an input type that accepts KogitoBuildStatusArgs and KogitoBuildStatusOutput values.
// You can construct a concrete instance of `KogitoBuildStatusInput` via:
//
//          KogitoBuildStatusArgs{...}
type KogitoBuildStatusInput interface {
	pulumi.Input

	ToKogitoBuildStatusOutput() KogitoBuildStatusOutput
	ToKogitoBuildStatusOutputWithContext(context.Context) KogitoBuildStatusOutput
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusArgs struct {
	// History of builds
	Builds KogitoBuildStatusBuildsInput `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  KogitoBuildStatusConditionsArrayInput `pulumi:"conditions"`
	LatestBuild pulumi.StringPtrInput                 `pulumi:"latestBuild"`
}

func (KogitoBuildStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return i.ToKogitoBuildStatusOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput)
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput).ToKogitoBuildStatusPtrOutputWithContext(ctx)
}

// KogitoBuildStatusPtrInput is an input type that accepts KogitoBuildStatusArgs, KogitoBuildStatusPtr and KogitoBuildStatusPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusPtrInput` via:
//
//          KogitoBuildStatusArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput
	ToKogitoBuildStatusPtrOutputWithContext(context.Context) KogitoBuildStatusPtrOutput
}

type kogitoBuildStatusPtrType KogitoBuildStatusArgs

func KogitoBuildStatusPtr(v *KogitoBuildStatusArgs) KogitoBuildStatusPtrInput {
	return (*kogitoBuildStatusPtrType)(v)
}

func (*kogitoBuildStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *KogitoBuildStatus {
		return &v
	}).(KogitoBuildStatusPtrOutput)
}

// History of builds
func (o KogitoBuildStatusOutput) Builds() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v KogitoBuildStatus) KogitoBuildStatusBuilds { return v.Builds }).(KogitoBuildStatusBuildsOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatus) []KogitoBuildStatusConditions { return v.Conditions }).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *string { return v.LatestBuild }).(pulumi.StringPtrOutput)
}

type KogitoBuildStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) Elem() KogitoBuildStatusOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) KogitoBuildStatus { return *v }).(KogitoBuildStatusOutput)
}

// History of builds
func (o KogitoBuildStatusPtrOutput) Builds() KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *KogitoBuildStatusBuilds {
		if v == nil {
			return nil
		}
		return &v.Builds
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusPtrOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) []KogitoBuildStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusPtrOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestBuild
	}).(pulumi.StringPtrOutput)
}

// History of builds
type KogitoBuildStatusBuilds struct {
	// Builds have been stopped from executing.
	Cancelled []string `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete []string `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error []string `pulumi:"error"`
	// Builds have executed and failed.
	Failed []string `pulumi:"failed"`
	// Builds are being created.
	New []string `pulumi:"new"`
	// Builds are about to start running.
	Pending []string `pulumi:"pending"`
	// Builds are running.
	Running []string `pulumi:"running"`
}

// KogitoBuildStatusBuildsInput is an input type that accepts KogitoBuildStatusBuildsArgs and KogitoBuildStatusBuildsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
type KogitoBuildStatusBuildsInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput
	ToKogitoBuildStatusBuildsOutputWithContext(context.Context) KogitoBuildStatusBuildsOutput
}

// History of builds
type KogitoBuildStatusBuildsArgs struct {
	// Builds have been stopped from executing.
	Cancelled pulumi.StringArrayInput `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete pulumi.StringArrayInput `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error pulumi.StringArrayInput `pulumi:"error"`
	// Builds have executed and failed.
	Failed pulumi.StringArrayInput `pulumi:"failed"`
	// Builds are being created.
	New pulumi.StringArrayInput `pulumi:"new"`
	// Builds are about to start running.
	Pending pulumi.StringArrayInput `pulumi:"pending"`
	// Builds are running.
	Running pulumi.StringArrayInput `pulumi:"running"`
}

func (KogitoBuildStatusBuildsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return i.ToKogitoBuildStatusBuildsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput)
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput).ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx)
}

// KogitoBuildStatusBuildsPtrInput is an input type that accepts KogitoBuildStatusBuildsArgs, KogitoBuildStatusBuildsPtr and KogitoBuildStatusBuildsPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsPtrInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusBuildsPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput
	ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Context) KogitoBuildStatusBuildsPtrOutput
}

type kogitoBuildStatusBuildsPtrType KogitoBuildStatusBuildsArgs

func KogitoBuildStatusBuildsPtr(v *KogitoBuildStatusBuildsArgs) KogitoBuildStatusBuildsPtrInput {
	return (*kogitoBuildStatusBuildsPtrType)(v)
}

func (*kogitoBuildStatusBuildsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsPtrOutput)
}

// History of builds
type KogitoBuildStatusBuildsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) *KogitoBuildStatusBuilds {
		return &v
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Cancelled }).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Complete }).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Error }).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Failed }).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.New }).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Pending }).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Running }).(pulumi.StringArrayOutput)
}

type KogitoBuildStatusBuildsPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) Elem() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) KogitoBuildStatusBuilds { return *v }).(KogitoBuildStatusBuildsOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsPtrOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Cancelled
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsPtrOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Complete
	}).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsPtrOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsPtrOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsPtrOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsPtrOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Pending
	}).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsPtrOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Running
	}).(pulumi.StringArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditions struct {
	// LastTransitionTime ...
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message ...
	Message *string `pulumi:"message"`
	// Reason of this condition
	Reason *string `pulumi:"reason"`
	// Status ...
	Status string `pulumi:"status"`
	// Type of this condition
	Type string `pulumi:"type"`
}

// KogitoBuildStatusConditionsInput is an input type that accepts KogitoBuildStatusConditionsArgs and KogitoBuildStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsInput` via:
//
//          KogitoBuildStatusConditionsArgs{...}
type KogitoBuildStatusConditionsInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput
	ToKogitoBuildStatusConditionsOutputWithContext(context.Context) KogitoBuildStatusConditionsOutput
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsArgs struct {
	// LastTransitionTime ...
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message ...
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason of this condition
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status ...
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoBuildStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return i.ToKogitoBuildStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsOutput)
}

// KogitoBuildStatusConditionsArrayInput is an input type that accepts KogitoBuildStatusConditionsArray and KogitoBuildStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsArrayInput` via:
//
//          KogitoBuildStatusConditionsArray{ KogitoBuildStatusConditionsArgs{...} }
type KogitoBuildStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput
	ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Context) KogitoBuildStatusConditionsArrayOutput
}

type KogitoBuildStatusConditionsArray []KogitoBuildStatusConditionsInput

func (KogitoBuildStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return i.ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return o
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return o
}

// LastTransitionTime ...
func (o KogitoBuildStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message ...
func (o KogitoBuildStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason of this condition
func (o KogitoBuildStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status ...
func (o KogitoBuildStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition
func (o KogitoBuildStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoBuildStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoBuildStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildStatusConditions {
		return vs[0].([]KogitoBuildStatusConditions)[vs[1].(int)]
	}).(KogitoBuildStatusConditionsOutput)
}

// KogitoDataIndex defines the Data Index Service infrastructure deployment.
type KogitoDataIndexType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
	Spec *KogitoDataIndexSpec `pulumi:"spec"`
	// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
	Status *KogitoDataIndexStatus `pulumi:"status"`
}

// KogitoDataIndexTypeInput is an input type that accepts KogitoDataIndexTypeArgs and KogitoDataIndexTypeOutput values.
// You can construct a concrete instance of `KogitoDataIndexTypeInput` via:
//
//          KogitoDataIndexTypeArgs{...}
type KogitoDataIndexTypeInput interface {
	pulumi.Input

	ToKogitoDataIndexTypeOutput() KogitoDataIndexTypeOutput
	ToKogitoDataIndexTypeOutputWithContext(context.Context) KogitoDataIndexTypeOutput
}

// KogitoDataIndex defines the Data Index Service infrastructure deployment.
type KogitoDataIndexTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
	Spec KogitoDataIndexSpecPtrInput `pulumi:"spec"`
	// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
	Status KogitoDataIndexStatusPtrInput `pulumi:"status"`
}

func (KogitoDataIndexTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexType)(nil)).Elem()
}

func (i KogitoDataIndexTypeArgs) ToKogitoDataIndexTypeOutput() KogitoDataIndexTypeOutput {
	return i.ToKogitoDataIndexTypeOutputWithContext(context.Background())
}

func (i KogitoDataIndexTypeArgs) ToKogitoDataIndexTypeOutputWithContext(ctx context.Context) KogitoDataIndexTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexTypeOutput)
}

// KogitoDataIndex defines the Data Index Service infrastructure deployment.
type KogitoDataIndexTypeOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexType)(nil)).Elem()
}

func (o KogitoDataIndexTypeOutput) ToKogitoDataIndexTypeOutput() KogitoDataIndexTypeOutput {
	return o
}

func (o KogitoDataIndexTypeOutput) ToKogitoDataIndexTypeOutputWithContext(ctx context.Context) KogitoDataIndexTypeOutput {
	return o
}

func (o KogitoDataIndexTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
func (o KogitoDataIndexTypeOutput) Spec() KogitoDataIndexSpecPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexType) *KogitoDataIndexSpec { return v.Spec }).(KogitoDataIndexSpecPtrOutput)
}

// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
func (o KogitoDataIndexTypeOutput) Status() KogitoDataIndexStatusPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexType) *KogitoDataIndexStatus { return v.Status }).(KogitoDataIndexStatusPtrOutput)
}

type KogitoDataIndexMetadata struct {
}

// KogitoDataIndexMetadataInput is an input type that accepts KogitoDataIndexMetadataArgs and KogitoDataIndexMetadataOutput values.
// You can construct a concrete instance of `KogitoDataIndexMetadataInput` via:
//
//          KogitoDataIndexMetadataArgs{...}
type KogitoDataIndexMetadataInput interface {
	pulumi.Input

	ToKogitoDataIndexMetadataOutput() KogitoDataIndexMetadataOutput
	ToKogitoDataIndexMetadataOutputWithContext(context.Context) KogitoDataIndexMetadataOutput
}

type KogitoDataIndexMetadataArgs struct {
}

func (KogitoDataIndexMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexMetadata)(nil)).Elem()
}

func (i KogitoDataIndexMetadataArgs) ToKogitoDataIndexMetadataOutput() KogitoDataIndexMetadataOutput {
	return i.ToKogitoDataIndexMetadataOutputWithContext(context.Background())
}

func (i KogitoDataIndexMetadataArgs) ToKogitoDataIndexMetadataOutputWithContext(ctx context.Context) KogitoDataIndexMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexMetadataOutput)
}

type KogitoDataIndexMetadataOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexMetadata)(nil)).Elem()
}

func (o KogitoDataIndexMetadataOutput) ToKogitoDataIndexMetadataOutput() KogitoDataIndexMetadataOutput {
	return o
}

func (o KogitoDataIndexMetadataOutput) ToKogitoDataIndexMetadataOutputWithContext(ctx context.Context) KogitoDataIndexMetadataOutput {
	return o
}

// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
type KogitoDataIndexSpec struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs []KogitoDataIndexSpecEnvs `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort *int `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *KogitoDataIndexSpecImage `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan *KogitoDataIndexSpecInfinispan `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka *KogitoDataIndexSpecKafka `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoDataIndexSpecResources `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoDataIndexSpecInput is an input type that accepts KogitoDataIndexSpecArgs and KogitoDataIndexSpecOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecInput` via:
//
//          KogitoDataIndexSpecArgs{...}
type KogitoDataIndexSpecInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecOutput() KogitoDataIndexSpecOutput
	ToKogitoDataIndexSpecOutputWithContext(context.Context) KogitoDataIndexSpecOutput
}

// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
type KogitoDataIndexSpecArgs struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs KogitoDataIndexSpecEnvsArrayInput `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image KogitoDataIndexSpecImagePtrInput `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan KogitoDataIndexSpecInfinispanPtrInput `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka KogitoDataIndexSpecKafkaPtrInput `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoDataIndexSpecResourcesPtrInput `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoDataIndexSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpec)(nil)).Elem()
}

func (i KogitoDataIndexSpecArgs) ToKogitoDataIndexSpecOutput() KogitoDataIndexSpecOutput {
	return i.ToKogitoDataIndexSpecOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecArgs) ToKogitoDataIndexSpecOutputWithContext(ctx context.Context) KogitoDataIndexSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecOutput)
}

func (i KogitoDataIndexSpecArgs) ToKogitoDataIndexSpecPtrOutput() KogitoDataIndexSpecPtrOutput {
	return i.ToKogitoDataIndexSpecPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecArgs) ToKogitoDataIndexSpecPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecOutput).ToKogitoDataIndexSpecPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecPtrInput is an input type that accepts KogitoDataIndexSpecArgs, KogitoDataIndexSpecPtr and KogitoDataIndexSpecPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecPtrInput` via:
//
//          KogitoDataIndexSpecArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecPtrOutput() KogitoDataIndexSpecPtrOutput
	ToKogitoDataIndexSpecPtrOutputWithContext(context.Context) KogitoDataIndexSpecPtrOutput
}

type kogitoDataIndexSpecPtrType KogitoDataIndexSpecArgs

func KogitoDataIndexSpecPtr(v *KogitoDataIndexSpecArgs) KogitoDataIndexSpecPtrInput {
	return (*kogitoDataIndexSpecPtrType)(v)
}

func (*kogitoDataIndexSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpec)(nil)).Elem()
}

func (i *kogitoDataIndexSpecPtrType) ToKogitoDataIndexSpecPtrOutput() KogitoDataIndexSpecPtrOutput {
	return i.ToKogitoDataIndexSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecPtrType) ToKogitoDataIndexSpecPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecPtrOutput)
}

// KogitoDataIndexSpec defines the desired state of KogitoDataIndex.
type KogitoDataIndexSpecOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpec)(nil)).Elem()
}

func (o KogitoDataIndexSpecOutput) ToKogitoDataIndexSpecOutput() KogitoDataIndexSpecOutput {
	return o
}

func (o KogitoDataIndexSpecOutput) ToKogitoDataIndexSpecOutputWithContext(ctx context.Context) KogitoDataIndexSpecOutput {
	return o
}

func (o KogitoDataIndexSpecOutput) ToKogitoDataIndexSpecPtrOutput() KogitoDataIndexSpecPtrOutput {
	return o.ToKogitoDataIndexSpecPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecOutput) ToKogitoDataIndexSpecPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *KogitoDataIndexSpec {
		return &v
	}).(KogitoDataIndexSpecPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoDataIndexSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoDataIndexSpecOutput) Envs() KogitoDataIndexSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) []KogitoDataIndexSpecEnvs { return v.Envs }).(KogitoDataIndexSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoDataIndexSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoDataIndexSpecOutput) Image() KogitoDataIndexSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *KogitoDataIndexSpecImage { return v.Image }).(KogitoDataIndexSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoDataIndexSpecOutput) Infinispan() KogitoDataIndexSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *KogitoDataIndexSpecInfinispan { return v.Infinispan }).(KogitoDataIndexSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoDataIndexSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoDataIndexSpecOutput) Kafka() KogitoDataIndexSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *KogitoDataIndexSpecKafka { return v.Kafka }).(KogitoDataIndexSpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoDataIndexSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoDataIndexSpecOutput) Resources() KogitoDataIndexSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) *KogitoDataIndexSpecResources { return v.Resources }).(KogitoDataIndexSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoDataIndexSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoDataIndexSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoDataIndexSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpec)(nil)).Elem()
}

func (o KogitoDataIndexSpecPtrOutput) ToKogitoDataIndexSpecPtrOutput() KogitoDataIndexSpecPtrOutput {
	return o
}

func (o KogitoDataIndexSpecPtrOutput) ToKogitoDataIndexSpecPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecPtrOutput {
	return o
}

func (o KogitoDataIndexSpecPtrOutput) Elem() KogitoDataIndexSpecOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) KogitoDataIndexSpec { return *v }).(KogitoDataIndexSpecOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoDataIndexSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoDataIndexSpecPtrOutput) Envs() KogitoDataIndexSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) []KogitoDataIndexSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoDataIndexSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoDataIndexSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoDataIndexSpecPtrOutput) Image() KogitoDataIndexSpecImagePtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *KogitoDataIndexSpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(KogitoDataIndexSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoDataIndexSpecPtrOutput) Infinispan() KogitoDataIndexSpecInfinispanPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *KogitoDataIndexSpecInfinispan {
		if v == nil {
			return nil
		}
		return v.Infinispan
	}).(KogitoDataIndexSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoDataIndexSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoDataIndexSpecPtrOutput) Kafka() KogitoDataIndexSpecKafkaPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *KogitoDataIndexSpecKafka {
		if v == nil {
			return nil
		}
		return v.Kafka
	}).(KogitoDataIndexSpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoDataIndexSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoDataIndexSpecPtrOutput) Resources() KogitoDataIndexSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) *KogitoDataIndexSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoDataIndexSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoDataIndexSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoDataIndexSpecDeploymentLabels struct {
}

// KogitoDataIndexSpecDeploymentLabelsInput is an input type that accepts KogitoDataIndexSpecDeploymentLabelsArgs and KogitoDataIndexSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecDeploymentLabelsInput` via:
//
//          KogitoDataIndexSpecDeploymentLabelsArgs{...}
type KogitoDataIndexSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecDeploymentLabelsOutput() KogitoDataIndexSpecDeploymentLabelsOutput
	ToKogitoDataIndexSpecDeploymentLabelsOutputWithContext(context.Context) KogitoDataIndexSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoDataIndexSpecDeploymentLabelsArgs struct {
}

func (KogitoDataIndexSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoDataIndexSpecDeploymentLabelsArgs) ToKogitoDataIndexSpecDeploymentLabelsOutput() KogitoDataIndexSpecDeploymentLabelsOutput {
	return i.ToKogitoDataIndexSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecDeploymentLabelsArgs) ToKogitoDataIndexSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoDataIndexSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoDataIndexSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoDataIndexSpecDeploymentLabelsOutput) ToKogitoDataIndexSpecDeploymentLabelsOutput() KogitoDataIndexSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoDataIndexSpecDeploymentLabelsOutput) ToKogitoDataIndexSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoDataIndexSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoDataIndexSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoDataIndexSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoDataIndexSpecEnvsInput is an input type that accepts KogitoDataIndexSpecEnvsArgs and KogitoDataIndexSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsInput` via:
//
//          KogitoDataIndexSpecEnvsArgs{...}
type KogitoDataIndexSpecEnvsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsOutput() KogitoDataIndexSpecEnvsOutput
	ToKogitoDataIndexSpecEnvsOutputWithContext(context.Context) KogitoDataIndexSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoDataIndexSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoDataIndexSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoDataIndexSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvs)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsArgs) ToKogitoDataIndexSpecEnvsOutput() KogitoDataIndexSpecEnvsOutput {
	return i.ToKogitoDataIndexSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsArgs) ToKogitoDataIndexSpecEnvsOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsOutput)
}

// KogitoDataIndexSpecEnvsArrayInput is an input type that accepts KogitoDataIndexSpecEnvsArray and KogitoDataIndexSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsArrayInput` via:
//
//          KogitoDataIndexSpecEnvsArray{ KogitoDataIndexSpecEnvsArgs{...} }
type KogitoDataIndexSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsArrayOutput() KogitoDataIndexSpecEnvsArrayOutput
	ToKogitoDataIndexSpecEnvsArrayOutputWithContext(context.Context) KogitoDataIndexSpecEnvsArrayOutput
}

type KogitoDataIndexSpecEnvsArray []KogitoDataIndexSpecEnvsInput

func (KogitoDataIndexSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexSpecEnvs)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsArray) ToKogitoDataIndexSpecEnvsArrayOutput() KogitoDataIndexSpecEnvsArrayOutput {
	return i.ToKogitoDataIndexSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsArray) ToKogitoDataIndexSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoDataIndexSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvs)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsOutput) ToKogitoDataIndexSpecEnvsOutput() KogitoDataIndexSpecEnvsOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsOutput) ToKogitoDataIndexSpecEnvsOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoDataIndexSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoDataIndexSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoDataIndexSpecEnvsOutput) ValueFrom() KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvs) *KogitoDataIndexSpecEnvsValueFrom { return v.ValueFrom }).(KogitoDataIndexSpecEnvsValueFromPtrOutput)
}

type KogitoDataIndexSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexSpecEnvs)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsArrayOutput) ToKogitoDataIndexSpecEnvsArrayOutput() KogitoDataIndexSpecEnvsArrayOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsArrayOutput) ToKogitoDataIndexSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsArrayOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoDataIndexSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoDataIndexSpecEnvs {
		return vs[0].([]KogitoDataIndexSpecEnvs)[vs[1].(int)]
	}).(KogitoDataIndexSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoDataIndexSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoDataIndexSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoDataIndexSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoDataIndexSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoDataIndexSpecEnvsValueFromInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromArgs and KogitoDataIndexSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromArgs{...}
type KogitoDataIndexSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromOutput() KogitoDataIndexSpecEnvsValueFromOutput
	ToKogitoDataIndexSpecEnvsValueFromOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoDataIndexSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoDataIndexSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoDataIndexSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromArgs) ToKogitoDataIndexSpecEnvsValueFromOutput() KogitoDataIndexSpecEnvsValueFromOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromArgs) ToKogitoDataIndexSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromArgs) ToKogitoDataIndexSpecEnvsValueFromPtrOutput() KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromArgs) ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromOutput).ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromArgs, KogitoDataIndexSpecEnvsValueFromPtr and KogitoDataIndexSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromPtrOutput() KogitoDataIndexSpecEnvsValueFromPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromPtrType KogitoDataIndexSpecEnvsValueFromArgs

func KogitoDataIndexSpecEnvsValueFromPtr(v *KogitoDataIndexSpecEnvsValueFromArgs) KogitoDataIndexSpecEnvsValueFromPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromPtrType) ToKogitoDataIndexSpecEnvsValueFromPtrOutput() KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromPtrType) ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoDataIndexSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromOutput) ToKogitoDataIndexSpecEnvsValueFromOutput() KogitoDataIndexSpecEnvsValueFromOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromOutput) ToKogitoDataIndexSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromOutput) ToKogitoDataIndexSpecEnvsValueFromPtrOutput() KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromOutput) ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFrom {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoDataIndexSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoDataIndexSpecEnvsValueFromOutput) FieldRef() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromFieldRef { return v.FieldRef }).(KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoDataIndexSpecEnvsValueFromOutput) ResourceFieldRef() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoDataIndexSpecEnvsValueFromOutput) SecretKeyRef() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) ToKogitoDataIndexSpecEnvsValueFromPtrOutput() KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) ToKogitoDataIndexSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFrom) KogitoDataIndexSpecEnvsValueFrom { return *v }).(KogitoDataIndexSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) FieldRef() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoDataIndexSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFrom) *KogitoDataIndexSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs and KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs, KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtr and KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrType KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefArgs) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoDataIndexSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoDataIndexSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromFieldRefArgs and KogitoDataIndexSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromFieldRefArgs{...}
type KogitoDataIndexSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromFieldRefOutput() KogitoDataIndexSpecEnvsValueFromFieldRefOutput
	ToKogitoDataIndexSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoDataIndexSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoDataIndexSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromFieldRefOutput() KogitoDataIndexSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromFieldRefOutput).ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromFieldRefArgs, KogitoDataIndexSpecEnvsValueFromFieldRefPtr and KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromFieldRefPtrType KogitoDataIndexSpecEnvsValueFromFieldRefArgs

func KogitoDataIndexSpecEnvsValueFromFieldRefPtr(v *KogitoDataIndexSpecEnvsValueFromFieldRefArgs) KogitoDataIndexSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromFieldRefPtrType) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromFieldRefPtrType) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoDataIndexSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefOutput() KogitoDataIndexSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromFieldRef) *KogitoDataIndexSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoDataIndexSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromFieldRef) KogitoDataIndexSpecEnvsValueFromFieldRef { return *v }).(KogitoDataIndexSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoDataIndexSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoDataIndexSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs and KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput).ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs, KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtr and KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrType KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs

func KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtr(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRefArgs) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *KogitoDataIndexSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRef) KogitoDataIndexSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor) *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor) KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoDataIndexSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoDataIndexSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs and KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoDataIndexSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput).ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs, KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtr and KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrType KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs

func KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtr(v *KogitoDataIndexSpecEnvsValueFromSecretKeyRefArgs) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *KogitoDataIndexSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromSecretKeyRef) KogitoDataIndexSpecEnvsValueFromSecretKeyRef {
		return *v
	}).(KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoDataIndexSpecImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoDataIndexSpecImageInput is an input type that accepts KogitoDataIndexSpecImageArgs and KogitoDataIndexSpecImageOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecImageInput` via:
//
//          KogitoDataIndexSpecImageArgs{...}
type KogitoDataIndexSpecImageInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecImageOutput() KogitoDataIndexSpecImageOutput
	ToKogitoDataIndexSpecImageOutputWithContext(context.Context) KogitoDataIndexSpecImageOutput
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoDataIndexSpecImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoDataIndexSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecImage)(nil)).Elem()
}

func (i KogitoDataIndexSpecImageArgs) ToKogitoDataIndexSpecImageOutput() KogitoDataIndexSpecImageOutput {
	return i.ToKogitoDataIndexSpecImageOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecImageArgs) ToKogitoDataIndexSpecImageOutputWithContext(ctx context.Context) KogitoDataIndexSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecImageOutput)
}

func (i KogitoDataIndexSpecImageArgs) ToKogitoDataIndexSpecImagePtrOutput() KogitoDataIndexSpecImagePtrOutput {
	return i.ToKogitoDataIndexSpecImagePtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecImageArgs) ToKogitoDataIndexSpecImagePtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecImageOutput).ToKogitoDataIndexSpecImagePtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecImagePtrInput is an input type that accepts KogitoDataIndexSpecImageArgs, KogitoDataIndexSpecImagePtr and KogitoDataIndexSpecImagePtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecImagePtrInput` via:
//
//          KogitoDataIndexSpecImageArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecImagePtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecImagePtrOutput() KogitoDataIndexSpecImagePtrOutput
	ToKogitoDataIndexSpecImagePtrOutputWithContext(context.Context) KogitoDataIndexSpecImagePtrOutput
}

type kogitoDataIndexSpecImagePtrType KogitoDataIndexSpecImageArgs

func KogitoDataIndexSpecImagePtr(v *KogitoDataIndexSpecImageArgs) KogitoDataIndexSpecImagePtrInput {
	return (*kogitoDataIndexSpecImagePtrType)(v)
}

func (*kogitoDataIndexSpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecImage)(nil)).Elem()
}

func (i *kogitoDataIndexSpecImagePtrType) ToKogitoDataIndexSpecImagePtrOutput() KogitoDataIndexSpecImagePtrOutput {
	return i.ToKogitoDataIndexSpecImagePtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecImagePtrType) ToKogitoDataIndexSpecImagePtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecImagePtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoDataIndexSpecImageOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecImage)(nil)).Elem()
}

func (o KogitoDataIndexSpecImageOutput) ToKogitoDataIndexSpecImageOutput() KogitoDataIndexSpecImageOutput {
	return o
}

func (o KogitoDataIndexSpecImageOutput) ToKogitoDataIndexSpecImageOutputWithContext(ctx context.Context) KogitoDataIndexSpecImageOutput {
	return o
}

func (o KogitoDataIndexSpecImageOutput) ToKogitoDataIndexSpecImagePtrOutput() KogitoDataIndexSpecImagePtrOutput {
	return o.ToKogitoDataIndexSpecImagePtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecImageOutput) ToKogitoDataIndexSpecImagePtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecImage) *KogitoDataIndexSpecImage {
		return &v
	}).(KogitoDataIndexSpecImagePtrOutput)
}
func (o KogitoDataIndexSpecImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoDataIndexSpecImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecImage)(nil)).Elem()
}

func (o KogitoDataIndexSpecImagePtrOutput) ToKogitoDataIndexSpecImagePtrOutput() KogitoDataIndexSpecImagePtrOutput {
	return o
}

func (o KogitoDataIndexSpecImagePtrOutput) ToKogitoDataIndexSpecImagePtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecImagePtrOutput {
	return o
}

func (o KogitoDataIndexSpecImagePtrOutput) Elem() KogitoDataIndexSpecImageOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecImage) KogitoDataIndexSpecImage { return *v }).(KogitoDataIndexSpecImageOutput)
}

func (o KogitoDataIndexSpecImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexSpecImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoDataIndexSpecInfinispan struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm *string `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials *KogitoDataIndexSpecInfinispanCredentials `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism *string `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri *string `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth *bool `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoDataIndexSpecInfinispanInput is an input type that accepts KogitoDataIndexSpecInfinispanArgs and KogitoDataIndexSpecInfinispanOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecInfinispanInput` via:
//
//          KogitoDataIndexSpecInfinispanArgs{...}
type KogitoDataIndexSpecInfinispanInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecInfinispanOutput() KogitoDataIndexSpecInfinispanOutput
	ToKogitoDataIndexSpecInfinispanOutputWithContext(context.Context) KogitoDataIndexSpecInfinispanOutput
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoDataIndexSpecInfinispanArgs struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm pulumi.StringPtrInput `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials KogitoDataIndexSpecInfinispanCredentialsPtrInput `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism pulumi.StringPtrInput `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth pulumi.BoolPtrInput `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoDataIndexSpecInfinispanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecInfinispan)(nil)).Elem()
}

func (i KogitoDataIndexSpecInfinispanArgs) ToKogitoDataIndexSpecInfinispanOutput() KogitoDataIndexSpecInfinispanOutput {
	return i.ToKogitoDataIndexSpecInfinispanOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecInfinispanArgs) ToKogitoDataIndexSpecInfinispanOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanOutput)
}

func (i KogitoDataIndexSpecInfinispanArgs) ToKogitoDataIndexSpecInfinispanPtrOutput() KogitoDataIndexSpecInfinispanPtrOutput {
	return i.ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecInfinispanArgs) ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanOutput).ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecInfinispanPtrInput is an input type that accepts KogitoDataIndexSpecInfinispanArgs, KogitoDataIndexSpecInfinispanPtr and KogitoDataIndexSpecInfinispanPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecInfinispanPtrInput` via:
//
//          KogitoDataIndexSpecInfinispanArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecInfinispanPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecInfinispanPtrOutput() KogitoDataIndexSpecInfinispanPtrOutput
	ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(context.Context) KogitoDataIndexSpecInfinispanPtrOutput
}

type kogitoDataIndexSpecInfinispanPtrType KogitoDataIndexSpecInfinispanArgs

func KogitoDataIndexSpecInfinispanPtr(v *KogitoDataIndexSpecInfinispanArgs) KogitoDataIndexSpecInfinispanPtrInput {
	return (*kogitoDataIndexSpecInfinispanPtrType)(v)
}

func (*kogitoDataIndexSpecInfinispanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecInfinispan)(nil)).Elem()
}

func (i *kogitoDataIndexSpecInfinispanPtrType) ToKogitoDataIndexSpecInfinispanPtrOutput() KogitoDataIndexSpecInfinispanPtrOutput {
	return i.ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecInfinispanPtrType) ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoDataIndexSpecInfinispanOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecInfinispanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecInfinispan)(nil)).Elem()
}

func (o KogitoDataIndexSpecInfinispanOutput) ToKogitoDataIndexSpecInfinispanOutput() KogitoDataIndexSpecInfinispanOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanOutput) ToKogitoDataIndexSpecInfinispanOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanOutput) ToKogitoDataIndexSpecInfinispanPtrOutput() KogitoDataIndexSpecInfinispanPtrOutput {
	return o.ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecInfinispanOutput) ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *KogitoDataIndexSpecInfinispan {
		return &v
	}).(KogitoDataIndexSpecInfinispanPtrOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoDataIndexSpecInfinispanOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *string { return v.AuthRealm }).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoDataIndexSpecInfinispanOutput) Credentials() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *KogitoDataIndexSpecInfinispanCredentials { return v.Credentials }).(KogitoDataIndexSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoDataIndexSpecInfinispanOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *string { return v.SaslMechanism }).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoDataIndexSpecInfinispanOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoDataIndexSpecInfinispanOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *bool { return v.UseAuth }).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoDataIndexSpecInfinispanOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispan) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoDataIndexSpecInfinispanPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecInfinispanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecInfinispan)(nil)).Elem()
}

func (o KogitoDataIndexSpecInfinispanPtrOutput) ToKogitoDataIndexSpecInfinispanPtrOutput() KogitoDataIndexSpecInfinispanPtrOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanPtrOutput) ToKogitoDataIndexSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanPtrOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanPtrOutput) Elem() KogitoDataIndexSpecInfinispanOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) KogitoDataIndexSpecInfinispan { return *v }).(KogitoDataIndexSpecInfinispanOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoDataIndexSpecInfinispanPtrOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.AuthRealm
	}).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoDataIndexSpecInfinispanPtrOutput) Credentials() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *KogitoDataIndexSpecInfinispanCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(KogitoDataIndexSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoDataIndexSpecInfinispanPtrOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.SaslMechanism
	}).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoDataIndexSpecInfinispanPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoDataIndexSpecInfinispanPtrOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseAuth
	}).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoDataIndexSpecInfinispanPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoDataIndexSpecInfinispanCredentials struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey *string `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName *string `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey *string `pulumi:"usernameKey"`
}

// KogitoDataIndexSpecInfinispanCredentialsInput is an input type that accepts KogitoDataIndexSpecInfinispanCredentialsArgs and KogitoDataIndexSpecInfinispanCredentialsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecInfinispanCredentialsInput` via:
//
//          KogitoDataIndexSpecInfinispanCredentialsArgs{...}
type KogitoDataIndexSpecInfinispanCredentialsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecInfinispanCredentialsOutput() KogitoDataIndexSpecInfinispanCredentialsOutput
	ToKogitoDataIndexSpecInfinispanCredentialsOutputWithContext(context.Context) KogitoDataIndexSpecInfinispanCredentialsOutput
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoDataIndexSpecInfinispanCredentialsArgs struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey pulumi.StringPtrInput `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey pulumi.StringPtrInput `pulumi:"usernameKey"`
}

func (KogitoDataIndexSpecInfinispanCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecInfinispanCredentials)(nil)).Elem()
}

func (i KogitoDataIndexSpecInfinispanCredentialsArgs) ToKogitoDataIndexSpecInfinispanCredentialsOutput() KogitoDataIndexSpecInfinispanCredentialsOutput {
	return i.ToKogitoDataIndexSpecInfinispanCredentialsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecInfinispanCredentialsArgs) ToKogitoDataIndexSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanCredentialsOutput)
}

func (i KogitoDataIndexSpecInfinispanCredentialsArgs) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutput() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecInfinispanCredentialsArgs) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanCredentialsOutput).ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecInfinispanCredentialsPtrInput is an input type that accepts KogitoDataIndexSpecInfinispanCredentialsArgs, KogitoDataIndexSpecInfinispanCredentialsPtr and KogitoDataIndexSpecInfinispanCredentialsPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecInfinispanCredentialsPtrInput` via:
//
//          KogitoDataIndexSpecInfinispanCredentialsArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecInfinispanCredentialsPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecInfinispanCredentialsPtrOutput() KogitoDataIndexSpecInfinispanCredentialsPtrOutput
	ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(context.Context) KogitoDataIndexSpecInfinispanCredentialsPtrOutput
}

type kogitoDataIndexSpecInfinispanCredentialsPtrType KogitoDataIndexSpecInfinispanCredentialsArgs

func KogitoDataIndexSpecInfinispanCredentialsPtr(v *KogitoDataIndexSpecInfinispanCredentialsArgs) KogitoDataIndexSpecInfinispanCredentialsPtrInput {
	return (*kogitoDataIndexSpecInfinispanCredentialsPtrType)(v)
}

func (*kogitoDataIndexSpecInfinispanCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecInfinispanCredentials)(nil)).Elem()
}

func (i *kogitoDataIndexSpecInfinispanCredentialsPtrType) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutput() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecInfinispanCredentialsPtrType) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecInfinispanCredentialsPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoDataIndexSpecInfinispanCredentialsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecInfinispanCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoDataIndexSpecInfinispanCredentialsOutput) ToKogitoDataIndexSpecInfinispanCredentialsOutput() KogitoDataIndexSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanCredentialsOutput) ToKogitoDataIndexSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanCredentialsOutput) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutput() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o.ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecInfinispanCredentialsOutput) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispanCredentials) *KogitoDataIndexSpecInfinispanCredentials {
		return &v
	}).(KogitoDataIndexSpecInfinispanCredentialsPtrOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoDataIndexSpecInfinispanCredentialsOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispanCredentials) *string { return v.PasswordKey }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoDataIndexSpecInfinispanCredentialsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispanCredentials) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoDataIndexSpecInfinispanCredentialsOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecInfinispanCredentials) *string { return v.UsernameKey }).(pulumi.StringPtrOutput)
}

type KogitoDataIndexSpecInfinispanCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecInfinispanCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutput() KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) ToKogitoDataIndexSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) Elem() KogitoDataIndexSpecInfinispanCredentialsOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispanCredentials) KogitoDataIndexSpecInfinispanCredentials { return *v }).(KogitoDataIndexSpecInfinispanCredentialsOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordKey
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoDataIndexSpecInfinispanCredentialsPtrOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.UsernameKey
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoDataIndexSpecKafka struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI *string `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance *string `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoDataIndexSpecKafkaInput is an input type that accepts KogitoDataIndexSpecKafkaArgs and KogitoDataIndexSpecKafkaOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecKafkaInput` via:
//
//          KogitoDataIndexSpecKafkaArgs{...}
type KogitoDataIndexSpecKafkaInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecKafkaOutput() KogitoDataIndexSpecKafkaOutput
	ToKogitoDataIndexSpecKafkaOutputWithContext(context.Context) KogitoDataIndexSpecKafkaOutput
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoDataIndexSpecKafkaArgs struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoDataIndexSpecKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecKafka)(nil)).Elem()
}

func (i KogitoDataIndexSpecKafkaArgs) ToKogitoDataIndexSpecKafkaOutput() KogitoDataIndexSpecKafkaOutput {
	return i.ToKogitoDataIndexSpecKafkaOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecKafkaArgs) ToKogitoDataIndexSpecKafkaOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecKafkaOutput)
}

func (i KogitoDataIndexSpecKafkaArgs) ToKogitoDataIndexSpecKafkaPtrOutput() KogitoDataIndexSpecKafkaPtrOutput {
	return i.ToKogitoDataIndexSpecKafkaPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecKafkaArgs) ToKogitoDataIndexSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecKafkaOutput).ToKogitoDataIndexSpecKafkaPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecKafkaPtrInput is an input type that accepts KogitoDataIndexSpecKafkaArgs, KogitoDataIndexSpecKafkaPtr and KogitoDataIndexSpecKafkaPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecKafkaPtrInput` via:
//
//          KogitoDataIndexSpecKafkaArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecKafkaPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecKafkaPtrOutput() KogitoDataIndexSpecKafkaPtrOutput
	ToKogitoDataIndexSpecKafkaPtrOutputWithContext(context.Context) KogitoDataIndexSpecKafkaPtrOutput
}

type kogitoDataIndexSpecKafkaPtrType KogitoDataIndexSpecKafkaArgs

func KogitoDataIndexSpecKafkaPtr(v *KogitoDataIndexSpecKafkaArgs) KogitoDataIndexSpecKafkaPtrInput {
	return (*kogitoDataIndexSpecKafkaPtrType)(v)
}

func (*kogitoDataIndexSpecKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecKafka)(nil)).Elem()
}

func (i *kogitoDataIndexSpecKafkaPtrType) ToKogitoDataIndexSpecKafkaPtrOutput() KogitoDataIndexSpecKafkaPtrOutput {
	return i.ToKogitoDataIndexSpecKafkaPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecKafkaPtrType) ToKogitoDataIndexSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecKafkaPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoDataIndexSpecKafkaOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecKafka)(nil)).Elem()
}

func (o KogitoDataIndexSpecKafkaOutput) ToKogitoDataIndexSpecKafkaOutput() KogitoDataIndexSpecKafkaOutput {
	return o
}

func (o KogitoDataIndexSpecKafkaOutput) ToKogitoDataIndexSpecKafkaOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaOutput {
	return o
}

func (o KogitoDataIndexSpecKafkaOutput) ToKogitoDataIndexSpecKafkaPtrOutput() KogitoDataIndexSpecKafkaPtrOutput {
	return o.ToKogitoDataIndexSpecKafkaPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecKafkaOutput) ToKogitoDataIndexSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecKafka) *KogitoDataIndexSpecKafka {
		return &v
	}).(KogitoDataIndexSpecKafkaPtrOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoDataIndexSpecKafkaOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecKafka) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoDataIndexSpecKafkaOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecKafka) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoDataIndexSpecKafkaOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecKafka) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoDataIndexSpecKafkaPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecKafka)(nil)).Elem()
}

func (o KogitoDataIndexSpecKafkaPtrOutput) ToKogitoDataIndexSpecKafkaPtrOutput() KogitoDataIndexSpecKafkaPtrOutput {
	return o
}

func (o KogitoDataIndexSpecKafkaPtrOutput) ToKogitoDataIndexSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecKafkaPtrOutput {
	return o
}

func (o KogitoDataIndexSpecKafkaPtrOutput) Elem() KogitoDataIndexSpecKafkaOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecKafka) KogitoDataIndexSpecKafka { return *v }).(KogitoDataIndexSpecKafkaOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoDataIndexSpecKafkaPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoDataIndexSpecKafkaPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoDataIndexSpecKafkaPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecKafka) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoDataIndexSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoDataIndexSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoDataIndexSpecResourcesRequests `pulumi:"requests"`
}

// KogitoDataIndexSpecResourcesInput is an input type that accepts KogitoDataIndexSpecResourcesArgs and KogitoDataIndexSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesInput` via:
//
//          KogitoDataIndexSpecResourcesArgs{...}
type KogitoDataIndexSpecResourcesInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesOutput() KogitoDataIndexSpecResourcesOutput
	ToKogitoDataIndexSpecResourcesOutputWithContext(context.Context) KogitoDataIndexSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoDataIndexSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoDataIndexSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoDataIndexSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoDataIndexSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResources)(nil)).Elem()
}

func (i KogitoDataIndexSpecResourcesArgs) ToKogitoDataIndexSpecResourcesOutput() KogitoDataIndexSpecResourcesOutput {
	return i.ToKogitoDataIndexSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesArgs) ToKogitoDataIndexSpecResourcesOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesOutput)
}

func (i KogitoDataIndexSpecResourcesArgs) ToKogitoDataIndexSpecResourcesPtrOutput() KogitoDataIndexSpecResourcesPtrOutput {
	return i.ToKogitoDataIndexSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesArgs) ToKogitoDataIndexSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesOutput).ToKogitoDataIndexSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoDataIndexSpecResourcesPtrInput is an input type that accepts KogitoDataIndexSpecResourcesArgs, KogitoDataIndexSpecResourcesPtr and KogitoDataIndexSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesPtrInput` via:
//
//          KogitoDataIndexSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesPtrOutput() KogitoDataIndexSpecResourcesPtrOutput
	ToKogitoDataIndexSpecResourcesPtrOutputWithContext(context.Context) KogitoDataIndexSpecResourcesPtrOutput
}

type kogitoDataIndexSpecResourcesPtrType KogitoDataIndexSpecResourcesArgs

func KogitoDataIndexSpecResourcesPtr(v *KogitoDataIndexSpecResourcesArgs) KogitoDataIndexSpecResourcesPtrInput {
	return (*kogitoDataIndexSpecResourcesPtrType)(v)
}

func (*kogitoDataIndexSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecResources)(nil)).Elem()
}

func (i *kogitoDataIndexSpecResourcesPtrType) ToKogitoDataIndexSpecResourcesPtrOutput() KogitoDataIndexSpecResourcesPtrOutput {
	return i.ToKogitoDataIndexSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexSpecResourcesPtrType) ToKogitoDataIndexSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoDataIndexSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResources)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesOutput) ToKogitoDataIndexSpecResourcesOutput() KogitoDataIndexSpecResourcesOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesOutput) ToKogitoDataIndexSpecResourcesOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesOutput) ToKogitoDataIndexSpecResourcesPtrOutput() KogitoDataIndexSpecResourcesPtrOutput {
	return o.ToKogitoDataIndexSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexSpecResourcesOutput) ToKogitoDataIndexSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecResources) *KogitoDataIndexSpecResources {
		return &v
	}).(KogitoDataIndexSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoDataIndexSpecResourcesOutput) Limits() KogitoDataIndexSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecResources) map[string]KogitoDataIndexSpecResourcesLimits { return v.Limits }).(KogitoDataIndexSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoDataIndexSpecResourcesOutput) Requests() KogitoDataIndexSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoDataIndexSpecResources) map[string]KogitoDataIndexSpecResourcesRequests {
		return v.Requests
	}).(KogitoDataIndexSpecResourcesRequestsMapOutput)
}

type KogitoDataIndexSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexSpecResources)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesPtrOutput) ToKogitoDataIndexSpecResourcesPtrOutput() KogitoDataIndexSpecResourcesPtrOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesPtrOutput) ToKogitoDataIndexSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesPtrOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesPtrOutput) Elem() KogitoDataIndexSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecResources) KogitoDataIndexSpecResources { return *v }).(KogitoDataIndexSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoDataIndexSpecResourcesPtrOutput) Limits() KogitoDataIndexSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecResources) map[string]KogitoDataIndexSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoDataIndexSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoDataIndexSpecResourcesPtrOutput) Requests() KogitoDataIndexSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoDataIndexSpecResources) map[string]KogitoDataIndexSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoDataIndexSpecResourcesRequestsMapOutput)
}

type KogitoDataIndexSpecResourcesLimits struct {
}

// KogitoDataIndexSpecResourcesLimitsInput is an input type that accepts KogitoDataIndexSpecResourcesLimitsArgs and KogitoDataIndexSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesLimitsInput` via:
//
//          KogitoDataIndexSpecResourcesLimitsArgs{...}
type KogitoDataIndexSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesLimitsOutput() KogitoDataIndexSpecResourcesLimitsOutput
	ToKogitoDataIndexSpecResourcesLimitsOutputWithContext(context.Context) KogitoDataIndexSpecResourcesLimitsOutput
}

type KogitoDataIndexSpecResourcesLimitsArgs struct {
}

func (KogitoDataIndexSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoDataIndexSpecResourcesLimitsArgs) ToKogitoDataIndexSpecResourcesLimitsOutput() KogitoDataIndexSpecResourcesLimitsOutput {
	return i.ToKogitoDataIndexSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesLimitsArgs) ToKogitoDataIndexSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesLimitsOutput)
}

// KogitoDataIndexSpecResourcesLimitsMapInput is an input type that accepts KogitoDataIndexSpecResourcesLimitsMap and KogitoDataIndexSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesLimitsMapInput` via:
//
//          KogitoDataIndexSpecResourcesLimitsMap{ "key": KogitoDataIndexSpecResourcesLimitsArgs{...} }
type KogitoDataIndexSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesLimitsMapOutput() KogitoDataIndexSpecResourcesLimitsMapOutput
	ToKogitoDataIndexSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoDataIndexSpecResourcesLimitsMapOutput
}

type KogitoDataIndexSpecResourcesLimitsMap map[string]KogitoDataIndexSpecResourcesLimitsInput

func (KogitoDataIndexSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoDataIndexSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoDataIndexSpecResourcesLimitsMap) ToKogitoDataIndexSpecResourcesLimitsMapOutput() KogitoDataIndexSpecResourcesLimitsMapOutput {
	return i.ToKogitoDataIndexSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesLimitsMap) ToKogitoDataIndexSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesLimitsMapOutput)
}

type KogitoDataIndexSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesLimitsOutput) ToKogitoDataIndexSpecResourcesLimitsOutput() KogitoDataIndexSpecResourcesLimitsOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesLimitsOutput) ToKogitoDataIndexSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesLimitsOutput {
	return o
}

type KogitoDataIndexSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoDataIndexSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesLimitsMapOutput) ToKogitoDataIndexSpecResourcesLimitsMapOutput() KogitoDataIndexSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesLimitsMapOutput) ToKogitoDataIndexSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoDataIndexSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoDataIndexSpecResourcesLimits {
		return vs[0].(map[string]KogitoDataIndexSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoDataIndexSpecResourcesLimitsOutput)
}

type KogitoDataIndexSpecResourcesRequests struct {
}

// KogitoDataIndexSpecResourcesRequestsInput is an input type that accepts KogitoDataIndexSpecResourcesRequestsArgs and KogitoDataIndexSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesRequestsInput` via:
//
//          KogitoDataIndexSpecResourcesRequestsArgs{...}
type KogitoDataIndexSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesRequestsOutput() KogitoDataIndexSpecResourcesRequestsOutput
	ToKogitoDataIndexSpecResourcesRequestsOutputWithContext(context.Context) KogitoDataIndexSpecResourcesRequestsOutput
}

type KogitoDataIndexSpecResourcesRequestsArgs struct {
}

func (KogitoDataIndexSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoDataIndexSpecResourcesRequestsArgs) ToKogitoDataIndexSpecResourcesRequestsOutput() KogitoDataIndexSpecResourcesRequestsOutput {
	return i.ToKogitoDataIndexSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesRequestsArgs) ToKogitoDataIndexSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesRequestsOutput)
}

// KogitoDataIndexSpecResourcesRequestsMapInput is an input type that accepts KogitoDataIndexSpecResourcesRequestsMap and KogitoDataIndexSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecResourcesRequestsMapInput` via:
//
//          KogitoDataIndexSpecResourcesRequestsMap{ "key": KogitoDataIndexSpecResourcesRequestsArgs{...} }
type KogitoDataIndexSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecResourcesRequestsMapOutput() KogitoDataIndexSpecResourcesRequestsMapOutput
	ToKogitoDataIndexSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoDataIndexSpecResourcesRequestsMapOutput
}

type KogitoDataIndexSpecResourcesRequestsMap map[string]KogitoDataIndexSpecResourcesRequestsInput

func (KogitoDataIndexSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoDataIndexSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoDataIndexSpecResourcesRequestsMap) ToKogitoDataIndexSpecResourcesRequestsMapOutput() KogitoDataIndexSpecResourcesRequestsMapOutput {
	return i.ToKogitoDataIndexSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecResourcesRequestsMap) ToKogitoDataIndexSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecResourcesRequestsMapOutput)
}

type KogitoDataIndexSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesRequestsOutput) ToKogitoDataIndexSpecResourcesRequestsOutput() KogitoDataIndexSpecResourcesRequestsOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesRequestsOutput) ToKogitoDataIndexSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesRequestsOutput {
	return o
}

type KogitoDataIndexSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoDataIndexSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoDataIndexSpecResourcesRequestsMapOutput) ToKogitoDataIndexSpecResourcesRequestsMapOutput() KogitoDataIndexSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesRequestsMapOutput) ToKogitoDataIndexSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoDataIndexSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoDataIndexSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoDataIndexSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoDataIndexSpecResourcesRequests {
		return vs[0].(map[string]KogitoDataIndexSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoDataIndexSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoDataIndexSpecServiceLabels struct {
}

// KogitoDataIndexSpecServiceLabelsInput is an input type that accepts KogitoDataIndexSpecServiceLabelsArgs and KogitoDataIndexSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoDataIndexSpecServiceLabelsInput` via:
//
//          KogitoDataIndexSpecServiceLabelsArgs{...}
type KogitoDataIndexSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoDataIndexSpecServiceLabelsOutput() KogitoDataIndexSpecServiceLabelsOutput
	ToKogitoDataIndexSpecServiceLabelsOutputWithContext(context.Context) KogitoDataIndexSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoDataIndexSpecServiceLabelsArgs struct {
}

func (KogitoDataIndexSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecServiceLabels)(nil)).Elem()
}

func (i KogitoDataIndexSpecServiceLabelsArgs) ToKogitoDataIndexSpecServiceLabelsOutput() KogitoDataIndexSpecServiceLabelsOutput {
	return i.ToKogitoDataIndexSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoDataIndexSpecServiceLabelsArgs) ToKogitoDataIndexSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoDataIndexSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoDataIndexSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexSpecServiceLabels)(nil)).Elem()
}

func (o KogitoDataIndexSpecServiceLabelsOutput) ToKogitoDataIndexSpecServiceLabelsOutput() KogitoDataIndexSpecServiceLabelsOutput {
	return o
}

func (o KogitoDataIndexSpecServiceLabelsOutput) ToKogitoDataIndexSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoDataIndexSpecServiceLabelsOutput {
	return o
}

// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
type KogitoDataIndexStatus struct {
	// History of conditions for the resource
	Conditions []KogitoDataIndexStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoDataIndexStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoDataIndexStatusInput is an input type that accepts KogitoDataIndexStatusArgs and KogitoDataIndexStatusOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusInput` via:
//
//          KogitoDataIndexStatusArgs{...}
type KogitoDataIndexStatusInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusOutput() KogitoDataIndexStatusOutput
	ToKogitoDataIndexStatusOutputWithContext(context.Context) KogitoDataIndexStatusOutput
}

// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
type KogitoDataIndexStatusArgs struct {
	// History of conditions for the resource
	Conditions KogitoDataIndexStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoDataIndexStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoDataIndexStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatus)(nil)).Elem()
}

func (i KogitoDataIndexStatusArgs) ToKogitoDataIndexStatusOutput() KogitoDataIndexStatusOutput {
	return i.ToKogitoDataIndexStatusOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusArgs) ToKogitoDataIndexStatusOutputWithContext(ctx context.Context) KogitoDataIndexStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusOutput)
}

func (i KogitoDataIndexStatusArgs) ToKogitoDataIndexStatusPtrOutput() KogitoDataIndexStatusPtrOutput {
	return i.ToKogitoDataIndexStatusPtrOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusArgs) ToKogitoDataIndexStatusPtrOutputWithContext(ctx context.Context) KogitoDataIndexStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusOutput).ToKogitoDataIndexStatusPtrOutputWithContext(ctx)
}

// KogitoDataIndexStatusPtrInput is an input type that accepts KogitoDataIndexStatusArgs, KogitoDataIndexStatusPtr and KogitoDataIndexStatusPtrOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusPtrInput` via:
//
//          KogitoDataIndexStatusArgs{...}
//
//  or:
//
//          nil
type KogitoDataIndexStatusPtrInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusPtrOutput() KogitoDataIndexStatusPtrOutput
	ToKogitoDataIndexStatusPtrOutputWithContext(context.Context) KogitoDataIndexStatusPtrOutput
}

type kogitoDataIndexStatusPtrType KogitoDataIndexStatusArgs

func KogitoDataIndexStatusPtr(v *KogitoDataIndexStatusArgs) KogitoDataIndexStatusPtrInput {
	return (*kogitoDataIndexStatusPtrType)(v)
}

func (*kogitoDataIndexStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexStatus)(nil)).Elem()
}

func (i *kogitoDataIndexStatusPtrType) ToKogitoDataIndexStatusPtrOutput() KogitoDataIndexStatusPtrOutput {
	return i.ToKogitoDataIndexStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoDataIndexStatusPtrType) ToKogitoDataIndexStatusPtrOutputWithContext(ctx context.Context) KogitoDataIndexStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusPtrOutput)
}

// KogitoDataIndexStatus defines the observed state of KogitoDataIndex.
type KogitoDataIndexStatusOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatus)(nil)).Elem()
}

func (o KogitoDataIndexStatusOutput) ToKogitoDataIndexStatusOutput() KogitoDataIndexStatusOutput {
	return o
}

func (o KogitoDataIndexStatusOutput) ToKogitoDataIndexStatusOutputWithContext(ctx context.Context) KogitoDataIndexStatusOutput {
	return o
}

func (o KogitoDataIndexStatusOutput) ToKogitoDataIndexStatusPtrOutput() KogitoDataIndexStatusPtrOutput {
	return o.ToKogitoDataIndexStatusPtrOutputWithContext(context.Background())
}

func (o KogitoDataIndexStatusOutput) ToKogitoDataIndexStatusPtrOutputWithContext(ctx context.Context) KogitoDataIndexStatusPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatus) *KogitoDataIndexStatus {
		return &v
	}).(KogitoDataIndexStatusPtrOutput)
}

// History of conditions for the resource
func (o KogitoDataIndexStatusOutput) Conditions() KogitoDataIndexStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoDataIndexStatus) []KogitoDataIndexStatusConditions { return v.Conditions }).(KogitoDataIndexStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoDataIndexStatusOutput) DeploymentConditions() KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoDataIndexStatus) []KogitoDataIndexStatusDeploymentConditions {
		return v.DeploymentConditions
	}).(KogitoDataIndexStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoDataIndexStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoDataIndexStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoDataIndexStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoDataIndexStatus)(nil)).Elem()
}

func (o KogitoDataIndexStatusPtrOutput) ToKogitoDataIndexStatusPtrOutput() KogitoDataIndexStatusPtrOutput {
	return o
}

func (o KogitoDataIndexStatusPtrOutput) ToKogitoDataIndexStatusPtrOutputWithContext(ctx context.Context) KogitoDataIndexStatusPtrOutput {
	return o
}

func (o KogitoDataIndexStatusPtrOutput) Elem() KogitoDataIndexStatusOutput {
	return o.ApplyT(func(v *KogitoDataIndexStatus) KogitoDataIndexStatus { return *v }).(KogitoDataIndexStatusOutput)
}

// History of conditions for the resource
func (o KogitoDataIndexStatusPtrOutput) Conditions() KogitoDataIndexStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoDataIndexStatus) []KogitoDataIndexStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoDataIndexStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoDataIndexStatusPtrOutput) DeploymentConditions() KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoDataIndexStatus) []KogitoDataIndexStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoDataIndexStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoDataIndexStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoDataIndexStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoDataIndexStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Condition is the detailed condition for the resource
type KogitoDataIndexStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ReasonType is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoDataIndexStatusConditionsInput is an input type that accepts KogitoDataIndexStatusConditionsArgs and KogitoDataIndexStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusConditionsInput` via:
//
//          KogitoDataIndexStatusConditionsArgs{...}
type KogitoDataIndexStatusConditionsInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusConditionsOutput() KogitoDataIndexStatusConditionsOutput
	ToKogitoDataIndexStatusConditionsOutputWithContext(context.Context) KogitoDataIndexStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoDataIndexStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ReasonType is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoDataIndexStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatusConditions)(nil)).Elem()
}

func (i KogitoDataIndexStatusConditionsArgs) ToKogitoDataIndexStatusConditionsOutput() KogitoDataIndexStatusConditionsOutput {
	return i.ToKogitoDataIndexStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusConditionsArgs) ToKogitoDataIndexStatusConditionsOutputWithContext(ctx context.Context) KogitoDataIndexStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusConditionsOutput)
}

// KogitoDataIndexStatusConditionsArrayInput is an input type that accepts KogitoDataIndexStatusConditionsArray and KogitoDataIndexStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusConditionsArrayInput` via:
//
//          KogitoDataIndexStatusConditionsArray{ KogitoDataIndexStatusConditionsArgs{...} }
type KogitoDataIndexStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusConditionsArrayOutput() KogitoDataIndexStatusConditionsArrayOutput
	ToKogitoDataIndexStatusConditionsArrayOutputWithContext(context.Context) KogitoDataIndexStatusConditionsArrayOutput
}

type KogitoDataIndexStatusConditionsArray []KogitoDataIndexStatusConditionsInput

func (KogitoDataIndexStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexStatusConditions)(nil)).Elem()
}

func (i KogitoDataIndexStatusConditionsArray) ToKogitoDataIndexStatusConditionsArrayOutput() KogitoDataIndexStatusConditionsArrayOutput {
	return i.ToKogitoDataIndexStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusConditionsArray) ToKogitoDataIndexStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoDataIndexStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoDataIndexStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatusConditions)(nil)).Elem()
}

func (o KogitoDataIndexStatusConditionsOutput) ToKogitoDataIndexStatusConditionsOutput() KogitoDataIndexStatusConditionsOutput {
	return o
}

func (o KogitoDataIndexStatusConditionsOutput) ToKogitoDataIndexStatusConditionsOutputWithContext(ctx context.Context) KogitoDataIndexStatusConditionsOutput {
	return o
}

func (o KogitoDataIndexStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ReasonType is the type of reason
func (o KogitoDataIndexStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoDataIndexStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoDataIndexStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoDataIndexStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexStatusConditions)(nil)).Elem()
}

func (o KogitoDataIndexStatusConditionsArrayOutput) ToKogitoDataIndexStatusConditionsArrayOutput() KogitoDataIndexStatusConditionsArrayOutput {
	return o
}

func (o KogitoDataIndexStatusConditionsArrayOutput) ToKogitoDataIndexStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoDataIndexStatusConditionsArrayOutput {
	return o
}

func (o KogitoDataIndexStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoDataIndexStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoDataIndexStatusConditions {
		return vs[0].([]KogitoDataIndexStatusConditions)[vs[1].(int)]
	}).(KogitoDataIndexStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoDataIndexStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoDataIndexStatusDeploymentConditionsInput is an input type that accepts KogitoDataIndexStatusDeploymentConditionsArgs and KogitoDataIndexStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusDeploymentConditionsInput` via:
//
//          KogitoDataIndexStatusDeploymentConditionsArgs{...}
type KogitoDataIndexStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusDeploymentConditionsOutput() KogitoDataIndexStatusDeploymentConditionsOutput
	ToKogitoDataIndexStatusDeploymentConditionsOutputWithContext(context.Context) KogitoDataIndexStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoDataIndexStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoDataIndexStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoDataIndexStatusDeploymentConditionsArgs) ToKogitoDataIndexStatusDeploymentConditionsOutput() KogitoDataIndexStatusDeploymentConditionsOutput {
	return i.ToKogitoDataIndexStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusDeploymentConditionsArgs) ToKogitoDataIndexStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoDataIndexStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusDeploymentConditionsOutput)
}

// KogitoDataIndexStatusDeploymentConditionsArrayInput is an input type that accepts KogitoDataIndexStatusDeploymentConditionsArray and KogitoDataIndexStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoDataIndexStatusDeploymentConditionsArrayInput` via:
//
//          KogitoDataIndexStatusDeploymentConditionsArray{ KogitoDataIndexStatusDeploymentConditionsArgs{...} }
type KogitoDataIndexStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoDataIndexStatusDeploymentConditionsArrayOutput() KogitoDataIndexStatusDeploymentConditionsArrayOutput
	ToKogitoDataIndexStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoDataIndexStatusDeploymentConditionsArrayOutput
}

type KogitoDataIndexStatusDeploymentConditionsArray []KogitoDataIndexStatusDeploymentConditionsInput

func (KogitoDataIndexStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoDataIndexStatusDeploymentConditionsArray) ToKogitoDataIndexStatusDeploymentConditionsArrayOutput() KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoDataIndexStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoDataIndexStatusDeploymentConditionsArray) ToKogitoDataIndexStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoDataIndexStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoDataIndexStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoDataIndexStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoDataIndexStatusDeploymentConditionsOutput) ToKogitoDataIndexStatusDeploymentConditionsOutput() KogitoDataIndexStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoDataIndexStatusDeploymentConditionsOutput) ToKogitoDataIndexStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoDataIndexStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoDataIndexStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoDataIndexStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoDataIndexStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoDataIndexStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoDataIndexStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoDataIndexStatusDeploymentConditionsArrayOutput) ToKogitoDataIndexStatusDeploymentConditionsArrayOutput() KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoDataIndexStatusDeploymentConditionsArrayOutput) ToKogitoDataIndexStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoDataIndexStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoDataIndexStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoDataIndexStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoDataIndexStatusDeploymentConditions {
		return vs[0].([]KogitoDataIndexStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoDataIndexStatusDeploymentConditionsOutput)
}

// KogitoInfra will be managed automatically by the operator, don't need to create it manually. Kogito Infra is responsible to delegate the creation of each infrastructure dependency (such as Infinispan) to a third party operator. It holds the deployment status of each infrastructure dependency and custom resources needed to run Kogito Runtime and Kogito Data Index services.
type KogitoInfraType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec *KogitoInfraSpec `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status *KogitoInfraStatus `pulumi:"status"`
}

// KogitoInfraTypeInput is an input type that accepts KogitoInfraTypeArgs and KogitoInfraTypeOutput values.
// You can construct a concrete instance of `KogitoInfraTypeInput` via:
//
//          KogitoInfraTypeArgs{...}
type KogitoInfraTypeInput interface {
	pulumi.Input

	ToKogitoInfraTypeOutput() KogitoInfraTypeOutput
	ToKogitoInfraTypeOutputWithContext(context.Context) KogitoInfraTypeOutput
}

// KogitoInfra will be managed automatically by the operator, don't need to create it manually. Kogito Infra is responsible to delegate the creation of each infrastructure dependency (such as Infinispan) to a third party operator. It holds the deployment status of each infrastructure dependency and custom resources needed to run Kogito Runtime and Kogito Data Index services.
type KogitoInfraTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoInfraSpec defines the desired state of KogitoInfra.
	Spec KogitoInfraSpecPtrInput `pulumi:"spec"`
	// KogitoInfraStatus defines the observed state of KogitoInfra.
	Status KogitoInfraStatusPtrInput `pulumi:"status"`
}

func (KogitoInfraTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraType)(nil)).Elem()
}

func (i KogitoInfraTypeArgs) ToKogitoInfraTypeOutput() KogitoInfraTypeOutput {
	return i.ToKogitoInfraTypeOutputWithContext(context.Background())
}

func (i KogitoInfraTypeArgs) ToKogitoInfraTypeOutputWithContext(ctx context.Context) KogitoInfraTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraTypeOutput)
}

// KogitoInfra will be managed automatically by the operator, don't need to create it manually. Kogito Infra is responsible to delegate the creation of each infrastructure dependency (such as Infinispan) to a third party operator. It holds the deployment status of each infrastructure dependency and custom resources needed to run Kogito Runtime and Kogito Data Index services.
type KogitoInfraTypeOutput struct{ *pulumi.OutputState }

func (KogitoInfraTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraType)(nil)).Elem()
}

func (o KogitoInfraTypeOutput) ToKogitoInfraTypeOutput() KogitoInfraTypeOutput {
	return o
}

func (o KogitoInfraTypeOutput) ToKogitoInfraTypeOutputWithContext(ctx context.Context) KogitoInfraTypeOutput {
	return o
}

func (o KogitoInfraTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
func (o KogitoInfraTypeOutput) Spec() KogitoInfraSpecPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *KogitoInfraSpec { return v.Spec }).(KogitoInfraSpecPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
func (o KogitoInfraTypeOutput) Status() KogitoInfraStatusPtrOutput {
	return o.ApplyT(func(v KogitoInfraType) *KogitoInfraStatus { return v.Status }).(KogitoInfraStatusPtrOutput)
}

type KogitoInfraMetadata struct {
}

// KogitoInfraMetadataInput is an input type that accepts KogitoInfraMetadataArgs and KogitoInfraMetadataOutput values.
// You can construct a concrete instance of `KogitoInfraMetadataInput` via:
//
//          KogitoInfraMetadataArgs{...}
type KogitoInfraMetadataInput interface {
	pulumi.Input

	ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput
	ToKogitoInfraMetadataOutputWithContext(context.Context) KogitoInfraMetadataOutput
}

type KogitoInfraMetadataArgs struct {
}

func (KogitoInfraMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraMetadata)(nil)).Elem()
}

func (i KogitoInfraMetadataArgs) ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput {
	return i.ToKogitoInfraMetadataOutputWithContext(context.Background())
}

func (i KogitoInfraMetadataArgs) ToKogitoInfraMetadataOutputWithContext(ctx context.Context) KogitoInfraMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraMetadataOutput)
}

type KogitoInfraMetadataOutput struct{ *pulumi.OutputState }

func (KogitoInfraMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraMetadata)(nil)).Elem()
}

func (o KogitoInfraMetadataOutput) ToKogitoInfraMetadataOutput() KogitoInfraMetadataOutput {
	return o
}

func (o KogitoInfraMetadataOutput) ToKogitoInfraMetadataOutputWithContext(ctx context.Context) KogitoInfraMetadataOutput {
	return o
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpec struct {
	// Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
	InstallInfinispan *bool `pulumi:"installInfinispan"`
	// Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
	InstallKafka *bool `pulumi:"installKafka"`
	// Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
	InstallKeycloak *bool `pulumi:"installKeycloak"`
}

// KogitoInfraSpecInput is an input type that accepts KogitoInfraSpecArgs and KogitoInfraSpecOutput values.
// You can construct a concrete instance of `KogitoInfraSpecInput` via:
//
//          KogitoInfraSpecArgs{...}
type KogitoInfraSpecInput interface {
	pulumi.Input

	ToKogitoInfraSpecOutput() KogitoInfraSpecOutput
	ToKogitoInfraSpecOutputWithContext(context.Context) KogitoInfraSpecOutput
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpecArgs struct {
	// Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
	InstallInfinispan pulumi.BoolPtrInput `pulumi:"installInfinispan"`
	// Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
	InstallKafka pulumi.BoolPtrInput `pulumi:"installKafka"`
	// Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
	InstallKeycloak pulumi.BoolPtrInput `pulumi:"installKeycloak"`
}

func (KogitoInfraSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpec)(nil)).Elem()
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecOutput() KogitoInfraSpecOutput {
	return i.ToKogitoInfraSpecOutputWithContext(context.Background())
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecOutputWithContext(ctx context.Context) KogitoInfraSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecOutput)
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return i.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (i KogitoInfraSpecArgs) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecOutput).ToKogitoInfraSpecPtrOutputWithContext(ctx)
}

// KogitoInfraSpecPtrInput is an input type that accepts KogitoInfraSpecArgs, KogitoInfraSpecPtr and KogitoInfraSpecPtrOutput values.
// You can construct a concrete instance of `KogitoInfraSpecPtrInput` via:
//
//          KogitoInfraSpecArgs{...}
//
//  or:
//
//          nil
type KogitoInfraSpecPtrInput interface {
	pulumi.Input

	ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput
	ToKogitoInfraSpecPtrOutputWithContext(context.Context) KogitoInfraSpecPtrOutput
}

type kogitoInfraSpecPtrType KogitoInfraSpecArgs

func KogitoInfraSpecPtr(v *KogitoInfraSpecArgs) KogitoInfraSpecPtrInput {
	return (*kogitoInfraSpecPtrType)(v)
}

func (*kogitoInfraSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpec)(nil)).Elem()
}

func (i *kogitoInfraSpecPtrType) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return i.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraSpecPtrType) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraSpecPtrOutput)
}

// KogitoInfraSpec defines the desired state of KogitoInfra.
type KogitoInfraSpecOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraSpec)(nil)).Elem()
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecOutput() KogitoInfraSpecOutput {
	return o
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecOutputWithContext(ctx context.Context) KogitoInfraSpecOutput {
	return o
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return o.ToKogitoInfraSpecPtrOutputWithContext(context.Background())
}

func (o KogitoInfraSpecOutput) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *KogitoInfraSpec {
		return &v
	}).(KogitoInfraSpecPtrOutput)
}

// Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecOutput) InstallInfinispan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *bool { return v.InstallInfinispan }).(pulumi.BoolPtrOutput)
}

// Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecOutput) InstallKafka() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *bool { return v.InstallKafka }).(pulumi.BoolPtrOutput)
}

// Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecOutput) InstallKeycloak() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoInfraSpec) *bool { return v.InstallKeycloak }).(pulumi.BoolPtrOutput)
}

type KogitoInfraSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraSpec)(nil)).Elem()
}

func (o KogitoInfraSpecPtrOutput) ToKogitoInfraSpecPtrOutput() KogitoInfraSpecPtrOutput {
	return o
}

func (o KogitoInfraSpecPtrOutput) ToKogitoInfraSpecPtrOutputWithContext(ctx context.Context) KogitoInfraSpecPtrOutput {
	return o
}

func (o KogitoInfraSpecPtrOutput) Elem() KogitoInfraSpecOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) KogitoInfraSpec { return *v }).(KogitoInfraSpecOutput)
}

// Indicates if Infinispan should be installed or not using Infinispan Operator. Please note that the Infinispan Operator must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecPtrOutput) InstallInfinispan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InstallInfinispan
	}).(pulumi.BoolPtrOutput)
}

// Indicates if Kafka should be installed or not using Strimzi (Kafka Operator). Please note that the Strimzi must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecPtrOutput) InstallKafka() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InstallKafka
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to install Keycloak using Keycloak Operator. Please note that the Keycloak Operator must be installed manually on environments that doesn't have OLM installed.
func (o KogitoInfraSpecPtrOutput) InstallKeycloak() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoInfraSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InstallKeycloak
	}).(pulumi.BoolPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatus struct {
	// KogitoInfraCondition ...
	Condition *KogitoInfraStatusCondition `pulumi:"condition"`
	// InfinispanInstallStatus defines the Infinispan installation status.
	Infinispan *KogitoInfraStatusInfinispan `pulumi:"infinispan"`
	// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
	Kafka *KogitoInfraStatusKafka `pulumi:"kafka"`
	// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
	Keycloak *KogitoInfraStatusKeycloak `pulumi:"keycloak"`
}

// KogitoInfraStatusInput is an input type that accepts KogitoInfraStatusArgs and KogitoInfraStatusOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInput` via:
//
//          KogitoInfraStatusArgs{...}
type KogitoInfraStatusInput interface {
	pulumi.Input

	ToKogitoInfraStatusOutput() KogitoInfraStatusOutput
	ToKogitoInfraStatusOutputWithContext(context.Context) KogitoInfraStatusOutput
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatusArgs struct {
	// KogitoInfraCondition ...
	Condition KogitoInfraStatusConditionPtrInput `pulumi:"condition"`
	// InfinispanInstallStatus defines the Infinispan installation status.
	Infinispan KogitoInfraStatusInfinispanPtrInput `pulumi:"infinispan"`
	// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
	Kafka KogitoInfraStatusKafkaPtrInput `pulumi:"kafka"`
	// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
	Keycloak KogitoInfraStatusKeycloakPtrInput `pulumi:"keycloak"`
}

func (KogitoInfraStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatus)(nil)).Elem()
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusOutput() KogitoInfraStatusOutput {
	return i.ToKogitoInfraStatusOutputWithContext(context.Background())
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusOutputWithContext(ctx context.Context) KogitoInfraStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusOutput)
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return i.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusArgs) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusOutput).ToKogitoInfraStatusPtrOutputWithContext(ctx)
}

// KogitoInfraStatusPtrInput is an input type that accepts KogitoInfraStatusArgs, KogitoInfraStatusPtr and KogitoInfraStatusPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusPtrInput` via:
//
//          KogitoInfraStatusArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput
	ToKogitoInfraStatusPtrOutputWithContext(context.Context) KogitoInfraStatusPtrOutput
}

type kogitoInfraStatusPtrType KogitoInfraStatusArgs

func KogitoInfraStatusPtr(v *KogitoInfraStatusArgs) KogitoInfraStatusPtrInput {
	return (*kogitoInfraStatusPtrType)(v)
}

func (*kogitoInfraStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatus)(nil)).Elem()
}

func (i *kogitoInfraStatusPtrType) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return i.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusPtrType) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusPtrOutput)
}

// KogitoInfraStatus defines the observed state of KogitoInfra.
type KogitoInfraStatusOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatus)(nil)).Elem()
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusOutput() KogitoInfraStatusOutput {
	return o
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusOutputWithContext(ctx context.Context) KogitoInfraStatusOutput {
	return o
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return o.ToKogitoInfraStatusPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusOutput) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatus {
		return &v
	}).(KogitoInfraStatusPtrOutput)
}

// KogitoInfraCondition ...
func (o KogitoInfraStatusOutput) Condition() KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatusCondition { return v.Condition }).(KogitoInfraStatusConditionPtrOutput)
}

// InfinispanInstallStatus defines the Infinispan installation status.
func (o KogitoInfraStatusOutput) Infinispan() KogitoInfraStatusInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatusInfinispan { return v.Infinispan }).(KogitoInfraStatusInfinispanPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
func (o KogitoInfraStatusOutput) Kafka() KogitoInfraStatusKafkaPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatusKafka { return v.Kafka }).(KogitoInfraStatusKafkaPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
func (o KogitoInfraStatusOutput) Keycloak() KogitoInfraStatusKeycloakPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatus) *KogitoInfraStatusKeycloak { return v.Keycloak }).(KogitoInfraStatusKeycloakPtrOutput)
}

type KogitoInfraStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatus)(nil)).Elem()
}

func (o KogitoInfraStatusPtrOutput) ToKogitoInfraStatusPtrOutput() KogitoInfraStatusPtrOutput {
	return o
}

func (o KogitoInfraStatusPtrOutput) ToKogitoInfraStatusPtrOutputWithContext(ctx context.Context) KogitoInfraStatusPtrOutput {
	return o
}

func (o KogitoInfraStatusPtrOutput) Elem() KogitoInfraStatusOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) KogitoInfraStatus { return *v }).(KogitoInfraStatusOutput)
}

// KogitoInfraCondition ...
func (o KogitoInfraStatusPtrOutput) Condition() KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) *KogitoInfraStatusCondition {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(KogitoInfraStatusConditionPtrOutput)
}

// InfinispanInstallStatus defines the Infinispan installation status.
func (o KogitoInfraStatusPtrOutput) Infinispan() KogitoInfraStatusInfinispanPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) *KogitoInfraStatusInfinispan {
		if v == nil {
			return nil
		}
		return v.Infinispan
	}).(KogitoInfraStatusInfinispanPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
func (o KogitoInfraStatusPtrOutput) Kafka() KogitoInfraStatusKafkaPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) *KogitoInfraStatusKafka {
		if v == nil {
			return nil
		}
		return v.Kafka
	}).(KogitoInfraStatusKafkaPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
func (o KogitoInfraStatusPtrOutput) Keycloak() KogitoInfraStatusKeycloakPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatus) *KogitoInfraStatusKeycloak {
		if v == nil {
			return nil
		}
		return v.Keycloak
	}).(KogitoInfraStatusKeycloakPtrOutput)
}

// KogitoInfraCondition ...
type KogitoInfraStatusCondition struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             string  `pulumi:"status"`
	// KogitoInfraConditionType ...
	Type string `pulumi:"type"`
}

// KogitoInfraStatusConditionInput is an input type that accepts KogitoInfraStatusConditionArgs and KogitoInfraStatusConditionOutput values.
// You can construct a concrete instance of `KogitoInfraStatusConditionInput` via:
//
//          KogitoInfraStatusConditionArgs{...}
type KogitoInfraStatusConditionInput interface {
	pulumi.Input

	ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput
	ToKogitoInfraStatusConditionOutputWithContext(context.Context) KogitoInfraStatusConditionOutput
}

// KogitoInfraCondition ...
type KogitoInfraStatusConditionArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// KogitoInfraConditionType ...
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoInfraStatusConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusCondition)(nil)).Elem()
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput {
	return i.ToKogitoInfraStatusConditionOutputWithContext(context.Background())
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionOutputWithContext(ctx context.Context) KogitoInfraStatusConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionOutput)
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return i.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusConditionArgs) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionOutput).ToKogitoInfraStatusConditionPtrOutputWithContext(ctx)
}

// KogitoInfraStatusConditionPtrInput is an input type that accepts KogitoInfraStatusConditionArgs, KogitoInfraStatusConditionPtr and KogitoInfraStatusConditionPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusConditionPtrInput` via:
//
//          KogitoInfraStatusConditionArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusConditionPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput
	ToKogitoInfraStatusConditionPtrOutputWithContext(context.Context) KogitoInfraStatusConditionPtrOutput
}

type kogitoInfraStatusConditionPtrType KogitoInfraStatusConditionArgs

func KogitoInfraStatusConditionPtr(v *KogitoInfraStatusConditionArgs) KogitoInfraStatusConditionPtrInput {
	return (*kogitoInfraStatusConditionPtrType)(v)
}

func (*kogitoInfraStatusConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusCondition)(nil)).Elem()
}

func (i *kogitoInfraStatusConditionPtrType) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return i.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusConditionPtrType) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusConditionPtrOutput)
}

// KogitoInfraCondition ...
type KogitoInfraStatusConditionOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusCondition)(nil)).Elem()
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionOutput() KogitoInfraStatusConditionOutput {
	return o
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionOutputWithContext(ctx context.Context) KogitoInfraStatusConditionOutput {
	return o
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return o.ToKogitoInfraStatusConditionPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusConditionOutput) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *KogitoInfraStatusCondition {
		return &v
	}).(KogitoInfraStatusConditionPtrOutput)
}
func (o KogitoInfraStatusConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) string { return v.Status }).(pulumi.StringOutput)
}

// KogitoInfraConditionType ...
func (o KogitoInfraStatusConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusCondition) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoInfraStatusConditionPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusCondition)(nil)).Elem()
}

func (o KogitoInfraStatusConditionPtrOutput) ToKogitoInfraStatusConditionPtrOutput() KogitoInfraStatusConditionPtrOutput {
	return o
}

func (o KogitoInfraStatusConditionPtrOutput) ToKogitoInfraStatusConditionPtrOutputWithContext(ctx context.Context) KogitoInfraStatusConditionPtrOutput {
	return o
}

func (o KogitoInfraStatusConditionPtrOutput) Elem() KogitoInfraStatusConditionOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) KogitoInfraStatusCondition { return *v }).(KogitoInfraStatusConditionOutput)
}

func (o KogitoInfraStatusConditionPtrOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return v.LastTransitionTime
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusConditionPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusConditionPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// KogitoInfraConditionType ...
func (o KogitoInfraStatusConditionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// InfinispanInstallStatus defines the Infinispan installation status.
type KogitoInfraStatusInfinispan struct {
	Condition        []KogitoInfraStatusInfinispanCondition `pulumi:"condition"`
	CredentialSecret *string                                `pulumi:"credentialSecret"`
	Name             *string                                `pulumi:"name"`
	Service          *string                                `pulumi:"service"`
}

// KogitoInfraStatusInfinispanInput is an input type that accepts KogitoInfraStatusInfinispanArgs and KogitoInfraStatusInfinispanOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInfinispanInput` via:
//
//          KogitoInfraStatusInfinispanArgs{...}
type KogitoInfraStatusInfinispanInput interface {
	pulumi.Input

	ToKogitoInfraStatusInfinispanOutput() KogitoInfraStatusInfinispanOutput
	ToKogitoInfraStatusInfinispanOutputWithContext(context.Context) KogitoInfraStatusInfinispanOutput
}

// InfinispanInstallStatus defines the Infinispan installation status.
type KogitoInfraStatusInfinispanArgs struct {
	Condition        KogitoInfraStatusInfinispanConditionArrayInput `pulumi:"condition"`
	CredentialSecret pulumi.StringPtrInput                          `pulumi:"credentialSecret"`
	Name             pulumi.StringPtrInput                          `pulumi:"name"`
	Service          pulumi.StringPtrInput                          `pulumi:"service"`
}

func (KogitoInfraStatusInfinispanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusInfinispan)(nil)).Elem()
}

func (i KogitoInfraStatusInfinispanArgs) ToKogitoInfraStatusInfinispanOutput() KogitoInfraStatusInfinispanOutput {
	return i.ToKogitoInfraStatusInfinispanOutputWithContext(context.Background())
}

func (i KogitoInfraStatusInfinispanArgs) ToKogitoInfraStatusInfinispanOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusInfinispanOutput)
}

func (i KogitoInfraStatusInfinispanArgs) ToKogitoInfraStatusInfinispanPtrOutput() KogitoInfraStatusInfinispanPtrOutput {
	return i.ToKogitoInfraStatusInfinispanPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusInfinispanArgs) ToKogitoInfraStatusInfinispanPtrOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusInfinispanOutput).ToKogitoInfraStatusInfinispanPtrOutputWithContext(ctx)
}

// KogitoInfraStatusInfinispanPtrInput is an input type that accepts KogitoInfraStatusInfinispanArgs, KogitoInfraStatusInfinispanPtr and KogitoInfraStatusInfinispanPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInfinispanPtrInput` via:
//
//          KogitoInfraStatusInfinispanArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusInfinispanPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusInfinispanPtrOutput() KogitoInfraStatusInfinispanPtrOutput
	ToKogitoInfraStatusInfinispanPtrOutputWithContext(context.Context) KogitoInfraStatusInfinispanPtrOutput
}

type kogitoInfraStatusInfinispanPtrType KogitoInfraStatusInfinispanArgs

func KogitoInfraStatusInfinispanPtr(v *KogitoInfraStatusInfinispanArgs) KogitoInfraStatusInfinispanPtrInput {
	return (*kogitoInfraStatusInfinispanPtrType)(v)
}

func (*kogitoInfraStatusInfinispanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusInfinispan)(nil)).Elem()
}

func (i *kogitoInfraStatusInfinispanPtrType) ToKogitoInfraStatusInfinispanPtrOutput() KogitoInfraStatusInfinispanPtrOutput {
	return i.ToKogitoInfraStatusInfinispanPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusInfinispanPtrType) ToKogitoInfraStatusInfinispanPtrOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusInfinispanPtrOutput)
}

// InfinispanInstallStatus defines the Infinispan installation status.
type KogitoInfraStatusInfinispanOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusInfinispanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusInfinispan)(nil)).Elem()
}

func (o KogitoInfraStatusInfinispanOutput) ToKogitoInfraStatusInfinispanOutput() KogitoInfraStatusInfinispanOutput {
	return o
}

func (o KogitoInfraStatusInfinispanOutput) ToKogitoInfraStatusInfinispanOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanOutput {
	return o
}

func (o KogitoInfraStatusInfinispanOutput) ToKogitoInfraStatusInfinispanPtrOutput() KogitoInfraStatusInfinispanPtrOutput {
	return o.ToKogitoInfraStatusInfinispanPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusInfinispanOutput) ToKogitoInfraStatusInfinispanPtrOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispan) *KogitoInfraStatusInfinispan {
		return &v
	}).(KogitoInfraStatusInfinispanPtrOutput)
}
func (o KogitoInfraStatusInfinispanOutput) Condition() KogitoInfraStatusInfinispanConditionArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispan) []KogitoInfraStatusInfinispanCondition { return v.Condition }).(KogitoInfraStatusInfinispanConditionArrayOutput)
}

func (o KogitoInfraStatusInfinispanOutput) CredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispan) *string { return v.CredentialSecret }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispan) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispan) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type KogitoInfraStatusInfinispanPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusInfinispanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusInfinispan)(nil)).Elem()
}

func (o KogitoInfraStatusInfinispanPtrOutput) ToKogitoInfraStatusInfinispanPtrOutput() KogitoInfraStatusInfinispanPtrOutput {
	return o
}

func (o KogitoInfraStatusInfinispanPtrOutput) ToKogitoInfraStatusInfinispanPtrOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanPtrOutput {
	return o
}

func (o KogitoInfraStatusInfinispanPtrOutput) Elem() KogitoInfraStatusInfinispanOutput {
	return o.ApplyT(func(v *KogitoInfraStatusInfinispan) KogitoInfraStatusInfinispan { return *v }).(KogitoInfraStatusInfinispanOutput)
}

func (o KogitoInfraStatusInfinispanPtrOutput) Condition() KogitoInfraStatusInfinispanConditionArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatusInfinispan) []KogitoInfraStatusInfinispanCondition {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(KogitoInfraStatusInfinispanConditionArrayOutput)
}

func (o KogitoInfraStatusInfinispanPtrOutput) CredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.CredentialSecret
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusInfinispanCondition struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             string  `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type string `pulumi:"type"`
}

// KogitoInfraStatusInfinispanConditionInput is an input type that accepts KogitoInfraStatusInfinispanConditionArgs and KogitoInfraStatusInfinispanConditionOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInfinispanConditionInput` via:
//
//          KogitoInfraStatusInfinispanConditionArgs{...}
type KogitoInfraStatusInfinispanConditionInput interface {
	pulumi.Input

	ToKogitoInfraStatusInfinispanConditionOutput() KogitoInfraStatusInfinispanConditionOutput
	ToKogitoInfraStatusInfinispanConditionOutputWithContext(context.Context) KogitoInfraStatusInfinispanConditionOutput
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusInfinispanConditionArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoInfraStatusInfinispanConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusInfinispanCondition)(nil)).Elem()
}

func (i KogitoInfraStatusInfinispanConditionArgs) ToKogitoInfraStatusInfinispanConditionOutput() KogitoInfraStatusInfinispanConditionOutput {
	return i.ToKogitoInfraStatusInfinispanConditionOutputWithContext(context.Background())
}

func (i KogitoInfraStatusInfinispanConditionArgs) ToKogitoInfraStatusInfinispanConditionOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusInfinispanConditionOutput)
}

// KogitoInfraStatusInfinispanConditionArrayInput is an input type that accepts KogitoInfraStatusInfinispanConditionArray and KogitoInfraStatusInfinispanConditionArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusInfinispanConditionArrayInput` via:
//
//          KogitoInfraStatusInfinispanConditionArray{ KogitoInfraStatusInfinispanConditionArgs{...} }
type KogitoInfraStatusInfinispanConditionArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusInfinispanConditionArrayOutput() KogitoInfraStatusInfinispanConditionArrayOutput
	ToKogitoInfraStatusInfinispanConditionArrayOutputWithContext(context.Context) KogitoInfraStatusInfinispanConditionArrayOutput
}

type KogitoInfraStatusInfinispanConditionArray []KogitoInfraStatusInfinispanConditionInput

func (KogitoInfraStatusInfinispanConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusInfinispanCondition)(nil)).Elem()
}

func (i KogitoInfraStatusInfinispanConditionArray) ToKogitoInfraStatusInfinispanConditionArrayOutput() KogitoInfraStatusInfinispanConditionArrayOutput {
	return i.ToKogitoInfraStatusInfinispanConditionArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusInfinispanConditionArray) ToKogitoInfraStatusInfinispanConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusInfinispanConditionArrayOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusInfinispanConditionOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusInfinispanConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusInfinispanCondition)(nil)).Elem()
}

func (o KogitoInfraStatusInfinispanConditionOutput) ToKogitoInfraStatusInfinispanConditionOutput() KogitoInfraStatusInfinispanConditionOutput {
	return o
}

func (o KogitoInfraStatusInfinispanConditionOutput) ToKogitoInfraStatusInfinispanConditionOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanConditionOutput {
	return o
}

func (o KogitoInfraStatusInfinispanConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispanCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispanCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusInfinispanConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispanCondition) string { return v.Status }).(pulumi.StringOutput)
}

// InstallConditionType defines the possibles conditions that a install might have.
func (o KogitoInfraStatusInfinispanConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusInfinispanCondition) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoInfraStatusInfinispanConditionArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusInfinispanConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusInfinispanCondition)(nil)).Elem()
}

func (o KogitoInfraStatusInfinispanConditionArrayOutput) ToKogitoInfraStatusInfinispanConditionArrayOutput() KogitoInfraStatusInfinispanConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusInfinispanConditionArrayOutput) ToKogitoInfraStatusInfinispanConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusInfinispanConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusInfinispanConditionArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusInfinispanConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusInfinispanCondition {
		return vs[0].([]KogitoInfraStatusInfinispanCondition)[vs[1].(int)]
	}).(KogitoInfraStatusInfinispanConditionOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKafka struct {
	Condition []KogitoInfraStatusKafkaCondition `pulumi:"condition"`
	Name      *string                           `pulumi:"name"`
	Service   *string                           `pulumi:"service"`
}

// KogitoInfraStatusKafkaInput is an input type that accepts KogitoInfraStatusKafkaArgs and KogitoInfraStatusKafkaOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKafkaInput` via:
//
//          KogitoInfraStatusKafkaArgs{...}
type KogitoInfraStatusKafkaInput interface {
	pulumi.Input

	ToKogitoInfraStatusKafkaOutput() KogitoInfraStatusKafkaOutput
	ToKogitoInfraStatusKafkaOutputWithContext(context.Context) KogitoInfraStatusKafkaOutput
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKafkaArgs struct {
	Condition KogitoInfraStatusKafkaConditionArrayInput `pulumi:"condition"`
	Name      pulumi.StringPtrInput                     `pulumi:"name"`
	Service   pulumi.StringPtrInput                     `pulumi:"service"`
}

func (KogitoInfraStatusKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKafka)(nil)).Elem()
}

func (i KogitoInfraStatusKafkaArgs) ToKogitoInfraStatusKafkaOutput() KogitoInfraStatusKafkaOutput {
	return i.ToKogitoInfraStatusKafkaOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKafkaArgs) ToKogitoInfraStatusKafkaOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKafkaOutput)
}

func (i KogitoInfraStatusKafkaArgs) ToKogitoInfraStatusKafkaPtrOutput() KogitoInfraStatusKafkaPtrOutput {
	return i.ToKogitoInfraStatusKafkaPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKafkaArgs) ToKogitoInfraStatusKafkaPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKafkaOutput).ToKogitoInfraStatusKafkaPtrOutputWithContext(ctx)
}

// KogitoInfraStatusKafkaPtrInput is an input type that accepts KogitoInfraStatusKafkaArgs, KogitoInfraStatusKafkaPtr and KogitoInfraStatusKafkaPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKafkaPtrInput` via:
//
//          KogitoInfraStatusKafkaArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusKafkaPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusKafkaPtrOutput() KogitoInfraStatusKafkaPtrOutput
	ToKogitoInfraStatusKafkaPtrOutputWithContext(context.Context) KogitoInfraStatusKafkaPtrOutput
}

type kogitoInfraStatusKafkaPtrType KogitoInfraStatusKafkaArgs

func KogitoInfraStatusKafkaPtr(v *KogitoInfraStatusKafkaArgs) KogitoInfraStatusKafkaPtrInput {
	return (*kogitoInfraStatusKafkaPtrType)(v)
}

func (*kogitoInfraStatusKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusKafka)(nil)).Elem()
}

func (i *kogitoInfraStatusKafkaPtrType) ToKogitoInfraStatusKafkaPtrOutput() KogitoInfraStatusKafkaPtrOutput {
	return i.ToKogitoInfraStatusKafkaPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusKafkaPtrType) ToKogitoInfraStatusKafkaPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKafkaPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKafkaOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKafka)(nil)).Elem()
}

func (o KogitoInfraStatusKafkaOutput) ToKogitoInfraStatusKafkaOutput() KogitoInfraStatusKafkaOutput {
	return o
}

func (o KogitoInfraStatusKafkaOutput) ToKogitoInfraStatusKafkaOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaOutput {
	return o
}

func (o KogitoInfraStatusKafkaOutput) ToKogitoInfraStatusKafkaPtrOutput() KogitoInfraStatusKafkaPtrOutput {
	return o.ToKogitoInfraStatusKafkaPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusKafkaOutput) ToKogitoInfraStatusKafkaPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafka) *KogitoInfraStatusKafka {
		return &v
	}).(KogitoInfraStatusKafkaPtrOutput)
}
func (o KogitoInfraStatusKafkaOutput) Condition() KogitoInfraStatusKafkaConditionArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafka) []KogitoInfraStatusKafkaCondition { return v.Condition }).(KogitoInfraStatusKafkaConditionArrayOutput)
}

func (o KogitoInfraStatusKafkaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafka) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKafkaOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafka) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type KogitoInfraStatusKafkaPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusKafka)(nil)).Elem()
}

func (o KogitoInfraStatusKafkaPtrOutput) ToKogitoInfraStatusKafkaPtrOutput() KogitoInfraStatusKafkaPtrOutput {
	return o
}

func (o KogitoInfraStatusKafkaPtrOutput) ToKogitoInfraStatusKafkaPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaPtrOutput {
	return o
}

func (o KogitoInfraStatusKafkaPtrOutput) Elem() KogitoInfraStatusKafkaOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKafka) KogitoInfraStatusKafka { return *v }).(KogitoInfraStatusKafkaOutput)
}

func (o KogitoInfraStatusKafkaPtrOutput) Condition() KogitoInfraStatusKafkaConditionArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKafka) []KogitoInfraStatusKafkaCondition {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(KogitoInfraStatusKafkaConditionArrayOutput)
}

func (o KogitoInfraStatusKafkaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKafka) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKafkaPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKafka) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKafkaCondition struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             string  `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type string `pulumi:"type"`
}

// KogitoInfraStatusKafkaConditionInput is an input type that accepts KogitoInfraStatusKafkaConditionArgs and KogitoInfraStatusKafkaConditionOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKafkaConditionInput` via:
//
//          KogitoInfraStatusKafkaConditionArgs{...}
type KogitoInfraStatusKafkaConditionInput interface {
	pulumi.Input

	ToKogitoInfraStatusKafkaConditionOutput() KogitoInfraStatusKafkaConditionOutput
	ToKogitoInfraStatusKafkaConditionOutputWithContext(context.Context) KogitoInfraStatusKafkaConditionOutput
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKafkaConditionArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoInfraStatusKafkaConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKafkaCondition)(nil)).Elem()
}

func (i KogitoInfraStatusKafkaConditionArgs) ToKogitoInfraStatusKafkaConditionOutput() KogitoInfraStatusKafkaConditionOutput {
	return i.ToKogitoInfraStatusKafkaConditionOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKafkaConditionArgs) ToKogitoInfraStatusKafkaConditionOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKafkaConditionOutput)
}

// KogitoInfraStatusKafkaConditionArrayInput is an input type that accepts KogitoInfraStatusKafkaConditionArray and KogitoInfraStatusKafkaConditionArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKafkaConditionArrayInput` via:
//
//          KogitoInfraStatusKafkaConditionArray{ KogitoInfraStatusKafkaConditionArgs{...} }
type KogitoInfraStatusKafkaConditionArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusKafkaConditionArrayOutput() KogitoInfraStatusKafkaConditionArrayOutput
	ToKogitoInfraStatusKafkaConditionArrayOutputWithContext(context.Context) KogitoInfraStatusKafkaConditionArrayOutput
}

type KogitoInfraStatusKafkaConditionArray []KogitoInfraStatusKafkaConditionInput

func (KogitoInfraStatusKafkaConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusKafkaCondition)(nil)).Elem()
}

func (i KogitoInfraStatusKafkaConditionArray) ToKogitoInfraStatusKafkaConditionArrayOutput() KogitoInfraStatusKafkaConditionArrayOutput {
	return i.ToKogitoInfraStatusKafkaConditionArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKafkaConditionArray) ToKogitoInfraStatusKafkaConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKafkaConditionArrayOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKafkaConditionOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKafkaConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKafkaCondition)(nil)).Elem()
}

func (o KogitoInfraStatusKafkaConditionOutput) ToKogitoInfraStatusKafkaConditionOutput() KogitoInfraStatusKafkaConditionOutput {
	return o
}

func (o KogitoInfraStatusKafkaConditionOutput) ToKogitoInfraStatusKafkaConditionOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaConditionOutput {
	return o
}

func (o KogitoInfraStatusKafkaConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafkaCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKafkaConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafkaCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKafkaConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafkaCondition) string { return v.Status }).(pulumi.StringOutput)
}

// InstallConditionType defines the possibles conditions that a install might have.
func (o KogitoInfraStatusKafkaConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusKafkaCondition) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoInfraStatusKafkaConditionArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKafkaConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusKafkaCondition)(nil)).Elem()
}

func (o KogitoInfraStatusKafkaConditionArrayOutput) ToKogitoInfraStatusKafkaConditionArrayOutput() KogitoInfraStatusKafkaConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusKafkaConditionArrayOutput) ToKogitoInfraStatusKafkaConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusKafkaConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusKafkaConditionArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusKafkaConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusKafkaCondition {
		return vs[0].([]KogitoInfraStatusKafkaCondition)[vs[1].(int)]
	}).(KogitoInfraStatusKafkaConditionOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKeycloak struct {
	Condition []KogitoInfraStatusKeycloakCondition `pulumi:"condition"`
	Name      *string                              `pulumi:"name"`
	Service   *string                              `pulumi:"service"`
}

// KogitoInfraStatusKeycloakInput is an input type that accepts KogitoInfraStatusKeycloakArgs and KogitoInfraStatusKeycloakOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKeycloakInput` via:
//
//          KogitoInfraStatusKeycloakArgs{...}
type KogitoInfraStatusKeycloakInput interface {
	pulumi.Input

	ToKogitoInfraStatusKeycloakOutput() KogitoInfraStatusKeycloakOutput
	ToKogitoInfraStatusKeycloakOutputWithContext(context.Context) KogitoInfraStatusKeycloakOutput
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKeycloakArgs struct {
	Condition KogitoInfraStatusKeycloakConditionArrayInput `pulumi:"condition"`
	Name      pulumi.StringPtrInput                        `pulumi:"name"`
	Service   pulumi.StringPtrInput                        `pulumi:"service"`
}

func (KogitoInfraStatusKeycloakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKeycloak)(nil)).Elem()
}

func (i KogitoInfraStatusKeycloakArgs) ToKogitoInfraStatusKeycloakOutput() KogitoInfraStatusKeycloakOutput {
	return i.ToKogitoInfraStatusKeycloakOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKeycloakArgs) ToKogitoInfraStatusKeycloakOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKeycloakOutput)
}

func (i KogitoInfraStatusKeycloakArgs) ToKogitoInfraStatusKeycloakPtrOutput() KogitoInfraStatusKeycloakPtrOutput {
	return i.ToKogitoInfraStatusKeycloakPtrOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKeycloakArgs) ToKogitoInfraStatusKeycloakPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKeycloakOutput).ToKogitoInfraStatusKeycloakPtrOutputWithContext(ctx)
}

// KogitoInfraStatusKeycloakPtrInput is an input type that accepts KogitoInfraStatusKeycloakArgs, KogitoInfraStatusKeycloakPtr and KogitoInfraStatusKeycloakPtrOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKeycloakPtrInput` via:
//
//          KogitoInfraStatusKeycloakArgs{...}
//
//  or:
//
//          nil
type KogitoInfraStatusKeycloakPtrInput interface {
	pulumi.Input

	ToKogitoInfraStatusKeycloakPtrOutput() KogitoInfraStatusKeycloakPtrOutput
	ToKogitoInfraStatusKeycloakPtrOutputWithContext(context.Context) KogitoInfraStatusKeycloakPtrOutput
}

type kogitoInfraStatusKeycloakPtrType KogitoInfraStatusKeycloakArgs

func KogitoInfraStatusKeycloakPtr(v *KogitoInfraStatusKeycloakArgs) KogitoInfraStatusKeycloakPtrInput {
	return (*kogitoInfraStatusKeycloakPtrType)(v)
}

func (*kogitoInfraStatusKeycloakPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusKeycloak)(nil)).Elem()
}

func (i *kogitoInfraStatusKeycloakPtrType) ToKogitoInfraStatusKeycloakPtrOutput() KogitoInfraStatusKeycloakPtrOutput {
	return i.ToKogitoInfraStatusKeycloakPtrOutputWithContext(context.Background())
}

func (i *kogitoInfraStatusKeycloakPtrType) ToKogitoInfraStatusKeycloakPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKeycloakPtrOutput)
}

// InfraComponentInstallStatusType is the base structure to define the status for an actor in the infrastructure.
type KogitoInfraStatusKeycloakOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKeycloakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKeycloak)(nil)).Elem()
}

func (o KogitoInfraStatusKeycloakOutput) ToKogitoInfraStatusKeycloakOutput() KogitoInfraStatusKeycloakOutput {
	return o
}

func (o KogitoInfraStatusKeycloakOutput) ToKogitoInfraStatusKeycloakOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakOutput {
	return o
}

func (o KogitoInfraStatusKeycloakOutput) ToKogitoInfraStatusKeycloakPtrOutput() KogitoInfraStatusKeycloakPtrOutput {
	return o.ToKogitoInfraStatusKeycloakPtrOutputWithContext(context.Background())
}

func (o KogitoInfraStatusKeycloakOutput) ToKogitoInfraStatusKeycloakPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloak) *KogitoInfraStatusKeycloak {
		return &v
	}).(KogitoInfraStatusKeycloakPtrOutput)
}
func (o KogitoInfraStatusKeycloakOutput) Condition() KogitoInfraStatusKeycloakConditionArrayOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloak) []KogitoInfraStatusKeycloakCondition { return v.Condition }).(KogitoInfraStatusKeycloakConditionArrayOutput)
}

func (o KogitoInfraStatusKeycloakOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloak) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKeycloakOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloak) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type KogitoInfraStatusKeycloakPtrOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKeycloakPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoInfraStatusKeycloak)(nil)).Elem()
}

func (o KogitoInfraStatusKeycloakPtrOutput) ToKogitoInfraStatusKeycloakPtrOutput() KogitoInfraStatusKeycloakPtrOutput {
	return o
}

func (o KogitoInfraStatusKeycloakPtrOutput) ToKogitoInfraStatusKeycloakPtrOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakPtrOutput {
	return o
}

func (o KogitoInfraStatusKeycloakPtrOutput) Elem() KogitoInfraStatusKeycloakOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKeycloak) KogitoInfraStatusKeycloak { return *v }).(KogitoInfraStatusKeycloakOutput)
}

func (o KogitoInfraStatusKeycloakPtrOutput) Condition() KogitoInfraStatusKeycloakConditionArrayOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKeycloak) []KogitoInfraStatusKeycloakCondition {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(KogitoInfraStatusKeycloakConditionArrayOutput)
}

func (o KogitoInfraStatusKeycloakPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKeycloak) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKeycloakPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoInfraStatusKeycloak) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKeycloakCondition struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             string  `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type string `pulumi:"type"`
}

// KogitoInfraStatusKeycloakConditionInput is an input type that accepts KogitoInfraStatusKeycloakConditionArgs and KogitoInfraStatusKeycloakConditionOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKeycloakConditionInput` via:
//
//          KogitoInfraStatusKeycloakConditionArgs{...}
type KogitoInfraStatusKeycloakConditionInput interface {
	pulumi.Input

	ToKogitoInfraStatusKeycloakConditionOutput() KogitoInfraStatusKeycloakConditionOutput
	ToKogitoInfraStatusKeycloakConditionOutputWithContext(context.Context) KogitoInfraStatusKeycloakConditionOutput
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKeycloakConditionArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// InstallConditionType defines the possibles conditions that a install might have.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoInfraStatusKeycloakConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKeycloakCondition)(nil)).Elem()
}

func (i KogitoInfraStatusKeycloakConditionArgs) ToKogitoInfraStatusKeycloakConditionOutput() KogitoInfraStatusKeycloakConditionOutput {
	return i.ToKogitoInfraStatusKeycloakConditionOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKeycloakConditionArgs) ToKogitoInfraStatusKeycloakConditionOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKeycloakConditionOutput)
}

// KogitoInfraStatusKeycloakConditionArrayInput is an input type that accepts KogitoInfraStatusKeycloakConditionArray and KogitoInfraStatusKeycloakConditionArrayOutput values.
// You can construct a concrete instance of `KogitoInfraStatusKeycloakConditionArrayInput` via:
//
//          KogitoInfraStatusKeycloakConditionArray{ KogitoInfraStatusKeycloakConditionArgs{...} }
type KogitoInfraStatusKeycloakConditionArrayInput interface {
	pulumi.Input

	ToKogitoInfraStatusKeycloakConditionArrayOutput() KogitoInfraStatusKeycloakConditionArrayOutput
	ToKogitoInfraStatusKeycloakConditionArrayOutputWithContext(context.Context) KogitoInfraStatusKeycloakConditionArrayOutput
}

type KogitoInfraStatusKeycloakConditionArray []KogitoInfraStatusKeycloakConditionInput

func (KogitoInfraStatusKeycloakConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusKeycloakCondition)(nil)).Elem()
}

func (i KogitoInfraStatusKeycloakConditionArray) ToKogitoInfraStatusKeycloakConditionArrayOutput() KogitoInfraStatusKeycloakConditionArrayOutput {
	return i.ToKogitoInfraStatusKeycloakConditionArrayOutputWithContext(context.Background())
}

func (i KogitoInfraStatusKeycloakConditionArray) ToKogitoInfraStatusKeycloakConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoInfraStatusKeycloakConditionArrayOutput)
}

// InstallCondition defines the installation condition for the infrastructure actor.
type KogitoInfraStatusKeycloakConditionOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKeycloakConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoInfraStatusKeycloakCondition)(nil)).Elem()
}

func (o KogitoInfraStatusKeycloakConditionOutput) ToKogitoInfraStatusKeycloakConditionOutput() KogitoInfraStatusKeycloakConditionOutput {
	return o
}

func (o KogitoInfraStatusKeycloakConditionOutput) ToKogitoInfraStatusKeycloakConditionOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakConditionOutput {
	return o
}

func (o KogitoInfraStatusKeycloakConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloakCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKeycloakConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloakCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o KogitoInfraStatusKeycloakConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloakCondition) string { return v.Status }).(pulumi.StringOutput)
}

// InstallConditionType defines the possibles conditions that a install might have.
func (o KogitoInfraStatusKeycloakConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoInfraStatusKeycloakCondition) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoInfraStatusKeycloakConditionArrayOutput struct{ *pulumi.OutputState }

func (KogitoInfraStatusKeycloakConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoInfraStatusKeycloakCondition)(nil)).Elem()
}

func (o KogitoInfraStatusKeycloakConditionArrayOutput) ToKogitoInfraStatusKeycloakConditionArrayOutput() KogitoInfraStatusKeycloakConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusKeycloakConditionArrayOutput) ToKogitoInfraStatusKeycloakConditionArrayOutputWithContext(ctx context.Context) KogitoInfraStatusKeycloakConditionArrayOutput {
	return o
}

func (o KogitoInfraStatusKeycloakConditionArrayOutput) Index(i pulumi.IntInput) KogitoInfraStatusKeycloakConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoInfraStatusKeycloakCondition {
		return vs[0].([]KogitoInfraStatusKeycloakCondition)[vs[1].(int)]
	}).(KogitoInfraStatusKeycloakConditionOutput)
}

// KogitoJobsService deploys the Kogito Jobs Service in the given namespace.
type KogitoJobsServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
	Spec *KogitoJobsServiceSpec `pulumi:"spec"`
	// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
	Status *KogitoJobsServiceStatus `pulumi:"status"`
}

// KogitoJobsServiceTypeInput is an input type that accepts KogitoJobsServiceTypeArgs and KogitoJobsServiceTypeOutput values.
// You can construct a concrete instance of `KogitoJobsServiceTypeInput` via:
//
//          KogitoJobsServiceTypeArgs{...}
type KogitoJobsServiceTypeInput interface {
	pulumi.Input

	ToKogitoJobsServiceTypeOutput() KogitoJobsServiceTypeOutput
	ToKogitoJobsServiceTypeOutputWithContext(context.Context) KogitoJobsServiceTypeOutput
}

// KogitoJobsService deploys the Kogito Jobs Service in the given namespace.
type KogitoJobsServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
	Spec KogitoJobsServiceSpecPtrInput `pulumi:"spec"`
	// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
	Status KogitoJobsServiceStatusPtrInput `pulumi:"status"`
}

func (KogitoJobsServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceType)(nil)).Elem()
}

func (i KogitoJobsServiceTypeArgs) ToKogitoJobsServiceTypeOutput() KogitoJobsServiceTypeOutput {
	return i.ToKogitoJobsServiceTypeOutputWithContext(context.Background())
}

func (i KogitoJobsServiceTypeArgs) ToKogitoJobsServiceTypeOutputWithContext(ctx context.Context) KogitoJobsServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceTypeOutput)
}

// KogitoJobsService deploys the Kogito Jobs Service in the given namespace.
type KogitoJobsServiceTypeOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceType)(nil)).Elem()
}

func (o KogitoJobsServiceTypeOutput) ToKogitoJobsServiceTypeOutput() KogitoJobsServiceTypeOutput {
	return o
}

func (o KogitoJobsServiceTypeOutput) ToKogitoJobsServiceTypeOutputWithContext(ctx context.Context) KogitoJobsServiceTypeOutput {
	return o
}

func (o KogitoJobsServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
func (o KogitoJobsServiceTypeOutput) Spec() KogitoJobsServiceSpecPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceType) *KogitoJobsServiceSpec { return v.Spec }).(KogitoJobsServiceSpecPtrOutput)
}

// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
func (o KogitoJobsServiceTypeOutput) Status() KogitoJobsServiceStatusPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceType) *KogitoJobsServiceStatus { return v.Status }).(KogitoJobsServiceStatusPtrOutput)
}

type KogitoJobsServiceMetadata struct {
}

// KogitoJobsServiceMetadataInput is an input type that accepts KogitoJobsServiceMetadataArgs and KogitoJobsServiceMetadataOutput values.
// You can construct a concrete instance of `KogitoJobsServiceMetadataInput` via:
//
//          KogitoJobsServiceMetadataArgs{...}
type KogitoJobsServiceMetadataInput interface {
	pulumi.Input

	ToKogitoJobsServiceMetadataOutput() KogitoJobsServiceMetadataOutput
	ToKogitoJobsServiceMetadataOutputWithContext(context.Context) KogitoJobsServiceMetadataOutput
}

type KogitoJobsServiceMetadataArgs struct {
}

func (KogitoJobsServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceMetadata)(nil)).Elem()
}

func (i KogitoJobsServiceMetadataArgs) ToKogitoJobsServiceMetadataOutput() KogitoJobsServiceMetadataOutput {
	return i.ToKogitoJobsServiceMetadataOutputWithContext(context.Background())
}

func (i KogitoJobsServiceMetadataArgs) ToKogitoJobsServiceMetadataOutputWithContext(ctx context.Context) KogitoJobsServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceMetadataOutput)
}

type KogitoJobsServiceMetadataOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceMetadata)(nil)).Elem()
}

func (o KogitoJobsServiceMetadataOutput) ToKogitoJobsServiceMetadataOutput() KogitoJobsServiceMetadataOutput {
	return o
}

func (o KogitoJobsServiceMetadataOutput) ToKogitoJobsServiceMetadataOutputWithContext(ctx context.Context) KogitoJobsServiceMetadataOutput {
	return o
}

// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
type KogitoJobsServiceSpec struct {
	// Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
	BackOffRetryMillis *int `pulumi:"backOffRetryMillis"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs []KogitoJobsServiceSpecEnvs `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort *int `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *KogitoJobsServiceSpecImage `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan *KogitoJobsServiceSpecInfinispan `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka *KogitoJobsServiceSpecKafka `pulumi:"kafka"`
	// Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
	MaxIntervalLimitToRetryMillis *int `pulumi:"maxIntervalLimitToRetryMillis"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoJobsServiceSpecResources `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoJobsServiceSpecInput is an input type that accepts KogitoJobsServiceSpecArgs and KogitoJobsServiceSpecOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecInput` via:
//
//          KogitoJobsServiceSpecArgs{...}
type KogitoJobsServiceSpecInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecOutput() KogitoJobsServiceSpecOutput
	ToKogitoJobsServiceSpecOutputWithContext(context.Context) KogitoJobsServiceSpecOutput
}

// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
type KogitoJobsServiceSpecArgs struct {
	// Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
	BackOffRetryMillis pulumi.IntPtrInput `pulumi:"backOffRetryMillis"`
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs KogitoJobsServiceSpecEnvsArrayInput `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image KogitoJobsServiceSpecImagePtrInput `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan KogitoJobsServiceSpecInfinispanPtrInput `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka KogitoJobsServiceSpecKafkaPtrInput `pulumi:"kafka"`
	// Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
	MaxIntervalLimitToRetryMillis pulumi.IntPtrInput `pulumi:"maxIntervalLimitToRetryMillis"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoJobsServiceSpecResourcesPtrInput `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoJobsServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpec)(nil)).Elem()
}

func (i KogitoJobsServiceSpecArgs) ToKogitoJobsServiceSpecOutput() KogitoJobsServiceSpecOutput {
	return i.ToKogitoJobsServiceSpecOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecArgs) ToKogitoJobsServiceSpecOutputWithContext(ctx context.Context) KogitoJobsServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecOutput)
}

func (i KogitoJobsServiceSpecArgs) ToKogitoJobsServiceSpecPtrOutput() KogitoJobsServiceSpecPtrOutput {
	return i.ToKogitoJobsServiceSpecPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecArgs) ToKogitoJobsServiceSpecPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecOutput).ToKogitoJobsServiceSpecPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecPtrInput is an input type that accepts KogitoJobsServiceSpecArgs, KogitoJobsServiceSpecPtr and KogitoJobsServiceSpecPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecPtrInput` via:
//
//          KogitoJobsServiceSpecArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecPtrOutput() KogitoJobsServiceSpecPtrOutput
	ToKogitoJobsServiceSpecPtrOutputWithContext(context.Context) KogitoJobsServiceSpecPtrOutput
}

type kogitoJobsServiceSpecPtrType KogitoJobsServiceSpecArgs

func KogitoJobsServiceSpecPtr(v *KogitoJobsServiceSpecArgs) KogitoJobsServiceSpecPtrInput {
	return (*kogitoJobsServiceSpecPtrType)(v)
}

func (*kogitoJobsServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpec)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecPtrType) ToKogitoJobsServiceSpecPtrOutput() KogitoJobsServiceSpecPtrOutput {
	return i.ToKogitoJobsServiceSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecPtrType) ToKogitoJobsServiceSpecPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecPtrOutput)
}

// KogitoJobsServiceSpec defines the desired state of KogitoJobsService.
type KogitoJobsServiceSpecOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpec)(nil)).Elem()
}

func (o KogitoJobsServiceSpecOutput) ToKogitoJobsServiceSpecOutput() KogitoJobsServiceSpecOutput {
	return o
}

func (o KogitoJobsServiceSpecOutput) ToKogitoJobsServiceSpecOutputWithContext(ctx context.Context) KogitoJobsServiceSpecOutput {
	return o
}

func (o KogitoJobsServiceSpecOutput) ToKogitoJobsServiceSpecPtrOutput() KogitoJobsServiceSpecPtrOutput {
	return o.ToKogitoJobsServiceSpecPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecOutput) ToKogitoJobsServiceSpecPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *KogitoJobsServiceSpec {
		return &v
	}).(KogitoJobsServiceSpecPtrOutput)
}

// Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
func (o KogitoJobsServiceSpecOutput) BackOffRetryMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *int { return v.BackOffRetryMillis }).(pulumi.IntPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoJobsServiceSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoJobsServiceSpecOutput) Envs() KogitoJobsServiceSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) []KogitoJobsServiceSpecEnvs { return v.Envs }).(KogitoJobsServiceSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoJobsServiceSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoJobsServiceSpecOutput) Image() KogitoJobsServiceSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *KogitoJobsServiceSpecImage { return v.Image }).(KogitoJobsServiceSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoJobsServiceSpecOutput) Infinispan() KogitoJobsServiceSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *KogitoJobsServiceSpecInfinispan { return v.Infinispan }).(KogitoJobsServiceSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoJobsServiceSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoJobsServiceSpecOutput) Kafka() KogitoJobsServiceSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *KogitoJobsServiceSpecKafka { return v.Kafka }).(KogitoJobsServiceSpecKafkaPtrOutput)
}

// Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
func (o KogitoJobsServiceSpecOutput) MaxIntervalLimitToRetryMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *int { return v.MaxIntervalLimitToRetryMillis }).(pulumi.IntPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoJobsServiceSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoJobsServiceSpecOutput) Resources() KogitoJobsServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) *KogitoJobsServiceSpecResources { return v.Resources }).(KogitoJobsServiceSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoJobsServiceSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoJobsServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpec)(nil)).Elem()
}

func (o KogitoJobsServiceSpecPtrOutput) ToKogitoJobsServiceSpecPtrOutput() KogitoJobsServiceSpecPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecPtrOutput) ToKogitoJobsServiceSpecPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecPtrOutput) Elem() KogitoJobsServiceSpecOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) KogitoJobsServiceSpec { return *v }).(KogitoJobsServiceSpecOutput)
}

// Retry backOff time in milliseconds between the job execution attempts, in case of execution failure. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
func (o KogitoJobsServiceSpecPtrOutput) BackOffRetryMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.BackOffRetryMillis
	}).(pulumi.IntPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoJobsServiceSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoJobsServiceSpecPtrOutput) Envs() KogitoJobsServiceSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) []KogitoJobsServiceSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoJobsServiceSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoJobsServiceSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoJobsServiceSpecPtrOutput) Image() KogitoJobsServiceSpecImagePtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *KogitoJobsServiceSpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(KogitoJobsServiceSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoJobsServiceSpecPtrOutput) Infinispan() KogitoJobsServiceSpecInfinispanPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *KogitoJobsServiceSpecInfinispan {
		if v == nil {
			return nil
		}
		return v.Infinispan
	}).(KogitoJobsServiceSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoJobsServiceSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoJobsServiceSpecPtrOutput) Kafka() KogitoJobsServiceSpecKafkaPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *KogitoJobsServiceSpecKafka {
		if v == nil {
			return nil
		}
		return v.Kafka
	}).(KogitoJobsServiceSpecKafkaPtrOutput)
}

// Maximum interval in milliseconds when retrying to execute jobs, in case of failures. Default to service default, see: https://github.com/kiegroup/kogito-runtimes/wiki/Jobs-Service#configuration-properties
func (o KogitoJobsServiceSpecPtrOutput) MaxIntervalLimitToRetryMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.MaxIntervalLimitToRetryMillis
	}).(pulumi.IntPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoJobsServiceSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoJobsServiceSpecPtrOutput) Resources() KogitoJobsServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) *KogitoJobsServiceSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoJobsServiceSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoJobsServiceSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoJobsServiceSpecDeploymentLabels struct {
}

// KogitoJobsServiceSpecDeploymentLabelsInput is an input type that accepts KogitoJobsServiceSpecDeploymentLabelsArgs and KogitoJobsServiceSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecDeploymentLabelsInput` via:
//
//          KogitoJobsServiceSpecDeploymentLabelsArgs{...}
type KogitoJobsServiceSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecDeploymentLabelsOutput() KogitoJobsServiceSpecDeploymentLabelsOutput
	ToKogitoJobsServiceSpecDeploymentLabelsOutputWithContext(context.Context) KogitoJobsServiceSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoJobsServiceSpecDeploymentLabelsArgs struct {
}

func (KogitoJobsServiceSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoJobsServiceSpecDeploymentLabelsArgs) ToKogitoJobsServiceSpecDeploymentLabelsOutput() KogitoJobsServiceSpecDeploymentLabelsOutput {
	return i.ToKogitoJobsServiceSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecDeploymentLabelsArgs) ToKogitoJobsServiceSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoJobsServiceSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoJobsServiceSpecDeploymentLabelsOutput) ToKogitoJobsServiceSpecDeploymentLabelsOutput() KogitoJobsServiceSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoJobsServiceSpecDeploymentLabelsOutput) ToKogitoJobsServiceSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoJobsServiceSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoJobsServiceSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoJobsServiceSpecEnvsInput is an input type that accepts KogitoJobsServiceSpecEnvsArgs and KogitoJobsServiceSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsInput` via:
//
//          KogitoJobsServiceSpecEnvsArgs{...}
type KogitoJobsServiceSpecEnvsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsOutput() KogitoJobsServiceSpecEnvsOutput
	ToKogitoJobsServiceSpecEnvsOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoJobsServiceSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoJobsServiceSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoJobsServiceSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvs)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsArgs) ToKogitoJobsServiceSpecEnvsOutput() KogitoJobsServiceSpecEnvsOutput {
	return i.ToKogitoJobsServiceSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsArgs) ToKogitoJobsServiceSpecEnvsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsOutput)
}

// KogitoJobsServiceSpecEnvsArrayInput is an input type that accepts KogitoJobsServiceSpecEnvsArray and KogitoJobsServiceSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsArrayInput` via:
//
//          KogitoJobsServiceSpecEnvsArray{ KogitoJobsServiceSpecEnvsArgs{...} }
type KogitoJobsServiceSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsArrayOutput() KogitoJobsServiceSpecEnvsArrayOutput
	ToKogitoJobsServiceSpecEnvsArrayOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsArrayOutput
}

type KogitoJobsServiceSpecEnvsArray []KogitoJobsServiceSpecEnvsInput

func (KogitoJobsServiceSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceSpecEnvs)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsArray) ToKogitoJobsServiceSpecEnvsArrayOutput() KogitoJobsServiceSpecEnvsArrayOutput {
	return i.ToKogitoJobsServiceSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsArray) ToKogitoJobsServiceSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoJobsServiceSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvs)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsOutput) ToKogitoJobsServiceSpecEnvsOutput() KogitoJobsServiceSpecEnvsOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsOutput) ToKogitoJobsServiceSpecEnvsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoJobsServiceSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoJobsServiceSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoJobsServiceSpecEnvsOutput) ValueFrom() KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvs) *KogitoJobsServiceSpecEnvsValueFrom { return v.ValueFrom }).(KogitoJobsServiceSpecEnvsValueFromPtrOutput)
}

type KogitoJobsServiceSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceSpecEnvs)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsArrayOutput) ToKogitoJobsServiceSpecEnvsArrayOutput() KogitoJobsServiceSpecEnvsArrayOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsArrayOutput) ToKogitoJobsServiceSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsArrayOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoJobsServiceSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoJobsServiceSpecEnvs {
		return vs[0].([]KogitoJobsServiceSpecEnvs)[vs[1].(int)]
	}).(KogitoJobsServiceSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoJobsServiceSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoJobsServiceSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoJobsServiceSpecEnvsValueFromInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromArgs and KogitoJobsServiceSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromArgs{...}
type KogitoJobsServiceSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromOutput() KogitoJobsServiceSpecEnvsValueFromOutput
	ToKogitoJobsServiceSpecEnvsValueFromOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoJobsServiceSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoJobsServiceSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoJobsServiceSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromArgs) ToKogitoJobsServiceSpecEnvsValueFromOutput() KogitoJobsServiceSpecEnvsValueFromOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromArgs) ToKogitoJobsServiceSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromArgs) ToKogitoJobsServiceSpecEnvsValueFromPtrOutput() KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromArgs) ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromOutput).ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromArgs, KogitoJobsServiceSpecEnvsValueFromPtr and KogitoJobsServiceSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromPtrOutput() KogitoJobsServiceSpecEnvsValueFromPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromPtrType KogitoJobsServiceSpecEnvsValueFromArgs

func KogitoJobsServiceSpecEnvsValueFromPtr(v *KogitoJobsServiceSpecEnvsValueFromArgs) KogitoJobsServiceSpecEnvsValueFromPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromPtrType) ToKogitoJobsServiceSpecEnvsValueFromPtrOutput() KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromPtrType) ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoJobsServiceSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromOutput) ToKogitoJobsServiceSpecEnvsValueFromOutput() KogitoJobsServiceSpecEnvsValueFromOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromOutput) ToKogitoJobsServiceSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromOutput) ToKogitoJobsServiceSpecEnvsValueFromPtrOutput() KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromOutput) ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFrom {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoJobsServiceSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoJobsServiceSpecEnvsValueFromOutput) FieldRef() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromFieldRef {
		return v.FieldRef
	}).(KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoJobsServiceSpecEnvsValueFromOutput) ResourceFieldRef() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoJobsServiceSpecEnvsValueFromOutput) SecretKeyRef() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromPtrOutput() KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFrom) KogitoJobsServiceSpecEnvsValueFrom { return *v }).(KogitoJobsServiceSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) FieldRef() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoJobsServiceSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFrom) *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs and KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs, KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtr and KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrType KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefArgs) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoJobsServiceSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoJobsServiceSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromFieldRefArgs and KogitoJobsServiceSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromFieldRefArgs{...}
type KogitoJobsServiceSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefOutput
	ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoJobsServiceSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromFieldRefOutput).ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromFieldRefArgs, KogitoJobsServiceSpecEnvsValueFromFieldRefPtr and KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromFieldRefPtrType KogitoJobsServiceSpecEnvsValueFromFieldRefArgs

func KogitoJobsServiceSpecEnvsValueFromFieldRefPtr(v *KogitoJobsServiceSpecEnvsValueFromFieldRefArgs) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromFieldRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromFieldRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoJobsServiceSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromFieldRef) *KogitoJobsServiceSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoJobsServiceSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromFieldRef) KogitoJobsServiceSpecEnvsValueFromFieldRef {
		return *v
	}).(KogitoJobsServiceSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoJobsServiceSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs and KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput).ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs, KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtr and KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrType KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs

func KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtr(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefArgs) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) KogitoJobsServiceSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor) *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor) KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoJobsServiceSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoJobsServiceSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs and KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoJobsServiceSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput).ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs, KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtr and KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrType KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs

func KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtr(v *KogitoJobsServiceSpecEnvsValueFromSecretKeyRefArgs) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) KogitoJobsServiceSpecEnvsValueFromSecretKeyRef {
		return *v
	}).(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoJobsServiceSpecImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoJobsServiceSpecImageInput is an input type that accepts KogitoJobsServiceSpecImageArgs and KogitoJobsServiceSpecImageOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecImageInput` via:
//
//          KogitoJobsServiceSpecImageArgs{...}
type KogitoJobsServiceSpecImageInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecImageOutput() KogitoJobsServiceSpecImageOutput
	ToKogitoJobsServiceSpecImageOutputWithContext(context.Context) KogitoJobsServiceSpecImageOutput
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoJobsServiceSpecImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoJobsServiceSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecImage)(nil)).Elem()
}

func (i KogitoJobsServiceSpecImageArgs) ToKogitoJobsServiceSpecImageOutput() KogitoJobsServiceSpecImageOutput {
	return i.ToKogitoJobsServiceSpecImageOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecImageArgs) ToKogitoJobsServiceSpecImageOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecImageOutput)
}

func (i KogitoJobsServiceSpecImageArgs) ToKogitoJobsServiceSpecImagePtrOutput() KogitoJobsServiceSpecImagePtrOutput {
	return i.ToKogitoJobsServiceSpecImagePtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecImageArgs) ToKogitoJobsServiceSpecImagePtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecImageOutput).ToKogitoJobsServiceSpecImagePtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecImagePtrInput is an input type that accepts KogitoJobsServiceSpecImageArgs, KogitoJobsServiceSpecImagePtr and KogitoJobsServiceSpecImagePtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecImagePtrInput` via:
//
//          KogitoJobsServiceSpecImageArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecImagePtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecImagePtrOutput() KogitoJobsServiceSpecImagePtrOutput
	ToKogitoJobsServiceSpecImagePtrOutputWithContext(context.Context) KogitoJobsServiceSpecImagePtrOutput
}

type kogitoJobsServiceSpecImagePtrType KogitoJobsServiceSpecImageArgs

func KogitoJobsServiceSpecImagePtr(v *KogitoJobsServiceSpecImageArgs) KogitoJobsServiceSpecImagePtrInput {
	return (*kogitoJobsServiceSpecImagePtrType)(v)
}

func (*kogitoJobsServiceSpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecImage)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecImagePtrType) ToKogitoJobsServiceSpecImagePtrOutput() KogitoJobsServiceSpecImagePtrOutput {
	return i.ToKogitoJobsServiceSpecImagePtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecImagePtrType) ToKogitoJobsServiceSpecImagePtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecImagePtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoJobsServiceSpecImageOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecImage)(nil)).Elem()
}

func (o KogitoJobsServiceSpecImageOutput) ToKogitoJobsServiceSpecImageOutput() KogitoJobsServiceSpecImageOutput {
	return o
}

func (o KogitoJobsServiceSpecImageOutput) ToKogitoJobsServiceSpecImageOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImageOutput {
	return o
}

func (o KogitoJobsServiceSpecImageOutput) ToKogitoJobsServiceSpecImagePtrOutput() KogitoJobsServiceSpecImagePtrOutput {
	return o.ToKogitoJobsServiceSpecImagePtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecImageOutput) ToKogitoJobsServiceSpecImagePtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecImage) *KogitoJobsServiceSpecImage {
		return &v
	}).(KogitoJobsServiceSpecImagePtrOutput)
}
func (o KogitoJobsServiceSpecImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoJobsServiceSpecImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecImage)(nil)).Elem()
}

func (o KogitoJobsServiceSpecImagePtrOutput) ToKogitoJobsServiceSpecImagePtrOutput() KogitoJobsServiceSpecImagePtrOutput {
	return o
}

func (o KogitoJobsServiceSpecImagePtrOutput) ToKogitoJobsServiceSpecImagePtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecImagePtrOutput {
	return o
}

func (o KogitoJobsServiceSpecImagePtrOutput) Elem() KogitoJobsServiceSpecImageOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecImage) KogitoJobsServiceSpecImage { return *v }).(KogitoJobsServiceSpecImageOutput)
}

func (o KogitoJobsServiceSpecImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceSpecImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoJobsServiceSpecInfinispan struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm *string `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials *KogitoJobsServiceSpecInfinispanCredentials `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism *string `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri *string `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth *bool `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoJobsServiceSpecInfinispanInput is an input type that accepts KogitoJobsServiceSpecInfinispanArgs and KogitoJobsServiceSpecInfinispanOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecInfinispanInput` via:
//
//          KogitoJobsServiceSpecInfinispanArgs{...}
type KogitoJobsServiceSpecInfinispanInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecInfinispanOutput() KogitoJobsServiceSpecInfinispanOutput
	ToKogitoJobsServiceSpecInfinispanOutputWithContext(context.Context) KogitoJobsServiceSpecInfinispanOutput
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoJobsServiceSpecInfinispanArgs struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm pulumi.StringPtrInput `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials KogitoJobsServiceSpecInfinispanCredentialsPtrInput `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism pulumi.StringPtrInput `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth pulumi.BoolPtrInput `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoJobsServiceSpecInfinispanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecInfinispan)(nil)).Elem()
}

func (i KogitoJobsServiceSpecInfinispanArgs) ToKogitoJobsServiceSpecInfinispanOutput() KogitoJobsServiceSpecInfinispanOutput {
	return i.ToKogitoJobsServiceSpecInfinispanOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecInfinispanArgs) ToKogitoJobsServiceSpecInfinispanOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanOutput)
}

func (i KogitoJobsServiceSpecInfinispanArgs) ToKogitoJobsServiceSpecInfinispanPtrOutput() KogitoJobsServiceSpecInfinispanPtrOutput {
	return i.ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecInfinispanArgs) ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanOutput).ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecInfinispanPtrInput is an input type that accepts KogitoJobsServiceSpecInfinispanArgs, KogitoJobsServiceSpecInfinispanPtr and KogitoJobsServiceSpecInfinispanPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecInfinispanPtrInput` via:
//
//          KogitoJobsServiceSpecInfinispanArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecInfinispanPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecInfinispanPtrOutput() KogitoJobsServiceSpecInfinispanPtrOutput
	ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(context.Context) KogitoJobsServiceSpecInfinispanPtrOutput
}

type kogitoJobsServiceSpecInfinispanPtrType KogitoJobsServiceSpecInfinispanArgs

func KogitoJobsServiceSpecInfinispanPtr(v *KogitoJobsServiceSpecInfinispanArgs) KogitoJobsServiceSpecInfinispanPtrInput {
	return (*kogitoJobsServiceSpecInfinispanPtrType)(v)
}

func (*kogitoJobsServiceSpecInfinispanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecInfinispan)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecInfinispanPtrType) ToKogitoJobsServiceSpecInfinispanPtrOutput() KogitoJobsServiceSpecInfinispanPtrOutput {
	return i.ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecInfinispanPtrType) ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoJobsServiceSpecInfinispanOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecInfinispanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecInfinispan)(nil)).Elem()
}

func (o KogitoJobsServiceSpecInfinispanOutput) ToKogitoJobsServiceSpecInfinispanOutput() KogitoJobsServiceSpecInfinispanOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanOutput) ToKogitoJobsServiceSpecInfinispanOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanOutput) ToKogitoJobsServiceSpecInfinispanPtrOutput() KogitoJobsServiceSpecInfinispanPtrOutput {
	return o.ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecInfinispanOutput) ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *KogitoJobsServiceSpecInfinispan {
		return &v
	}).(KogitoJobsServiceSpecInfinispanPtrOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoJobsServiceSpecInfinispanOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *string { return v.AuthRealm }).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoJobsServiceSpecInfinispanOutput) Credentials() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *KogitoJobsServiceSpecInfinispanCredentials {
		return v.Credentials
	}).(KogitoJobsServiceSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoJobsServiceSpecInfinispanOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *string { return v.SaslMechanism }).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoJobsServiceSpecInfinispanOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoJobsServiceSpecInfinispanOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *bool { return v.UseAuth }).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoJobsServiceSpecInfinispanOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispan) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoJobsServiceSpecInfinispanPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecInfinispanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecInfinispan)(nil)).Elem()
}

func (o KogitoJobsServiceSpecInfinispanPtrOutput) ToKogitoJobsServiceSpecInfinispanPtrOutput() KogitoJobsServiceSpecInfinispanPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanPtrOutput) ToKogitoJobsServiceSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanPtrOutput) Elem() KogitoJobsServiceSpecInfinispanOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) KogitoJobsServiceSpecInfinispan { return *v }).(KogitoJobsServiceSpecInfinispanOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.AuthRealm
	}).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) Credentials() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *KogitoJobsServiceSpecInfinispanCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(KogitoJobsServiceSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.SaslMechanism
	}).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseAuth
	}).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoJobsServiceSpecInfinispanPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoJobsServiceSpecInfinispanCredentials struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey *string `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName *string `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey *string `pulumi:"usernameKey"`
}

// KogitoJobsServiceSpecInfinispanCredentialsInput is an input type that accepts KogitoJobsServiceSpecInfinispanCredentialsArgs and KogitoJobsServiceSpecInfinispanCredentialsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecInfinispanCredentialsInput` via:
//
//          KogitoJobsServiceSpecInfinispanCredentialsArgs{...}
type KogitoJobsServiceSpecInfinispanCredentialsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecInfinispanCredentialsOutput() KogitoJobsServiceSpecInfinispanCredentialsOutput
	ToKogitoJobsServiceSpecInfinispanCredentialsOutputWithContext(context.Context) KogitoJobsServiceSpecInfinispanCredentialsOutput
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoJobsServiceSpecInfinispanCredentialsArgs struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey pulumi.StringPtrInput `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey pulumi.StringPtrInput `pulumi:"usernameKey"`
}

func (KogitoJobsServiceSpecInfinispanCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecInfinispanCredentials)(nil)).Elem()
}

func (i KogitoJobsServiceSpecInfinispanCredentialsArgs) ToKogitoJobsServiceSpecInfinispanCredentialsOutput() KogitoJobsServiceSpecInfinispanCredentialsOutput {
	return i.ToKogitoJobsServiceSpecInfinispanCredentialsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecInfinispanCredentialsArgs) ToKogitoJobsServiceSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanCredentialsOutput)
}

func (i KogitoJobsServiceSpecInfinispanCredentialsArgs) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutput() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecInfinispanCredentialsArgs) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanCredentialsOutput).ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecInfinispanCredentialsPtrInput is an input type that accepts KogitoJobsServiceSpecInfinispanCredentialsArgs, KogitoJobsServiceSpecInfinispanCredentialsPtr and KogitoJobsServiceSpecInfinispanCredentialsPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecInfinispanCredentialsPtrInput` via:
//
//          KogitoJobsServiceSpecInfinispanCredentialsArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecInfinispanCredentialsPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutput() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput
	ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(context.Context) KogitoJobsServiceSpecInfinispanCredentialsPtrOutput
}

type kogitoJobsServiceSpecInfinispanCredentialsPtrType KogitoJobsServiceSpecInfinispanCredentialsArgs

func KogitoJobsServiceSpecInfinispanCredentialsPtr(v *KogitoJobsServiceSpecInfinispanCredentialsArgs) KogitoJobsServiceSpecInfinispanCredentialsPtrInput {
	return (*kogitoJobsServiceSpecInfinispanCredentialsPtrType)(v)
}

func (*kogitoJobsServiceSpecInfinispanCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecInfinispanCredentials)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecInfinispanCredentialsPtrType) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutput() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecInfinispanCredentialsPtrType) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecInfinispanCredentialsPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoJobsServiceSpecInfinispanCredentialsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecInfinispanCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) ToKogitoJobsServiceSpecInfinispanCredentialsOutput() KogitoJobsServiceSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) ToKogitoJobsServiceSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutput() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o.ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispanCredentials) *KogitoJobsServiceSpecInfinispanCredentials {
		return &v
	}).(KogitoJobsServiceSpecInfinispanCredentialsPtrOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispanCredentials) *string { return v.PasswordKey }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispanCredentials) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoJobsServiceSpecInfinispanCredentialsOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecInfinispanCredentials) *string { return v.UsernameKey }).(pulumi.StringPtrOutput)
}

type KogitoJobsServiceSpecInfinispanCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutput() KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) ToKogitoJobsServiceSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) Elem() KogitoJobsServiceSpecInfinispanCredentialsOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispanCredentials) KogitoJobsServiceSpecInfinispanCredentials {
		return *v
	}).(KogitoJobsServiceSpecInfinispanCredentialsOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordKey
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoJobsServiceSpecInfinispanCredentialsPtrOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.UsernameKey
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoJobsServiceSpecKafka struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI *string `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance *string `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoJobsServiceSpecKafkaInput is an input type that accepts KogitoJobsServiceSpecKafkaArgs and KogitoJobsServiceSpecKafkaOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecKafkaInput` via:
//
//          KogitoJobsServiceSpecKafkaArgs{...}
type KogitoJobsServiceSpecKafkaInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecKafkaOutput() KogitoJobsServiceSpecKafkaOutput
	ToKogitoJobsServiceSpecKafkaOutputWithContext(context.Context) KogitoJobsServiceSpecKafkaOutput
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoJobsServiceSpecKafkaArgs struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoJobsServiceSpecKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecKafka)(nil)).Elem()
}

func (i KogitoJobsServiceSpecKafkaArgs) ToKogitoJobsServiceSpecKafkaOutput() KogitoJobsServiceSpecKafkaOutput {
	return i.ToKogitoJobsServiceSpecKafkaOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecKafkaArgs) ToKogitoJobsServiceSpecKafkaOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecKafkaOutput)
}

func (i KogitoJobsServiceSpecKafkaArgs) ToKogitoJobsServiceSpecKafkaPtrOutput() KogitoJobsServiceSpecKafkaPtrOutput {
	return i.ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecKafkaArgs) ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecKafkaOutput).ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecKafkaPtrInput is an input type that accepts KogitoJobsServiceSpecKafkaArgs, KogitoJobsServiceSpecKafkaPtr and KogitoJobsServiceSpecKafkaPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecKafkaPtrInput` via:
//
//          KogitoJobsServiceSpecKafkaArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecKafkaPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecKafkaPtrOutput() KogitoJobsServiceSpecKafkaPtrOutput
	ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(context.Context) KogitoJobsServiceSpecKafkaPtrOutput
}

type kogitoJobsServiceSpecKafkaPtrType KogitoJobsServiceSpecKafkaArgs

func KogitoJobsServiceSpecKafkaPtr(v *KogitoJobsServiceSpecKafkaArgs) KogitoJobsServiceSpecKafkaPtrInput {
	return (*kogitoJobsServiceSpecKafkaPtrType)(v)
}

func (*kogitoJobsServiceSpecKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecKafka)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecKafkaPtrType) ToKogitoJobsServiceSpecKafkaPtrOutput() KogitoJobsServiceSpecKafkaPtrOutput {
	return i.ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecKafkaPtrType) ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecKafkaPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoJobsServiceSpecKafkaOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecKafka)(nil)).Elem()
}

func (o KogitoJobsServiceSpecKafkaOutput) ToKogitoJobsServiceSpecKafkaOutput() KogitoJobsServiceSpecKafkaOutput {
	return o
}

func (o KogitoJobsServiceSpecKafkaOutput) ToKogitoJobsServiceSpecKafkaOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaOutput {
	return o
}

func (o KogitoJobsServiceSpecKafkaOutput) ToKogitoJobsServiceSpecKafkaPtrOutput() KogitoJobsServiceSpecKafkaPtrOutput {
	return o.ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecKafkaOutput) ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecKafka) *KogitoJobsServiceSpecKafka {
		return &v
	}).(KogitoJobsServiceSpecKafkaPtrOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoJobsServiceSpecKafkaOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecKafka) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoJobsServiceSpecKafkaOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecKafka) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoJobsServiceSpecKafkaOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecKafka) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoJobsServiceSpecKafkaPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecKafka)(nil)).Elem()
}

func (o KogitoJobsServiceSpecKafkaPtrOutput) ToKogitoJobsServiceSpecKafkaPtrOutput() KogitoJobsServiceSpecKafkaPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecKafkaPtrOutput) ToKogitoJobsServiceSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecKafkaPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecKafkaPtrOutput) Elem() KogitoJobsServiceSpecKafkaOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecKafka) KogitoJobsServiceSpecKafka { return *v }).(KogitoJobsServiceSpecKafkaOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoJobsServiceSpecKafkaPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoJobsServiceSpecKafkaPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoJobsServiceSpecKafkaPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecKafka) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoJobsServiceSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoJobsServiceSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoJobsServiceSpecResourcesRequests `pulumi:"requests"`
}

// KogitoJobsServiceSpecResourcesInput is an input type that accepts KogitoJobsServiceSpecResourcesArgs and KogitoJobsServiceSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesInput` via:
//
//          KogitoJobsServiceSpecResourcesArgs{...}
type KogitoJobsServiceSpecResourcesInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesOutput() KogitoJobsServiceSpecResourcesOutput
	ToKogitoJobsServiceSpecResourcesOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoJobsServiceSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoJobsServiceSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoJobsServiceSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoJobsServiceSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResources)(nil)).Elem()
}

func (i KogitoJobsServiceSpecResourcesArgs) ToKogitoJobsServiceSpecResourcesOutput() KogitoJobsServiceSpecResourcesOutput {
	return i.ToKogitoJobsServiceSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesArgs) ToKogitoJobsServiceSpecResourcesOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesOutput)
}

func (i KogitoJobsServiceSpecResourcesArgs) ToKogitoJobsServiceSpecResourcesPtrOutput() KogitoJobsServiceSpecResourcesPtrOutput {
	return i.ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesArgs) ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesOutput).ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoJobsServiceSpecResourcesPtrInput is an input type that accepts KogitoJobsServiceSpecResourcesArgs, KogitoJobsServiceSpecResourcesPtr and KogitoJobsServiceSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesPtrInput` via:
//
//          KogitoJobsServiceSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesPtrOutput() KogitoJobsServiceSpecResourcesPtrOutput
	ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesPtrOutput
}

type kogitoJobsServiceSpecResourcesPtrType KogitoJobsServiceSpecResourcesArgs

func KogitoJobsServiceSpecResourcesPtr(v *KogitoJobsServiceSpecResourcesArgs) KogitoJobsServiceSpecResourcesPtrInput {
	return (*kogitoJobsServiceSpecResourcesPtrType)(v)
}

func (*kogitoJobsServiceSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecResources)(nil)).Elem()
}

func (i *kogitoJobsServiceSpecResourcesPtrType) ToKogitoJobsServiceSpecResourcesPtrOutput() KogitoJobsServiceSpecResourcesPtrOutput {
	return i.ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceSpecResourcesPtrType) ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoJobsServiceSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResources)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesOutput) ToKogitoJobsServiceSpecResourcesOutput() KogitoJobsServiceSpecResourcesOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesOutput) ToKogitoJobsServiceSpecResourcesOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesOutput) ToKogitoJobsServiceSpecResourcesPtrOutput() KogitoJobsServiceSpecResourcesPtrOutput {
	return o.ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceSpecResourcesOutput) ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecResources) *KogitoJobsServiceSpecResources {
		return &v
	}).(KogitoJobsServiceSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoJobsServiceSpecResourcesOutput) Limits() KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecResources) map[string]KogitoJobsServiceSpecResourcesLimits {
		return v.Limits
	}).(KogitoJobsServiceSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoJobsServiceSpecResourcesOutput) Requests() KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoJobsServiceSpecResources) map[string]KogitoJobsServiceSpecResourcesRequests {
		return v.Requests
	}).(KogitoJobsServiceSpecResourcesRequestsMapOutput)
}

type KogitoJobsServiceSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceSpecResources)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesPtrOutput) ToKogitoJobsServiceSpecResourcesPtrOutput() KogitoJobsServiceSpecResourcesPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesPtrOutput) ToKogitoJobsServiceSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesPtrOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesPtrOutput) Elem() KogitoJobsServiceSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecResources) KogitoJobsServiceSpecResources { return *v }).(KogitoJobsServiceSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoJobsServiceSpecResourcesPtrOutput) Limits() KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecResources) map[string]KogitoJobsServiceSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoJobsServiceSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoJobsServiceSpecResourcesPtrOutput) Requests() KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoJobsServiceSpecResources) map[string]KogitoJobsServiceSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoJobsServiceSpecResourcesRequestsMapOutput)
}

type KogitoJobsServiceSpecResourcesLimits struct {
}

// KogitoJobsServiceSpecResourcesLimitsInput is an input type that accepts KogitoJobsServiceSpecResourcesLimitsArgs and KogitoJobsServiceSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesLimitsInput` via:
//
//          KogitoJobsServiceSpecResourcesLimitsArgs{...}
type KogitoJobsServiceSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesLimitsOutput() KogitoJobsServiceSpecResourcesLimitsOutput
	ToKogitoJobsServiceSpecResourcesLimitsOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesLimitsOutput
}

type KogitoJobsServiceSpecResourcesLimitsArgs struct {
}

func (KogitoJobsServiceSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoJobsServiceSpecResourcesLimitsArgs) ToKogitoJobsServiceSpecResourcesLimitsOutput() KogitoJobsServiceSpecResourcesLimitsOutput {
	return i.ToKogitoJobsServiceSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesLimitsArgs) ToKogitoJobsServiceSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesLimitsOutput)
}

// KogitoJobsServiceSpecResourcesLimitsMapInput is an input type that accepts KogitoJobsServiceSpecResourcesLimitsMap and KogitoJobsServiceSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesLimitsMapInput` via:
//
//          KogitoJobsServiceSpecResourcesLimitsMap{ "key": KogitoJobsServiceSpecResourcesLimitsArgs{...} }
type KogitoJobsServiceSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesLimitsMapOutput() KogitoJobsServiceSpecResourcesLimitsMapOutput
	ToKogitoJobsServiceSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesLimitsMapOutput
}

type KogitoJobsServiceSpecResourcesLimitsMap map[string]KogitoJobsServiceSpecResourcesLimitsInput

func (KogitoJobsServiceSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoJobsServiceSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoJobsServiceSpecResourcesLimitsMap) ToKogitoJobsServiceSpecResourcesLimitsMapOutput() KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return i.ToKogitoJobsServiceSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesLimitsMap) ToKogitoJobsServiceSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesLimitsMapOutput)
}

type KogitoJobsServiceSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesLimitsOutput) ToKogitoJobsServiceSpecResourcesLimitsOutput() KogitoJobsServiceSpecResourcesLimitsOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesLimitsOutput) ToKogitoJobsServiceSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesLimitsOutput {
	return o
}

type KogitoJobsServiceSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoJobsServiceSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesLimitsMapOutput) ToKogitoJobsServiceSpecResourcesLimitsMapOutput() KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesLimitsMapOutput) ToKogitoJobsServiceSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoJobsServiceSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoJobsServiceSpecResourcesLimits {
		return vs[0].(map[string]KogitoJobsServiceSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoJobsServiceSpecResourcesLimitsOutput)
}

type KogitoJobsServiceSpecResourcesRequests struct {
}

// KogitoJobsServiceSpecResourcesRequestsInput is an input type that accepts KogitoJobsServiceSpecResourcesRequestsArgs and KogitoJobsServiceSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesRequestsInput` via:
//
//          KogitoJobsServiceSpecResourcesRequestsArgs{...}
type KogitoJobsServiceSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesRequestsOutput() KogitoJobsServiceSpecResourcesRequestsOutput
	ToKogitoJobsServiceSpecResourcesRequestsOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesRequestsOutput
}

type KogitoJobsServiceSpecResourcesRequestsArgs struct {
}

func (KogitoJobsServiceSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoJobsServiceSpecResourcesRequestsArgs) ToKogitoJobsServiceSpecResourcesRequestsOutput() KogitoJobsServiceSpecResourcesRequestsOutput {
	return i.ToKogitoJobsServiceSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesRequestsArgs) ToKogitoJobsServiceSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesRequestsOutput)
}

// KogitoJobsServiceSpecResourcesRequestsMapInput is an input type that accepts KogitoJobsServiceSpecResourcesRequestsMap and KogitoJobsServiceSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecResourcesRequestsMapInput` via:
//
//          KogitoJobsServiceSpecResourcesRequestsMap{ "key": KogitoJobsServiceSpecResourcesRequestsArgs{...} }
type KogitoJobsServiceSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecResourcesRequestsMapOutput() KogitoJobsServiceSpecResourcesRequestsMapOutput
	ToKogitoJobsServiceSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoJobsServiceSpecResourcesRequestsMapOutput
}

type KogitoJobsServiceSpecResourcesRequestsMap map[string]KogitoJobsServiceSpecResourcesRequestsInput

func (KogitoJobsServiceSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoJobsServiceSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoJobsServiceSpecResourcesRequestsMap) ToKogitoJobsServiceSpecResourcesRequestsMapOutput() KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return i.ToKogitoJobsServiceSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecResourcesRequestsMap) ToKogitoJobsServiceSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecResourcesRequestsMapOutput)
}

type KogitoJobsServiceSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesRequestsOutput) ToKogitoJobsServiceSpecResourcesRequestsOutput() KogitoJobsServiceSpecResourcesRequestsOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesRequestsOutput) ToKogitoJobsServiceSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesRequestsOutput {
	return o
}

type KogitoJobsServiceSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoJobsServiceSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoJobsServiceSpecResourcesRequestsMapOutput) ToKogitoJobsServiceSpecResourcesRequestsMapOutput() KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesRequestsMapOutput) ToKogitoJobsServiceSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoJobsServiceSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoJobsServiceSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoJobsServiceSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoJobsServiceSpecResourcesRequests {
		return vs[0].(map[string]KogitoJobsServiceSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoJobsServiceSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoJobsServiceSpecServiceLabels struct {
}

// KogitoJobsServiceSpecServiceLabelsInput is an input type that accepts KogitoJobsServiceSpecServiceLabelsArgs and KogitoJobsServiceSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceSpecServiceLabelsInput` via:
//
//          KogitoJobsServiceSpecServiceLabelsArgs{...}
type KogitoJobsServiceSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoJobsServiceSpecServiceLabelsOutput() KogitoJobsServiceSpecServiceLabelsOutput
	ToKogitoJobsServiceSpecServiceLabelsOutputWithContext(context.Context) KogitoJobsServiceSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoJobsServiceSpecServiceLabelsArgs struct {
}

func (KogitoJobsServiceSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecServiceLabels)(nil)).Elem()
}

func (i KogitoJobsServiceSpecServiceLabelsArgs) ToKogitoJobsServiceSpecServiceLabelsOutput() KogitoJobsServiceSpecServiceLabelsOutput {
	return i.ToKogitoJobsServiceSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceSpecServiceLabelsArgs) ToKogitoJobsServiceSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoJobsServiceSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceSpecServiceLabels)(nil)).Elem()
}

func (o KogitoJobsServiceSpecServiceLabelsOutput) ToKogitoJobsServiceSpecServiceLabelsOutput() KogitoJobsServiceSpecServiceLabelsOutput {
	return o
}

func (o KogitoJobsServiceSpecServiceLabelsOutput) ToKogitoJobsServiceSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoJobsServiceSpecServiceLabelsOutput {
	return o
}

// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
type KogitoJobsServiceStatus struct {
	// History of conditions for the resource
	Conditions []KogitoJobsServiceStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoJobsServiceStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoJobsServiceStatusInput is an input type that accepts KogitoJobsServiceStatusArgs and KogitoJobsServiceStatusOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusInput` via:
//
//          KogitoJobsServiceStatusArgs{...}
type KogitoJobsServiceStatusInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusOutput() KogitoJobsServiceStatusOutput
	ToKogitoJobsServiceStatusOutputWithContext(context.Context) KogitoJobsServiceStatusOutput
}

// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
type KogitoJobsServiceStatusArgs struct {
	// History of conditions for the resource
	Conditions KogitoJobsServiceStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoJobsServiceStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoJobsServiceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatus)(nil)).Elem()
}

func (i KogitoJobsServiceStatusArgs) ToKogitoJobsServiceStatusOutput() KogitoJobsServiceStatusOutput {
	return i.ToKogitoJobsServiceStatusOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusArgs) ToKogitoJobsServiceStatusOutputWithContext(ctx context.Context) KogitoJobsServiceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusOutput)
}

func (i KogitoJobsServiceStatusArgs) ToKogitoJobsServiceStatusPtrOutput() KogitoJobsServiceStatusPtrOutput {
	return i.ToKogitoJobsServiceStatusPtrOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusArgs) ToKogitoJobsServiceStatusPtrOutputWithContext(ctx context.Context) KogitoJobsServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusOutput).ToKogitoJobsServiceStatusPtrOutputWithContext(ctx)
}

// KogitoJobsServiceStatusPtrInput is an input type that accepts KogitoJobsServiceStatusArgs, KogitoJobsServiceStatusPtr and KogitoJobsServiceStatusPtrOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusPtrInput` via:
//
//          KogitoJobsServiceStatusArgs{...}
//
//  or:
//
//          nil
type KogitoJobsServiceStatusPtrInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusPtrOutput() KogitoJobsServiceStatusPtrOutput
	ToKogitoJobsServiceStatusPtrOutputWithContext(context.Context) KogitoJobsServiceStatusPtrOutput
}

type kogitoJobsServiceStatusPtrType KogitoJobsServiceStatusArgs

func KogitoJobsServiceStatusPtr(v *KogitoJobsServiceStatusArgs) KogitoJobsServiceStatusPtrInput {
	return (*kogitoJobsServiceStatusPtrType)(v)
}

func (*kogitoJobsServiceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceStatus)(nil)).Elem()
}

func (i *kogitoJobsServiceStatusPtrType) ToKogitoJobsServiceStatusPtrOutput() KogitoJobsServiceStatusPtrOutput {
	return i.ToKogitoJobsServiceStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoJobsServiceStatusPtrType) ToKogitoJobsServiceStatusPtrOutputWithContext(ctx context.Context) KogitoJobsServiceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusPtrOutput)
}

// KogitoJobsServiceStatus defines the observed state of KogitoJobsService.
type KogitoJobsServiceStatusOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatus)(nil)).Elem()
}

func (o KogitoJobsServiceStatusOutput) ToKogitoJobsServiceStatusOutput() KogitoJobsServiceStatusOutput {
	return o
}

func (o KogitoJobsServiceStatusOutput) ToKogitoJobsServiceStatusOutputWithContext(ctx context.Context) KogitoJobsServiceStatusOutput {
	return o
}

func (o KogitoJobsServiceStatusOutput) ToKogitoJobsServiceStatusPtrOutput() KogitoJobsServiceStatusPtrOutput {
	return o.ToKogitoJobsServiceStatusPtrOutputWithContext(context.Background())
}

func (o KogitoJobsServiceStatusOutput) ToKogitoJobsServiceStatusPtrOutputWithContext(ctx context.Context) KogitoJobsServiceStatusPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatus) *KogitoJobsServiceStatus {
		return &v
	}).(KogitoJobsServiceStatusPtrOutput)
}

// History of conditions for the resource
func (o KogitoJobsServiceStatusOutput) Conditions() KogitoJobsServiceStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatus) []KogitoJobsServiceStatusConditions { return v.Conditions }).(KogitoJobsServiceStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoJobsServiceStatusOutput) DeploymentConditions() KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatus) []KogitoJobsServiceStatusDeploymentConditions {
		return v.DeploymentConditions
	}).(KogitoJobsServiceStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoJobsServiceStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoJobsServiceStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoJobsServiceStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoJobsServiceStatus)(nil)).Elem()
}

func (o KogitoJobsServiceStatusPtrOutput) ToKogitoJobsServiceStatusPtrOutput() KogitoJobsServiceStatusPtrOutput {
	return o
}

func (o KogitoJobsServiceStatusPtrOutput) ToKogitoJobsServiceStatusPtrOutputWithContext(ctx context.Context) KogitoJobsServiceStatusPtrOutput {
	return o
}

func (o KogitoJobsServiceStatusPtrOutput) Elem() KogitoJobsServiceStatusOutput {
	return o.ApplyT(func(v *KogitoJobsServiceStatus) KogitoJobsServiceStatus { return *v }).(KogitoJobsServiceStatusOutput)
}

// History of conditions for the resource
func (o KogitoJobsServiceStatusPtrOutput) Conditions() KogitoJobsServiceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoJobsServiceStatus) []KogitoJobsServiceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoJobsServiceStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoJobsServiceStatusPtrOutput) DeploymentConditions() KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoJobsServiceStatus) []KogitoJobsServiceStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoJobsServiceStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoJobsServiceStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoJobsServiceStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoJobsServiceStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Condition is the detailed condition for the resource
type KogitoJobsServiceStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ReasonType is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoJobsServiceStatusConditionsInput is an input type that accepts KogitoJobsServiceStatusConditionsArgs and KogitoJobsServiceStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusConditionsInput` via:
//
//          KogitoJobsServiceStatusConditionsArgs{...}
type KogitoJobsServiceStatusConditionsInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusConditionsOutput() KogitoJobsServiceStatusConditionsOutput
	ToKogitoJobsServiceStatusConditionsOutputWithContext(context.Context) KogitoJobsServiceStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoJobsServiceStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ReasonType is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoJobsServiceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatusConditions)(nil)).Elem()
}

func (i KogitoJobsServiceStatusConditionsArgs) ToKogitoJobsServiceStatusConditionsOutput() KogitoJobsServiceStatusConditionsOutput {
	return i.ToKogitoJobsServiceStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusConditionsArgs) ToKogitoJobsServiceStatusConditionsOutputWithContext(ctx context.Context) KogitoJobsServiceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusConditionsOutput)
}

// KogitoJobsServiceStatusConditionsArrayInput is an input type that accepts KogitoJobsServiceStatusConditionsArray and KogitoJobsServiceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusConditionsArrayInput` via:
//
//          KogitoJobsServiceStatusConditionsArray{ KogitoJobsServiceStatusConditionsArgs{...} }
type KogitoJobsServiceStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusConditionsArrayOutput() KogitoJobsServiceStatusConditionsArrayOutput
	ToKogitoJobsServiceStatusConditionsArrayOutputWithContext(context.Context) KogitoJobsServiceStatusConditionsArrayOutput
}

type KogitoJobsServiceStatusConditionsArray []KogitoJobsServiceStatusConditionsInput

func (KogitoJobsServiceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceStatusConditions)(nil)).Elem()
}

func (i KogitoJobsServiceStatusConditionsArray) ToKogitoJobsServiceStatusConditionsArrayOutput() KogitoJobsServiceStatusConditionsArrayOutput {
	return i.ToKogitoJobsServiceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusConditionsArray) ToKogitoJobsServiceStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoJobsServiceStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatusConditions)(nil)).Elem()
}

func (o KogitoJobsServiceStatusConditionsOutput) ToKogitoJobsServiceStatusConditionsOutput() KogitoJobsServiceStatusConditionsOutput {
	return o
}

func (o KogitoJobsServiceStatusConditionsOutput) ToKogitoJobsServiceStatusConditionsOutputWithContext(ctx context.Context) KogitoJobsServiceStatusConditionsOutput {
	return o
}

func (o KogitoJobsServiceStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ReasonType is the type of reason
func (o KogitoJobsServiceStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoJobsServiceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoJobsServiceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoJobsServiceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceStatusConditions)(nil)).Elem()
}

func (o KogitoJobsServiceStatusConditionsArrayOutput) ToKogitoJobsServiceStatusConditionsArrayOutput() KogitoJobsServiceStatusConditionsArrayOutput {
	return o
}

func (o KogitoJobsServiceStatusConditionsArrayOutput) ToKogitoJobsServiceStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceStatusConditionsArrayOutput {
	return o
}

func (o KogitoJobsServiceStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoJobsServiceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoJobsServiceStatusConditions {
		return vs[0].([]KogitoJobsServiceStatusConditions)[vs[1].(int)]
	}).(KogitoJobsServiceStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoJobsServiceStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoJobsServiceStatusDeploymentConditionsInput is an input type that accepts KogitoJobsServiceStatusDeploymentConditionsArgs and KogitoJobsServiceStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusDeploymentConditionsInput` via:
//
//          KogitoJobsServiceStatusDeploymentConditionsArgs{...}
type KogitoJobsServiceStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusDeploymentConditionsOutput() KogitoJobsServiceStatusDeploymentConditionsOutput
	ToKogitoJobsServiceStatusDeploymentConditionsOutputWithContext(context.Context) KogitoJobsServiceStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoJobsServiceStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoJobsServiceStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoJobsServiceStatusDeploymentConditionsArgs) ToKogitoJobsServiceStatusDeploymentConditionsOutput() KogitoJobsServiceStatusDeploymentConditionsOutput {
	return i.ToKogitoJobsServiceStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusDeploymentConditionsArgs) ToKogitoJobsServiceStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoJobsServiceStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusDeploymentConditionsOutput)
}

// KogitoJobsServiceStatusDeploymentConditionsArrayInput is an input type that accepts KogitoJobsServiceStatusDeploymentConditionsArray and KogitoJobsServiceStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoJobsServiceStatusDeploymentConditionsArrayInput` via:
//
//          KogitoJobsServiceStatusDeploymentConditionsArray{ KogitoJobsServiceStatusDeploymentConditionsArgs{...} }
type KogitoJobsServiceStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoJobsServiceStatusDeploymentConditionsArrayOutput() KogitoJobsServiceStatusDeploymentConditionsArrayOutput
	ToKogitoJobsServiceStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoJobsServiceStatusDeploymentConditionsArrayOutput
}

type KogitoJobsServiceStatusDeploymentConditionsArray []KogitoJobsServiceStatusDeploymentConditionsInput

func (KogitoJobsServiceStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoJobsServiceStatusDeploymentConditionsArray) ToKogitoJobsServiceStatusDeploymentConditionsArrayOutput() KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoJobsServiceStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoJobsServiceStatusDeploymentConditionsArray) ToKogitoJobsServiceStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoJobsServiceStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoJobsServiceStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoJobsServiceStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoJobsServiceStatusDeploymentConditionsOutput) ToKogitoJobsServiceStatusDeploymentConditionsOutput() KogitoJobsServiceStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoJobsServiceStatusDeploymentConditionsOutput) ToKogitoJobsServiceStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoJobsServiceStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoJobsServiceStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoJobsServiceStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoJobsServiceStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoJobsServiceStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoJobsServiceStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoJobsServiceStatusDeploymentConditionsArrayOutput) ToKogitoJobsServiceStatusDeploymentConditionsArrayOutput() KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoJobsServiceStatusDeploymentConditionsArrayOutput) ToKogitoJobsServiceStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoJobsServiceStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoJobsServiceStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoJobsServiceStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoJobsServiceStatusDeploymentConditions {
		return vs[0].([]KogitoJobsServiceStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoJobsServiceStatusDeploymentConditionsOutput)
}

// KogitoMgmtConsole deploys the Kogito Management Console service in the given namespace.
type KogitoMgmtConsoleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
	Spec *KogitoMgmtConsoleSpec `pulumi:"spec"`
	// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
	Status *KogitoMgmtConsoleStatus `pulumi:"status"`
}

// KogitoMgmtConsoleTypeInput is an input type that accepts KogitoMgmtConsoleTypeArgs and KogitoMgmtConsoleTypeOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleTypeInput` via:
//
//          KogitoMgmtConsoleTypeArgs{...}
type KogitoMgmtConsoleTypeInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleTypeOutput() KogitoMgmtConsoleTypeOutput
	ToKogitoMgmtConsoleTypeOutputWithContext(context.Context) KogitoMgmtConsoleTypeOutput
}

// KogitoMgmtConsole deploys the Kogito Management Console service in the given namespace.
type KogitoMgmtConsoleTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
	Spec KogitoMgmtConsoleSpecPtrInput `pulumi:"spec"`
	// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
	Status KogitoMgmtConsoleStatusPtrInput `pulumi:"status"`
}

func (KogitoMgmtConsoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleType)(nil)).Elem()
}

func (i KogitoMgmtConsoleTypeArgs) ToKogitoMgmtConsoleTypeOutput() KogitoMgmtConsoleTypeOutput {
	return i.ToKogitoMgmtConsoleTypeOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleTypeArgs) ToKogitoMgmtConsoleTypeOutputWithContext(ctx context.Context) KogitoMgmtConsoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleTypeOutput)
}

// KogitoMgmtConsole deploys the Kogito Management Console service in the given namespace.
type KogitoMgmtConsoleTypeOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleType)(nil)).Elem()
}

func (o KogitoMgmtConsoleTypeOutput) ToKogitoMgmtConsoleTypeOutput() KogitoMgmtConsoleTypeOutput {
	return o
}

func (o KogitoMgmtConsoleTypeOutput) ToKogitoMgmtConsoleTypeOutputWithContext(ctx context.Context) KogitoMgmtConsoleTypeOutput {
	return o
}

func (o KogitoMgmtConsoleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
func (o KogitoMgmtConsoleTypeOutput) Spec() KogitoMgmtConsoleSpecPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleType) *KogitoMgmtConsoleSpec { return v.Spec }).(KogitoMgmtConsoleSpecPtrOutput)
}

// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
func (o KogitoMgmtConsoleTypeOutput) Status() KogitoMgmtConsoleStatusPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleType) *KogitoMgmtConsoleStatus { return v.Status }).(KogitoMgmtConsoleStatusPtrOutput)
}

type KogitoMgmtConsoleMetadata struct {
}

// KogitoMgmtConsoleMetadataInput is an input type that accepts KogitoMgmtConsoleMetadataArgs and KogitoMgmtConsoleMetadataOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleMetadataInput` via:
//
//          KogitoMgmtConsoleMetadataArgs{...}
type KogitoMgmtConsoleMetadataInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleMetadataOutput() KogitoMgmtConsoleMetadataOutput
	ToKogitoMgmtConsoleMetadataOutputWithContext(context.Context) KogitoMgmtConsoleMetadataOutput
}

type KogitoMgmtConsoleMetadataArgs struct {
}

func (KogitoMgmtConsoleMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleMetadata)(nil)).Elem()
}

func (i KogitoMgmtConsoleMetadataArgs) ToKogitoMgmtConsoleMetadataOutput() KogitoMgmtConsoleMetadataOutput {
	return i.ToKogitoMgmtConsoleMetadataOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleMetadataArgs) ToKogitoMgmtConsoleMetadataOutputWithContext(ctx context.Context) KogitoMgmtConsoleMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleMetadataOutput)
}

type KogitoMgmtConsoleMetadataOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleMetadata)(nil)).Elem()
}

func (o KogitoMgmtConsoleMetadataOutput) ToKogitoMgmtConsoleMetadataOutput() KogitoMgmtConsoleMetadataOutput {
	return o
}

func (o KogitoMgmtConsoleMetadataOutput) ToKogitoMgmtConsoleMetadataOutputWithContext(ctx context.Context) KogitoMgmtConsoleMetadataOutput {
	return o
}

// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
type KogitoMgmtConsoleSpec struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs []KogitoMgmtConsoleSpecEnvs `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort *int `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *KogitoMgmtConsoleSpecImage `pulumi:"image"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoMgmtConsoleSpecResources `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoMgmtConsoleSpecInput is an input type that accepts KogitoMgmtConsoleSpecArgs and KogitoMgmtConsoleSpecOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecInput` via:
//
//          KogitoMgmtConsoleSpecArgs{...}
type KogitoMgmtConsoleSpecInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecOutput() KogitoMgmtConsoleSpecOutput
	ToKogitoMgmtConsoleSpecOutputWithContext(context.Context) KogitoMgmtConsoleSpecOutput
}

// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
type KogitoMgmtConsoleSpecArgs struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs KogitoMgmtConsoleSpecEnvsArrayInput `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image KogitoMgmtConsoleSpecImagePtrInput `pulumi:"image"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoMgmtConsoleSpecResourcesPtrInput `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoMgmtConsoleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpec)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecArgs) ToKogitoMgmtConsoleSpecOutput() KogitoMgmtConsoleSpecOutput {
	return i.ToKogitoMgmtConsoleSpecOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecArgs) ToKogitoMgmtConsoleSpecOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecOutput)
}

func (i KogitoMgmtConsoleSpecArgs) ToKogitoMgmtConsoleSpecPtrOutput() KogitoMgmtConsoleSpecPtrOutput {
	return i.ToKogitoMgmtConsoleSpecPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecArgs) ToKogitoMgmtConsoleSpecPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecOutput).ToKogitoMgmtConsoleSpecPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecPtrInput is an input type that accepts KogitoMgmtConsoleSpecArgs, KogitoMgmtConsoleSpecPtr and KogitoMgmtConsoleSpecPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecPtrInput` via:
//
//          KogitoMgmtConsoleSpecArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecPtrOutput() KogitoMgmtConsoleSpecPtrOutput
	ToKogitoMgmtConsoleSpecPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecPtrOutput
}

type kogitoMgmtConsoleSpecPtrType KogitoMgmtConsoleSpecArgs

func KogitoMgmtConsoleSpecPtr(v *KogitoMgmtConsoleSpecArgs) KogitoMgmtConsoleSpecPtrInput {
	return (*kogitoMgmtConsoleSpecPtrType)(v)
}

func (*kogitoMgmtConsoleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpec)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecPtrType) ToKogitoMgmtConsoleSpecPtrOutput() KogitoMgmtConsoleSpecPtrOutput {
	return i.ToKogitoMgmtConsoleSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecPtrType) ToKogitoMgmtConsoleSpecPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecPtrOutput)
}

// KogitoMgmtConsoleSpec defines the desired state of KogitoMgmtConsole.
type KogitoMgmtConsoleSpecOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpec)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecOutput) ToKogitoMgmtConsoleSpecOutput() KogitoMgmtConsoleSpecOutput {
	return o
}

func (o KogitoMgmtConsoleSpecOutput) ToKogitoMgmtConsoleSpecOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecOutput {
	return o
}

func (o KogitoMgmtConsoleSpecOutput) ToKogitoMgmtConsoleSpecPtrOutput() KogitoMgmtConsoleSpecPtrOutput {
	return o.ToKogitoMgmtConsoleSpecPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecOutput) ToKogitoMgmtConsoleSpecPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *KogitoMgmtConsoleSpec {
		return &v
	}).(KogitoMgmtConsoleSpecPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoMgmtConsoleSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoMgmtConsoleSpecOutput) Envs() KogitoMgmtConsoleSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) []KogitoMgmtConsoleSpecEnvs { return v.Envs }).(KogitoMgmtConsoleSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoMgmtConsoleSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoMgmtConsoleSpecOutput) Image() KogitoMgmtConsoleSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *KogitoMgmtConsoleSpecImage { return v.Image }).(KogitoMgmtConsoleSpecImagePtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoMgmtConsoleSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoMgmtConsoleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoMgmtConsoleSpecOutput) Resources() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) *KogitoMgmtConsoleSpecResources { return v.Resources }).(KogitoMgmtConsoleSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoMgmtConsoleSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoMgmtConsoleSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpec)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecPtrOutput) ToKogitoMgmtConsoleSpecPtrOutput() KogitoMgmtConsoleSpecPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecPtrOutput) ToKogitoMgmtConsoleSpecPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecPtrOutput) Elem() KogitoMgmtConsoleSpecOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) KogitoMgmtConsoleSpec { return *v }).(KogitoMgmtConsoleSpecOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoMgmtConsoleSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoMgmtConsoleSpecPtrOutput) Envs() KogitoMgmtConsoleSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) []KogitoMgmtConsoleSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoMgmtConsoleSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoMgmtConsoleSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoMgmtConsoleSpecPtrOutput) Image() KogitoMgmtConsoleSpecImagePtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) *KogitoMgmtConsoleSpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(KogitoMgmtConsoleSpecImagePtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoMgmtConsoleSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoMgmtConsoleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoMgmtConsoleSpecPtrOutput) Resources() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) *KogitoMgmtConsoleSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoMgmtConsoleSpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoMgmtConsoleSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoMgmtConsoleSpecDeploymentLabels struct {
}

// KogitoMgmtConsoleSpecDeploymentLabelsInput is an input type that accepts KogitoMgmtConsoleSpecDeploymentLabelsArgs and KogitoMgmtConsoleSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecDeploymentLabelsInput` via:
//
//          KogitoMgmtConsoleSpecDeploymentLabelsArgs{...}
type KogitoMgmtConsoleSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecDeploymentLabelsOutput() KogitoMgmtConsoleSpecDeploymentLabelsOutput
	ToKogitoMgmtConsoleSpecDeploymentLabelsOutputWithContext(context.Context) KogitoMgmtConsoleSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoMgmtConsoleSpecDeploymentLabelsArgs struct {
}

func (KogitoMgmtConsoleSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecDeploymentLabelsArgs) ToKogitoMgmtConsoleSpecDeploymentLabelsOutput() KogitoMgmtConsoleSpecDeploymentLabelsOutput {
	return i.ToKogitoMgmtConsoleSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecDeploymentLabelsArgs) ToKogitoMgmtConsoleSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoMgmtConsoleSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecDeploymentLabelsOutput) ToKogitoMgmtConsoleSpecDeploymentLabelsOutput() KogitoMgmtConsoleSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoMgmtConsoleSpecDeploymentLabelsOutput) ToKogitoMgmtConsoleSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoMgmtConsoleSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoMgmtConsoleSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoMgmtConsoleSpecEnvsInput is an input type that accepts KogitoMgmtConsoleSpecEnvsArgs and KogitoMgmtConsoleSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsInput` via:
//
//          KogitoMgmtConsoleSpecEnvsArgs{...}
type KogitoMgmtConsoleSpecEnvsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsOutput() KogitoMgmtConsoleSpecEnvsOutput
	ToKogitoMgmtConsoleSpecEnvsOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoMgmtConsoleSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoMgmtConsoleSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoMgmtConsoleSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvs)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsArgs) ToKogitoMgmtConsoleSpecEnvsOutput() KogitoMgmtConsoleSpecEnvsOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsArgs) ToKogitoMgmtConsoleSpecEnvsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsOutput)
}

// KogitoMgmtConsoleSpecEnvsArrayInput is an input type that accepts KogitoMgmtConsoleSpecEnvsArray and KogitoMgmtConsoleSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsArrayInput` via:
//
//          KogitoMgmtConsoleSpecEnvsArray{ KogitoMgmtConsoleSpecEnvsArgs{...} }
type KogitoMgmtConsoleSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsArrayOutput() KogitoMgmtConsoleSpecEnvsArrayOutput
	ToKogitoMgmtConsoleSpecEnvsArrayOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsArrayOutput
}

type KogitoMgmtConsoleSpecEnvsArray []KogitoMgmtConsoleSpecEnvsInput

func (KogitoMgmtConsoleSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleSpecEnvs)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsArray) ToKogitoMgmtConsoleSpecEnvsArrayOutput() KogitoMgmtConsoleSpecEnvsArrayOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsArray) ToKogitoMgmtConsoleSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoMgmtConsoleSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvs)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsOutput) ToKogitoMgmtConsoleSpecEnvsOutput() KogitoMgmtConsoleSpecEnvsOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsOutput) ToKogitoMgmtConsoleSpecEnvsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoMgmtConsoleSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoMgmtConsoleSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoMgmtConsoleSpecEnvsOutput) ValueFrom() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvs) *KogitoMgmtConsoleSpecEnvsValueFrom { return v.ValueFrom }).(KogitoMgmtConsoleSpecEnvsValueFromPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleSpecEnvs)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsArrayOutput) ToKogitoMgmtConsoleSpecEnvsArrayOutput() KogitoMgmtConsoleSpecEnvsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsArrayOutput) ToKogitoMgmtConsoleSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoMgmtConsoleSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoMgmtConsoleSpecEnvs {
		return vs[0].([]KogitoMgmtConsoleSpecEnvs)[vs[1].(int)]
	}).(KogitoMgmtConsoleSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoMgmtConsoleSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoMgmtConsoleSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoMgmtConsoleSpecEnvsValueFromInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromArgs and KogitoMgmtConsoleSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromOutput() KogitoMgmtConsoleSpecEnvsValueFromOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoMgmtConsoleSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoMgmtConsoleSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromArgs) ToKogitoMgmtConsoleSpecEnvsValueFromOutput() KogitoMgmtConsoleSpecEnvsValueFromOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromArgs) ToKogitoMgmtConsoleSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromArgs) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromArgs) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromOutput).ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromArgs, KogitoMgmtConsoleSpecEnvsValueFromPtr and KogitoMgmtConsoleSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromPtrType KogitoMgmtConsoleSpecEnvsValueFromArgs

func KogitoMgmtConsoleSpecEnvsValueFromPtr(v *KogitoMgmtConsoleSpecEnvsValueFromArgs) KogitoMgmtConsoleSpecEnvsValueFromPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoMgmtConsoleSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ToKogitoMgmtConsoleSpecEnvsValueFromOutput() KogitoMgmtConsoleSpecEnvsValueFromOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ToKogitoMgmtConsoleSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFrom {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) FieldRef() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromFieldRef {
		return v.FieldRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) ResourceFieldRef() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoMgmtConsoleSpecEnvsValueFromOutput) SecretKeyRef() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFrom) KogitoMgmtConsoleSpecEnvsValueFrom { return *v }).(KogitoMgmtConsoleSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) FieldRef() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoMgmtConsoleSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFrom) *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs and KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs, KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtr and KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrType KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefArgs) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoMgmtConsoleSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoMgmtConsoleSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs and KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput).ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs, KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtr and KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrType KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs

func KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtr(v *KogitoMgmtConsoleSpecEnvsValueFromFieldRefArgs) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromFieldRef) *KogitoMgmtConsoleSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromFieldRef) KogitoMgmtConsoleSpecEnvsValueFromFieldRef {
		return *v
	}).(KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs and KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput).ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs, KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtr and KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrType KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs

func KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtr(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefArgs) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor) *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor) KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs and KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput).ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs, KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtr and KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrType KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs

func KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtr(v *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefArgs) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef {
		return *v
	}).(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoMgmtConsoleSpecImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoMgmtConsoleSpecImageInput is an input type that accepts KogitoMgmtConsoleSpecImageArgs and KogitoMgmtConsoleSpecImageOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecImageInput` via:
//
//          KogitoMgmtConsoleSpecImageArgs{...}
type KogitoMgmtConsoleSpecImageInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecImageOutput() KogitoMgmtConsoleSpecImageOutput
	ToKogitoMgmtConsoleSpecImageOutputWithContext(context.Context) KogitoMgmtConsoleSpecImageOutput
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoMgmtConsoleSpecImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoMgmtConsoleSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecImage)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecImageArgs) ToKogitoMgmtConsoleSpecImageOutput() KogitoMgmtConsoleSpecImageOutput {
	return i.ToKogitoMgmtConsoleSpecImageOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecImageArgs) ToKogitoMgmtConsoleSpecImageOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecImageOutput)
}

func (i KogitoMgmtConsoleSpecImageArgs) ToKogitoMgmtConsoleSpecImagePtrOutput() KogitoMgmtConsoleSpecImagePtrOutput {
	return i.ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecImageArgs) ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecImageOutput).ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecImagePtrInput is an input type that accepts KogitoMgmtConsoleSpecImageArgs, KogitoMgmtConsoleSpecImagePtr and KogitoMgmtConsoleSpecImagePtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecImagePtrInput` via:
//
//          KogitoMgmtConsoleSpecImageArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecImagePtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecImagePtrOutput() KogitoMgmtConsoleSpecImagePtrOutput
	ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecImagePtrOutput
}

type kogitoMgmtConsoleSpecImagePtrType KogitoMgmtConsoleSpecImageArgs

func KogitoMgmtConsoleSpecImagePtr(v *KogitoMgmtConsoleSpecImageArgs) KogitoMgmtConsoleSpecImagePtrInput {
	return (*kogitoMgmtConsoleSpecImagePtrType)(v)
}

func (*kogitoMgmtConsoleSpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecImage)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecImagePtrType) ToKogitoMgmtConsoleSpecImagePtrOutput() KogitoMgmtConsoleSpecImagePtrOutput {
	return i.ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecImagePtrType) ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecImagePtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoMgmtConsoleSpecImageOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecImage)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecImageOutput) ToKogitoMgmtConsoleSpecImageOutput() KogitoMgmtConsoleSpecImageOutput {
	return o
}

func (o KogitoMgmtConsoleSpecImageOutput) ToKogitoMgmtConsoleSpecImageOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImageOutput {
	return o
}

func (o KogitoMgmtConsoleSpecImageOutput) ToKogitoMgmtConsoleSpecImagePtrOutput() KogitoMgmtConsoleSpecImagePtrOutput {
	return o.ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecImageOutput) ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecImage) *KogitoMgmtConsoleSpecImage {
		return &v
	}).(KogitoMgmtConsoleSpecImagePtrOutput)
}
func (o KogitoMgmtConsoleSpecImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoMgmtConsoleSpecImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecImage)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) ToKogitoMgmtConsoleSpecImagePtrOutput() KogitoMgmtConsoleSpecImagePtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) ToKogitoMgmtConsoleSpecImagePtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecImagePtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) Elem() KogitoMgmtConsoleSpecImageOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecImage) KogitoMgmtConsoleSpecImage { return *v }).(KogitoMgmtConsoleSpecImageOutput)
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleSpecImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoMgmtConsoleSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoMgmtConsoleSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoMgmtConsoleSpecResourcesRequests `pulumi:"requests"`
}

// KogitoMgmtConsoleSpecResourcesInput is an input type that accepts KogitoMgmtConsoleSpecResourcesArgs and KogitoMgmtConsoleSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesInput` via:
//
//          KogitoMgmtConsoleSpecResourcesArgs{...}
type KogitoMgmtConsoleSpecResourcesInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesOutput() KogitoMgmtConsoleSpecResourcesOutput
	ToKogitoMgmtConsoleSpecResourcesOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoMgmtConsoleSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoMgmtConsoleSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoMgmtConsoleSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoMgmtConsoleSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResources)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecResourcesArgs) ToKogitoMgmtConsoleSpecResourcesOutput() KogitoMgmtConsoleSpecResourcesOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesArgs) ToKogitoMgmtConsoleSpecResourcesOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesOutput)
}

func (i KogitoMgmtConsoleSpecResourcesArgs) ToKogitoMgmtConsoleSpecResourcesPtrOutput() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesArgs) ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesOutput).ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleSpecResourcesPtrInput is an input type that accepts KogitoMgmtConsoleSpecResourcesArgs, KogitoMgmtConsoleSpecResourcesPtr and KogitoMgmtConsoleSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesPtrInput` via:
//
//          KogitoMgmtConsoleSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesPtrOutput() KogitoMgmtConsoleSpecResourcesPtrOutput
	ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesPtrOutput
}

type kogitoMgmtConsoleSpecResourcesPtrType KogitoMgmtConsoleSpecResourcesArgs

func KogitoMgmtConsoleSpecResourcesPtr(v *KogitoMgmtConsoleSpecResourcesArgs) KogitoMgmtConsoleSpecResourcesPtrInput {
	return (*kogitoMgmtConsoleSpecResourcesPtrType)(v)
}

func (*kogitoMgmtConsoleSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecResources)(nil)).Elem()
}

func (i *kogitoMgmtConsoleSpecResourcesPtrType) ToKogitoMgmtConsoleSpecResourcesPtrOutput() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleSpecResourcesPtrType) ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoMgmtConsoleSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResources)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesOutput) ToKogitoMgmtConsoleSpecResourcesOutput() KogitoMgmtConsoleSpecResourcesOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesOutput) ToKogitoMgmtConsoleSpecResourcesOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesOutput) ToKogitoMgmtConsoleSpecResourcesPtrOutput() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o.ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleSpecResourcesOutput) ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecResources) *KogitoMgmtConsoleSpecResources {
		return &v
	}).(KogitoMgmtConsoleSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoMgmtConsoleSpecResourcesOutput) Limits() KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecResources) map[string]KogitoMgmtConsoleSpecResourcesLimits {
		return v.Limits
	}).(KogitoMgmtConsoleSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoMgmtConsoleSpecResourcesOutput) Requests() KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleSpecResources) map[string]KogitoMgmtConsoleSpecResourcesRequests {
		return v.Requests
	}).(KogitoMgmtConsoleSpecResourcesRequestsMapOutput)
}

type KogitoMgmtConsoleSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleSpecResources)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesPtrOutput) ToKogitoMgmtConsoleSpecResourcesPtrOutput() KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesPtrOutput) ToKogitoMgmtConsoleSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesPtrOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesPtrOutput) Elem() KogitoMgmtConsoleSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecResources) KogitoMgmtConsoleSpecResources { return *v }).(KogitoMgmtConsoleSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoMgmtConsoleSpecResourcesPtrOutput) Limits() KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecResources) map[string]KogitoMgmtConsoleSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoMgmtConsoleSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoMgmtConsoleSpecResourcesPtrOutput) Requests() KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleSpecResources) map[string]KogitoMgmtConsoleSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoMgmtConsoleSpecResourcesRequestsMapOutput)
}

type KogitoMgmtConsoleSpecResourcesLimits struct {
}

// KogitoMgmtConsoleSpecResourcesLimitsInput is an input type that accepts KogitoMgmtConsoleSpecResourcesLimitsArgs and KogitoMgmtConsoleSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesLimitsInput` via:
//
//          KogitoMgmtConsoleSpecResourcesLimitsArgs{...}
type KogitoMgmtConsoleSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesLimitsOutput() KogitoMgmtConsoleSpecResourcesLimitsOutput
	ToKogitoMgmtConsoleSpecResourcesLimitsOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesLimitsOutput
}

type KogitoMgmtConsoleSpecResourcesLimitsArgs struct {
}

func (KogitoMgmtConsoleSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecResourcesLimitsArgs) ToKogitoMgmtConsoleSpecResourcesLimitsOutput() KogitoMgmtConsoleSpecResourcesLimitsOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesLimitsArgs) ToKogitoMgmtConsoleSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesLimitsOutput)
}

// KogitoMgmtConsoleSpecResourcesLimitsMapInput is an input type that accepts KogitoMgmtConsoleSpecResourcesLimitsMap and KogitoMgmtConsoleSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesLimitsMapInput` via:
//
//          KogitoMgmtConsoleSpecResourcesLimitsMap{ "key": KogitoMgmtConsoleSpecResourcesLimitsArgs{...} }
type KogitoMgmtConsoleSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesLimitsMapOutput() KogitoMgmtConsoleSpecResourcesLimitsMapOutput
	ToKogitoMgmtConsoleSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesLimitsMapOutput
}

type KogitoMgmtConsoleSpecResourcesLimitsMap map[string]KogitoMgmtConsoleSpecResourcesLimitsInput

func (KogitoMgmtConsoleSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoMgmtConsoleSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecResourcesLimitsMap) ToKogitoMgmtConsoleSpecResourcesLimitsMapOutput() KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesLimitsMap) ToKogitoMgmtConsoleSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesLimitsMapOutput)
}

type KogitoMgmtConsoleSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesLimitsOutput) ToKogitoMgmtConsoleSpecResourcesLimitsOutput() KogitoMgmtConsoleSpecResourcesLimitsOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesLimitsOutput) ToKogitoMgmtConsoleSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesLimitsOutput {
	return o
}

type KogitoMgmtConsoleSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoMgmtConsoleSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesLimitsMapOutput) ToKogitoMgmtConsoleSpecResourcesLimitsMapOutput() KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesLimitsMapOutput) ToKogitoMgmtConsoleSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoMgmtConsoleSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoMgmtConsoleSpecResourcesLimits {
		return vs[0].(map[string]KogitoMgmtConsoleSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoMgmtConsoleSpecResourcesLimitsOutput)
}

type KogitoMgmtConsoleSpecResourcesRequests struct {
}

// KogitoMgmtConsoleSpecResourcesRequestsInput is an input type that accepts KogitoMgmtConsoleSpecResourcesRequestsArgs and KogitoMgmtConsoleSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesRequestsInput` via:
//
//          KogitoMgmtConsoleSpecResourcesRequestsArgs{...}
type KogitoMgmtConsoleSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesRequestsOutput() KogitoMgmtConsoleSpecResourcesRequestsOutput
	ToKogitoMgmtConsoleSpecResourcesRequestsOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesRequestsOutput
}

type KogitoMgmtConsoleSpecResourcesRequestsArgs struct {
}

func (KogitoMgmtConsoleSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecResourcesRequestsArgs) ToKogitoMgmtConsoleSpecResourcesRequestsOutput() KogitoMgmtConsoleSpecResourcesRequestsOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesRequestsArgs) ToKogitoMgmtConsoleSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesRequestsOutput)
}

// KogitoMgmtConsoleSpecResourcesRequestsMapInput is an input type that accepts KogitoMgmtConsoleSpecResourcesRequestsMap and KogitoMgmtConsoleSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecResourcesRequestsMapInput` via:
//
//          KogitoMgmtConsoleSpecResourcesRequestsMap{ "key": KogitoMgmtConsoleSpecResourcesRequestsArgs{...} }
type KogitoMgmtConsoleSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecResourcesRequestsMapOutput() KogitoMgmtConsoleSpecResourcesRequestsMapOutput
	ToKogitoMgmtConsoleSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoMgmtConsoleSpecResourcesRequestsMapOutput
}

type KogitoMgmtConsoleSpecResourcesRequestsMap map[string]KogitoMgmtConsoleSpecResourcesRequestsInput

func (KogitoMgmtConsoleSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoMgmtConsoleSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecResourcesRequestsMap) ToKogitoMgmtConsoleSpecResourcesRequestsMapOutput() KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return i.ToKogitoMgmtConsoleSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecResourcesRequestsMap) ToKogitoMgmtConsoleSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecResourcesRequestsMapOutput)
}

type KogitoMgmtConsoleSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesRequestsOutput) ToKogitoMgmtConsoleSpecResourcesRequestsOutput() KogitoMgmtConsoleSpecResourcesRequestsOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesRequestsOutput) ToKogitoMgmtConsoleSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesRequestsOutput {
	return o
}

type KogitoMgmtConsoleSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoMgmtConsoleSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecResourcesRequestsMapOutput) ToKogitoMgmtConsoleSpecResourcesRequestsMapOutput() KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesRequestsMapOutput) ToKogitoMgmtConsoleSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoMgmtConsoleSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoMgmtConsoleSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoMgmtConsoleSpecResourcesRequests {
		return vs[0].(map[string]KogitoMgmtConsoleSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoMgmtConsoleSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoMgmtConsoleSpecServiceLabels struct {
}

// KogitoMgmtConsoleSpecServiceLabelsInput is an input type that accepts KogitoMgmtConsoleSpecServiceLabelsArgs and KogitoMgmtConsoleSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleSpecServiceLabelsInput` via:
//
//          KogitoMgmtConsoleSpecServiceLabelsArgs{...}
type KogitoMgmtConsoleSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleSpecServiceLabelsOutput() KogitoMgmtConsoleSpecServiceLabelsOutput
	ToKogitoMgmtConsoleSpecServiceLabelsOutputWithContext(context.Context) KogitoMgmtConsoleSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoMgmtConsoleSpecServiceLabelsArgs struct {
}

func (KogitoMgmtConsoleSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecServiceLabels)(nil)).Elem()
}

func (i KogitoMgmtConsoleSpecServiceLabelsArgs) ToKogitoMgmtConsoleSpecServiceLabelsOutput() KogitoMgmtConsoleSpecServiceLabelsOutput {
	return i.ToKogitoMgmtConsoleSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleSpecServiceLabelsArgs) ToKogitoMgmtConsoleSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoMgmtConsoleSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleSpecServiceLabels)(nil)).Elem()
}

func (o KogitoMgmtConsoleSpecServiceLabelsOutput) ToKogitoMgmtConsoleSpecServiceLabelsOutput() KogitoMgmtConsoleSpecServiceLabelsOutput {
	return o
}

func (o KogitoMgmtConsoleSpecServiceLabelsOutput) ToKogitoMgmtConsoleSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoMgmtConsoleSpecServiceLabelsOutput {
	return o
}

// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
type KogitoMgmtConsoleStatus struct {
	// History of conditions for the resource
	Conditions []KogitoMgmtConsoleStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoMgmtConsoleStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoMgmtConsoleStatusInput is an input type that accepts KogitoMgmtConsoleStatusArgs and KogitoMgmtConsoleStatusOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusInput` via:
//
//          KogitoMgmtConsoleStatusArgs{...}
type KogitoMgmtConsoleStatusInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusOutput() KogitoMgmtConsoleStatusOutput
	ToKogitoMgmtConsoleStatusOutputWithContext(context.Context) KogitoMgmtConsoleStatusOutput
}

// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
type KogitoMgmtConsoleStatusArgs struct {
	// History of conditions for the resource
	Conditions KogitoMgmtConsoleStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoMgmtConsoleStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoMgmtConsoleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatus)(nil)).Elem()
}

func (i KogitoMgmtConsoleStatusArgs) ToKogitoMgmtConsoleStatusOutput() KogitoMgmtConsoleStatusOutput {
	return i.ToKogitoMgmtConsoleStatusOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusArgs) ToKogitoMgmtConsoleStatusOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusOutput)
}

func (i KogitoMgmtConsoleStatusArgs) ToKogitoMgmtConsoleStatusPtrOutput() KogitoMgmtConsoleStatusPtrOutput {
	return i.ToKogitoMgmtConsoleStatusPtrOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusArgs) ToKogitoMgmtConsoleStatusPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusOutput).ToKogitoMgmtConsoleStatusPtrOutputWithContext(ctx)
}

// KogitoMgmtConsoleStatusPtrInput is an input type that accepts KogitoMgmtConsoleStatusArgs, KogitoMgmtConsoleStatusPtr and KogitoMgmtConsoleStatusPtrOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusPtrInput` via:
//
//          KogitoMgmtConsoleStatusArgs{...}
//
//  or:
//
//          nil
type KogitoMgmtConsoleStatusPtrInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusPtrOutput() KogitoMgmtConsoleStatusPtrOutput
	ToKogitoMgmtConsoleStatusPtrOutputWithContext(context.Context) KogitoMgmtConsoleStatusPtrOutput
}

type kogitoMgmtConsoleStatusPtrType KogitoMgmtConsoleStatusArgs

func KogitoMgmtConsoleStatusPtr(v *KogitoMgmtConsoleStatusArgs) KogitoMgmtConsoleStatusPtrInput {
	return (*kogitoMgmtConsoleStatusPtrType)(v)
}

func (*kogitoMgmtConsoleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleStatus)(nil)).Elem()
}

func (i *kogitoMgmtConsoleStatusPtrType) ToKogitoMgmtConsoleStatusPtrOutput() KogitoMgmtConsoleStatusPtrOutput {
	return i.ToKogitoMgmtConsoleStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoMgmtConsoleStatusPtrType) ToKogitoMgmtConsoleStatusPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusPtrOutput)
}

// KogitoMgmtConsoleStatus defines the observed state of KogitoMgmtConsole.
type KogitoMgmtConsoleStatusOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatus)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusOutput) ToKogitoMgmtConsoleStatusOutput() KogitoMgmtConsoleStatusOutput {
	return o
}

func (o KogitoMgmtConsoleStatusOutput) ToKogitoMgmtConsoleStatusOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusOutput {
	return o
}

func (o KogitoMgmtConsoleStatusOutput) ToKogitoMgmtConsoleStatusPtrOutput() KogitoMgmtConsoleStatusPtrOutput {
	return o.ToKogitoMgmtConsoleStatusPtrOutputWithContext(context.Background())
}

func (o KogitoMgmtConsoleStatusOutput) ToKogitoMgmtConsoleStatusPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatus) *KogitoMgmtConsoleStatus {
		return &v
	}).(KogitoMgmtConsoleStatusPtrOutput)
}

// History of conditions for the resource
func (o KogitoMgmtConsoleStatusOutput) Conditions() KogitoMgmtConsoleStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatus) []KogitoMgmtConsoleStatusConditions { return v.Conditions }).(KogitoMgmtConsoleStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoMgmtConsoleStatusOutput) DeploymentConditions() KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatus) []KogitoMgmtConsoleStatusDeploymentConditions {
		return v.DeploymentConditions
	}).(KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoMgmtConsoleStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoMgmtConsoleStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoMgmtConsoleStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoMgmtConsoleStatus)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusPtrOutput) ToKogitoMgmtConsoleStatusPtrOutput() KogitoMgmtConsoleStatusPtrOutput {
	return o
}

func (o KogitoMgmtConsoleStatusPtrOutput) ToKogitoMgmtConsoleStatusPtrOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusPtrOutput {
	return o
}

func (o KogitoMgmtConsoleStatusPtrOutput) Elem() KogitoMgmtConsoleStatusOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleStatus) KogitoMgmtConsoleStatus { return *v }).(KogitoMgmtConsoleStatusOutput)
}

// History of conditions for the resource
func (o KogitoMgmtConsoleStatusPtrOutput) Conditions() KogitoMgmtConsoleStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleStatus) []KogitoMgmtConsoleStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoMgmtConsoleStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoMgmtConsoleStatusPtrOutput) DeploymentConditions() KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleStatus) []KogitoMgmtConsoleStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoMgmtConsoleStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoMgmtConsoleStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoMgmtConsoleStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Condition is the detailed condition for the resource
type KogitoMgmtConsoleStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ReasonType is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoMgmtConsoleStatusConditionsInput is an input type that accepts KogitoMgmtConsoleStatusConditionsArgs and KogitoMgmtConsoleStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusConditionsInput` via:
//
//          KogitoMgmtConsoleStatusConditionsArgs{...}
type KogitoMgmtConsoleStatusConditionsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusConditionsOutput() KogitoMgmtConsoleStatusConditionsOutput
	ToKogitoMgmtConsoleStatusConditionsOutputWithContext(context.Context) KogitoMgmtConsoleStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoMgmtConsoleStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ReasonType is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoMgmtConsoleStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatusConditions)(nil)).Elem()
}

func (i KogitoMgmtConsoleStatusConditionsArgs) ToKogitoMgmtConsoleStatusConditionsOutput() KogitoMgmtConsoleStatusConditionsOutput {
	return i.ToKogitoMgmtConsoleStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusConditionsArgs) ToKogitoMgmtConsoleStatusConditionsOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusConditionsOutput)
}

// KogitoMgmtConsoleStatusConditionsArrayInput is an input type that accepts KogitoMgmtConsoleStatusConditionsArray and KogitoMgmtConsoleStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusConditionsArrayInput` via:
//
//          KogitoMgmtConsoleStatusConditionsArray{ KogitoMgmtConsoleStatusConditionsArgs{...} }
type KogitoMgmtConsoleStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusConditionsArrayOutput() KogitoMgmtConsoleStatusConditionsArrayOutput
	ToKogitoMgmtConsoleStatusConditionsArrayOutputWithContext(context.Context) KogitoMgmtConsoleStatusConditionsArrayOutput
}

type KogitoMgmtConsoleStatusConditionsArray []KogitoMgmtConsoleStatusConditionsInput

func (KogitoMgmtConsoleStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleStatusConditions)(nil)).Elem()
}

func (i KogitoMgmtConsoleStatusConditionsArray) ToKogitoMgmtConsoleStatusConditionsArrayOutput() KogitoMgmtConsoleStatusConditionsArrayOutput {
	return i.ToKogitoMgmtConsoleStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusConditionsArray) ToKogitoMgmtConsoleStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoMgmtConsoleStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatusConditions)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusConditionsOutput) ToKogitoMgmtConsoleStatusConditionsOutput() KogitoMgmtConsoleStatusConditionsOutput {
	return o
}

func (o KogitoMgmtConsoleStatusConditionsOutput) ToKogitoMgmtConsoleStatusConditionsOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusConditionsOutput {
	return o
}

func (o KogitoMgmtConsoleStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ReasonType is the type of reason
func (o KogitoMgmtConsoleStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoMgmtConsoleStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoMgmtConsoleStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoMgmtConsoleStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleStatusConditions)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusConditionsArrayOutput) ToKogitoMgmtConsoleStatusConditionsArrayOutput() KogitoMgmtConsoleStatusConditionsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleStatusConditionsArrayOutput) ToKogitoMgmtConsoleStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusConditionsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoMgmtConsoleStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoMgmtConsoleStatusConditions {
		return vs[0].([]KogitoMgmtConsoleStatusConditions)[vs[1].(int)]
	}).(KogitoMgmtConsoleStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoMgmtConsoleStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoMgmtConsoleStatusDeploymentConditionsInput is an input type that accepts KogitoMgmtConsoleStatusDeploymentConditionsArgs and KogitoMgmtConsoleStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusDeploymentConditionsInput` via:
//
//          KogitoMgmtConsoleStatusDeploymentConditionsArgs{...}
type KogitoMgmtConsoleStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusDeploymentConditionsOutput() KogitoMgmtConsoleStatusDeploymentConditionsOutput
	ToKogitoMgmtConsoleStatusDeploymentConditionsOutputWithContext(context.Context) KogitoMgmtConsoleStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoMgmtConsoleStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoMgmtConsoleStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoMgmtConsoleStatusDeploymentConditionsArgs) ToKogitoMgmtConsoleStatusDeploymentConditionsOutput() KogitoMgmtConsoleStatusDeploymentConditionsOutput {
	return i.ToKogitoMgmtConsoleStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusDeploymentConditionsArgs) ToKogitoMgmtConsoleStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusDeploymentConditionsOutput)
}

// KogitoMgmtConsoleStatusDeploymentConditionsArrayInput is an input type that accepts KogitoMgmtConsoleStatusDeploymentConditionsArray and KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoMgmtConsoleStatusDeploymentConditionsArrayInput` via:
//
//          KogitoMgmtConsoleStatusDeploymentConditionsArray{ KogitoMgmtConsoleStatusDeploymentConditionsArgs{...} }
type KogitoMgmtConsoleStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutput() KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput
	ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput
}

type KogitoMgmtConsoleStatusDeploymentConditionsArray []KogitoMgmtConsoleStatusDeploymentConditionsInput

func (KogitoMgmtConsoleStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoMgmtConsoleStatusDeploymentConditionsArray) ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutput() KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoMgmtConsoleStatusDeploymentConditionsArray) ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoMgmtConsoleStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoMgmtConsoleStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) ToKogitoMgmtConsoleStatusDeploymentConditionsOutput() KogitoMgmtConsoleStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) ToKogitoMgmtConsoleStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoMgmtConsoleStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoMgmtConsoleStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoMgmtConsoleStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput) ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutput() KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput) ToKogitoMgmtConsoleStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoMgmtConsoleStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoMgmtConsoleStatusDeploymentConditions {
		return vs[0].([]KogitoMgmtConsoleStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoMgmtConsoleStatusDeploymentConditionsOutput)
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
	Spec *KogitoRuntimeSpec `pulumi:"spec"`
	// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
	Status *KogitoRuntimeStatus `pulumi:"status"`
}

// KogitoRuntimeTypeInput is an input type that accepts KogitoRuntimeTypeArgs and KogitoRuntimeTypeOutput values.
// You can construct a concrete instance of `KogitoRuntimeTypeInput` via:
//
//          KogitoRuntimeTypeArgs{...}
type KogitoRuntimeTypeInput interface {
	pulumi.Input

	ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput
	ToKogitoRuntimeTypeOutputWithContext(context.Context) KogitoRuntimeTypeOutput
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
	Spec KogitoRuntimeSpecPtrInput `pulumi:"spec"`
	// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
	Status KogitoRuntimeStatusPtrInput `pulumi:"status"`
}

func (KogitoRuntimeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeType)(nil)).Elem()
}

func (i KogitoRuntimeTypeArgs) ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput {
	return i.ToKogitoRuntimeTypeOutputWithContext(context.Background())
}

func (i KogitoRuntimeTypeArgs) ToKogitoRuntimeTypeOutputWithContext(ctx context.Context) KogitoRuntimeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeTypeOutput)
}

// KogitoRuntime is a custom Kogito service.
type KogitoRuntimeTypeOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeType)(nil)).Elem()
}

func (o KogitoRuntimeTypeOutput) ToKogitoRuntimeTypeOutput() KogitoRuntimeTypeOutput {
	return o
}

func (o KogitoRuntimeTypeOutput) ToKogitoRuntimeTypeOutputWithContext(ctx context.Context) KogitoRuntimeTypeOutput {
	return o
}

func (o KogitoRuntimeTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
func (o KogitoRuntimeTypeOutput) Spec() KogitoRuntimeSpecPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *KogitoRuntimeSpec { return v.Spec }).(KogitoRuntimeSpecPtrOutput)
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
func (o KogitoRuntimeTypeOutput) Status() KogitoRuntimeStatusPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeType) *KogitoRuntimeStatus { return v.Status }).(KogitoRuntimeStatusPtrOutput)
}

type KogitoRuntimeMetadata struct {
}

// KogitoRuntimeMetadataInput is an input type that accepts KogitoRuntimeMetadataArgs and KogitoRuntimeMetadataOutput values.
// You can construct a concrete instance of `KogitoRuntimeMetadataInput` via:
//
//          KogitoRuntimeMetadataArgs{...}
type KogitoRuntimeMetadataInput interface {
	pulumi.Input

	ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput
	ToKogitoRuntimeMetadataOutputWithContext(context.Context) KogitoRuntimeMetadataOutput
}

type KogitoRuntimeMetadataArgs struct {
}

func (KogitoRuntimeMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeMetadata)(nil)).Elem()
}

func (i KogitoRuntimeMetadataArgs) ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput {
	return i.ToKogitoRuntimeMetadataOutputWithContext(context.Background())
}

func (i KogitoRuntimeMetadataArgs) ToKogitoRuntimeMetadataOutputWithContext(ctx context.Context) KogitoRuntimeMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeMetadataOutput)
}

type KogitoRuntimeMetadataOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeMetadata)(nil)).Elem()
}

func (o KogitoRuntimeMetadataOutput) ToKogitoRuntimeMetadataOutput() KogitoRuntimeMetadataOutput {
	return o
}

func (o KogitoRuntimeMetadataOutput) ToKogitoRuntimeMetadataOutputWithContext(ctx context.Context) KogitoRuntimeMetadataOutput {
	return o
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpec struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
	EnableIstio *bool `pulumi:"enableIstio"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs []KogitoRuntimeSpecEnvs `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort *int `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *KogitoRuntimeSpecImage `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan *KogitoRuntimeSpecInfinispan `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka *KogitoRuntimeSpecKafka `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoRuntimeSpecResources `pulumi:"resources"`
	// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
	Runtime *string `pulumi:"runtime"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoRuntimeSpecInput is an input type that accepts KogitoRuntimeSpecArgs and KogitoRuntimeSpecOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInput` via:
//
//          KogitoRuntimeSpecArgs{...}
type KogitoRuntimeSpecInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput
	ToKogitoRuntimeSpecOutputWithContext(context.Context) KogitoRuntimeSpecOutput
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpecArgs struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
	EnableIstio pulumi.BoolPtrInput `pulumi:"enableIstio"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs KogitoRuntimeSpecEnvsArrayInput `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image KogitoRuntimeSpecImagePtrInput `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan KogitoRuntimeSpecInfinispanPtrInput `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka KogitoRuntimeSpecKafkaPtrInput `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoRuntimeSpecResourcesPtrInput `pulumi:"resources"`
	// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoRuntimeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpec)(nil)).Elem()
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput {
	return i.ToKogitoRuntimeSpecOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecOutputWithContext(ctx context.Context) KogitoRuntimeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecOutput)
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return i.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecArgs) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecOutput).ToKogitoRuntimeSpecPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecPtrInput is an input type that accepts KogitoRuntimeSpecArgs, KogitoRuntimeSpecPtr and KogitoRuntimeSpecPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecPtrInput` via:
//
//          KogitoRuntimeSpecArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput
	ToKogitoRuntimeSpecPtrOutputWithContext(context.Context) KogitoRuntimeSpecPtrOutput
}

type kogitoRuntimeSpecPtrType KogitoRuntimeSpecArgs

func KogitoRuntimeSpecPtr(v *KogitoRuntimeSpecArgs) KogitoRuntimeSpecPtrInput {
	return (*kogitoRuntimeSpecPtrType)(v)
}

func (*kogitoRuntimeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpec)(nil)).Elem()
}

func (i *kogitoRuntimeSpecPtrType) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return i.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecPtrType) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecPtrOutput)
}

// KogitoRuntimeSpec defines the desired state of KogitoRuntime.
type KogitoRuntimeSpecOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpec)(nil)).Elem()
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecOutput() KogitoRuntimeSpecOutput {
	return o
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecOutputWithContext(ctx context.Context) KogitoRuntimeSpecOutput {
	return o
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return o.ToKogitoRuntimeSpecPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecOutput) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpec {
		return &v
	}).(KogitoRuntimeSpecPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoRuntimeSpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
func (o KogitoRuntimeSpecOutput) EnableIstio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *bool { return v.EnableIstio }).(pulumi.BoolPtrOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecOutput) Envs() KogitoRuntimeSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) []KogitoRuntimeSpecEnvs { return v.Envs }).(KogitoRuntimeSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoRuntimeSpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoRuntimeSpecOutput) Image() KogitoRuntimeSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecImage { return v.Image }).(KogitoRuntimeSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoRuntimeSpecOutput) Infinispan() KogitoRuntimeSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecInfinispan { return v.Infinispan }).(KogitoRuntimeSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoRuntimeSpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoRuntimeSpecOutput) Kafka() KogitoRuntimeSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecKafka { return v.Kafka }).(KogitoRuntimeSpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoRuntimeSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoRuntimeSpecOutput) Resources() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *KogitoRuntimeSpecResources { return v.Resources }).(KogitoRuntimeSpecResourcesPtrOutput)
}

// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
func (o KogitoRuntimeSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoRuntimeSpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoRuntimeSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpec)(nil)).Elem()
}

func (o KogitoRuntimeSpecPtrOutput) ToKogitoRuntimeSpecPtrOutput() KogitoRuntimeSpecPtrOutput {
	return o
}

func (o KogitoRuntimeSpecPtrOutput) ToKogitoRuntimeSpecPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecPtrOutput {
	return o
}

func (o KogitoRuntimeSpecPtrOutput) Elem() KogitoRuntimeSpecOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) KogitoRuntimeSpec { return *v }).(KogitoRuntimeSpecOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoRuntimeSpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
func (o KogitoRuntimeSpecPtrOutput) EnableIstio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIstio
	}).(pulumi.BoolPtrOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecPtrOutput) Envs() KogitoRuntimeSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) []KogitoRuntimeSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoRuntimeSpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoRuntimeSpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoRuntimeSpecPtrOutput) Image() KogitoRuntimeSpecImagePtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(KogitoRuntimeSpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoRuntimeSpecPtrOutput) Infinispan() KogitoRuntimeSpecInfinispanPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecInfinispan {
		if v == nil {
			return nil
		}
		return v.Infinispan
	}).(KogitoRuntimeSpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoRuntimeSpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoRuntimeSpecPtrOutput) Kafka() KogitoRuntimeSpecKafkaPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecKafka {
		if v == nil {
			return nil
		}
		return v.Kafka
	}).(KogitoRuntimeSpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoRuntimeSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoRuntimeSpecPtrOutput) Resources() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *KogitoRuntimeSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoRuntimeSpecResourcesPtrOutput)
}

// The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
func (o KogitoRuntimeSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoRuntimeSpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabels struct {
}

// KogitoRuntimeSpecDeploymentLabelsInput is an input type that accepts KogitoRuntimeSpecDeploymentLabelsArgs and KogitoRuntimeSpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecDeploymentLabelsInput` via:
//
//          KogitoRuntimeSpecDeploymentLabelsArgs{...}
type KogitoRuntimeSpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput
	ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(context.Context) KogitoRuntimeSpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabelsArgs struct {
}

func (KogitoRuntimeSpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoRuntimeSpecDeploymentLabelsArgs) ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput {
	return i.ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecDeploymentLabelsArgs) ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoRuntimeSpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoRuntimeSpecDeploymentLabelsOutput) ToKogitoRuntimeSpecDeploymentLabelsOutput() KogitoRuntimeSpecDeploymentLabelsOutput {
	return o
}

func (o KogitoRuntimeSpecDeploymentLabelsOutput) ToKogitoRuntimeSpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoRuntimeSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoRuntimeSpecEnvsInput is an input type that accepts KogitoRuntimeSpecEnvsArgs and KogitoRuntimeSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsInput` via:
//
//          KogitoRuntimeSpecEnvsArgs{...}
type KogitoRuntimeSpecEnvsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsOutput() KogitoRuntimeSpecEnvsOutput
	ToKogitoRuntimeSpecEnvsOutputWithContext(context.Context) KogitoRuntimeSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoRuntimeSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoRuntimeSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvs)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsArgs) ToKogitoRuntimeSpecEnvsOutput() KogitoRuntimeSpecEnvsOutput {
	return i.ToKogitoRuntimeSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsArgs) ToKogitoRuntimeSpecEnvsOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsOutput)
}

// KogitoRuntimeSpecEnvsArrayInput is an input type that accepts KogitoRuntimeSpecEnvsArray and KogitoRuntimeSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsArrayInput` via:
//
//          KogitoRuntimeSpecEnvsArray{ KogitoRuntimeSpecEnvsArgs{...} }
type KogitoRuntimeSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsArrayOutput() KogitoRuntimeSpecEnvsArrayOutput
	ToKogitoRuntimeSpecEnvsArrayOutputWithContext(context.Context) KogitoRuntimeSpecEnvsArrayOutput
}

type KogitoRuntimeSpecEnvsArray []KogitoRuntimeSpecEnvsInput

func (KogitoRuntimeSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeSpecEnvs)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsArray) ToKogitoRuntimeSpecEnvsArrayOutput() KogitoRuntimeSpecEnvsArrayOutput {
	return i.ToKogitoRuntimeSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsArray) ToKogitoRuntimeSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoRuntimeSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvs)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsOutput) ToKogitoRuntimeSpecEnvsOutput() KogitoRuntimeSpecEnvsOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsOutput) ToKogitoRuntimeSpecEnvsOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoRuntimeSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoRuntimeSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoRuntimeSpecEnvsOutput) ValueFrom() KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvs) *KogitoRuntimeSpecEnvsValueFrom { return v.ValueFrom }).(KogitoRuntimeSpecEnvsValueFromPtrOutput)
}

type KogitoRuntimeSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeSpecEnvs)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsArrayOutput) ToKogitoRuntimeSpecEnvsArrayOutput() KogitoRuntimeSpecEnvsArrayOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsArrayOutput) ToKogitoRuntimeSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsArrayOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeSpecEnvs {
		return vs[0].([]KogitoRuntimeSpecEnvs)[vs[1].(int)]
	}).(KogitoRuntimeSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoRuntimeSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoRuntimeSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoRuntimeSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoRuntimeSpecEnvsValueFromInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromArgs and KogitoRuntimeSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromArgs{...}
type KogitoRuntimeSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromOutput() KogitoRuntimeSpecEnvsValueFromOutput
	ToKogitoRuntimeSpecEnvsValueFromOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoRuntimeSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoRuntimeSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromArgs) ToKogitoRuntimeSpecEnvsValueFromOutput() KogitoRuntimeSpecEnvsValueFromOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromArgs) ToKogitoRuntimeSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromArgs) ToKogitoRuntimeSpecEnvsValueFromPtrOutput() KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromArgs) ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromOutput).ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromArgs, KogitoRuntimeSpecEnvsValueFromPtr and KogitoRuntimeSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromPtrOutput() KogitoRuntimeSpecEnvsValueFromPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromPtrType KogitoRuntimeSpecEnvsValueFromArgs

func KogitoRuntimeSpecEnvsValueFromPtr(v *KogitoRuntimeSpecEnvsValueFromArgs) KogitoRuntimeSpecEnvsValueFromPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromPtrType) ToKogitoRuntimeSpecEnvsValueFromPtrOutput() KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromPtrType) ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoRuntimeSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromOutput) ToKogitoRuntimeSpecEnvsValueFromOutput() KogitoRuntimeSpecEnvsValueFromOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromOutput) ToKogitoRuntimeSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromOutput) ToKogitoRuntimeSpecEnvsValueFromPtrOutput() KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromOutput) ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFrom {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoRuntimeSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoRuntimeSpecEnvsValueFromOutput) FieldRef() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromFieldRef { return v.FieldRef }).(KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoRuntimeSpecEnvsValueFromOutput) ResourceFieldRef() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoRuntimeSpecEnvsValueFromOutput) SecretKeyRef() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) ToKogitoRuntimeSpecEnvsValueFromPtrOutput() KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) ToKogitoRuntimeSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFrom) KogitoRuntimeSpecEnvsValueFrom { return *v }).(KogitoRuntimeSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) FieldRef() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoRuntimeSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFrom) *KogitoRuntimeSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs and KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs, KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtr and KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrType KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefArgs) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoRuntimeSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromFieldRefArgs and KogitoRuntimeSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromFieldRefArgs{...}
type KogitoRuntimeSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromFieldRefOutput() KogitoRuntimeSpecEnvsValueFromFieldRefOutput
	ToKogitoRuntimeSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoRuntimeSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromFieldRefOutput() KogitoRuntimeSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromFieldRefOutput).ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromFieldRefArgs, KogitoRuntimeSpecEnvsValueFromFieldRefPtr and KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromFieldRefPtrType KogitoRuntimeSpecEnvsValueFromFieldRefArgs

func KogitoRuntimeSpecEnvsValueFromFieldRefPtr(v *KogitoRuntimeSpecEnvsValueFromFieldRefArgs) KogitoRuntimeSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromFieldRefPtrType) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromFieldRefPtrType) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoRuntimeSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefOutput() KogitoRuntimeSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromFieldRef) *KogitoRuntimeSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoRuntimeSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromFieldRef) KogitoRuntimeSpecEnvsValueFromFieldRef { return *v }).(KogitoRuntimeSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoRuntimeSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs and KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput).ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs, KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtr and KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrType KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs

func KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtr(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRefArgs) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *KogitoRuntimeSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRef) KogitoRuntimeSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor) *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor) KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoRuntimeSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs and KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoRuntimeSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput).ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs, KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtr and KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrType KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs

func KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtr(v *KogitoRuntimeSpecEnvsValueFromSecretKeyRefArgs) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *KogitoRuntimeSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromSecretKeyRef) KogitoRuntimeSpecEnvsValueFromSecretKeyRef {
		return *v
	}).(KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoRuntimeSpecImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoRuntimeSpecImageInput is an input type that accepts KogitoRuntimeSpecImageArgs and KogitoRuntimeSpecImageOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecImageInput` via:
//
//          KogitoRuntimeSpecImageArgs{...}
type KogitoRuntimeSpecImageInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecImageOutput() KogitoRuntimeSpecImageOutput
	ToKogitoRuntimeSpecImageOutputWithContext(context.Context) KogitoRuntimeSpecImageOutput
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoRuntimeSpecImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoRuntimeSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecImage)(nil)).Elem()
}

func (i KogitoRuntimeSpecImageArgs) ToKogitoRuntimeSpecImageOutput() KogitoRuntimeSpecImageOutput {
	return i.ToKogitoRuntimeSpecImageOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecImageArgs) ToKogitoRuntimeSpecImageOutputWithContext(ctx context.Context) KogitoRuntimeSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecImageOutput)
}

func (i KogitoRuntimeSpecImageArgs) ToKogitoRuntimeSpecImagePtrOutput() KogitoRuntimeSpecImagePtrOutput {
	return i.ToKogitoRuntimeSpecImagePtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecImageArgs) ToKogitoRuntimeSpecImagePtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecImageOutput).ToKogitoRuntimeSpecImagePtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecImagePtrInput is an input type that accepts KogitoRuntimeSpecImageArgs, KogitoRuntimeSpecImagePtr and KogitoRuntimeSpecImagePtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecImagePtrInput` via:
//
//          KogitoRuntimeSpecImageArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecImagePtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecImagePtrOutput() KogitoRuntimeSpecImagePtrOutput
	ToKogitoRuntimeSpecImagePtrOutputWithContext(context.Context) KogitoRuntimeSpecImagePtrOutput
}

type kogitoRuntimeSpecImagePtrType KogitoRuntimeSpecImageArgs

func KogitoRuntimeSpecImagePtr(v *KogitoRuntimeSpecImageArgs) KogitoRuntimeSpecImagePtrInput {
	return (*kogitoRuntimeSpecImagePtrType)(v)
}

func (*kogitoRuntimeSpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecImage)(nil)).Elem()
}

func (i *kogitoRuntimeSpecImagePtrType) ToKogitoRuntimeSpecImagePtrOutput() KogitoRuntimeSpecImagePtrOutput {
	return i.ToKogitoRuntimeSpecImagePtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecImagePtrType) ToKogitoRuntimeSpecImagePtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecImagePtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoRuntimeSpecImageOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecImage)(nil)).Elem()
}

func (o KogitoRuntimeSpecImageOutput) ToKogitoRuntimeSpecImageOutput() KogitoRuntimeSpecImageOutput {
	return o
}

func (o KogitoRuntimeSpecImageOutput) ToKogitoRuntimeSpecImageOutputWithContext(ctx context.Context) KogitoRuntimeSpecImageOutput {
	return o
}

func (o KogitoRuntimeSpecImageOutput) ToKogitoRuntimeSpecImagePtrOutput() KogitoRuntimeSpecImagePtrOutput {
	return o.ToKogitoRuntimeSpecImagePtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecImageOutput) ToKogitoRuntimeSpecImagePtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecImagePtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecImage) *KogitoRuntimeSpecImage {
		return &v
	}).(KogitoRuntimeSpecImagePtrOutput)
}
func (o KogitoRuntimeSpecImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoRuntimeSpecImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecImage)(nil)).Elem()
}

func (o KogitoRuntimeSpecImagePtrOutput) ToKogitoRuntimeSpecImagePtrOutput() KogitoRuntimeSpecImagePtrOutput {
	return o
}

func (o KogitoRuntimeSpecImagePtrOutput) ToKogitoRuntimeSpecImagePtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecImagePtrOutput {
	return o
}

func (o KogitoRuntimeSpecImagePtrOutput) Elem() KogitoRuntimeSpecImageOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecImage) KogitoRuntimeSpecImage { return *v }).(KogitoRuntimeSpecImageOutput)
}

func (o KogitoRuntimeSpecImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeSpecImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoRuntimeSpecInfinispan struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm *string `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials *KogitoRuntimeSpecInfinispanCredentials `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism *string `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri *string `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth *bool `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoRuntimeSpecInfinispanInput is an input type that accepts KogitoRuntimeSpecInfinispanArgs and KogitoRuntimeSpecInfinispanOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInfinispanInput` via:
//
//          KogitoRuntimeSpecInfinispanArgs{...}
type KogitoRuntimeSpecInfinispanInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecInfinispanOutput() KogitoRuntimeSpecInfinispanOutput
	ToKogitoRuntimeSpecInfinispanOutputWithContext(context.Context) KogitoRuntimeSpecInfinispanOutput
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoRuntimeSpecInfinispanArgs struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm pulumi.StringPtrInput `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials KogitoRuntimeSpecInfinispanCredentialsPtrInput `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism pulumi.StringPtrInput `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth pulumi.BoolPtrInput `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoRuntimeSpecInfinispanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecInfinispan)(nil)).Elem()
}

func (i KogitoRuntimeSpecInfinispanArgs) ToKogitoRuntimeSpecInfinispanOutput() KogitoRuntimeSpecInfinispanOutput {
	return i.ToKogitoRuntimeSpecInfinispanOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecInfinispanArgs) ToKogitoRuntimeSpecInfinispanOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanOutput)
}

func (i KogitoRuntimeSpecInfinispanArgs) ToKogitoRuntimeSpecInfinispanPtrOutput() KogitoRuntimeSpecInfinispanPtrOutput {
	return i.ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecInfinispanArgs) ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanOutput).ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecInfinispanPtrInput is an input type that accepts KogitoRuntimeSpecInfinispanArgs, KogitoRuntimeSpecInfinispanPtr and KogitoRuntimeSpecInfinispanPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInfinispanPtrInput` via:
//
//          KogitoRuntimeSpecInfinispanArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecInfinispanPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecInfinispanPtrOutput() KogitoRuntimeSpecInfinispanPtrOutput
	ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(context.Context) KogitoRuntimeSpecInfinispanPtrOutput
}

type kogitoRuntimeSpecInfinispanPtrType KogitoRuntimeSpecInfinispanArgs

func KogitoRuntimeSpecInfinispanPtr(v *KogitoRuntimeSpecInfinispanArgs) KogitoRuntimeSpecInfinispanPtrInput {
	return (*kogitoRuntimeSpecInfinispanPtrType)(v)
}

func (*kogitoRuntimeSpecInfinispanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecInfinispan)(nil)).Elem()
}

func (i *kogitoRuntimeSpecInfinispanPtrType) ToKogitoRuntimeSpecInfinispanPtrOutput() KogitoRuntimeSpecInfinispanPtrOutput {
	return i.ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecInfinispanPtrType) ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoRuntimeSpecInfinispanOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecInfinispanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecInfinispan)(nil)).Elem()
}

func (o KogitoRuntimeSpecInfinispanOutput) ToKogitoRuntimeSpecInfinispanOutput() KogitoRuntimeSpecInfinispanOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanOutput) ToKogitoRuntimeSpecInfinispanOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanOutput) ToKogitoRuntimeSpecInfinispanPtrOutput() KogitoRuntimeSpecInfinispanPtrOutput {
	return o.ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecInfinispanOutput) ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *KogitoRuntimeSpecInfinispan {
		return &v
	}).(KogitoRuntimeSpecInfinispanPtrOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoRuntimeSpecInfinispanOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *string { return v.AuthRealm }).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoRuntimeSpecInfinispanOutput) Credentials() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *KogitoRuntimeSpecInfinispanCredentials { return v.Credentials }).(KogitoRuntimeSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoRuntimeSpecInfinispanOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *string { return v.SaslMechanism }).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoRuntimeSpecInfinispanOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoRuntimeSpecInfinispanOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *bool { return v.UseAuth }).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoRuntimeSpecInfinispanOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispan) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecInfinispanPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecInfinispanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecInfinispan)(nil)).Elem()
}

func (o KogitoRuntimeSpecInfinispanPtrOutput) ToKogitoRuntimeSpecInfinispanPtrOutput() KogitoRuntimeSpecInfinispanPtrOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanPtrOutput) ToKogitoRuntimeSpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanPtrOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanPtrOutput) Elem() KogitoRuntimeSpecInfinispanOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) KogitoRuntimeSpecInfinispan { return *v }).(KogitoRuntimeSpecInfinispanOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoRuntimeSpecInfinispanPtrOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.AuthRealm
	}).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoRuntimeSpecInfinispanPtrOutput) Credentials() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *KogitoRuntimeSpecInfinispanCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(KogitoRuntimeSpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoRuntimeSpecInfinispanPtrOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.SaslMechanism
	}).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoRuntimeSpecInfinispanPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoRuntimeSpecInfinispanPtrOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseAuth
	}).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoRuntimeSpecInfinispanPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoRuntimeSpecInfinispanCredentials struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey *string `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName *string `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey *string `pulumi:"usernameKey"`
}

// KogitoRuntimeSpecInfinispanCredentialsInput is an input type that accepts KogitoRuntimeSpecInfinispanCredentialsArgs and KogitoRuntimeSpecInfinispanCredentialsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInfinispanCredentialsInput` via:
//
//          KogitoRuntimeSpecInfinispanCredentialsArgs{...}
type KogitoRuntimeSpecInfinispanCredentialsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecInfinispanCredentialsOutput() KogitoRuntimeSpecInfinispanCredentialsOutput
	ToKogitoRuntimeSpecInfinispanCredentialsOutputWithContext(context.Context) KogitoRuntimeSpecInfinispanCredentialsOutput
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoRuntimeSpecInfinispanCredentialsArgs struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey pulumi.StringPtrInput `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey pulumi.StringPtrInput `pulumi:"usernameKey"`
}

func (KogitoRuntimeSpecInfinispanCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecInfinispanCredentials)(nil)).Elem()
}

func (i KogitoRuntimeSpecInfinispanCredentialsArgs) ToKogitoRuntimeSpecInfinispanCredentialsOutput() KogitoRuntimeSpecInfinispanCredentialsOutput {
	return i.ToKogitoRuntimeSpecInfinispanCredentialsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecInfinispanCredentialsArgs) ToKogitoRuntimeSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanCredentialsOutput)
}

func (i KogitoRuntimeSpecInfinispanCredentialsArgs) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutput() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecInfinispanCredentialsArgs) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanCredentialsOutput).ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecInfinispanCredentialsPtrInput is an input type that accepts KogitoRuntimeSpecInfinispanCredentialsArgs, KogitoRuntimeSpecInfinispanCredentialsPtr and KogitoRuntimeSpecInfinispanCredentialsPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecInfinispanCredentialsPtrInput` via:
//
//          KogitoRuntimeSpecInfinispanCredentialsArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecInfinispanCredentialsPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecInfinispanCredentialsPtrOutput() KogitoRuntimeSpecInfinispanCredentialsPtrOutput
	ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(context.Context) KogitoRuntimeSpecInfinispanCredentialsPtrOutput
}

type kogitoRuntimeSpecInfinispanCredentialsPtrType KogitoRuntimeSpecInfinispanCredentialsArgs

func KogitoRuntimeSpecInfinispanCredentialsPtr(v *KogitoRuntimeSpecInfinispanCredentialsArgs) KogitoRuntimeSpecInfinispanCredentialsPtrInput {
	return (*kogitoRuntimeSpecInfinispanCredentialsPtrType)(v)
}

func (*kogitoRuntimeSpecInfinispanCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecInfinispanCredentials)(nil)).Elem()
}

func (i *kogitoRuntimeSpecInfinispanCredentialsPtrType) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutput() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecInfinispanCredentialsPtrType) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecInfinispanCredentialsPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoRuntimeSpecInfinispanCredentialsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecInfinispanCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoRuntimeSpecInfinispanCredentialsOutput) ToKogitoRuntimeSpecInfinispanCredentialsOutput() KogitoRuntimeSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanCredentialsOutput) ToKogitoRuntimeSpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanCredentialsOutput) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutput() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o.ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecInfinispanCredentialsOutput) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispanCredentials) *KogitoRuntimeSpecInfinispanCredentials {
		return &v
	}).(KogitoRuntimeSpecInfinispanCredentialsPtrOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoRuntimeSpecInfinispanCredentialsOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispanCredentials) *string { return v.PasswordKey }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoRuntimeSpecInfinispanCredentialsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispanCredentials) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoRuntimeSpecInfinispanCredentialsOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecInfinispanCredentials) *string { return v.UsernameKey }).(pulumi.StringPtrOutput)
}

type KogitoRuntimeSpecInfinispanCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecInfinispanCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutput() KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) ToKogitoRuntimeSpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) Elem() KogitoRuntimeSpecInfinispanCredentialsOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispanCredentials) KogitoRuntimeSpecInfinispanCredentials { return *v }).(KogitoRuntimeSpecInfinispanCredentialsOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordKey
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoRuntimeSpecInfinispanCredentialsPtrOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.UsernameKey
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoRuntimeSpecKafka struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI *string `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance *string `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoRuntimeSpecKafkaInput is an input type that accepts KogitoRuntimeSpecKafkaArgs and KogitoRuntimeSpecKafkaOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecKafkaInput` via:
//
//          KogitoRuntimeSpecKafkaArgs{...}
type KogitoRuntimeSpecKafkaInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecKafkaOutput() KogitoRuntimeSpecKafkaOutput
	ToKogitoRuntimeSpecKafkaOutputWithContext(context.Context) KogitoRuntimeSpecKafkaOutput
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoRuntimeSpecKafkaArgs struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoRuntimeSpecKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecKafka)(nil)).Elem()
}

func (i KogitoRuntimeSpecKafkaArgs) ToKogitoRuntimeSpecKafkaOutput() KogitoRuntimeSpecKafkaOutput {
	return i.ToKogitoRuntimeSpecKafkaOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecKafkaArgs) ToKogitoRuntimeSpecKafkaOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecKafkaOutput)
}

func (i KogitoRuntimeSpecKafkaArgs) ToKogitoRuntimeSpecKafkaPtrOutput() KogitoRuntimeSpecKafkaPtrOutput {
	return i.ToKogitoRuntimeSpecKafkaPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecKafkaArgs) ToKogitoRuntimeSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecKafkaOutput).ToKogitoRuntimeSpecKafkaPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecKafkaPtrInput is an input type that accepts KogitoRuntimeSpecKafkaArgs, KogitoRuntimeSpecKafkaPtr and KogitoRuntimeSpecKafkaPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecKafkaPtrInput` via:
//
//          KogitoRuntimeSpecKafkaArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecKafkaPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecKafkaPtrOutput() KogitoRuntimeSpecKafkaPtrOutput
	ToKogitoRuntimeSpecKafkaPtrOutputWithContext(context.Context) KogitoRuntimeSpecKafkaPtrOutput
}

type kogitoRuntimeSpecKafkaPtrType KogitoRuntimeSpecKafkaArgs

func KogitoRuntimeSpecKafkaPtr(v *KogitoRuntimeSpecKafkaArgs) KogitoRuntimeSpecKafkaPtrInput {
	return (*kogitoRuntimeSpecKafkaPtrType)(v)
}

func (*kogitoRuntimeSpecKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecKafka)(nil)).Elem()
}

func (i *kogitoRuntimeSpecKafkaPtrType) ToKogitoRuntimeSpecKafkaPtrOutput() KogitoRuntimeSpecKafkaPtrOutput {
	return i.ToKogitoRuntimeSpecKafkaPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecKafkaPtrType) ToKogitoRuntimeSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecKafkaPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoRuntimeSpecKafkaOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecKafka)(nil)).Elem()
}

func (o KogitoRuntimeSpecKafkaOutput) ToKogitoRuntimeSpecKafkaOutput() KogitoRuntimeSpecKafkaOutput {
	return o
}

func (o KogitoRuntimeSpecKafkaOutput) ToKogitoRuntimeSpecKafkaOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaOutput {
	return o
}

func (o KogitoRuntimeSpecKafkaOutput) ToKogitoRuntimeSpecKafkaPtrOutput() KogitoRuntimeSpecKafkaPtrOutput {
	return o.ToKogitoRuntimeSpecKafkaPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecKafkaOutput) ToKogitoRuntimeSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecKafka) *KogitoRuntimeSpecKafka {
		return &v
	}).(KogitoRuntimeSpecKafkaPtrOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoRuntimeSpecKafkaOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecKafka) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoRuntimeSpecKafkaOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecKafka) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoRuntimeSpecKafkaOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecKafka) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoRuntimeSpecKafkaPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecKafka)(nil)).Elem()
}

func (o KogitoRuntimeSpecKafkaPtrOutput) ToKogitoRuntimeSpecKafkaPtrOutput() KogitoRuntimeSpecKafkaPtrOutput {
	return o
}

func (o KogitoRuntimeSpecKafkaPtrOutput) ToKogitoRuntimeSpecKafkaPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecKafkaPtrOutput {
	return o
}

func (o KogitoRuntimeSpecKafkaPtrOutput) Elem() KogitoRuntimeSpecKafkaOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecKafka) KogitoRuntimeSpecKafka { return *v }).(KogitoRuntimeSpecKafkaOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoRuntimeSpecKafkaPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoRuntimeSpecKafkaPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoRuntimeSpecKafkaPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecKafka) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoRuntimeSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoRuntimeSpecResourcesRequests `pulumi:"requests"`
}

// KogitoRuntimeSpecResourcesInput is an input type that accepts KogitoRuntimeSpecResourcesArgs and KogitoRuntimeSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesInput` via:
//
//          KogitoRuntimeSpecResourcesArgs{...}
type KogitoRuntimeSpecResourcesInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput
	ToKogitoRuntimeSpecResourcesOutputWithContext(context.Context) KogitoRuntimeSpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoRuntimeSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoRuntimeSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoRuntimeSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResources)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput {
	return i.ToKogitoRuntimeSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesOutput)
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return i.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesArgs) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesOutput).ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoRuntimeSpecResourcesPtrInput is an input type that accepts KogitoRuntimeSpecResourcesArgs, KogitoRuntimeSpecResourcesPtr and KogitoRuntimeSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesPtrInput` via:
//
//          KogitoRuntimeSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput
	ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Context) KogitoRuntimeSpecResourcesPtrOutput
}

type kogitoRuntimeSpecResourcesPtrType KogitoRuntimeSpecResourcesArgs

func KogitoRuntimeSpecResourcesPtr(v *KogitoRuntimeSpecResourcesArgs) KogitoRuntimeSpecResourcesPtrInput {
	return (*kogitoRuntimeSpecResourcesPtrType)(v)
}

func (*kogitoRuntimeSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecResources)(nil)).Elem()
}

func (i *kogitoRuntimeSpecResourcesPtrType) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return i.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeSpecResourcesPtrType) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoRuntimeSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResources)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesOutput() KogitoRuntimeSpecResourcesOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return o.ToKogitoRuntimeSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeSpecResourcesOutput) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) *KogitoRuntimeSpecResources {
		return &v
	}).(KogitoRuntimeSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesOutput) Limits() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesLimits { return v.Limits }).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesOutput) Requests() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesRequests { return v.Requests }).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeSpecResources)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesPtrOutput) ToKogitoRuntimeSpecResourcesPtrOutput() KogitoRuntimeSpecResourcesPtrOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesPtrOutput) ToKogitoRuntimeSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesPtrOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesPtrOutput) Elem() KogitoRuntimeSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) KogitoRuntimeSpecResources { return *v }).(KogitoRuntimeSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesPtrOutput) Limits() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoRuntimeSpecResourcesPtrOutput) Requests() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoRuntimeSpecResources) map[string]KogitoRuntimeSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesLimits struct {
}

// KogitoRuntimeSpecResourcesLimitsInput is an input type that accepts KogitoRuntimeSpecResourcesLimitsArgs and KogitoRuntimeSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesLimitsInput` via:
//
//          KogitoRuntimeSpecResourcesLimitsArgs{...}
type KogitoRuntimeSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput
	ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(context.Context) KogitoRuntimeSpecResourcesLimitsOutput
}

type KogitoRuntimeSpecResourcesLimitsArgs struct {
}

func (KogitoRuntimeSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesLimitsArgs) ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput {
	return i.ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesLimitsArgs) ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesLimitsOutput)
}

// KogitoRuntimeSpecResourcesLimitsMapInput is an input type that accepts KogitoRuntimeSpecResourcesLimitsMap and KogitoRuntimeSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesLimitsMapInput` via:
//
//          KogitoRuntimeSpecResourcesLimitsMap{ "key": KogitoRuntimeSpecResourcesLimitsArgs{...} }
type KogitoRuntimeSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput
	ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput
}

type KogitoRuntimeSpecResourcesLimitsMap map[string]KogitoRuntimeSpecResourcesLimitsInput

func (KogitoRuntimeSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesLimitsMap) ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return i.ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesLimitsMap) ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesLimitsMapOutput)
}

type KogitoRuntimeSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesLimitsOutput) ToKogitoRuntimeSpecResourcesLimitsOutput() KogitoRuntimeSpecResourcesLimitsOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsOutput) ToKogitoRuntimeSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsOutput {
	return o
}

type KogitoRuntimeSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) ToKogitoRuntimeSpecResourcesLimitsMapOutput() KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) ToKogitoRuntimeSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoRuntimeSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoRuntimeSpecResourcesLimits {
		return vs[0].(map[string]KogitoRuntimeSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoRuntimeSpecResourcesLimitsOutput)
}

type KogitoRuntimeSpecResourcesRequests struct {
}

// KogitoRuntimeSpecResourcesRequestsInput is an input type that accepts KogitoRuntimeSpecResourcesRequestsArgs and KogitoRuntimeSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesRequestsInput` via:
//
//          KogitoRuntimeSpecResourcesRequestsArgs{...}
type KogitoRuntimeSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput
	ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(context.Context) KogitoRuntimeSpecResourcesRequestsOutput
}

type KogitoRuntimeSpecResourcesRequestsArgs struct {
}

func (KogitoRuntimeSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesRequestsArgs) ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput {
	return i.ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesRequestsArgs) ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesRequestsOutput)
}

// KogitoRuntimeSpecResourcesRequestsMapInput is an input type that accepts KogitoRuntimeSpecResourcesRequestsMap and KogitoRuntimeSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecResourcesRequestsMapInput` via:
//
//          KogitoRuntimeSpecResourcesRequestsMap{ "key": KogitoRuntimeSpecResourcesRequestsArgs{...} }
type KogitoRuntimeSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput
	ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput
}

type KogitoRuntimeSpecResourcesRequestsMap map[string]KogitoRuntimeSpecResourcesRequestsInput

func (KogitoRuntimeSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoRuntimeSpecResourcesRequestsMap) ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return i.ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecResourcesRequestsMap) ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecResourcesRequestsMapOutput)
}

type KogitoRuntimeSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesRequestsOutput) ToKogitoRuntimeSpecResourcesRequestsOutput() KogitoRuntimeSpecResourcesRequestsOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsOutput) ToKogitoRuntimeSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsOutput {
	return o
}

type KogitoRuntimeSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoRuntimeSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) ToKogitoRuntimeSpecResourcesRequestsMapOutput() KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) ToKogitoRuntimeSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoRuntimeSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoRuntimeSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoRuntimeSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoRuntimeSpecResourcesRequests {
		return vs[0].(map[string]KogitoRuntimeSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoRuntimeSpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabels struct {
}

// KogitoRuntimeSpecServiceLabelsInput is an input type that accepts KogitoRuntimeSpecServiceLabelsArgs and KogitoRuntimeSpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoRuntimeSpecServiceLabelsInput` via:
//
//          KogitoRuntimeSpecServiceLabelsArgs{...}
type KogitoRuntimeSpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput
	ToKogitoRuntimeSpecServiceLabelsOutputWithContext(context.Context) KogitoRuntimeSpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabelsArgs struct {
}

func (KogitoRuntimeSpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecServiceLabels)(nil)).Elem()
}

func (i KogitoRuntimeSpecServiceLabelsArgs) ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput {
	return i.ToKogitoRuntimeSpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoRuntimeSpecServiceLabelsArgs) ToKogitoRuntimeSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeSpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoRuntimeSpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeSpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeSpecServiceLabels)(nil)).Elem()
}

func (o KogitoRuntimeSpecServiceLabelsOutput) ToKogitoRuntimeSpecServiceLabelsOutput() KogitoRuntimeSpecServiceLabelsOutput {
	return o
}

func (o KogitoRuntimeSpecServiceLabelsOutput) ToKogitoRuntimeSpecServiceLabelsOutputWithContext(ctx context.Context) KogitoRuntimeSpecServiceLabelsOutput {
	return o
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatus struct {
	// History of conditions for the resource
	Conditions []KogitoRuntimeStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoRuntimeStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoRuntimeStatusInput is an input type that accepts KogitoRuntimeStatusArgs and KogitoRuntimeStatusOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusInput` via:
//
//          KogitoRuntimeStatusArgs{...}
type KogitoRuntimeStatusInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput
	ToKogitoRuntimeStatusOutputWithContext(context.Context) KogitoRuntimeStatusOutput
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatusArgs struct {
	// History of conditions for the resource
	Conditions KogitoRuntimeStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoRuntimeStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoRuntimeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatus)(nil)).Elem()
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput {
	return i.ToKogitoRuntimeStatusOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusOutputWithContext(ctx context.Context) KogitoRuntimeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusOutput)
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return i.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusArgs) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusOutput).ToKogitoRuntimeStatusPtrOutputWithContext(ctx)
}

// KogitoRuntimeStatusPtrInput is an input type that accepts KogitoRuntimeStatusArgs, KogitoRuntimeStatusPtr and KogitoRuntimeStatusPtrOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusPtrInput` via:
//
//          KogitoRuntimeStatusArgs{...}
//
//  or:
//
//          nil
type KogitoRuntimeStatusPtrInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput
	ToKogitoRuntimeStatusPtrOutputWithContext(context.Context) KogitoRuntimeStatusPtrOutput
}

type kogitoRuntimeStatusPtrType KogitoRuntimeStatusArgs

func KogitoRuntimeStatusPtr(v *KogitoRuntimeStatusArgs) KogitoRuntimeStatusPtrInput {
	return (*kogitoRuntimeStatusPtrType)(v)
}

func (*kogitoRuntimeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatus)(nil)).Elem()
}

func (i *kogitoRuntimeStatusPtrType) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return i.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoRuntimeStatusPtrType) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusPtrOutput)
}

// KogitoRuntimeStatus defines the observed state of KogitoRuntime.
type KogitoRuntimeStatusOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatus)(nil)).Elem()
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusOutput() KogitoRuntimeStatusOutput {
	return o
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusOutputWithContext(ctx context.Context) KogitoRuntimeStatusOutput {
	return o
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return o.ToKogitoRuntimeStatusPtrOutputWithContext(context.Background())
}

func (o KogitoRuntimeStatusOutput) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *KogitoRuntimeStatus {
		return &v
	}).(KogitoRuntimeStatusPtrOutput)
}

// History of conditions for the resource
func (o KogitoRuntimeStatusOutput) Conditions() KogitoRuntimeStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) []KogitoRuntimeStatusConditions { return v.Conditions }).(KogitoRuntimeStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoRuntimeStatusOutput) DeploymentConditions() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) []KogitoRuntimeStatusDeploymentConditions { return v.DeploymentConditions }).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoRuntimeStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoRuntimeStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoRuntimeStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoRuntimeStatus)(nil)).Elem()
}

func (o KogitoRuntimeStatusPtrOutput) ToKogitoRuntimeStatusPtrOutput() KogitoRuntimeStatusPtrOutput {
	return o
}

func (o KogitoRuntimeStatusPtrOutput) ToKogitoRuntimeStatusPtrOutputWithContext(ctx context.Context) KogitoRuntimeStatusPtrOutput {
	return o
}

func (o KogitoRuntimeStatusPtrOutput) Elem() KogitoRuntimeStatusOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) KogitoRuntimeStatus { return *v }).(KogitoRuntimeStatusOutput)
}

// History of conditions for the resource
func (o KogitoRuntimeStatusPtrOutput) Conditions() KogitoRuntimeStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) []KogitoRuntimeStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoRuntimeStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoRuntimeStatusPtrOutput) DeploymentConditions() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) []KogitoRuntimeStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoRuntimeStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoRuntimeStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoRuntimeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ReasonType is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoRuntimeStatusConditionsInput is an input type that accepts KogitoRuntimeStatusConditionsArgs and KogitoRuntimeStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusConditionsInput` via:
//
//          KogitoRuntimeStatusConditionsArgs{...}
type KogitoRuntimeStatusConditionsInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput
	ToKogitoRuntimeStatusConditionsOutputWithContext(context.Context) KogitoRuntimeStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ReasonType is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoRuntimeStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusConditionsArgs) ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput {
	return i.ToKogitoRuntimeStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusConditionsArgs) ToKogitoRuntimeStatusConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusConditionsOutput)
}

// KogitoRuntimeStatusConditionsArrayInput is an input type that accepts KogitoRuntimeStatusConditionsArray and KogitoRuntimeStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusConditionsArrayInput` via:
//
//          KogitoRuntimeStatusConditionsArray{ KogitoRuntimeStatusConditionsArgs{...} }
type KogitoRuntimeStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput
	ToKogitoRuntimeStatusConditionsArrayOutputWithContext(context.Context) KogitoRuntimeStatusConditionsArrayOutput
}

type KogitoRuntimeStatusConditionsArray []KogitoRuntimeStatusConditionsInput

func (KogitoRuntimeStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusConditionsArray) ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput {
	return i.ToKogitoRuntimeStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusConditionsArray) ToKogitoRuntimeStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoRuntimeStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusConditionsOutput) ToKogitoRuntimeStatusConditionsOutput() KogitoRuntimeStatusConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsOutput) ToKogitoRuntimeStatusConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ReasonType is the type of reason
func (o KogitoRuntimeStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoRuntimeStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoRuntimeStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusConditionsArrayOutput) ToKogitoRuntimeStatusConditionsArrayOutput() KogitoRuntimeStatusConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsArrayOutput) ToKogitoRuntimeStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusConditions {
		return vs[0].([]KogitoRuntimeStatusConditions)[vs[1].(int)]
	}).(KogitoRuntimeStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoRuntimeStatusDeploymentConditionsInput is an input type that accepts KogitoRuntimeStatusDeploymentConditionsArgs and KogitoRuntimeStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusDeploymentConditionsInput` via:
//
//          KogitoRuntimeStatusDeploymentConditionsArgs{...}
type KogitoRuntimeStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput
	ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(context.Context) KogitoRuntimeStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoRuntimeStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusDeploymentConditionsArgs) ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput {
	return i.ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusDeploymentConditionsArgs) ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusDeploymentConditionsOutput)
}

// KogitoRuntimeStatusDeploymentConditionsArrayInput is an input type that accepts KogitoRuntimeStatusDeploymentConditionsArray and KogitoRuntimeStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoRuntimeStatusDeploymentConditionsArrayInput` via:
//
//          KogitoRuntimeStatusDeploymentConditionsArray{ KogitoRuntimeStatusDeploymentConditionsArgs{...} }
type KogitoRuntimeStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput
	ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput
}

type KogitoRuntimeStatusDeploymentConditionsArray []KogitoRuntimeStatusDeploymentConditionsInput

func (KogitoRuntimeStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoRuntimeStatusDeploymentConditionsArray) ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoRuntimeStatusDeploymentConditionsArray) ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoRuntimeStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoRuntimeStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusDeploymentConditionsOutput) ToKogitoRuntimeStatusDeploymentConditionsOutput() KogitoRuntimeStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsOutput) ToKogitoRuntimeStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoRuntimeStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoRuntimeStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoRuntimeStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoRuntimeStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoRuntimeStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) ToKogitoRuntimeStatusDeploymentConditionsArrayOutput() KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) ToKogitoRuntimeStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoRuntimeStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoRuntimeStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoRuntimeStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoRuntimeStatusDeploymentConditions {
		return vs[0].([]KogitoRuntimeStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoRuntimeStatusDeploymentConditionsOutput)
}

// KogitoTrusty defines the Trusty Service infrastructure deployment.
type KogitoTrustyType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoTrustySpec defines the desired state of KogitoTrusty.
	Spec *KogitoTrustySpec `pulumi:"spec"`
	// KogitoTrustyStatus defines the observed state of KogitoTrusty.
	Status *KogitoTrustyStatus `pulumi:"status"`
}

// KogitoTrustyTypeInput is an input type that accepts KogitoTrustyTypeArgs and KogitoTrustyTypeOutput values.
// You can construct a concrete instance of `KogitoTrustyTypeInput` via:
//
//          KogitoTrustyTypeArgs{...}
type KogitoTrustyTypeInput interface {
	pulumi.Input

	ToKogitoTrustyTypeOutput() KogitoTrustyTypeOutput
	ToKogitoTrustyTypeOutputWithContext(context.Context) KogitoTrustyTypeOutput
}

// KogitoTrusty defines the Trusty Service infrastructure deployment.
type KogitoTrustyTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoTrustySpec defines the desired state of KogitoTrusty.
	Spec KogitoTrustySpecPtrInput `pulumi:"spec"`
	// KogitoTrustyStatus defines the observed state of KogitoTrusty.
	Status KogitoTrustyStatusPtrInput `pulumi:"status"`
}

func (KogitoTrustyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyType)(nil)).Elem()
}

func (i KogitoTrustyTypeArgs) ToKogitoTrustyTypeOutput() KogitoTrustyTypeOutput {
	return i.ToKogitoTrustyTypeOutputWithContext(context.Background())
}

func (i KogitoTrustyTypeArgs) ToKogitoTrustyTypeOutputWithContext(ctx context.Context) KogitoTrustyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyTypeOutput)
}

// KogitoTrusty defines the Trusty Service infrastructure deployment.
type KogitoTrustyTypeOutput struct{ *pulumi.OutputState }

func (KogitoTrustyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyType)(nil)).Elem()
}

func (o KogitoTrustyTypeOutput) ToKogitoTrustyTypeOutput() KogitoTrustyTypeOutput {
	return o
}

func (o KogitoTrustyTypeOutput) ToKogitoTrustyTypeOutputWithContext(ctx context.Context) KogitoTrustyTypeOutput {
	return o
}

func (o KogitoTrustyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoTrustyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoTrustySpec defines the desired state of KogitoTrusty.
func (o KogitoTrustyTypeOutput) Spec() KogitoTrustySpecPtrOutput {
	return o.ApplyT(func(v KogitoTrustyType) *KogitoTrustySpec { return v.Spec }).(KogitoTrustySpecPtrOutput)
}

// KogitoTrustyStatus defines the observed state of KogitoTrusty.
func (o KogitoTrustyTypeOutput) Status() KogitoTrustyStatusPtrOutput {
	return o.ApplyT(func(v KogitoTrustyType) *KogitoTrustyStatus { return v.Status }).(KogitoTrustyStatusPtrOutput)
}

type KogitoTrustyMetadata struct {
}

// KogitoTrustyMetadataInput is an input type that accepts KogitoTrustyMetadataArgs and KogitoTrustyMetadataOutput values.
// You can construct a concrete instance of `KogitoTrustyMetadataInput` via:
//
//          KogitoTrustyMetadataArgs{...}
type KogitoTrustyMetadataInput interface {
	pulumi.Input

	ToKogitoTrustyMetadataOutput() KogitoTrustyMetadataOutput
	ToKogitoTrustyMetadataOutputWithContext(context.Context) KogitoTrustyMetadataOutput
}

type KogitoTrustyMetadataArgs struct {
}

func (KogitoTrustyMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyMetadata)(nil)).Elem()
}

func (i KogitoTrustyMetadataArgs) ToKogitoTrustyMetadataOutput() KogitoTrustyMetadataOutput {
	return i.ToKogitoTrustyMetadataOutputWithContext(context.Background())
}

func (i KogitoTrustyMetadataArgs) ToKogitoTrustyMetadataOutputWithContext(ctx context.Context) KogitoTrustyMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyMetadataOutput)
}

type KogitoTrustyMetadataOutput struct{ *pulumi.OutputState }

func (KogitoTrustyMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyMetadata)(nil)).Elem()
}

func (o KogitoTrustyMetadataOutput) ToKogitoTrustyMetadataOutput() KogitoTrustyMetadataOutput {
	return o
}

func (o KogitoTrustyMetadataOutput) ToKogitoTrustyMetadataOutputWithContext(ctx context.Context) KogitoTrustyMetadataOutput {
	return o
}

// KogitoTrustySpec defines the desired state of KogitoTrusty.
type KogitoTrustySpec struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels map[string]string `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs []KogitoTrustySpecEnvs `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort *int `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image *KogitoTrustySpecImage `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan *KogitoTrustySpecInfinispan `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry *bool `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka *KogitoTrustySpecKafka `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas *int `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources *KogitoTrustySpecResources `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
}

// KogitoTrustySpecInput is an input type that accepts KogitoTrustySpecArgs and KogitoTrustySpecOutput values.
// You can construct a concrete instance of `KogitoTrustySpecInput` via:
//
//          KogitoTrustySpecArgs{...}
type KogitoTrustySpecInput interface {
	pulumi.Input

	ToKogitoTrustySpecOutput() KogitoTrustySpecOutput
	ToKogitoTrustySpecOutputWithContext(context.Context) KogitoTrustySpecOutput
}

// KogitoTrustySpec defines the desired state of KogitoTrusty.
type KogitoTrustySpecArgs struct {
	// Additional labels to be added to the Deployment and Pods managed by the operator.
	DeploymentLabels pulumi.StringMapInput `pulumi:"deploymentLabels"`
	// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
	Envs KogitoTrustySpecEnvsArrayInput `pulumi:"envs"`
	// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	Image KogitoTrustySpecImagePtrInput `pulumi:"image"`
	// Has the data used by the service to connect to the Infinispan cluster.
	Infinispan KogitoTrustySpecInfinispanPtrInput `pulumi:"infinispan"`
	// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
	InsecureImageRegistry pulumi.BoolPtrInput `pulumi:"insecureImageRegistry"`
	// Has the data used by the service to connect to the Kafka cluster.
	Kafka KogitoTrustySpecKafkaPtrInput `pulumi:"kafka"`
	// Number of replicas that the service will have deployed in the cluster. Default value: 1.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Defined compute resource requirements for the deployed service.
	Resources KogitoTrustySpecResourcesPtrInput `pulumi:"resources"`
	// Additional labels to be added to the Service managed by the operator.
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
}

func (KogitoTrustySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpec)(nil)).Elem()
}

func (i KogitoTrustySpecArgs) ToKogitoTrustySpecOutput() KogitoTrustySpecOutput {
	return i.ToKogitoTrustySpecOutputWithContext(context.Background())
}

func (i KogitoTrustySpecArgs) ToKogitoTrustySpecOutputWithContext(ctx context.Context) KogitoTrustySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecOutput)
}

func (i KogitoTrustySpecArgs) ToKogitoTrustySpecPtrOutput() KogitoTrustySpecPtrOutput {
	return i.ToKogitoTrustySpecPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecArgs) ToKogitoTrustySpecPtrOutputWithContext(ctx context.Context) KogitoTrustySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecOutput).ToKogitoTrustySpecPtrOutputWithContext(ctx)
}

// KogitoTrustySpecPtrInput is an input type that accepts KogitoTrustySpecArgs, KogitoTrustySpecPtr and KogitoTrustySpecPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecPtrInput` via:
//
//          KogitoTrustySpecArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecPtrOutput() KogitoTrustySpecPtrOutput
	ToKogitoTrustySpecPtrOutputWithContext(context.Context) KogitoTrustySpecPtrOutput
}

type kogitoTrustySpecPtrType KogitoTrustySpecArgs

func KogitoTrustySpecPtr(v *KogitoTrustySpecArgs) KogitoTrustySpecPtrInput {
	return (*kogitoTrustySpecPtrType)(v)
}

func (*kogitoTrustySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpec)(nil)).Elem()
}

func (i *kogitoTrustySpecPtrType) ToKogitoTrustySpecPtrOutput() KogitoTrustySpecPtrOutput {
	return i.ToKogitoTrustySpecPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecPtrType) ToKogitoTrustySpecPtrOutputWithContext(ctx context.Context) KogitoTrustySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecPtrOutput)
}

// KogitoTrustySpec defines the desired state of KogitoTrusty.
type KogitoTrustySpecOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpec)(nil)).Elem()
}

func (o KogitoTrustySpecOutput) ToKogitoTrustySpecOutput() KogitoTrustySpecOutput {
	return o
}

func (o KogitoTrustySpecOutput) ToKogitoTrustySpecOutputWithContext(ctx context.Context) KogitoTrustySpecOutput {
	return o
}

func (o KogitoTrustySpecOutput) ToKogitoTrustySpecPtrOutput() KogitoTrustySpecPtrOutput {
	return o.ToKogitoTrustySpecPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecOutput) ToKogitoTrustySpecPtrOutputWithContext(ctx context.Context) KogitoTrustySpecPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *KogitoTrustySpec {
		return &v
	}).(KogitoTrustySpecPtrOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoTrustySpecOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoTrustySpec) map[string]string { return v.DeploymentLabels }).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoTrustySpecOutput) Envs() KogitoTrustySpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoTrustySpec) []KogitoTrustySpecEnvs { return v.Envs }).(KogitoTrustySpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoTrustySpecOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoTrustySpecOutput) Image() KogitoTrustySpecImagePtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *KogitoTrustySpecImage { return v.Image }).(KogitoTrustySpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoTrustySpecOutput) Infinispan() KogitoTrustySpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *KogitoTrustySpecInfinispan { return v.Infinispan }).(KogitoTrustySpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoTrustySpecOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *bool { return v.InsecureImageRegistry }).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoTrustySpecOutput) Kafka() KogitoTrustySpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *KogitoTrustySpecKafka { return v.Kafka }).(KogitoTrustySpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoTrustySpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoTrustySpecOutput) Resources() KogitoTrustySpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpec) *KogitoTrustySpecResources { return v.Resources }).(KogitoTrustySpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoTrustySpecOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KogitoTrustySpec) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

type KogitoTrustySpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpec)(nil)).Elem()
}

func (o KogitoTrustySpecPtrOutput) ToKogitoTrustySpecPtrOutput() KogitoTrustySpecPtrOutput {
	return o
}

func (o KogitoTrustySpecPtrOutput) ToKogitoTrustySpecPtrOutputWithContext(ctx context.Context) KogitoTrustySpecPtrOutput {
	return o
}

func (o KogitoTrustySpecPtrOutput) Elem() KogitoTrustySpecOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) KogitoTrustySpec { return *v }).(KogitoTrustySpecOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
func (o KogitoTrustySpecPtrOutput) DeploymentLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentLabels
	}).(pulumi.StringMapOutput)
}

// Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
func (o KogitoTrustySpecPtrOutput) Envs() KogitoTrustySpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) []KogitoTrustySpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoTrustySpecEnvsArrayOutput)
}

// HttpPort will set the environment env HTTP_PORT to define which port service will listen internally.
func (o KogitoTrustySpecPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoTrustySpecPtrOutput) Image() KogitoTrustySpecImagePtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *KogitoTrustySpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(KogitoTrustySpecImagePtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
func (o KogitoTrustySpecPtrOutput) Infinispan() KogitoTrustySpecInfinispanPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *KogitoTrustySpecInfinispan {
		if v == nil {
			return nil
		}
		return v.Infinispan
	}).(KogitoTrustySpecInfinispanPtrOutput)
}

// A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
func (o KogitoTrustySpecPtrOutput) InsecureImageRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureImageRegistry
	}).(pulumi.BoolPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
func (o KogitoTrustySpecPtrOutput) Kafka() KogitoTrustySpecKafkaPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *KogitoTrustySpecKafka {
		if v == nil {
			return nil
		}
		return v.Kafka
	}).(KogitoTrustySpecKafkaPtrOutput)
}

// Number of replicas that the service will have deployed in the cluster. Default value: 1.
func (o KogitoTrustySpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defined compute resource requirements for the deployed service.
func (o KogitoTrustySpecPtrOutput) Resources() KogitoTrustySpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) *KogitoTrustySpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoTrustySpecResourcesPtrOutput)
}

// Additional labels to be added to the Service managed by the operator.
func (o KogitoTrustySpecPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KogitoTrustySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoTrustySpecDeploymentLabels struct {
}

// KogitoTrustySpecDeploymentLabelsInput is an input type that accepts KogitoTrustySpecDeploymentLabelsArgs and KogitoTrustySpecDeploymentLabelsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecDeploymentLabelsInput` via:
//
//          KogitoTrustySpecDeploymentLabelsArgs{...}
type KogitoTrustySpecDeploymentLabelsInput interface {
	pulumi.Input

	ToKogitoTrustySpecDeploymentLabelsOutput() KogitoTrustySpecDeploymentLabelsOutput
	ToKogitoTrustySpecDeploymentLabelsOutputWithContext(context.Context) KogitoTrustySpecDeploymentLabelsOutput
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoTrustySpecDeploymentLabelsArgs struct {
}

func (KogitoTrustySpecDeploymentLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecDeploymentLabels)(nil)).Elem()
}

func (i KogitoTrustySpecDeploymentLabelsArgs) ToKogitoTrustySpecDeploymentLabelsOutput() KogitoTrustySpecDeploymentLabelsOutput {
	return i.ToKogitoTrustySpecDeploymentLabelsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecDeploymentLabelsArgs) ToKogitoTrustySpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoTrustySpecDeploymentLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecDeploymentLabelsOutput)
}

// Additional labels to be added to the Deployment and Pods managed by the operator.
type KogitoTrustySpecDeploymentLabelsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecDeploymentLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecDeploymentLabels)(nil)).Elem()
}

func (o KogitoTrustySpecDeploymentLabelsOutput) ToKogitoTrustySpecDeploymentLabelsOutput() KogitoTrustySpecDeploymentLabelsOutput {
	return o
}

func (o KogitoTrustySpecDeploymentLabelsOutput) ToKogitoTrustySpecDeploymentLabelsOutputWithContext(ctx context.Context) KogitoTrustySpecDeploymentLabelsOutput {
	return o
}

// EnvVar represents an environment variable present in a Container.
type KogitoTrustySpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoTrustySpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoTrustySpecEnvsInput is an input type that accepts KogitoTrustySpecEnvsArgs and KogitoTrustySpecEnvsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsInput` via:
//
//          KogitoTrustySpecEnvsArgs{...}
type KogitoTrustySpecEnvsInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsOutput() KogitoTrustySpecEnvsOutput
	ToKogitoTrustySpecEnvsOutputWithContext(context.Context) KogitoTrustySpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoTrustySpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoTrustySpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoTrustySpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvs)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsArgs) ToKogitoTrustySpecEnvsOutput() KogitoTrustySpecEnvsOutput {
	return i.ToKogitoTrustySpecEnvsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsArgs) ToKogitoTrustySpecEnvsOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsOutput)
}

// KogitoTrustySpecEnvsArrayInput is an input type that accepts KogitoTrustySpecEnvsArray and KogitoTrustySpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsArrayInput` via:
//
//          KogitoTrustySpecEnvsArray{ KogitoTrustySpecEnvsArgs{...} }
type KogitoTrustySpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsArrayOutput() KogitoTrustySpecEnvsArrayOutput
	ToKogitoTrustySpecEnvsArrayOutputWithContext(context.Context) KogitoTrustySpecEnvsArrayOutput
}

type KogitoTrustySpecEnvsArray []KogitoTrustySpecEnvsInput

func (KogitoTrustySpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustySpecEnvs)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsArray) ToKogitoTrustySpecEnvsArrayOutput() KogitoTrustySpecEnvsArrayOutput {
	return i.ToKogitoTrustySpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsArray) ToKogitoTrustySpecEnvsArrayOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoTrustySpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvs)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsOutput) ToKogitoTrustySpecEnvsOutput() KogitoTrustySpecEnvsOutput {
	return o
}

func (o KogitoTrustySpecEnvsOutput) ToKogitoTrustySpecEnvsOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoTrustySpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoTrustySpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoTrustySpecEnvsOutput) ValueFrom() KogitoTrustySpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvs) *KogitoTrustySpecEnvsValueFrom { return v.ValueFrom }).(KogitoTrustySpecEnvsValueFromPtrOutput)
}

type KogitoTrustySpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustySpecEnvs)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsArrayOutput) ToKogitoTrustySpecEnvsArrayOutput() KogitoTrustySpecEnvsArrayOutput {
	return o
}

func (o KogitoTrustySpecEnvsArrayOutput) ToKogitoTrustySpecEnvsArrayOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsArrayOutput {
	return o
}

func (o KogitoTrustySpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoTrustySpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoTrustySpecEnvs {
		return vs[0].([]KogitoTrustySpecEnvs)[vs[1].(int)]
	}).(KogitoTrustySpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoTrustySpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoTrustySpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoTrustySpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoTrustySpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoTrustySpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoTrustySpecEnvsValueFromInput is an input type that accepts KogitoTrustySpecEnvsValueFromArgs and KogitoTrustySpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromInput` via:
//
//          KogitoTrustySpecEnvsValueFromArgs{...}
type KogitoTrustySpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromOutput() KogitoTrustySpecEnvsValueFromOutput
	ToKogitoTrustySpecEnvsValueFromOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoTrustySpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoTrustySpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoTrustySpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoTrustySpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoTrustySpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromArgs) ToKogitoTrustySpecEnvsValueFromOutput() KogitoTrustySpecEnvsValueFromOutput {
	return i.ToKogitoTrustySpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromArgs) ToKogitoTrustySpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromOutput)
}

func (i KogitoTrustySpecEnvsValueFromArgs) ToKogitoTrustySpecEnvsValueFromPtrOutput() KogitoTrustySpecEnvsValueFromPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromArgs) ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromOutput).ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromArgs, KogitoTrustySpecEnvsValueFromPtr and KogitoTrustySpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromPtrOutput() KogitoTrustySpecEnvsValueFromPtrOutput
	ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromPtrOutput
}

type kogitoTrustySpecEnvsValueFromPtrType KogitoTrustySpecEnvsValueFromArgs

func KogitoTrustySpecEnvsValueFromPtr(v *KogitoTrustySpecEnvsValueFromArgs) KogitoTrustySpecEnvsValueFromPtrInput {
	return (*kogitoTrustySpecEnvsValueFromPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromPtrType) ToKogitoTrustySpecEnvsValueFromPtrOutput() KogitoTrustySpecEnvsValueFromPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromPtrType) ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoTrustySpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromOutput) ToKogitoTrustySpecEnvsValueFromOutput() KogitoTrustySpecEnvsValueFromOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromOutput) ToKogitoTrustySpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromOutput) ToKogitoTrustySpecEnvsValueFromPtrOutput() KogitoTrustySpecEnvsValueFromPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromOutput) ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFrom {
		return &v
	}).(KogitoTrustySpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoTrustySpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoTrustySpecEnvsValueFromOutput) FieldRef() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromFieldRef { return v.FieldRef }).(KogitoTrustySpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoTrustySpecEnvsValueFromOutput) ResourceFieldRef() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoTrustySpecEnvsValueFromOutput) SecretKeyRef() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoTrustySpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromPtrOutput) ToKogitoTrustySpecEnvsValueFromPtrOutput() KogitoTrustySpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromPtrOutput) ToKogitoTrustySpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromPtrOutput) Elem() KogitoTrustySpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFrom) KogitoTrustySpecEnvsValueFrom { return *v }).(KogitoTrustySpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoTrustySpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoTrustySpecEnvsValueFromPtrOutput) FieldRef() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoTrustySpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoTrustySpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoTrustySpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFrom) *KogitoTrustySpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoTrustySpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoTrustySpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs and KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoTrustySpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs, KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtr and KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrType KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs

func KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoTrustySpecEnvsValueFromConfigMapKeyRefArgs) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *KogitoTrustySpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromConfigMapKeyRef) KogitoTrustySpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoTrustySpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoTrustySpecEnvsValueFromFieldRefInput is an input type that accepts KogitoTrustySpecEnvsValueFromFieldRefArgs and KogitoTrustySpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromFieldRefInput` via:
//
//          KogitoTrustySpecEnvsValueFromFieldRefArgs{...}
type KogitoTrustySpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromFieldRefOutput() KogitoTrustySpecEnvsValueFromFieldRefOutput
	ToKogitoTrustySpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoTrustySpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoTrustySpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromFieldRefArgs) ToKogitoTrustySpecEnvsValueFromFieldRefOutput() KogitoTrustySpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoTrustySpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromFieldRefArgs) ToKogitoTrustySpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromFieldRefOutput)
}

func (i KogitoTrustySpecEnvsValueFromFieldRefArgs) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromFieldRefArgs) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromFieldRefOutput).ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromFieldRefArgs, KogitoTrustySpecEnvsValueFromFieldRefPtr and KogitoTrustySpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput
	ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromFieldRefPtrOutput
}

type kogitoTrustySpecEnvsValueFromFieldRefPtrType KogitoTrustySpecEnvsValueFromFieldRefArgs

func KogitoTrustySpecEnvsValueFromFieldRefPtr(v *KogitoTrustySpecEnvsValueFromFieldRefArgs) KogitoTrustySpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoTrustySpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromFieldRefPtrType) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromFieldRefPtrType) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoTrustySpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) ToKogitoTrustySpecEnvsValueFromFieldRefOutput() KogitoTrustySpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) ToKogitoTrustySpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromFieldRef) *KogitoTrustySpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoTrustySpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoTrustySpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoTrustySpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) ToKogitoTrustySpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoTrustySpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromFieldRef) KogitoTrustySpecEnvsValueFromFieldRef { return *v }).(KogitoTrustySpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoTrustySpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoTrustySpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoTrustySpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoTrustySpecEnvsValueFromResourceFieldRefArgs and KogitoTrustySpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoTrustySpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoTrustySpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefOutput
	ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoTrustySpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefOutput).ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromResourceFieldRefArgs, KogitoTrustySpecEnvsValueFromResourceFieldRefPtr and KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoTrustySpecEnvsValueFromResourceFieldRefPtrType KogitoTrustySpecEnvsValueFromResourceFieldRefArgs

func KogitoTrustySpecEnvsValueFromResourceFieldRefPtr(v *KogitoTrustySpecEnvsValueFromResourceFieldRefArgs) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoTrustySpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromResourceFieldRefPtrType) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromResourceFieldRefPtrType) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoTrustySpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromResourceFieldRef) *KogitoTrustySpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromResourceFieldRef) *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoTrustySpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromResourceFieldRef) KogitoTrustySpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromResourceFieldRef) *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor) *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor) KogitoTrustySpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoTrustySpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoTrustySpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoTrustySpecEnvsValueFromSecretKeyRefArgs and KogitoTrustySpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoTrustySpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoTrustySpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefOutput
	ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoTrustySpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromSecretKeyRefOutput).ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoTrustySpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoTrustySpecEnvsValueFromSecretKeyRefArgs, KogitoTrustySpecEnvsValueFromSecretKeyRefPtr and KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoTrustySpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoTrustySpecEnvsValueFromSecretKeyRefPtrType KogitoTrustySpecEnvsValueFromSecretKeyRefArgs

func KogitoTrustySpecEnvsValueFromSecretKeyRefPtr(v *KogitoTrustySpecEnvsValueFromSecretKeyRefArgs) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoTrustySpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoTrustySpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoTrustySpecEnvsValueFromSecretKeyRefPtrType) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecEnvsValueFromSecretKeyRefPtrType) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoTrustySpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromSecretKeyRef) *KogitoTrustySpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput() KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoTrustySpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromSecretKeyRef) KogitoTrustySpecEnvsValueFromSecretKeyRef {
		return *v
	}).(KogitoTrustySpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoTrustySpecImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoTrustySpecImageInput is an input type that accepts KogitoTrustySpecImageArgs and KogitoTrustySpecImageOutput values.
// You can construct a concrete instance of `KogitoTrustySpecImageInput` via:
//
//          KogitoTrustySpecImageArgs{...}
type KogitoTrustySpecImageInput interface {
	pulumi.Input

	ToKogitoTrustySpecImageOutput() KogitoTrustySpecImageOutput
	ToKogitoTrustySpecImageOutputWithContext(context.Context) KogitoTrustySpecImageOutput
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoTrustySpecImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoTrustySpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecImage)(nil)).Elem()
}

func (i KogitoTrustySpecImageArgs) ToKogitoTrustySpecImageOutput() KogitoTrustySpecImageOutput {
	return i.ToKogitoTrustySpecImageOutputWithContext(context.Background())
}

func (i KogitoTrustySpecImageArgs) ToKogitoTrustySpecImageOutputWithContext(ctx context.Context) KogitoTrustySpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecImageOutput)
}

func (i KogitoTrustySpecImageArgs) ToKogitoTrustySpecImagePtrOutput() KogitoTrustySpecImagePtrOutput {
	return i.ToKogitoTrustySpecImagePtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecImageArgs) ToKogitoTrustySpecImagePtrOutputWithContext(ctx context.Context) KogitoTrustySpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecImageOutput).ToKogitoTrustySpecImagePtrOutputWithContext(ctx)
}

// KogitoTrustySpecImagePtrInput is an input type that accepts KogitoTrustySpecImageArgs, KogitoTrustySpecImagePtr and KogitoTrustySpecImagePtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecImagePtrInput` via:
//
//          KogitoTrustySpecImageArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecImagePtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecImagePtrOutput() KogitoTrustySpecImagePtrOutput
	ToKogitoTrustySpecImagePtrOutputWithContext(context.Context) KogitoTrustySpecImagePtrOutput
}

type kogitoTrustySpecImagePtrType KogitoTrustySpecImageArgs

func KogitoTrustySpecImagePtr(v *KogitoTrustySpecImageArgs) KogitoTrustySpecImagePtrInput {
	return (*kogitoTrustySpecImagePtrType)(v)
}

func (*kogitoTrustySpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecImage)(nil)).Elem()
}

func (i *kogitoTrustySpecImagePtrType) ToKogitoTrustySpecImagePtrOutput() KogitoTrustySpecImagePtrOutput {
	return i.ToKogitoTrustySpecImagePtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecImagePtrType) ToKogitoTrustySpecImagePtrOutputWithContext(ctx context.Context) KogitoTrustySpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecImagePtrOutput)
}

// Image definition for the service. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-service, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoTrustySpecImageOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecImage)(nil)).Elem()
}

func (o KogitoTrustySpecImageOutput) ToKogitoTrustySpecImageOutput() KogitoTrustySpecImageOutput {
	return o
}

func (o KogitoTrustySpecImageOutput) ToKogitoTrustySpecImageOutputWithContext(ctx context.Context) KogitoTrustySpecImageOutput {
	return o
}

func (o KogitoTrustySpecImageOutput) ToKogitoTrustySpecImagePtrOutput() KogitoTrustySpecImagePtrOutput {
	return o.ToKogitoTrustySpecImagePtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecImageOutput) ToKogitoTrustySpecImagePtrOutputWithContext(ctx context.Context) KogitoTrustySpecImagePtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecImage) *KogitoTrustySpecImage {
		return &v
	}).(KogitoTrustySpecImagePtrOutput)
}
func (o KogitoTrustySpecImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoTrustySpecImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecImage)(nil)).Elem()
}

func (o KogitoTrustySpecImagePtrOutput) ToKogitoTrustySpecImagePtrOutput() KogitoTrustySpecImagePtrOutput {
	return o
}

func (o KogitoTrustySpecImagePtrOutput) ToKogitoTrustySpecImagePtrOutputWithContext(ctx context.Context) KogitoTrustySpecImagePtrOutput {
	return o
}

func (o KogitoTrustySpecImagePtrOutput) Elem() KogitoTrustySpecImageOutput {
	return o.ApplyT(func(v *KogitoTrustySpecImage) KogitoTrustySpecImage { return *v }).(KogitoTrustySpecImageOutput)
}

func (o KogitoTrustySpecImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoTrustySpecImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoTrustySpecInfinispan struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm *string `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials *KogitoTrustySpecInfinispanCredentials `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism *string `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri *string `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth *bool `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoTrustySpecInfinispanInput is an input type that accepts KogitoTrustySpecInfinispanArgs and KogitoTrustySpecInfinispanOutput values.
// You can construct a concrete instance of `KogitoTrustySpecInfinispanInput` via:
//
//          KogitoTrustySpecInfinispanArgs{...}
type KogitoTrustySpecInfinispanInput interface {
	pulumi.Input

	ToKogitoTrustySpecInfinispanOutput() KogitoTrustySpecInfinispanOutput
	ToKogitoTrustySpecInfinispanOutputWithContext(context.Context) KogitoTrustySpecInfinispanOutput
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoTrustySpecInfinispanArgs struct {
	// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
	AuthRealm pulumi.StringPtrInput `pulumi:"authRealm"`
	// SecretCredentialsType is the data structure for specifying credentials within a Secret.
	Credentials KogitoTrustySpecInfinispanCredentialsPtrInput `pulumi:"credentials"`
	// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
	SaslMechanism pulumi.StringPtrInput `pulumi:"saslMechanism"`
	// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
	UseAuth pulumi.BoolPtrInput `pulumi:"useAuth"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoTrustySpecInfinispanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecInfinispan)(nil)).Elem()
}

func (i KogitoTrustySpecInfinispanArgs) ToKogitoTrustySpecInfinispanOutput() KogitoTrustySpecInfinispanOutput {
	return i.ToKogitoTrustySpecInfinispanOutputWithContext(context.Background())
}

func (i KogitoTrustySpecInfinispanArgs) ToKogitoTrustySpecInfinispanOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanOutput)
}

func (i KogitoTrustySpecInfinispanArgs) ToKogitoTrustySpecInfinispanPtrOutput() KogitoTrustySpecInfinispanPtrOutput {
	return i.ToKogitoTrustySpecInfinispanPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecInfinispanArgs) ToKogitoTrustySpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanOutput).ToKogitoTrustySpecInfinispanPtrOutputWithContext(ctx)
}

// KogitoTrustySpecInfinispanPtrInput is an input type that accepts KogitoTrustySpecInfinispanArgs, KogitoTrustySpecInfinispanPtr and KogitoTrustySpecInfinispanPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecInfinispanPtrInput` via:
//
//          KogitoTrustySpecInfinispanArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecInfinispanPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecInfinispanPtrOutput() KogitoTrustySpecInfinispanPtrOutput
	ToKogitoTrustySpecInfinispanPtrOutputWithContext(context.Context) KogitoTrustySpecInfinispanPtrOutput
}

type kogitoTrustySpecInfinispanPtrType KogitoTrustySpecInfinispanArgs

func KogitoTrustySpecInfinispanPtr(v *KogitoTrustySpecInfinispanArgs) KogitoTrustySpecInfinispanPtrInput {
	return (*kogitoTrustySpecInfinispanPtrType)(v)
}

func (*kogitoTrustySpecInfinispanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecInfinispan)(nil)).Elem()
}

func (i *kogitoTrustySpecInfinispanPtrType) ToKogitoTrustySpecInfinispanPtrOutput() KogitoTrustySpecInfinispanPtrOutput {
	return i.ToKogitoTrustySpecInfinispanPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecInfinispanPtrType) ToKogitoTrustySpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanPtrOutput)
}

// Has the data used by the service to connect to the Infinispan cluster.
type KogitoTrustySpecInfinispanOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecInfinispanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecInfinispan)(nil)).Elem()
}

func (o KogitoTrustySpecInfinispanOutput) ToKogitoTrustySpecInfinispanOutput() KogitoTrustySpecInfinispanOutput {
	return o
}

func (o KogitoTrustySpecInfinispanOutput) ToKogitoTrustySpecInfinispanOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanOutput {
	return o
}

func (o KogitoTrustySpecInfinispanOutput) ToKogitoTrustySpecInfinispanPtrOutput() KogitoTrustySpecInfinispanPtrOutput {
	return o.ToKogitoTrustySpecInfinispanPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecInfinispanOutput) ToKogitoTrustySpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *KogitoTrustySpecInfinispan {
		return &v
	}).(KogitoTrustySpecInfinispanPtrOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoTrustySpecInfinispanOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *string { return v.AuthRealm }).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoTrustySpecInfinispanOutput) Credentials() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *KogitoTrustySpecInfinispanCredentials { return v.Credentials }).(KogitoTrustySpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoTrustySpecInfinispanOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *string { return v.SaslMechanism }).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoTrustySpecInfinispanOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoTrustySpecInfinispanOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *bool { return v.UseAuth }).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoTrustySpecInfinispanOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispan) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoTrustySpecInfinispanPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecInfinispanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecInfinispan)(nil)).Elem()
}

func (o KogitoTrustySpecInfinispanPtrOutput) ToKogitoTrustySpecInfinispanPtrOutput() KogitoTrustySpecInfinispanPtrOutput {
	return o
}

func (o KogitoTrustySpecInfinispanPtrOutput) ToKogitoTrustySpecInfinispanPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanPtrOutput {
	return o
}

func (o KogitoTrustySpecInfinispanPtrOutput) Elem() KogitoTrustySpecInfinispanOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) KogitoTrustySpecInfinispan { return *v }).(KogitoTrustySpecInfinispanOutput)
}

// Name of the Infinispan authentication realm. This sets the property infinispan.client.hotrod.auth_realm.
func (o KogitoTrustySpecInfinispanPtrOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.AuthRealm
	}).(pulumi.StringPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
func (o KogitoTrustySpecInfinispanPtrOutput) Credentials() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *KogitoTrustySpecInfinispanCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(KogitoTrustySpecInfinispanCredentialsPtrOutput)
}

// SaslMechanism defined for the authentication. This sets the property infinispan.client.hotrod.sasl_mechanism.
func (o KogitoTrustySpecInfinispanPtrOutput) SaslMechanism() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.SaslMechanism
	}).(pulumi.StringPtrOutput)
}

// URI to connect to the Infinispan cluster (can it be an internal service or external URI), for example, myinfinispan-cluster:11222.
func (o KogitoTrustySpecInfinispanPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// UseAuth is set to true if the credentials are set. This also sets the property infinispan.client.hotrod.use_auth.
func (o KogitoTrustySpecInfinispanPtrOutput) UseAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseAuth
	}).(pulumi.BoolPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will deploy a new KogitoInfra CR into the namespace that will install Infinispan via Infinispan Operator. Infinispan Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Infinispan Operator first. Set this to false and fill all other properties to provide your own infrastructure.
func (o KogitoTrustySpecInfinispanPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispan) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoTrustySpecInfinispanCredentials struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey *string `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName *string `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey *string `pulumi:"usernameKey"`
}

// KogitoTrustySpecInfinispanCredentialsInput is an input type that accepts KogitoTrustySpecInfinispanCredentialsArgs and KogitoTrustySpecInfinispanCredentialsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecInfinispanCredentialsInput` via:
//
//          KogitoTrustySpecInfinispanCredentialsArgs{...}
type KogitoTrustySpecInfinispanCredentialsInput interface {
	pulumi.Input

	ToKogitoTrustySpecInfinispanCredentialsOutput() KogitoTrustySpecInfinispanCredentialsOutput
	ToKogitoTrustySpecInfinispanCredentialsOutputWithContext(context.Context) KogitoTrustySpecInfinispanCredentialsOutput
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoTrustySpecInfinispanCredentialsArgs struct {
	// PasswordKey is the key pointing to a value in a Secret holding the password value.
	PasswordKey pulumi.StringPtrInput `pulumi:"passwordKey"`
	// SecretName is the name of the secret where the credentials are set.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// UsernameKey is the key pointing to a value in a Secret holding the username value.
	UsernameKey pulumi.StringPtrInput `pulumi:"usernameKey"`
}

func (KogitoTrustySpecInfinispanCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecInfinispanCredentials)(nil)).Elem()
}

func (i KogitoTrustySpecInfinispanCredentialsArgs) ToKogitoTrustySpecInfinispanCredentialsOutput() KogitoTrustySpecInfinispanCredentialsOutput {
	return i.ToKogitoTrustySpecInfinispanCredentialsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecInfinispanCredentialsArgs) ToKogitoTrustySpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanCredentialsOutput)
}

func (i KogitoTrustySpecInfinispanCredentialsArgs) ToKogitoTrustySpecInfinispanCredentialsPtrOutput() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecInfinispanCredentialsArgs) ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanCredentialsOutput).ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(ctx)
}

// KogitoTrustySpecInfinispanCredentialsPtrInput is an input type that accepts KogitoTrustySpecInfinispanCredentialsArgs, KogitoTrustySpecInfinispanCredentialsPtr and KogitoTrustySpecInfinispanCredentialsPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecInfinispanCredentialsPtrInput` via:
//
//          KogitoTrustySpecInfinispanCredentialsArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecInfinispanCredentialsPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecInfinispanCredentialsPtrOutput() KogitoTrustySpecInfinispanCredentialsPtrOutput
	ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(context.Context) KogitoTrustySpecInfinispanCredentialsPtrOutput
}

type kogitoTrustySpecInfinispanCredentialsPtrType KogitoTrustySpecInfinispanCredentialsArgs

func KogitoTrustySpecInfinispanCredentialsPtr(v *KogitoTrustySpecInfinispanCredentialsArgs) KogitoTrustySpecInfinispanCredentialsPtrInput {
	return (*kogitoTrustySpecInfinispanCredentialsPtrType)(v)
}

func (*kogitoTrustySpecInfinispanCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecInfinispanCredentials)(nil)).Elem()
}

func (i *kogitoTrustySpecInfinispanCredentialsPtrType) ToKogitoTrustySpecInfinispanCredentialsPtrOutput() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return i.ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecInfinispanCredentialsPtrType) ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecInfinispanCredentialsPtrOutput)
}

// SecretCredentialsType is the data structure for specifying credentials within a Secret.
type KogitoTrustySpecInfinispanCredentialsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecInfinispanCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoTrustySpecInfinispanCredentialsOutput) ToKogitoTrustySpecInfinispanCredentialsOutput() KogitoTrustySpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoTrustySpecInfinispanCredentialsOutput) ToKogitoTrustySpecInfinispanCredentialsOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsOutput {
	return o
}

func (o KogitoTrustySpecInfinispanCredentialsOutput) ToKogitoTrustySpecInfinispanCredentialsPtrOutput() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o.ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecInfinispanCredentialsOutput) ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispanCredentials) *KogitoTrustySpecInfinispanCredentials {
		return &v
	}).(KogitoTrustySpecInfinispanCredentialsPtrOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoTrustySpecInfinispanCredentialsOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispanCredentials) *string { return v.PasswordKey }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoTrustySpecInfinispanCredentialsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispanCredentials) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoTrustySpecInfinispanCredentialsOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecInfinispanCredentials) *string { return v.UsernameKey }).(pulumi.StringPtrOutput)
}

type KogitoTrustySpecInfinispanCredentialsPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecInfinispanCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecInfinispanCredentials)(nil)).Elem()
}

func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) ToKogitoTrustySpecInfinispanCredentialsPtrOutput() KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) ToKogitoTrustySpecInfinispanCredentialsPtrOutputWithContext(ctx context.Context) KogitoTrustySpecInfinispanCredentialsPtrOutput {
	return o
}

func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) Elem() KogitoTrustySpecInfinispanCredentialsOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispanCredentials) KogitoTrustySpecInfinispanCredentials { return *v }).(KogitoTrustySpecInfinispanCredentialsOutput)
}

// PasswordKey is the key pointing to a value in a Secret holding the password value.
func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) PasswordKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordKey
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the secret where the credentials are set.
func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// UsernameKey is the key pointing to a value in a Secret holding the username value.
func (o KogitoTrustySpecInfinispanCredentialsPtrOutput) UsernameKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecInfinispanCredentials) *string {
		if v == nil {
			return nil
		}
		return v.UsernameKey
	}).(pulumi.StringPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoTrustySpecKafka struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI *string `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance *string `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra *bool `pulumi:"useKogitoInfra"`
}

// KogitoTrustySpecKafkaInput is an input type that accepts KogitoTrustySpecKafkaArgs and KogitoTrustySpecKafkaOutput values.
// You can construct a concrete instance of `KogitoTrustySpecKafkaInput` via:
//
//          KogitoTrustySpecKafkaArgs{...}
type KogitoTrustySpecKafkaInput interface {
	pulumi.Input

	ToKogitoTrustySpecKafkaOutput() KogitoTrustySpecKafkaOutput
	ToKogitoTrustySpecKafkaOutputWithContext(context.Context) KogitoTrustySpecKafkaOutput
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoTrustySpecKafkaArgs struct {
	// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Instance is the Kafka instance to be used, for example, kogito-kafka.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
	UseKogitoInfra pulumi.BoolPtrInput `pulumi:"useKogitoInfra"`
}

func (KogitoTrustySpecKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecKafka)(nil)).Elem()
}

func (i KogitoTrustySpecKafkaArgs) ToKogitoTrustySpecKafkaOutput() KogitoTrustySpecKafkaOutput {
	return i.ToKogitoTrustySpecKafkaOutputWithContext(context.Background())
}

func (i KogitoTrustySpecKafkaArgs) ToKogitoTrustySpecKafkaOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecKafkaOutput)
}

func (i KogitoTrustySpecKafkaArgs) ToKogitoTrustySpecKafkaPtrOutput() KogitoTrustySpecKafkaPtrOutput {
	return i.ToKogitoTrustySpecKafkaPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecKafkaArgs) ToKogitoTrustySpecKafkaPtrOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecKafkaOutput).ToKogitoTrustySpecKafkaPtrOutputWithContext(ctx)
}

// KogitoTrustySpecKafkaPtrInput is an input type that accepts KogitoTrustySpecKafkaArgs, KogitoTrustySpecKafkaPtr and KogitoTrustySpecKafkaPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecKafkaPtrInput` via:
//
//          KogitoTrustySpecKafkaArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecKafkaPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecKafkaPtrOutput() KogitoTrustySpecKafkaPtrOutput
	ToKogitoTrustySpecKafkaPtrOutputWithContext(context.Context) KogitoTrustySpecKafkaPtrOutput
}

type kogitoTrustySpecKafkaPtrType KogitoTrustySpecKafkaArgs

func KogitoTrustySpecKafkaPtr(v *KogitoTrustySpecKafkaArgs) KogitoTrustySpecKafkaPtrInput {
	return (*kogitoTrustySpecKafkaPtrType)(v)
}

func (*kogitoTrustySpecKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecKafka)(nil)).Elem()
}

func (i *kogitoTrustySpecKafkaPtrType) ToKogitoTrustySpecKafkaPtrOutput() KogitoTrustySpecKafkaPtrOutput {
	return i.ToKogitoTrustySpecKafkaPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecKafkaPtrType) ToKogitoTrustySpecKafkaPtrOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecKafkaPtrOutput)
}

// Has the data used by the service to connect to the Kafka cluster.
type KogitoTrustySpecKafkaOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecKafka)(nil)).Elem()
}

func (o KogitoTrustySpecKafkaOutput) ToKogitoTrustySpecKafkaOutput() KogitoTrustySpecKafkaOutput {
	return o
}

func (o KogitoTrustySpecKafkaOutput) ToKogitoTrustySpecKafkaOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaOutput {
	return o
}

func (o KogitoTrustySpecKafkaOutput) ToKogitoTrustySpecKafkaPtrOutput() KogitoTrustySpecKafkaPtrOutput {
	return o.ToKogitoTrustySpecKafkaPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecKafkaOutput) ToKogitoTrustySpecKafkaPtrOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecKafka) *KogitoTrustySpecKafka {
		return &v
	}).(KogitoTrustySpecKafkaPtrOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoTrustySpecKafkaOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecKafka) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoTrustySpecKafkaOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecKafka) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoTrustySpecKafkaOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecKafka) *bool { return v.UseKogitoInfra }).(pulumi.BoolPtrOutput)
}

type KogitoTrustySpecKafkaPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecKafka)(nil)).Elem()
}

func (o KogitoTrustySpecKafkaPtrOutput) ToKogitoTrustySpecKafkaPtrOutput() KogitoTrustySpecKafkaPtrOutput {
	return o
}

func (o KogitoTrustySpecKafkaPtrOutput) ToKogitoTrustySpecKafkaPtrOutputWithContext(ctx context.Context) KogitoTrustySpecKafkaPtrOutput {
	return o
}

func (o KogitoTrustySpecKafkaPtrOutput) Elem() KogitoTrustySpecKafkaOutput {
	return o.ApplyT(func(v *KogitoTrustySpecKafka) KogitoTrustySpecKafka { return *v }).(KogitoTrustySpecKafkaOutput)
}

// URI is the service URI to connect to the Kafka cluster, for example, my-cluster-kafka-bootstrap:9092.
func (o KogitoTrustySpecKafkaPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Instance is the Kafka instance to be used, for example, kogito-kafka.
func (o KogitoTrustySpecKafkaPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecKafka) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// UseKogitoInfra flags if the instance will use a provided infrastructure by KogitoInfra CR. Setting this to true will configure a KogitoInfra CR to install Kafka via Strimzi Operator. Strimzi Operator MUST be installed in the namespace for this to work. On OpenShift, OLM should install it for you. If running on Kubernetes without OLM installed, please install Strimzi Operator first. Set this to false and fill other properties to provide your own infrastructure.
func (o KogitoTrustySpecKafkaPtrOutput) UseKogitoInfra() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoTrustySpecKafka) *bool {
		if v == nil {
			return nil
		}
		return v.UseKogitoInfra
	}).(pulumi.BoolPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoTrustySpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoTrustySpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoTrustySpecResourcesRequests `pulumi:"requests"`
}

// KogitoTrustySpecResourcesInput is an input type that accepts KogitoTrustySpecResourcesArgs and KogitoTrustySpecResourcesOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesInput` via:
//
//          KogitoTrustySpecResourcesArgs{...}
type KogitoTrustySpecResourcesInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesOutput() KogitoTrustySpecResourcesOutput
	ToKogitoTrustySpecResourcesOutputWithContext(context.Context) KogitoTrustySpecResourcesOutput
}

// Defined compute resource requirements for the deployed service.
type KogitoTrustySpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoTrustySpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoTrustySpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoTrustySpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResources)(nil)).Elem()
}

func (i KogitoTrustySpecResourcesArgs) ToKogitoTrustySpecResourcesOutput() KogitoTrustySpecResourcesOutput {
	return i.ToKogitoTrustySpecResourcesOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesArgs) ToKogitoTrustySpecResourcesOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesOutput)
}

func (i KogitoTrustySpecResourcesArgs) ToKogitoTrustySpecResourcesPtrOutput() KogitoTrustySpecResourcesPtrOutput {
	return i.ToKogitoTrustySpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesArgs) ToKogitoTrustySpecResourcesPtrOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesOutput).ToKogitoTrustySpecResourcesPtrOutputWithContext(ctx)
}

// KogitoTrustySpecResourcesPtrInput is an input type that accepts KogitoTrustySpecResourcesArgs, KogitoTrustySpecResourcesPtr and KogitoTrustySpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesPtrInput` via:
//
//          KogitoTrustySpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoTrustySpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesPtrOutput() KogitoTrustySpecResourcesPtrOutput
	ToKogitoTrustySpecResourcesPtrOutputWithContext(context.Context) KogitoTrustySpecResourcesPtrOutput
}

type kogitoTrustySpecResourcesPtrType KogitoTrustySpecResourcesArgs

func KogitoTrustySpecResourcesPtr(v *KogitoTrustySpecResourcesArgs) KogitoTrustySpecResourcesPtrInput {
	return (*kogitoTrustySpecResourcesPtrType)(v)
}

func (*kogitoTrustySpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecResources)(nil)).Elem()
}

func (i *kogitoTrustySpecResourcesPtrType) ToKogitoTrustySpecResourcesPtrOutput() KogitoTrustySpecResourcesPtrOutput {
	return i.ToKogitoTrustySpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustySpecResourcesPtrType) ToKogitoTrustySpecResourcesPtrOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesPtrOutput)
}

// Defined compute resource requirements for the deployed service.
type KogitoTrustySpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResources)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesOutput) ToKogitoTrustySpecResourcesOutput() KogitoTrustySpecResourcesOutput {
	return o
}

func (o KogitoTrustySpecResourcesOutput) ToKogitoTrustySpecResourcesOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesOutput {
	return o
}

func (o KogitoTrustySpecResourcesOutput) ToKogitoTrustySpecResourcesPtrOutput() KogitoTrustySpecResourcesPtrOutput {
	return o.ToKogitoTrustySpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoTrustySpecResourcesOutput) ToKogitoTrustySpecResourcesPtrOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoTrustySpecResources) *KogitoTrustySpecResources {
		return &v
	}).(KogitoTrustySpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoTrustySpecResourcesOutput) Limits() KogitoTrustySpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoTrustySpecResources) map[string]KogitoTrustySpecResourcesLimits { return v.Limits }).(KogitoTrustySpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoTrustySpecResourcesOutput) Requests() KogitoTrustySpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoTrustySpecResources) map[string]KogitoTrustySpecResourcesRequests { return v.Requests }).(KogitoTrustySpecResourcesRequestsMapOutput)
}

type KogitoTrustySpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustySpecResources)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesPtrOutput) ToKogitoTrustySpecResourcesPtrOutput() KogitoTrustySpecResourcesPtrOutput {
	return o
}

func (o KogitoTrustySpecResourcesPtrOutput) ToKogitoTrustySpecResourcesPtrOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesPtrOutput {
	return o
}

func (o KogitoTrustySpecResourcesPtrOutput) Elem() KogitoTrustySpecResourcesOutput {
	return o.ApplyT(func(v *KogitoTrustySpecResources) KogitoTrustySpecResources { return *v }).(KogitoTrustySpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoTrustySpecResourcesPtrOutput) Limits() KogitoTrustySpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoTrustySpecResources) map[string]KogitoTrustySpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoTrustySpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoTrustySpecResourcesPtrOutput) Requests() KogitoTrustySpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoTrustySpecResources) map[string]KogitoTrustySpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoTrustySpecResourcesRequestsMapOutput)
}

type KogitoTrustySpecResourcesLimits struct {
}

// KogitoTrustySpecResourcesLimitsInput is an input type that accepts KogitoTrustySpecResourcesLimitsArgs and KogitoTrustySpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesLimitsInput` via:
//
//          KogitoTrustySpecResourcesLimitsArgs{...}
type KogitoTrustySpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesLimitsOutput() KogitoTrustySpecResourcesLimitsOutput
	ToKogitoTrustySpecResourcesLimitsOutputWithContext(context.Context) KogitoTrustySpecResourcesLimitsOutput
}

type KogitoTrustySpecResourcesLimitsArgs struct {
}

func (KogitoTrustySpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResourcesLimits)(nil)).Elem()
}

func (i KogitoTrustySpecResourcesLimitsArgs) ToKogitoTrustySpecResourcesLimitsOutput() KogitoTrustySpecResourcesLimitsOutput {
	return i.ToKogitoTrustySpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesLimitsArgs) ToKogitoTrustySpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesLimitsOutput)
}

// KogitoTrustySpecResourcesLimitsMapInput is an input type that accepts KogitoTrustySpecResourcesLimitsMap and KogitoTrustySpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesLimitsMapInput` via:
//
//          KogitoTrustySpecResourcesLimitsMap{ "key": KogitoTrustySpecResourcesLimitsArgs{...} }
type KogitoTrustySpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesLimitsMapOutput() KogitoTrustySpecResourcesLimitsMapOutput
	ToKogitoTrustySpecResourcesLimitsMapOutputWithContext(context.Context) KogitoTrustySpecResourcesLimitsMapOutput
}

type KogitoTrustySpecResourcesLimitsMap map[string]KogitoTrustySpecResourcesLimitsInput

func (KogitoTrustySpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoTrustySpecResourcesLimits)(nil)).Elem()
}

func (i KogitoTrustySpecResourcesLimitsMap) ToKogitoTrustySpecResourcesLimitsMapOutput() KogitoTrustySpecResourcesLimitsMapOutput {
	return i.ToKogitoTrustySpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesLimitsMap) ToKogitoTrustySpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesLimitsMapOutput)
}

type KogitoTrustySpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResourcesLimits)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesLimitsOutput) ToKogitoTrustySpecResourcesLimitsOutput() KogitoTrustySpecResourcesLimitsOutput {
	return o
}

func (o KogitoTrustySpecResourcesLimitsOutput) ToKogitoTrustySpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesLimitsOutput {
	return o
}

type KogitoTrustySpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoTrustySpecResourcesLimits)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesLimitsMapOutput) ToKogitoTrustySpecResourcesLimitsMapOutput() KogitoTrustySpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoTrustySpecResourcesLimitsMapOutput) ToKogitoTrustySpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoTrustySpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoTrustySpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoTrustySpecResourcesLimits {
		return vs[0].(map[string]KogitoTrustySpecResourcesLimits)[vs[1].(string)]
	}).(KogitoTrustySpecResourcesLimitsOutput)
}

type KogitoTrustySpecResourcesRequests struct {
}

// KogitoTrustySpecResourcesRequestsInput is an input type that accepts KogitoTrustySpecResourcesRequestsArgs and KogitoTrustySpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesRequestsInput` via:
//
//          KogitoTrustySpecResourcesRequestsArgs{...}
type KogitoTrustySpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesRequestsOutput() KogitoTrustySpecResourcesRequestsOutput
	ToKogitoTrustySpecResourcesRequestsOutputWithContext(context.Context) KogitoTrustySpecResourcesRequestsOutput
}

type KogitoTrustySpecResourcesRequestsArgs struct {
}

func (KogitoTrustySpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResourcesRequests)(nil)).Elem()
}

func (i KogitoTrustySpecResourcesRequestsArgs) ToKogitoTrustySpecResourcesRequestsOutput() KogitoTrustySpecResourcesRequestsOutput {
	return i.ToKogitoTrustySpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesRequestsArgs) ToKogitoTrustySpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesRequestsOutput)
}

// KogitoTrustySpecResourcesRequestsMapInput is an input type that accepts KogitoTrustySpecResourcesRequestsMap and KogitoTrustySpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoTrustySpecResourcesRequestsMapInput` via:
//
//          KogitoTrustySpecResourcesRequestsMap{ "key": KogitoTrustySpecResourcesRequestsArgs{...} }
type KogitoTrustySpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoTrustySpecResourcesRequestsMapOutput() KogitoTrustySpecResourcesRequestsMapOutput
	ToKogitoTrustySpecResourcesRequestsMapOutputWithContext(context.Context) KogitoTrustySpecResourcesRequestsMapOutput
}

type KogitoTrustySpecResourcesRequestsMap map[string]KogitoTrustySpecResourcesRequestsInput

func (KogitoTrustySpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoTrustySpecResourcesRequests)(nil)).Elem()
}

func (i KogitoTrustySpecResourcesRequestsMap) ToKogitoTrustySpecResourcesRequestsMapOutput() KogitoTrustySpecResourcesRequestsMapOutput {
	return i.ToKogitoTrustySpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoTrustySpecResourcesRequestsMap) ToKogitoTrustySpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecResourcesRequestsMapOutput)
}

type KogitoTrustySpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecResourcesRequests)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesRequestsOutput) ToKogitoTrustySpecResourcesRequestsOutput() KogitoTrustySpecResourcesRequestsOutput {
	return o
}

func (o KogitoTrustySpecResourcesRequestsOutput) ToKogitoTrustySpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesRequestsOutput {
	return o
}

type KogitoTrustySpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoTrustySpecResourcesRequests)(nil)).Elem()
}

func (o KogitoTrustySpecResourcesRequestsMapOutput) ToKogitoTrustySpecResourcesRequestsMapOutput() KogitoTrustySpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoTrustySpecResourcesRequestsMapOutput) ToKogitoTrustySpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoTrustySpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoTrustySpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoTrustySpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoTrustySpecResourcesRequests {
		return vs[0].(map[string]KogitoTrustySpecResourcesRequests)[vs[1].(string)]
	}).(KogitoTrustySpecResourcesRequestsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoTrustySpecServiceLabels struct {
}

// KogitoTrustySpecServiceLabelsInput is an input type that accepts KogitoTrustySpecServiceLabelsArgs and KogitoTrustySpecServiceLabelsOutput values.
// You can construct a concrete instance of `KogitoTrustySpecServiceLabelsInput` via:
//
//          KogitoTrustySpecServiceLabelsArgs{...}
type KogitoTrustySpecServiceLabelsInput interface {
	pulumi.Input

	ToKogitoTrustySpecServiceLabelsOutput() KogitoTrustySpecServiceLabelsOutput
	ToKogitoTrustySpecServiceLabelsOutputWithContext(context.Context) KogitoTrustySpecServiceLabelsOutput
}

// Additional labels to be added to the Service managed by the operator.
type KogitoTrustySpecServiceLabelsArgs struct {
}

func (KogitoTrustySpecServiceLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecServiceLabels)(nil)).Elem()
}

func (i KogitoTrustySpecServiceLabelsArgs) ToKogitoTrustySpecServiceLabelsOutput() KogitoTrustySpecServiceLabelsOutput {
	return i.ToKogitoTrustySpecServiceLabelsOutputWithContext(context.Background())
}

func (i KogitoTrustySpecServiceLabelsArgs) ToKogitoTrustySpecServiceLabelsOutputWithContext(ctx context.Context) KogitoTrustySpecServiceLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustySpecServiceLabelsOutput)
}

// Additional labels to be added to the Service managed by the operator.
type KogitoTrustySpecServiceLabelsOutput struct{ *pulumi.OutputState }

func (KogitoTrustySpecServiceLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustySpecServiceLabels)(nil)).Elem()
}

func (o KogitoTrustySpecServiceLabelsOutput) ToKogitoTrustySpecServiceLabelsOutput() KogitoTrustySpecServiceLabelsOutput {
	return o
}

func (o KogitoTrustySpecServiceLabelsOutput) ToKogitoTrustySpecServiceLabelsOutputWithContext(ctx context.Context) KogitoTrustySpecServiceLabelsOutput {
	return o
}

// KogitoTrustyStatus defines the observed state of KogitoTrusty.
type KogitoTrustyStatus struct {
	// History of conditions for the resource
	Conditions []KogitoTrustyStatusConditions `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions []KogitoTrustyStatusDeploymentConditions `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI *string `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image *string `pulumi:"image"`
}

// KogitoTrustyStatusInput is an input type that accepts KogitoTrustyStatusArgs and KogitoTrustyStatusOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusInput` via:
//
//          KogitoTrustyStatusArgs{...}
type KogitoTrustyStatusInput interface {
	pulumi.Input

	ToKogitoTrustyStatusOutput() KogitoTrustyStatusOutput
	ToKogitoTrustyStatusOutputWithContext(context.Context) KogitoTrustyStatusOutput
}

// KogitoTrustyStatus defines the observed state of KogitoTrusty.
type KogitoTrustyStatusArgs struct {
	// History of conditions for the resource
	Conditions KogitoTrustyStatusConditionsArrayInput `pulumi:"conditions"`
	// General conditions for the Kogito Service deployment.
	DeploymentConditions KogitoTrustyStatusDeploymentConditionsArrayInput `pulumi:"deploymentConditions"`
	// URI is where the service is exposed.
	ExternalURI pulumi.StringPtrInput `pulumi:"externalURI"`
	// Image is the resolved image for this service.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (KogitoTrustyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatus)(nil)).Elem()
}

func (i KogitoTrustyStatusArgs) ToKogitoTrustyStatusOutput() KogitoTrustyStatusOutput {
	return i.ToKogitoTrustyStatusOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusArgs) ToKogitoTrustyStatusOutputWithContext(ctx context.Context) KogitoTrustyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusOutput)
}

func (i KogitoTrustyStatusArgs) ToKogitoTrustyStatusPtrOutput() KogitoTrustyStatusPtrOutput {
	return i.ToKogitoTrustyStatusPtrOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusArgs) ToKogitoTrustyStatusPtrOutputWithContext(ctx context.Context) KogitoTrustyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusOutput).ToKogitoTrustyStatusPtrOutputWithContext(ctx)
}

// KogitoTrustyStatusPtrInput is an input type that accepts KogitoTrustyStatusArgs, KogitoTrustyStatusPtr and KogitoTrustyStatusPtrOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusPtrInput` via:
//
//          KogitoTrustyStatusArgs{...}
//
//  or:
//
//          nil
type KogitoTrustyStatusPtrInput interface {
	pulumi.Input

	ToKogitoTrustyStatusPtrOutput() KogitoTrustyStatusPtrOutput
	ToKogitoTrustyStatusPtrOutputWithContext(context.Context) KogitoTrustyStatusPtrOutput
}

type kogitoTrustyStatusPtrType KogitoTrustyStatusArgs

func KogitoTrustyStatusPtr(v *KogitoTrustyStatusArgs) KogitoTrustyStatusPtrInput {
	return (*kogitoTrustyStatusPtrType)(v)
}

func (*kogitoTrustyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustyStatus)(nil)).Elem()
}

func (i *kogitoTrustyStatusPtrType) ToKogitoTrustyStatusPtrOutput() KogitoTrustyStatusPtrOutput {
	return i.ToKogitoTrustyStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoTrustyStatusPtrType) ToKogitoTrustyStatusPtrOutputWithContext(ctx context.Context) KogitoTrustyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusPtrOutput)
}

// KogitoTrustyStatus defines the observed state of KogitoTrusty.
type KogitoTrustyStatusOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatus)(nil)).Elem()
}

func (o KogitoTrustyStatusOutput) ToKogitoTrustyStatusOutput() KogitoTrustyStatusOutput {
	return o
}

func (o KogitoTrustyStatusOutput) ToKogitoTrustyStatusOutputWithContext(ctx context.Context) KogitoTrustyStatusOutput {
	return o
}

func (o KogitoTrustyStatusOutput) ToKogitoTrustyStatusPtrOutput() KogitoTrustyStatusPtrOutput {
	return o.ToKogitoTrustyStatusPtrOutputWithContext(context.Background())
}

func (o KogitoTrustyStatusOutput) ToKogitoTrustyStatusPtrOutputWithContext(ctx context.Context) KogitoTrustyStatusPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatus) *KogitoTrustyStatus {
		return &v
	}).(KogitoTrustyStatusPtrOutput)
}

// History of conditions for the resource
func (o KogitoTrustyStatusOutput) Conditions() KogitoTrustyStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoTrustyStatus) []KogitoTrustyStatusConditions { return v.Conditions }).(KogitoTrustyStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoTrustyStatusOutput) DeploymentConditions() KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v KogitoTrustyStatus) []KogitoTrustyStatusDeploymentConditions { return v.DeploymentConditions }).(KogitoTrustyStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoTrustyStatusOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatus) *string { return v.ExternalURI }).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoTrustyStatusOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatus) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type KogitoTrustyStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoTrustyStatus)(nil)).Elem()
}

func (o KogitoTrustyStatusPtrOutput) ToKogitoTrustyStatusPtrOutput() KogitoTrustyStatusPtrOutput {
	return o
}

func (o KogitoTrustyStatusPtrOutput) ToKogitoTrustyStatusPtrOutputWithContext(ctx context.Context) KogitoTrustyStatusPtrOutput {
	return o
}

func (o KogitoTrustyStatusPtrOutput) Elem() KogitoTrustyStatusOutput {
	return o.ApplyT(func(v *KogitoTrustyStatus) KogitoTrustyStatus { return *v }).(KogitoTrustyStatusOutput)
}

// History of conditions for the resource
func (o KogitoTrustyStatusPtrOutput) Conditions() KogitoTrustyStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoTrustyStatus) []KogitoTrustyStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoTrustyStatusConditionsArrayOutput)
}

// General conditions for the Kogito Service deployment.
func (o KogitoTrustyStatusPtrOutput) DeploymentConditions() KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoTrustyStatus) []KogitoTrustyStatusDeploymentConditions {
		if v == nil {
			return nil
		}
		return v.DeploymentConditions
	}).(KogitoTrustyStatusDeploymentConditionsArrayOutput)
}

// URI is where the service is exposed.
func (o KogitoTrustyStatusPtrOutput) ExternalURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustyStatus) *string {
		if v == nil {
			return nil
		}
		return v.ExternalURI
	}).(pulumi.StringPtrOutput)
}

// Image is the resolved image for this service.
func (o KogitoTrustyStatusPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoTrustyStatus) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Condition is the detailed condition for the resource
type KogitoTrustyStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ReasonType is the type of reason
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of condition
	Type string `pulumi:"type"`
}

// KogitoTrustyStatusConditionsInput is an input type that accepts KogitoTrustyStatusConditionsArgs and KogitoTrustyStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusConditionsInput` via:
//
//          KogitoTrustyStatusConditionsArgs{...}
type KogitoTrustyStatusConditionsInput interface {
	pulumi.Input

	ToKogitoTrustyStatusConditionsOutput() KogitoTrustyStatusConditionsOutput
	ToKogitoTrustyStatusConditionsOutputWithContext(context.Context) KogitoTrustyStatusConditionsOutput
}

// Condition is the detailed condition for the resource
type KogitoTrustyStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ReasonType is the type of reason
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoTrustyStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatusConditions)(nil)).Elem()
}

func (i KogitoTrustyStatusConditionsArgs) ToKogitoTrustyStatusConditionsOutput() KogitoTrustyStatusConditionsOutput {
	return i.ToKogitoTrustyStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusConditionsArgs) ToKogitoTrustyStatusConditionsOutputWithContext(ctx context.Context) KogitoTrustyStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusConditionsOutput)
}

// KogitoTrustyStatusConditionsArrayInput is an input type that accepts KogitoTrustyStatusConditionsArray and KogitoTrustyStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusConditionsArrayInput` via:
//
//          KogitoTrustyStatusConditionsArray{ KogitoTrustyStatusConditionsArgs{...} }
type KogitoTrustyStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoTrustyStatusConditionsArrayOutput() KogitoTrustyStatusConditionsArrayOutput
	ToKogitoTrustyStatusConditionsArrayOutputWithContext(context.Context) KogitoTrustyStatusConditionsArrayOutput
}

type KogitoTrustyStatusConditionsArray []KogitoTrustyStatusConditionsInput

func (KogitoTrustyStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustyStatusConditions)(nil)).Elem()
}

func (i KogitoTrustyStatusConditionsArray) ToKogitoTrustyStatusConditionsArrayOutput() KogitoTrustyStatusConditionsArrayOutput {
	return i.ToKogitoTrustyStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusConditionsArray) ToKogitoTrustyStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoTrustyStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusConditionsArrayOutput)
}

// Condition is the detailed condition for the resource
type KogitoTrustyStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatusConditions)(nil)).Elem()
}

func (o KogitoTrustyStatusConditionsOutput) ToKogitoTrustyStatusConditionsOutput() KogitoTrustyStatusConditionsOutput {
	return o
}

func (o KogitoTrustyStatusConditionsOutput) ToKogitoTrustyStatusConditionsOutputWithContext(ctx context.Context) KogitoTrustyStatusConditionsOutput {
	return o
}

func (o KogitoTrustyStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustyStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ReasonType is the type of reason
func (o KogitoTrustyStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o KogitoTrustyStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustyStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of condition
func (o KogitoTrustyStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustyStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoTrustyStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustyStatusConditions)(nil)).Elem()
}

func (o KogitoTrustyStatusConditionsArrayOutput) ToKogitoTrustyStatusConditionsArrayOutput() KogitoTrustyStatusConditionsArrayOutput {
	return o
}

func (o KogitoTrustyStatusConditionsArrayOutput) ToKogitoTrustyStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoTrustyStatusConditionsArrayOutput {
	return o
}

func (o KogitoTrustyStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoTrustyStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoTrustyStatusConditions {
		return vs[0].([]KogitoTrustyStatusConditions)[vs[1].(int)]
	}).(KogitoTrustyStatusConditionsOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoTrustyStatusDeploymentConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of deployment condition.
	Type string `pulumi:"type"`
}

// KogitoTrustyStatusDeploymentConditionsInput is an input type that accepts KogitoTrustyStatusDeploymentConditionsArgs and KogitoTrustyStatusDeploymentConditionsOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusDeploymentConditionsInput` via:
//
//          KogitoTrustyStatusDeploymentConditionsArgs{...}
type KogitoTrustyStatusDeploymentConditionsInput interface {
	pulumi.Input

	ToKogitoTrustyStatusDeploymentConditionsOutput() KogitoTrustyStatusDeploymentConditionsOutput
	ToKogitoTrustyStatusDeploymentConditionsOutputWithContext(context.Context) KogitoTrustyStatusDeploymentConditionsOutput
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoTrustyStatusDeploymentConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// The last time this condition was updated.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of deployment condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoTrustyStatusDeploymentConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoTrustyStatusDeploymentConditionsArgs) ToKogitoTrustyStatusDeploymentConditionsOutput() KogitoTrustyStatusDeploymentConditionsOutput {
	return i.ToKogitoTrustyStatusDeploymentConditionsOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusDeploymentConditionsArgs) ToKogitoTrustyStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoTrustyStatusDeploymentConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusDeploymentConditionsOutput)
}

// KogitoTrustyStatusDeploymentConditionsArrayInput is an input type that accepts KogitoTrustyStatusDeploymentConditionsArray and KogitoTrustyStatusDeploymentConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoTrustyStatusDeploymentConditionsArrayInput` via:
//
//          KogitoTrustyStatusDeploymentConditionsArray{ KogitoTrustyStatusDeploymentConditionsArgs{...} }
type KogitoTrustyStatusDeploymentConditionsArrayInput interface {
	pulumi.Input

	ToKogitoTrustyStatusDeploymentConditionsArrayOutput() KogitoTrustyStatusDeploymentConditionsArrayOutput
	ToKogitoTrustyStatusDeploymentConditionsArrayOutputWithContext(context.Context) KogitoTrustyStatusDeploymentConditionsArrayOutput
}

type KogitoTrustyStatusDeploymentConditionsArray []KogitoTrustyStatusDeploymentConditionsInput

func (KogitoTrustyStatusDeploymentConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustyStatusDeploymentConditions)(nil)).Elem()
}

func (i KogitoTrustyStatusDeploymentConditionsArray) ToKogitoTrustyStatusDeploymentConditionsArrayOutput() KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return i.ToKogitoTrustyStatusDeploymentConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoTrustyStatusDeploymentConditionsArray) ToKogitoTrustyStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoTrustyStatusDeploymentConditionsArrayOutput)
}

// DeploymentCondition describes the state of a deployment at a certain point.
type KogitoTrustyStatusDeploymentConditionsOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusDeploymentConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoTrustyStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoTrustyStatusDeploymentConditionsOutput) ToKogitoTrustyStatusDeploymentConditionsOutput() KogitoTrustyStatusDeploymentConditionsOutput {
	return o
}

func (o KogitoTrustyStatusDeploymentConditionsOutput) ToKogitoTrustyStatusDeploymentConditionsOutputWithContext(ctx context.Context) KogitoTrustyStatusDeploymentConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o KogitoTrustyStatusDeploymentConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// The last time this condition was updated.
func (o KogitoTrustyStatusDeploymentConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KogitoTrustyStatusDeploymentConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KogitoTrustyStatusDeploymentConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o KogitoTrustyStatusDeploymentConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of deployment condition.
func (o KogitoTrustyStatusDeploymentConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoTrustyStatusDeploymentConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoTrustyStatusDeploymentConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoTrustyStatusDeploymentConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoTrustyStatusDeploymentConditions)(nil)).Elem()
}

func (o KogitoTrustyStatusDeploymentConditionsArrayOutput) ToKogitoTrustyStatusDeploymentConditionsArrayOutput() KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoTrustyStatusDeploymentConditionsArrayOutput) ToKogitoTrustyStatusDeploymentConditionsArrayOutputWithContext(ctx context.Context) KogitoTrustyStatusDeploymentConditionsArrayOutput {
	return o
}

func (o KogitoTrustyStatusDeploymentConditionsArrayOutput) Index(i pulumi.IntInput) KogitoTrustyStatusDeploymentConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoTrustyStatusDeploymentConditions {
		return vs[0].([]KogitoTrustyStatusDeploymentConditions)[vs[1].(int)]
	}).(KogitoTrustyStatusDeploymentConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(KogitoBuildTypeOutput{})
	pulumi.RegisterOutputType(KogitoBuildMetadataOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecBuildImageOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecBuildImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourceOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourcePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecRuntimeImageOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecRuntimeImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexTypeOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexMetadataOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecImageOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecInfinispanOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecInfinispanPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecInfinispanCredentialsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecInfinispanCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecKafkaOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecKafkaPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoDataIndexStatusDeploymentConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraTypeOutput{})
	pulumi.RegisterOutputType(KogitoInfraMetadataOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecOutput{})
	pulumi.RegisterOutputType(KogitoInfraSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusConditionOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusConditionPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusInfinispanOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusInfinispanPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusInfinispanConditionOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusInfinispanConditionArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKafkaOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKafkaPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKafkaConditionOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKafkaConditionArrayOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKeycloakOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKeycloakPtrOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKeycloakConditionOutput{})
	pulumi.RegisterOutputType(KogitoInfraStatusKeycloakConditionArrayOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceTypeOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceMetadataOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecImageOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecInfinispanOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecInfinispanPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecInfinispanCredentialsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecInfinispanCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecKafkaOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecKafkaPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoJobsServiceStatusDeploymentConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleTypeOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleMetadataOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecImageOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoMgmtConsoleStatusDeploymentConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeTypeOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeMetadataOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecImageOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecInfinispanOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecInfinispanPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecInfinispanCredentialsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecInfinispanCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecKafkaOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecKafkaPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeSpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoRuntimeStatusDeploymentConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoTrustyTypeOutput{})
	pulumi.RegisterOutputType(KogitoTrustyMetadataOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecDeploymentLabelsOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecImageOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecInfinispanOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecInfinispanPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecInfinispanCredentialsOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecInfinispanCredentialsPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecKafkaOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecKafkaPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoTrustySpecServiceLabelsOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusDeploymentConditionsOutput{})
	pulumi.RegisterOutputType(KogitoTrustyStatusDeploymentConditionsArrayOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace app {
    export namespace v1beta1 {
        /**
         * KogitoBuildSpec defines the desired state of KogitoBuild.
         */
        export interface KogitoBuildSpec {
            /**
             * Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
             */
            artifact?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecArtifact>;
            /**
             * Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
             */
            buildImage?: pulumi.Input<string>;
            /**
             * DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
             */
            disableIncremental?: pulumi.Input<boolean>;
            /**
             * If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
             */
            enableMavenDownloadOutput?: pulumi.Input<boolean>;
            /**
             * Environment variables used during build time.
             */
            env?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnv>[]>;
            /**
             * Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
             */
            gitSource?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecGitSource>;
            /**
             * Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
             */
            mavenMirrorURL?: pulumi.Input<string>;
            /**
             * Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
             */
            native?: pulumi.Input<boolean>;
            /**
             * Resources Requirements for builder pods.
             */
            resources?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecResources>;
            /**
             * Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
             */
            runtime?: pulumi.Input<string>;
            /**
             * Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: "quay.io/kiegroup/kogito-jvm-builder:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
             */
            runtimeImage?: pulumi.Input<string>;
            /**
             * Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
             */
            targetKogitoRuntime?: pulumi.Input<string>;
            /**
             * Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
             */
            type: pulumi.Input<string>;
            /**
             * WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
             */
            webHooks?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecWebHooks>[]>;
        }

        /**
         * Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
         */
        export interface KogitoBuildSpecArtifact {
            /**
             * Indicates the unique base name of the primary artifact being generated.
             */
            artifactId?: pulumi.Input<string>;
            /**
             * Indicates the unique identifier of the organization or group that created the project.
             */
            groupId?: pulumi.Input<string>;
            /**
             * Indicates the version of the artifact generated by the project.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface KogitoBuildSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface KogitoBuildSpecEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface KogitoBuildSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface KogitoBuildSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface KogitoBuildSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface KogitoBuildSpecEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface KogitoBuildSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
         */
        export interface KogitoBuildSpecGitSource {
            /**
             * Context/subdirectory where the code is located, relative to the repo root.
             */
            contextDir?: pulumi.Input<string>;
            /**
             * Branch to use in the Git repository.
             */
            reference?: pulumi.Input<string>;
            /**
             * Git URI for the s2i source.
             */
            uri: pulumi.Input<string>;
        }

        /**
         * Resources Requirements for builder pods.
         */
        export interface KogitoBuildSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoBuildSpecResourcesRequests>}>;
        }

        export interface KogitoBuildSpecResourcesLimits {
        }

        export interface KogitoBuildSpecResourcesRequests {
        }

        /**
         * WebHookSecret Secret to use for a given webHook.
         */
        export interface KogitoBuildSpecWebHooks {
            /**
             * Secret value for webHook
             */
            secret?: pulumi.Input<string>;
            /**
             * WebHook type, either GitHub or Generic.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * KogitoBuildStatus defines the observed state of KogitoBuild.
         */
        export interface KogitoBuildStatus {
            /**
             * History of builds
             */
            builds: pulumi.Input<inputs.app.v1beta1.KogitoBuildStatusBuilds>;
            /**
             * History of conditions for the resource, shows the status of the younger builder controlled by this instance
             */
            conditions: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoBuildStatusConditions>[]>;
            latestBuild?: pulumi.Input<string>;
        }

        /**
         * History of builds
         */
        export interface KogitoBuildStatusBuilds {
            /**
             * Builds have been stopped from executing.
             */
            cancelled?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds have executed and succeeded.
             */
            complete?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds have been prevented from executing by an error.
             */
            error?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds have executed and failed.
             */
            failed?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds are being created.
             */
            new?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds are about to start running.
             */
            pending?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Builds are running.
             */
            running?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
         */
        export interface KogitoBuildStatusConditions {
            /**
             * LastTransitionTime ...
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message ...
             */
            message?: pulumi.Input<string>;
            /**
             * Reason of this condition
             */
            reason?: pulumi.Input<string>;
            /**
             * Status ...
             */
            status: pulumi.Input<string>;
            /**
             * Type of this condition
             */
            type: pulumi.Input<string>;
        }

        /**
         * KogitoInfraSpec defines the desired state of KogitoInfra.
         */
        export interface KogitoInfraSpec {
            /**
             * Resource for the service. Example: Infinispan/Kafka/Keycloak.
             */
            resource?: pulumi.Input<inputs.app.v1beta1.KogitoInfraSpecResource>;
        }

        /**
         * Resource for the service. Example: Infinispan/Kafka/Keycloak.
         */
        export interface KogitoInfraSpecResource {
            /**
             * APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind describes the kind of referred Kubernetes resource for example, Infinispan
             */
            kind: pulumi.Input<string>;
            /**
             * Name of referred resource.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace where referred resource exists.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * KogitoInfraStatus defines the observed state of KogitoInfra.
         */
        export interface KogitoInfraStatus {
            /**
             * Application properties extracted from the linked resource that will be added to the deployed Kogito service.
             */
            appProps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * KogitoInfraCondition ...
             */
            condition?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusCondition>;
            /**
             * Environment variables extracted from the linked resource that will be added to the deployed Kogito service.
             */
            env?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnv>[]>;
            /**
             * List of volumes that should be added to the services bound to this infra instance
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumes>[]>;
        }

        /**
         * KogitoInfraCondition ...
         */
        export interface KogitoInfraStatusCondition {
            /**
             * LastTransitionTime ...
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message ...
             */
            message?: pulumi.Input<string>;
            /**
             * Reason ...
             */
            reason?: pulumi.Input<string>;
            /**
             * Status ...
             */
            status: pulumi.Input<string>;
            /**
             * Type ...
             */
            type: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface KogitoInfraStatusEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface KogitoInfraStatusEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface KogitoInfraStatusEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface KogitoInfraStatusEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface KogitoInfraStatusEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface KogitoInfraStatusEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface KogitoInfraStatusEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * KogitoInfraVolume describes the data structure for volumes that should be mounted in the given service provided by this infra instance
         */
        export interface KogitoInfraStatusVolumes {
            /**
             * Mount is the Kubernetes VolumeMount referenced by this instance
             */
            mount: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesMount>;
            /**
             * NamedVolume describes the pod Volume reference
             */
            volume: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesVolume>;
        }

        /**
         * Mount is the Kubernetes VolumeMount referenced by this instance
         */
        export interface KogitoInfraStatusVolumesMount {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * NamedVolume describes the pod Volume reference
         */
        export interface KogitoInfraStatusVolumesVolume {
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesVolumeConfigMap>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesVolumeSecret>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface KogitoInfraStatusVolumesVolumeConfigMap {
            /**
             * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesVolumeConfigMapItems>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface KogitoInfraStatusVolumesVolumeConfigMapItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface KogitoInfraStatusVolumesVolumeSecret {
            /**
             * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoInfraStatusVolumesVolumeSecretItems>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface KogitoInfraStatusVolumesVolumeSecretItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * KogitoRuntimeSpec defines the desired state of KogitoRuntime.
         */
        export interface KogitoRuntimeSpec {
            /**
             * Application properties that will be set to the service. For example 'MY_VAR: my_value'.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Additional labels to be added to the Deployment and Pods managed by the operator.
             */
            deploymentLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.
             */
            enableIstio?: pulumi.Input<boolean>;
            /**
             * Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
             */
            env?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnv>[]>;
            /**
             * Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
             */
            image?: pulumi.Input<string>;
            /**
             * Infra provides list of dependent KogitoInfra objects.
             */
            infra?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
             */
            insecureImageRegistry?: pulumi.Input<boolean>;
            /**
             * Create Service monitor instance to connect with Monitoring service
             */
            monitoring?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecMonitoring>;
            /**
             * Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
             */
            propertiesConfigMap?: pulumi.Input<string>;
            /**
             * Number of replicas that the service will have deployed in the cluster. Default value: 1.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Defined compute resource requirements for the deployed service.
             */
            resources?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecResources>;
            /**
             * The name of the runtime used, either Quarkus or SpringBoot. Default value: quarkus
             */
            runtime?: pulumi.Input<string>;
            /**
             * Additional labels to be added to the Service managed by the operator.
             */
            serviceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface KogitoRuntimeSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface KogitoRuntimeSpecEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface KogitoRuntimeSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface KogitoRuntimeSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface KogitoRuntimeSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface KogitoRuntimeSpecEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface KogitoRuntimeSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Create Service monitor instance to connect with Monitoring service
         */
        export interface KogitoRuntimeSpecMonitoring {
            /**
             * HTTP path to scrape for metrics.
             */
            path?: pulumi.Input<string>;
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Defined compute resource requirements for the deployed service.
         */
        export interface KogitoRuntimeSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeSpecResourcesRequests>}>;
        }

        export interface KogitoRuntimeSpecResourcesLimits {
        }

        export interface KogitoRuntimeSpecResourcesRequests {
        }

        /**
         * KogitoRuntimeStatus defines the observed state of KogitoRuntime.
         */
        export interface KogitoRuntimeStatus {
            /**
             * Describes the CloudEvents that this instance can consume or produce
             */
            cloudEvents?: pulumi.Input<inputs.app.v1beta1.KogitoRuntimeStatusCloudEvents>;
            /**
             * History of conditions for the resource
             */
            conditions: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoRuntimeStatusConditions>[]>;
            /**
             * General conditions for the Kogito Service deployment.
             */
            deploymentConditions?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoRuntimeStatusDeploymentConditions>[]>;
            /**
             * URI is where the service is exposed.
             */
            externalURI?: pulumi.Input<string>;
            /**
             * Image is the resolved image for this service.
             */
            image?: pulumi.Input<string>;
        }

        /**
         * Describes the CloudEvents that this instance can consume or produce
         */
        export interface KogitoRuntimeStatusCloudEvents {
            consumes?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoRuntimeStatusCloudEventsConsumes>[]>;
            produces?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoRuntimeStatusCloudEventsProduces>[]>;
        }

        /**
         * KogitoCloudEventInfo describes the CloudEvent information based on the specification
         */
        export interface KogitoRuntimeStatusCloudEventsConsumes {
            source?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * KogitoCloudEventInfo describes the CloudEvent information based on the specification
         */
        export interface KogitoRuntimeStatusCloudEventsProduces {
            source?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Condition is the detailed condition for the resource
         */
        export interface KogitoRuntimeStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            /**
             * KogitoServiceConditionReason is the type of reason
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * ConditionType is the type of condition
             */
            type: pulumi.Input<string>;
        }

        /**
         * DeploymentCondition describes the state of a deployment at a certain point.
         */
        export interface KogitoRuntimeStatusDeploymentConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of deployment condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * KogitoSupportingServiceSpec defines the desired state of KogitoSupportingService.
         */
        export interface KogitoSupportingServiceSpec {
            /**
             * Application properties that will be set to the service. For example 'MY_VAR: my_value'.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Additional labels to be added to the Deployment and Pods managed by the operator.
             */
            deploymentLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER.
             */
            env?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnv>[]>;
            /**
             * Image definition for the service. Example: "quay.io/kiegroup/kogito-service:latest". On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
             */
            image?: pulumi.Input<string>;
            /**
             * Infra provides list of dependent KogitoInfra objects.
             */
            infra?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. Defaults to 'false'.
             */
            insecureImageRegistry?: pulumi.Input<boolean>;
            /**
             * Create Service monitor instance to connect with Monitoring service
             */
            monitoring?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecMonitoring>;
            /**
             * Custom ConfigMap with application.properties file to be mounted for the Kogito service. The ConfigMap must be created in the same namespace. Use this property if you need custom properties to be mounted before the application deployment. If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.
             */
            propertiesConfigMap?: pulumi.Input<string>;
            /**
             * Number of replicas that the service will have deployed in the cluster. Default value: 1.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Defined compute resource requirements for the deployed service.
             */
            resources?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecResources>;
            /**
             * Additional labels to be added to the Service managed by the operator.
             */
            serviceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService
             */
            serviceType: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface KogitoSupportingServiceSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface KogitoSupportingServiceSpecEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface KogitoSupportingServiceSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface KogitoSupportingServiceSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface KogitoSupportingServiceSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface KogitoSupportingServiceSpecEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface KogitoSupportingServiceSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Create Service monitor instance to connect with Monitoring service
         */
        export interface KogitoSupportingServiceSpecMonitoring {
            /**
             * HTTP path to scrape for metrics.
             */
            path?: pulumi.Input<string>;
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * Defined compute resource requirements for the deployed service.
         */
        export interface KogitoSupportingServiceSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceSpecResourcesRequests>}>;
        }

        export interface KogitoSupportingServiceSpecResourcesLimits {
        }

        export interface KogitoSupportingServiceSpecResourcesRequests {
        }

        /**
         * KogitoSupportingServiceStatus defines the observed state of KogitoSupportingService.
         */
        export interface KogitoSupportingServiceStatus {
            /**
             * Describes the CloudEvents that this instance can consume or produce
             */
            cloudEvents?: pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceStatusCloudEvents>;
            /**
             * History of conditions for the resource
             */
            conditions: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceStatusConditions>[]>;
            /**
             * General conditions for the Kogito Service deployment.
             */
            deploymentConditions?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceStatusDeploymentConditions>[]>;
            /**
             * URI is where the service is exposed.
             */
            externalURI?: pulumi.Input<string>;
            /**
             * Image is the resolved image for this service.
             */
            image?: pulumi.Input<string>;
        }

        /**
         * Describes the CloudEvents that this instance can consume or produce
         */
        export interface KogitoSupportingServiceStatusCloudEvents {
            consumes?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceStatusCloudEventsConsumes>[]>;
            produces?: pulumi.Input<pulumi.Input<inputs.app.v1beta1.KogitoSupportingServiceStatusCloudEventsProduces>[]>;
        }

        /**
         * KogitoCloudEventInfo describes the CloudEvent information based on the specification
         */
        export interface KogitoSupportingServiceStatusCloudEventsConsumes {
            source?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * KogitoCloudEventInfo describes the CloudEvent information based on the specification
         */
        export interface KogitoSupportingServiceStatusCloudEventsProduces {
            source?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Condition is the detailed condition for the resource
         */
        export interface KogitoSupportingServiceStatusConditions {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            /**
             * KogitoServiceConditionReason is the type of reason
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * ConditionType is the type of condition
             */
            type: pulumi.Input<string>;
        }

        /**
         * DeploymentCondition describes the state of a deployment at a certain point.
         */
        export interface KogitoSupportingServiceStatusDeploymentConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of deployment condition.
             */
            type: pulumi.Input<string>;
        }
    }
}

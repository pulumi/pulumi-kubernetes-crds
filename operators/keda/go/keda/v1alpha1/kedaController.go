// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KedaController is the Schema for the kedacontrollers API
type KedaController struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KedaControllerSpec defines the desired state of KedaController
	Spec KedaControllerSpecPtrOutput `pulumi:"spec"`
	// KedaControllerStatus defines the observed state of KedaController
	Status KedaControllerStatusPtrOutput `pulumi:"status"`
}

// NewKedaController registers a new resource with the given unique name, arguments, and options.
func NewKedaController(ctx *pulumi.Context,
	name string, args *KedaControllerArgs, opts ...pulumi.ResourceOption) (*KedaController, error) {
	if args == nil {
		args = &KedaControllerArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("keda.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("KedaController")
	var resource KedaController
	err := ctx.RegisterResource("kubernetes:keda.k8s.io/v1alpha1:KedaController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKedaController gets an existing KedaController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKedaController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KedaControllerState, opts ...pulumi.ResourceOption) (*KedaController, error) {
	var resource KedaController
	err := ctx.ReadResource("kubernetes:keda.k8s.io/v1alpha1:KedaController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KedaController resources.
type kedaControllerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KedaControllerSpec defines the desired state of KedaController
	Spec *KedaControllerSpec `pulumi:"spec"`
	// KedaControllerStatus defines the observed state of KedaController
	Status *KedaControllerStatus `pulumi:"status"`
}

type KedaControllerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KedaControllerSpec defines the desired state of KedaController
	Spec KedaControllerSpecPtrInput
	// KedaControllerStatus defines the observed state of KedaController
	Status KedaControllerStatusPtrInput
}

func (KedaControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kedaControllerState)(nil)).Elem()
}

type kedaControllerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KedaControllerSpec defines the desired state of KedaController
	Spec *KedaControllerSpec `pulumi:"spec"`
	// KedaControllerStatus defines the observed state of KedaController
	Status *KedaControllerStatus `pulumi:"status"`
}

// The set of arguments for constructing a KedaController resource.
type KedaControllerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KedaControllerSpec defines the desired state of KedaController
	Spec KedaControllerSpecPtrInput
	// KedaControllerStatus defines the observed state of KedaController
	Status KedaControllerStatusPtrInput
}

func (KedaControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kedaControllerArgs)(nil)).Elem()
}

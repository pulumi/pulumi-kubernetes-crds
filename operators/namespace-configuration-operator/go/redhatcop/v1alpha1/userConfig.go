// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// UserConfig is the Schema for the userconfigs API
type UserConfig struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
	Spec UserConfigSpecPtrOutput `pulumi:"spec"`
	// UserConfigStatus defines the observed state of UserConfig
	Status UserConfigStatusPtrOutput `pulumi:"status"`
}

// NewUserConfig registers a new resource with the given unique name, arguments, and options.
func NewUserConfig(ctx *pulumi.Context,
	name string, args *UserConfigArgs, opts ...pulumi.ResourceOption) (*UserConfig, error) {
	if args == nil {
		args = &UserConfigArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("redhatcop.redhat.io/v1alpha1")
	args.Kind = pulumi.StringPtr("UserConfig")
	var resource UserConfig
	err := ctx.RegisterResource("kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserConfig gets an existing UserConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserConfigState, opts ...pulumi.ResourceOption) (*UserConfig, error) {
	var resource UserConfig
	err := ctx.ReadResource("kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserConfig resources.
type userConfigState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
	Spec *UserConfigSpec `pulumi:"spec"`
	// UserConfigStatus defines the observed state of UserConfig
	Status *UserConfigStatus `pulumi:"status"`
}

type UserConfigState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
	Spec UserConfigSpecPtrInput
	// UserConfigStatus defines the observed state of UserConfig
	Status UserConfigStatusPtrInput
}

func (UserConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*userConfigState)(nil)).Elem()
}

type userConfigArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
	Spec *UserConfigSpec `pulumi:"spec"`
	// UserConfigStatus defines the observed state of UserConfig
	Status *UserConfigStatus `pulumi:"status"`
}

// The set of arguments for constructing a UserConfig resource.
type UserConfigArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
	Spec UserConfigSpecPtrInput
	// UserConfigStatus defines the observed state of UserConfig
	Status UserConfigStatusPtrInput
}

func (UserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userConfigArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// NamespaceConfig is the Schema for the nsconfigs API
type NamespaceConfig struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// NamespaceConfigSpec defines the desired state of NamespaceConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Namespace to be selected.
	Spec NamespaceConfigSpecPtrOutput `pulumi:"spec"`
	// NamespaceConfigStatus defines the observed state of NSConfig
	Status NamespaceConfigStatusPtrOutput `pulumi:"status"`
}

// NewNamespaceConfig registers a new resource with the given unique name, arguments, and options.
func NewNamespaceConfig(ctx *pulumi.Context,
	name string, args *NamespaceConfigArgs, opts ...pulumi.ResourceOption) (*NamespaceConfig, error) {
	if args == nil {
		args = &NamespaceConfigArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("redhatcop.redhat.io/v1alpha1")
	args.Kind = pulumi.StringPtr("NamespaceConfig")
	var resource NamespaceConfig
	err := ctx.RegisterResource("kubernetes:redhatcop.redhat.io/v1alpha1:NamespaceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceConfig gets an existing NamespaceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceConfigState, opts ...pulumi.ResourceOption) (*NamespaceConfig, error) {
	var resource NamespaceConfig
	err := ctx.ReadResource("kubernetes:redhatcop.redhat.io/v1alpha1:NamespaceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceConfig resources.
type namespaceConfigState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NamespaceConfigSpec defines the desired state of NamespaceConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Namespace to be selected.
	Spec *NamespaceConfigSpec `pulumi:"spec"`
	// NamespaceConfigStatus defines the observed state of NSConfig
	Status *NamespaceConfigStatus `pulumi:"status"`
}

type NamespaceConfigState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NamespaceConfigSpec defines the desired state of NamespaceConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Namespace to be selected.
	Spec NamespaceConfigSpecPtrInput
	// NamespaceConfigStatus defines the observed state of NSConfig
	Status NamespaceConfigStatusPtrInput
}

func (NamespaceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceConfigState)(nil)).Elem()
}

type namespaceConfigArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NamespaceConfigSpec defines the desired state of NamespaceConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Namespace to be selected.
	Spec *NamespaceConfigSpec `pulumi:"spec"`
	// NamespaceConfigStatus defines the observed state of NSConfig
	Status *NamespaceConfigStatus `pulumi:"status"`
}

// The set of arguments for constructing a NamespaceConfig resource.
type NamespaceConfigArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NamespaceConfigSpec defines the desired state of NamespaceConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Namespace to be selected.
	Spec NamespaceConfigSpecPtrInput
	// NamespaceConfigStatus defines the observed state of NSConfig
	Status NamespaceConfigStatusPtrInput
}

func (NamespaceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceConfigArgs)(nil)).Elem()
}

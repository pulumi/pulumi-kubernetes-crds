// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// GroupConfig is the Schema for the groupconfigs API
type GroupConfig struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// GroupConfigSpec defines the desired state of GroupConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Group to be selected.
	Spec GroupConfigSpecPtrOutput `pulumi:"spec"`
	// GroupConfigStatus defines the observed state of GroupConfig
	Status GroupConfigStatusPtrOutput `pulumi:"status"`
}

// NewGroupConfig registers a new resource with the given unique name, arguments, and options.
func NewGroupConfig(ctx *pulumi.Context,
	name string, args *GroupConfigArgs, opts ...pulumi.ResourceOption) (*GroupConfig, error) {
	if args == nil {
		args = &GroupConfigArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("redhatcop.redhat.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GroupConfig")
	var resource GroupConfig
	err := ctx.RegisterResource("kubernetes:redhatcop.redhat.io/v1alpha1:GroupConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupConfig gets an existing GroupConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupConfigState, opts ...pulumi.ResourceOption) (*GroupConfig, error) {
	var resource GroupConfig
	err := ctx.ReadResource("kubernetes:redhatcop.redhat.io/v1alpha1:GroupConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupConfig resources.
type groupConfigState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GroupConfigSpec defines the desired state of GroupConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Group to be selected.
	Spec *GroupConfigSpec `pulumi:"spec"`
	// GroupConfigStatus defines the observed state of GroupConfig
	Status *GroupConfigStatus `pulumi:"status"`
}

type GroupConfigState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// GroupConfigSpec defines the desired state of GroupConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Group to be selected.
	Spec GroupConfigSpecPtrInput
	// GroupConfigStatus defines the observed state of GroupConfig
	Status GroupConfigStatusPtrInput
}

func (GroupConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupConfigState)(nil)).Elem()
}

type groupConfigArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GroupConfigSpec defines the desired state of GroupConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Group to be selected.
	Spec *GroupConfigSpec `pulumi:"spec"`
	// GroupConfigStatus defines the observed state of GroupConfig
	Status *GroupConfigStatus `pulumi:"status"`
}

// The set of arguments for constructing a GroupConfig resource.
type GroupConfigArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// GroupConfigSpec defines the desired state of GroupConfig There are two selectors: "labelSelector", "annotationSelector". Selectors are considered in AND, so if multiple are defined they must all be true for a Group to be selected.
	Spec GroupConfigSpecPtrInput
	// GroupConfigStatus defines the observed state of GroupConfig
	Status GroupConfigStatusPtrInput
}

func (GroupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupConfigArgs)(nil)).Elem()
}

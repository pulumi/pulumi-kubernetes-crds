// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pulumi.Kubernetes.Crds.Operators.NamespaceConfigurationOperator.Redhatcop.V1Alpha1
{
    /// <summary>
    /// UserConfig is the Schema for the userconfigs API
    /// </summary>
    public partial class UserConfig : KubernetesResource
    {
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
        /// </summary>
        [Output("spec")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.UserConfigSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// UserConfigStatus defines the observed state of UserConfig
        /// </summary>
        [Output("status")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.UserConfigStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a UserConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserConfig(string name, Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal UserConfig(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private UserConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigArgs();
            args.ApiVersion = "redhatcop.redhat.io/v1alpha1";
            args.Kind = "UserConfig";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UserConfig(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1
{

    public class UserConfigArgs : Pulumi.ResourceArgs
    {
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs>? Metadata { get; set; }

        /// <summary>
        /// UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
        /// </summary>
        [Input("spec")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigSpecArgs>? Spec { get; set; }

        /// <summary>
        /// UserConfigStatus defines the observed state of UserConfig
        /// </summary>
        [Input("status")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Redhatcop.V1Alpha1.UserConfigStatusArgs>? Status { get; set; }

        public UserConfigArgs()
        {
        }
    }
}

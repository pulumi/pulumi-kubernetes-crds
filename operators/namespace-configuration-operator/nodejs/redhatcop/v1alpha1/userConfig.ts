// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

import {ObjectMeta} from "../../meta/v1";

/**
 * UserConfig is the Schema for the userconfigs API
 */
export class UserConfig extends pulumi.CustomResource {
    /**
     * Get an existing UserConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): UserConfig {
        return new UserConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:redhatcop.redhat.io/v1alpha1:UserConfig';

    /**
     * Returns true if the given object is an instance of UserConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserConfig.__pulumiType;
    }

    public readonly apiVersion!: pulumi.Output<"redhatcop.redhat.io/v1alpha1" | undefined>;
    public readonly kind!: pulumi.Output<"UserConfig" | undefined>;
    public readonly metadata!: pulumi.Output<ObjectMeta | undefined>;
    /**
     * UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
     */
    public readonly spec!: pulumi.Output<outputs.redhatcop.v1alpha1.UserConfigSpec | undefined>;
    /**
     * UserConfigStatus defines the observed state of UserConfig
     */
    public readonly status!: pulumi.Output<outputs.redhatcop.v1alpha1.UserConfigStatus | undefined>;

    /**
     * Create a UserConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            inputs["apiVersion"] = "redhatcop.redhat.io/v1alpha1";
            inputs["kind"] = "UserConfig";
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["spec"] = args ? args.spec : undefined;
            inputs["status"] = args ? args.status : undefined;
        } else {
            inputs["apiVersion"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["spec"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a UserConfig resource.
 */
export interface UserConfigArgs {
    readonly apiVersion?: pulumi.Input<"redhatcop.redhat.io/v1alpha1">;
    readonly kind?: pulumi.Input<"UserConfig">;
    readonly metadata?: pulumi.Input<ObjectMeta>;
    /**
     * UserConfigSpec defines the desired state of UserConfig There are four selectors: "labelSelector", "annotationSelector", "identityExtraFieldSelector" and "providerName". labelSelector and annoationSelector are matches against the User object identityExtraFieldSelector and providerName are matched against any of the Identities associated with User Selectors are considered in AND, so if multiple are defined tthey must all be true for a User to be selected.
     */
    readonly spec?: pulumi.Input<inputs.redhatcop.v1alpha1.UserConfigSpec>;
    /**
     * UserConfigStatus defines the observed state of UserConfig
     */
    readonly status?: pulumi.Input<inputs.redhatcop.v1alpha1.UserConfigStatus>;
}

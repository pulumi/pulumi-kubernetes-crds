# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationConfigurationSpec',
    'ApplicationConfigurationSpecComponents',
    'ApplicationConfigurationSpecComponentsParameterValues',
    'ApplicationConfigurationSpecComponentsParameterValuesValue',
    'ApplicationConfigurationSpecComponentsScopes',
    'ApplicationConfigurationSpecComponentsScopesScopeRef',
    'ApplicationConfigurationSpecComponentsTraits',
    'ApplicationConfigurationStatus',
    'ApplicationConfigurationStatusConditions',
    'ApplicationConfigurationStatusWorkloads',
    'ApplicationConfigurationStatusWorkloadsTraits',
    'ApplicationConfigurationStatusWorkloadsTraitsTraitRef',
    'ApplicationConfigurationStatusWorkloadsWorkloadRef',
    'ComponentSpec',
    'ComponentSpecParameters',
    'ComponentStatus',
    'ComponentStatusConditions',
    'ContainerizedWorkloadSpec',
    'ContainerizedWorkloadSpecContainers',
    'ContainerizedWorkloadSpecContainersConfig',
    'ContainerizedWorkloadSpecContainersConfigFromSecret',
    'ContainerizedWorkloadSpecContainersEnv',
    'ContainerizedWorkloadSpecContainersEnvFromSecret',
    'ContainerizedWorkloadSpecContainersLivenessProbe',
    'ContainerizedWorkloadSpecContainersLivenessProbeExec',
    'ContainerizedWorkloadSpecContainersLivenessProbeHttpGet',
    'ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeaders',
    'ContainerizedWorkloadSpecContainersLivenessProbeTcpSocket',
    'ContainerizedWorkloadSpecContainersPorts',
    'ContainerizedWorkloadSpecContainersReadinessProbe',
    'ContainerizedWorkloadSpecContainersReadinessProbeExec',
    'ContainerizedWorkloadSpecContainersReadinessProbeHttpGet',
    'ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeaders',
    'ContainerizedWorkloadSpecContainersReadinessProbeTcpSocket',
    'ContainerizedWorkloadSpecContainersResources',
    'ContainerizedWorkloadSpecContainersResourcesCpu',
    'ContainerizedWorkloadSpecContainersResourcesExtended',
    'ContainerizedWorkloadSpecContainersResourcesExtendedRequired',
    'ContainerizedWorkloadSpecContainersResourcesGpu',
    'ContainerizedWorkloadSpecContainersResourcesMemory',
    'ContainerizedWorkloadSpecContainersResourcesVolumes',
    'ContainerizedWorkloadSpecContainersResourcesVolumesDisk',
    'ContainerizedWorkloadStatus',
    'ContainerizedWorkloadStatusConditions',
    'ContainerizedWorkloadStatusResources',
    'ManualScalerTraitSpec',
    'ManualScalerTraitSpecWorkloadRef',
    'ManualScalerTraitStatus',
    'ManualScalerTraitStatusConditions',
    'ScopeDefinitionSpec',
    'ScopeDefinitionSpecDefinitionRef',
    'TraitDefinitionSpec',
    'TraitDefinitionSpecDefinitionRef',
    'WorkloadDefinitionSpec',
    'WorkloadDefinitionSpecDefinitionRef',
]

@pulumi.output_type
class ApplicationConfigurationSpec(dict):
    """
    An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
    """
    def __init__(__self__, *,
                 components: Sequence['outputs.ApplicationConfigurationSpecComponents']):
        """
        An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
        :param Sequence['ApplicationConfigurationSpecComponentsArgs'] components: Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        pulumi.set(__self__, "components", components)

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.ApplicationConfigurationSpecComponents']:
        """
        Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        return pulumi.get(self, "components")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponents(dict):
    """
    An ApplicationConfigurationComponent specifies a component of an ApplicationConfiguration. Each component is used to instantiate a workload.
    """
    def __init__(__self__, *,
                 component_name: str,
                 parameter_values: Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsParameterValues']] = None,
                 scopes: Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsScopes']] = None,
                 traits: Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsTraits']] = None):
        """
        An ApplicationConfigurationComponent specifies a component of an ApplicationConfiguration. Each component is used to instantiate a workload.
        :param str component_name: ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        :param Sequence['ApplicationConfigurationSpecComponentsParameterValuesArgs'] parameter_values: ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        :param Sequence['ApplicationConfigurationSpecComponentsScopesArgs'] scopes: Scopes in which the specified component should exist.
        :param Sequence['ApplicationConfigurationSpecComponentsTraitsArgs'] traits: Traits of the specified component.
        """
        pulumi.set(__self__, "component_name", component_name)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> str:
        """
        ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsParameterValues']]:
        """
        ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        """
        return pulumi.get(self, "parameter_values")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsScopes']]:
        """
        Scopes in which the specified component should exist.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def traits(self) -> Optional[Sequence['outputs.ApplicationConfigurationSpecComponentsTraits']]:
        """
        Traits of the specified component.
        """
        return pulumi.get(self, "traits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponentsParameterValues(dict):
    """
    A ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
    """
    def __init__(__self__, *,
                 name: str,
                 value: 'outputs.ApplicationConfigurationSpecComponentsParameterValuesValue'):
        """
        A ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
        :param str name: Name of the component parameter to set.
        :param 'ApplicationConfigurationSpecComponentsParameterValuesValueArgs' value: Value to set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component parameter to set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ApplicationConfigurationSpecComponentsParameterValuesValue':
        """
        Value to set.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponentsParameterValuesValue(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponentsScopes(dict):
    """
    A ComponentScope specifies a scope in which a component should exist.
    """
    def __init__(__self__, *,
                 scope_ref: 'outputs.ApplicationConfigurationSpecComponentsScopesScopeRef'):
        """
        A ComponentScope specifies a scope in which a component should exist.
        :param 'ApplicationConfigurationSpecComponentsScopesScopeRefArgs' scope_ref: A ScopeReference must refer to an OAM scope resource.
        """
        pulumi.set(__self__, "scope_ref", scope_ref)

    @property
    @pulumi.getter(name="scopeRef")
    def scope_ref(self) -> 'outputs.ApplicationConfigurationSpecComponentsScopesScopeRef':
        """
        A ScopeReference must refer to an OAM scope resource.
        """
        return pulumi.get(self, "scope_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponentsScopesScopeRef(dict):
    """
    A ScopeReference must refer to an OAM scope resource.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 uid: Optional[str] = None):
        """
        A ScopeReference must refer to an OAM scope resource.
        :param str api_version: APIVersion of the referenced object.
        :param str kind: Kind of the referenced object.
        :param str name: Name of the referenced object.
        :param str uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationSpecComponentsTraits(dict):
    """
    A ComponentTrait specifies a trait that should be applied to a component.
    """
    def __init__(__self__, *,
                 trait: Mapping[str, Any]):
        """
        A ComponentTrait specifies a trait that should be applied to a component.
        :param Mapping[str, Any] trait: A Trait that will be created for the component
        """
        pulumi.set(__self__, "trait", trait)

    @property
    @pulumi.getter
    def trait(self) -> Mapping[str, Any]:
        """
        A Trait that will be created for the component
        """
        return pulumi.get(self, "trait")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatus(dict):
    """
    An ApplicationConfigurationStatus represents the observed state of a ApplicationConfiguration.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ApplicationConfigurationStatusConditions']] = None,
                 workloads: Optional[Sequence['outputs.ApplicationConfigurationStatusWorkloads']] = None):
        """
        An ApplicationConfigurationStatus represents the observed state of a ApplicationConfiguration.
        :param Sequence['ApplicationConfigurationStatusConditionsArgs'] conditions: Conditions of the resource.
        :param Sequence['ApplicationConfigurationStatusWorkloadsArgs'] workloads: Workloads created by this ApplicationConfiguration.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ApplicationConfigurationStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.ApplicationConfigurationStatusWorkloads']]:
        """
        Workloads created by this ApplicationConfiguration.
        """
        return pulumi.get(self, "workloads")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatusWorkloads(dict):
    """
    A WorkloadStatus represents the status of a workload.
    """
    def __init__(__self__, *,
                 component_name: Optional[str] = None,
                 traits: Optional[Sequence['outputs.ApplicationConfigurationStatusWorkloadsTraits']] = None,
                 workload_ref: Optional['outputs.ApplicationConfigurationStatusWorkloadsWorkloadRef'] = None):
        """
        A WorkloadStatus represents the status of a workload.
        :param str component_name: ComponentName that produced this workload.
        :param Sequence['ApplicationConfigurationStatusWorkloadsTraitsArgs'] traits: Traits associated with this workload.
        :param 'ApplicationConfigurationStatusWorkloadsWorkloadRefArgs' workload_ref: Reference to a workload created by an ApplicationConfiguration.
        """
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)
        if workload_ref is not None:
            pulumi.set(__self__, "workload_ref", workload_ref)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        """
        ComponentName that produced this workload.
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter
    def traits(self) -> Optional[Sequence['outputs.ApplicationConfigurationStatusWorkloadsTraits']]:
        """
        Traits associated with this workload.
        """
        return pulumi.get(self, "traits")

    @property
    @pulumi.getter(name="workloadRef")
    def workload_ref(self) -> Optional['outputs.ApplicationConfigurationStatusWorkloadsWorkloadRef']:
        """
        Reference to a workload created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "workload_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatusWorkloadsTraits(dict):
    """
    A WorkloadTrait represents a trait associated with a workload.
    """
    def __init__(__self__, *,
                 trait_ref: 'outputs.ApplicationConfigurationStatusWorkloadsTraitsTraitRef'):
        """
        A WorkloadTrait represents a trait associated with a workload.
        :param 'ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs' trait_ref: Reference to a trait created by an ApplicationConfiguration.
        """
        pulumi.set(__self__, "trait_ref", trait_ref)

    @property
    @pulumi.getter(name="traitRef")
    def trait_ref(self) -> 'outputs.ApplicationConfigurationStatusWorkloadsTraitsTraitRef':
        """
        Reference to a trait created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "trait_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatusWorkloadsTraitsTraitRef(dict):
    """
    Reference to a trait created by an ApplicationConfiguration.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 uid: Optional[str] = None):
        """
        Reference to a trait created by an ApplicationConfiguration.
        :param str api_version: APIVersion of the referenced object.
        :param str kind: Kind of the referenced object.
        :param str name: Name of the referenced object.
        :param str uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationConfigurationStatusWorkloadsWorkloadRef(dict):
    """
    Reference to a workload created by an ApplicationConfiguration.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 uid: Optional[str] = None):
        """
        Reference to a workload created by an ApplicationConfiguration.
        :param str api_version: APIVersion of the referenced object.
        :param str kind: Kind of the referenced object.
        :param str name: Name of the referenced object.
        :param str uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComponentSpec(dict):
    """
    A ComponentSpec defines the desired state of a Component.
    """
    def __init__(__self__, *,
                 workload: Mapping[str, Any],
                 parameters: Optional[Sequence['outputs.ComponentSpecParameters']] = None):
        """
        A ComponentSpec defines the desired state of a Component.
        :param Mapping[str, Any] workload: A Workload that will be created for each ApplicationConfiguration that includes this Component. Workloads must be defined by a WorkloadDefinition.
        :param Sequence['ComponentSpecParametersArgs'] parameters: Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.
        """
        pulumi.set(__self__, "workload", workload)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def workload(self) -> Mapping[str, Any]:
        """
        A Workload that will be created for each ApplicationConfiguration that includes this Component. Workloads must be defined by a WorkloadDefinition.
        """
        return pulumi.get(self, "workload")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ComponentSpecParameters']]:
        """
        Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComponentSpecParameters(dict):
    """
    A ComponentParameter defines a configurable parameter of a component.
    """
    def __init__(__self__, *,
                 field_paths: Sequence[str],
                 name: str,
                 description: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        A ComponentParameter defines a configurable parameter of a component.
        :param Sequence[str] field_paths: FieldPaths specifies an array of fields within this Component's workload that will be overwritten by the value of this parameter. The type of the parameter (e.g. int, string) is inferred from the type of these fields; All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
        :param str name: Name of this parameter. OAM ApplicationConfigurations will specify parameter values using this name.
        :param str description: Description of this parameter.
        :param bool required: Required specifies whether or not a value for this parameter must be supplied when authoring an ApplicationConfiguration.
        """
        pulumi.set(__self__, "field_paths", field_paths)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter(name="fieldPaths")
    def field_paths(self) -> Sequence[str]:
        """
        FieldPaths specifies an array of fields within this Component's workload that will be overwritten by the value of this parameter. The type of the parameter (e.g. int, string) is inferred from the type of these fields; All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
        """
        return pulumi.get(self, "field_paths")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this parameter. OAM ApplicationConfigurations will specify parameter values using this name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of this parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Required specifies whether or not a value for this parameter must be supplied when authoring an ApplicationConfiguration.
        """
        return pulumi.get(self, "required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComponentStatus(dict):
    """
    A ComponentStatus represents the observed state of a Component.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ComponentStatusConditions']] = None):
        """
        A ComponentStatus represents the observed state of a Component.
        :param Sequence['ComponentStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ComponentStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComponentStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpec(dict):
    """
    A ContainerizedWorkloadSpec defines the desired state of a ContainerizedWorkload.
    """
    def __init__(__self__, *,
                 containers: Sequence['outputs.ContainerizedWorkloadSpecContainers'],
                 arch: Optional[str] = None,
                 os_type: Optional[str] = None):
        """
        A ContainerizedWorkloadSpec defines the desired state of a ContainerizedWorkload.
        :param Sequence['ContainerizedWorkloadSpecContainersArgs'] containers: Containers of which this workload consists.
        :param str arch: CPUArchitecture required by this workload.
        :param str os_type: OperatingSystem required by this workload.
        """
        pulumi.set(__self__, "containers", containers)
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.ContainerizedWorkloadSpecContainers']:
        """
        Containers of which this workload consists.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        """
        CPUArchitecture required by this workload.
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        OperatingSystem required by this workload.
        """
        return pulumi.get(self, "os_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainers(dict):
    """
    A Container represents an Open Containers Initiative (OCI) container.
    """
    def __init__(__self__, *,
                 image: str,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 config: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersConfig']] = None,
                 env: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersEnv']] = None,
                 image_pull_secret: Optional[str] = None,
                 liveness_probe: Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersPorts']] = None,
                 readiness_probe: Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbe'] = None,
                 resources: Optional['outputs.ContainerizedWorkloadSpecContainersResources'] = None):
        """
        A Container represents an Open Containers Initiative (OCI) container.
        :param str image: Image this container should run. Must be a path-like or URI-like representation of an OCI image. May be prefixed with a registry address and should be suffixed with a tag.
        :param str name: Name of this container. Must be unique within its workload.
        :param Sequence[str] args: Arguments to be passed to the command run by this container.
        :param Sequence[str] command: Command to be run by this container.
        :param Sequence['ContainerizedWorkloadSpecContainersConfigArgs'] config: ConfigFiles that should be written within this container.
        :param Sequence['ContainerizedWorkloadSpecContainersEnvArgs'] env: Environment variables that should be set within this container.
        :param str image_pull_secret: ImagePullSecret specifies the name of a Secret from which the credentials required to pull this container's image can be loaded.
        :param 'ContainerizedWorkloadSpecContainersLivenessProbeArgs' liveness_probe: A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        :param Sequence['ContainerizedWorkloadSpecContainersPortsArgs'] ports: Ports exposed by this container.
        :param 'ContainerizedWorkloadSpecContainersReadinessProbeArgs' readiness_probe: A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        :param 'ContainerizedWorkloadSpecContainersResourcesArgs' resources: Resources required by this container
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        Image this container should run. Must be a path-like or URI-like representation of an OCI image. May be prefixed with a registry address and should be suffixed with a tag.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this container. Must be unique within its workload.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to be passed to the command run by this container.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command to be run by this container.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def config(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersConfig']]:
        """
        ConfigFiles that should be written within this container.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersEnv']]:
        """
        Environment variables that should be set within this container.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[str]:
        """
        ImagePullSecret specifies the name of a Secret from which the credentials required to pull this container's image can be loaded.
        """
        return pulumi.get(self, "image_pull_secret")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbe']:
        """
        A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersPorts']]:
        """
        Ports exposed by this container.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbe']:
        """
        A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersResources']:
        """
        Resources required by this container
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersConfig(dict):
    """
    A ContainerConfigFile specifies a configuration file that should be written within a container.
    """
    def __init__(__self__, *,
                 path: str,
                 from_secret: Optional['outputs.ContainerizedWorkloadSpecContainersConfigFromSecret'] = None,
                 value: Optional[str] = None):
        """
        A ContainerConfigFile specifies a configuration file that should be written within a container.
        :param str path: Path within the container at which the configuration file should be written.
        :param 'ContainerizedWorkloadSpecContainersConfigFromSecretArgs' from_secret: FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        :param str value: Value that should be written to the configuration file.
        """
        pulumi.set(__self__, "path", path)
        if from_secret is not None:
            pulumi.set(__self__, "from_secret", from_secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path within the container at which the configuration file should be written.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fromSecret")
    def from_secret(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersConfigFromSecret']:
        """
        FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        """
        return pulumi.get(self, "from_secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value that should be written to the configuration file.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersConfigFromSecret(dict):
    """
    FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
    """
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        :param str key: The key to select.
        :param str name: The name of the secret.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersEnv(dict):
    """
    A ContainerEnvVar specifies an environment variable that should be set within a container.
    """
    def __init__(__self__, *,
                 name: str,
                 from_secret: Optional['outputs.ContainerizedWorkloadSpecContainersEnvFromSecret'] = None,
                 value: Optional[str] = None):
        """
        A ContainerEnvVar specifies an environment variable that should be set within a container.
        :param str name: Name of the environment variable. Must be composed of valid Unicode letter and number characters, as well as _ and -.
        :param 'ContainerizedWorkloadSpecContainersEnvFromSecretArgs' from_secret: FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        :param str value: Value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        if from_secret is not None:
            pulumi.set(__self__, "from_secret", from_secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be composed of valid Unicode letter and number characters, as well as _ and -.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="fromSecret")
    def from_secret(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersEnvFromSecret']:
        """
        FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        """
        return pulumi.get(self, "from_secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the environment variable.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersEnvFromSecret(dict):
    """
    FromSecret is a secret key reference which can be used to assign a value to the environment variable.
    """
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        :param str key: The key to select.
        :param str name: The name of the secret.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersLivenessProbe(dict):
    """
    A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        :param 'ContainerizedWorkloadSpecContainersLivenessProbeExecArgs' exec_: Exec probes a container's health by executing a command.
        :param int failure_threshold: FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        :param 'ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs' http_get: HTTPGet probes a container's health by sending an HTTP GET request.
        :param int initial_delay_seconds: InitialDelaySeconds after a container starts before the first probe.
        :param int period_seconds: PeriodSeconds between probes.
        :param int success_threshold: SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        :param 'ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs' tcp_socket: TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param int timeout_seconds: TimeoutSeconds after which the probe times out.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeExec']:
        """
        Exec probes a container's health by executing a command.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeHttpGet']:
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        InitialDelaySeconds after a container starts before the first probe.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        PeriodSeconds between probes.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersLivenessProbeTcpSocket']:
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        TimeoutSeconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersLivenessProbeExec(dict):
    """
    Exec probes a container's health by executing a command.
    """
    def __init__(__self__, *,
                 command: Sequence[str]):
        """
        Exec probes a container's health by executing a command.
        :param Sequence[str] command: Command to be run by this probe.
        """
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Sequence[str]:
        """
        Command to be run by this probe.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersLivenessProbeHttpGet(dict):
    """
    HTTPGet probes a container's health by sending an HTTP GET request.
    """
    def __init__(__self__, *,
                 path: str,
                 port: int,
                 http_headers: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeaders']] = None):
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        :param str path: Path to probe, e.g. '/healthz'.
        :param int port: Port to probe.
        :param Sequence['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs'] http_headers: HTTPHeaders to send with the GET request.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to probe, e.g. '/healthz'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port to probe.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeaders']]:
        """
        HTTPHeaders to send with the GET request.
        """
        return pulumi.get(self, "http_headers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeaders(dict):
    """
    A HTTPHeader to be passed when probing a container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        A HTTPHeader to be passed when probing a container.
        :param str name: Name of this HTTP header. Must be unique per probe.
        :param str value: Value of this HTTP header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this HTTP header. Must be unique per probe.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of this HTTP header.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersLivenessProbeTcpSocket(dict):
    """
    TCPSocketProbe probes a container's health by connecting to a TCP socket.
    """
    def __init__(__self__, *,
                 port: int):
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param int port: Port this probe should connect to.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port this probe should connect to.
        """
        return pulumi.get(self, "port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersPorts(dict):
    """
    A ContainerPort specifies a port that is exposed by a container.
    """
    def __init__(__self__, *,
                 container_port: int,
                 name: str,
                 protocol: Optional[str] = None):
        """
        A ContainerPort specifies a port that is exposed by a container.
        :param int container_port: Port number. Must be unique within its container.
        :param str name: Name of this port. Must be unique within its container. Must be lowercase alphabetical characters.
        :param str protocol: Protocol used by the server listening on this port.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Port number. Must be unique within its container.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this port. Must be unique within its container. Must be lowercase alphabetical characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used by the server listening on this port.
        """
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersReadinessProbe(dict):
    """
    A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        :param 'ContainerizedWorkloadSpecContainersReadinessProbeExecArgs' exec_: Exec probes a container's health by executing a command.
        :param int failure_threshold: FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        :param 'ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs' http_get: HTTPGet probes a container's health by sending an HTTP GET request.
        :param int initial_delay_seconds: InitialDelaySeconds after a container starts before the first probe.
        :param int period_seconds: PeriodSeconds between probes.
        :param int success_threshold: SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        :param 'ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs' tcp_socket: TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param int timeout_seconds: TimeoutSeconds after which the probe times out.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeExec']:
        """
        Exec probes a container's health by executing a command.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeHttpGet']:
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        InitialDelaySeconds after a container starts before the first probe.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        PeriodSeconds between probes.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersReadinessProbeTcpSocket']:
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        TimeoutSeconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersReadinessProbeExec(dict):
    """
    Exec probes a container's health by executing a command.
    """
    def __init__(__self__, *,
                 command: Sequence[str]):
        """
        Exec probes a container's health by executing a command.
        :param Sequence[str] command: Command to be run by this probe.
        """
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Sequence[str]:
        """
        Command to be run by this probe.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersReadinessProbeHttpGet(dict):
    """
    HTTPGet probes a container's health by sending an HTTP GET request.
    """
    def __init__(__self__, *,
                 path: str,
                 port: int,
                 http_headers: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeaders']] = None):
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        :param str path: Path to probe, e.g. '/healthz'.
        :param int port: Port to probe.
        :param Sequence['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs'] http_headers: HTTPHeaders to send with the GET request.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to probe, e.g. '/healthz'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port to probe.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeaders']]:
        """
        HTTPHeaders to send with the GET request.
        """
        return pulumi.get(self, "http_headers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeaders(dict):
    """
    A HTTPHeader to be passed when probing a container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        A HTTPHeader to be passed when probing a container.
        :param str name: Name of this HTTP header. Must be unique per probe.
        :param str value: Value of this HTTP header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this HTTP header. Must be unique per probe.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of this HTTP header.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersReadinessProbeTcpSocket(dict):
    """
    TCPSocketProbe probes a container's health by connecting to a TCP socket.
    """
    def __init__(__self__, *,
                 port: int):
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param int port: Port this probe should connect to.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port this probe should connect to.
        """
        return pulumi.get(self, "port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResources(dict):
    """
    Resources required by this container
    """
    def __init__(__self__, *,
                 cpu: 'outputs.ContainerizedWorkloadSpecContainersResourcesCpu',
                 memory: 'outputs.ContainerizedWorkloadSpecContainersResourcesMemory',
                 extended: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersResourcesExtended']] = None,
                 gpu: Optional['outputs.ContainerizedWorkloadSpecContainersResourcesGpu'] = None,
                 volumes: Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersResourcesVolumes']] = None):
        """
        Resources required by this container
        :param 'ContainerizedWorkloadSpecContainersResourcesCpuArgs' cpu: CPU required by this container.
        :param 'ContainerizedWorkloadSpecContainersResourcesMemoryArgs' memory: Memory required by this container.
        :param Sequence['ContainerizedWorkloadSpecContainersResourcesExtendedArgs'] extended: Extended resources required by this container.
        :param 'ContainerizedWorkloadSpecContainersResourcesGpuArgs' gpu: GPU required by this container.
        :param Sequence['ContainerizedWorkloadSpecContainersResourcesVolumesArgs'] volumes: Volumes required by this container.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        if extended is not None:
            pulumi.set(__self__, "extended", extended)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def cpu(self) -> 'outputs.ContainerizedWorkloadSpecContainersResourcesCpu':
        """
        CPU required by this container.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> 'outputs.ContainerizedWorkloadSpecContainersResourcesMemory':
        """
        Memory required by this container.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def extended(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersResourcesExtended']]:
        """
        Extended resources required by this container.
        """
        return pulumi.get(self, "extended")

    @property
    @pulumi.getter
    def gpu(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersResourcesGpu']:
        """
        GPU required by this container.
        """
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ContainerizedWorkloadSpecContainersResourcesVolumes']]:
        """
        Volumes required by this container.
        """
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesCpu(dict):
    """
    CPU required by this container.
    """
    def __init__(__self__, *,
                 required: str):
        """
        CPU required by this container.
        :param str required: Required CPU count. 1.0 represents one CPU core.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required CPU count. 1.0 represents one CPU core.
        """
        return pulumi.get(self, "required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesExtended(dict):
    """
    ExtendedResource required by a container.
    """
    def __init__(__self__, *,
                 name: str,
                 required: 'outputs.ContainerizedWorkloadSpecContainersResourcesExtendedRequired'):
        """
        ExtendedResource required by a container.
        :param str name: Name of the external resource. Resource names are specified in kind.group/version format, e.g. motionsensor.ext.example.com/v1.
        :param 'ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs' required: Required extended resource(s), e.g. 8 or "very-cool-widget"
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the external resource. Resource names are specified in kind.group/version format, e.g. motionsensor.ext.example.com/v1.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> 'outputs.ContainerizedWorkloadSpecContainersResourcesExtendedRequired':
        """
        Required extended resource(s), e.g. 8 or "very-cool-widget"
        """
        return pulumi.get(self, "required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesExtendedRequired(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesGpu(dict):
    """
    GPU required by this container.
    """
    def __init__(__self__, *,
                 required: str):
        """
        GPU required by this container.
        :param str required: Required GPU count.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required GPU count.
        """
        return pulumi.get(self, "required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesMemory(dict):
    """
    Memory required by this container.
    """
    def __init__(__self__, *,
                 required: str):
        """
        Memory required by this container.
        :param str required: Required memory.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required memory.
        """
        return pulumi.get(self, "required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesVolumes(dict):
    """
    VolumeResource required by a container.
    """
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 access_mode: Optional[str] = None,
                 disk: Optional['outputs.ContainerizedWorkloadSpecContainersResourcesVolumesDisk'] = None,
                 sharing_policy: Optional[str] = None):
        """
        VolumeResource required by a container.
        :param str mount_path: MouthPath at which this volume will be mounted within its container.
        :param str name: Name of this volume. Must be unique within its container.
        :param str access_mode: AccessMode of this volume; RO (read only) or RW (read and write).
        :param 'ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs' disk: Disk requirements of this volume.
        :param str sharing_policy: SharingPolicy of this volume; Exclusive or Shared.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if sharing_policy is not None:
            pulumi.set(__self__, "sharing_policy", sharing_policy)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        """
        MouthPath at which this volume will be mounted within its container.
        """
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this volume. Must be unique within its container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[str]:
        """
        AccessMode of this volume; RO (read only) or RW (read and write).
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter
    def disk(self) -> Optional['outputs.ContainerizedWorkloadSpecContainersResourcesVolumesDisk']:
        """
        Disk requirements of this volume.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter(name="sharingPolicy")
    def sharing_policy(self) -> Optional[str]:
        """
        SharingPolicy of this volume; Exclusive or Shared.
        """
        return pulumi.get(self, "sharing_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadSpecContainersResourcesVolumesDisk(dict):
    """
    Disk requirements of this volume.
    """
    def __init__(__self__, *,
                 required: str,
                 ephemeral: Optional[bool] = None):
        """
        Disk requirements of this volume.
        :param str required: Required disk space.
        :param bool ephemeral: Ephemeral specifies whether an external disk needs to be mounted.
        """
        pulumi.set(__self__, "required", required)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required disk space.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[bool]:
        """
        Ephemeral specifies whether an external disk needs to be mounted.
        """
        return pulumi.get(self, "ephemeral")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadStatus(dict):
    """
    A ContainerizedWorkloadStatus represents the observed state of a ContainerizedWorkload.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ContainerizedWorkloadStatusConditions']] = None,
                 resources: Optional[Sequence['outputs.ContainerizedWorkloadStatusResources']] = None):
        """
        A ContainerizedWorkloadStatus represents the observed state of a ContainerizedWorkload.
        :param Sequence['ContainerizedWorkloadStatusConditionsArgs'] conditions: Conditions of the resource.
        :param Sequence['ContainerizedWorkloadStatusResourcesArgs'] resources: Resources managed by this containerised workload.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ContainerizedWorkloadStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ContainerizedWorkloadStatusResources']]:
        """
        Resources managed by this containerised workload.
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ContainerizedWorkloadStatusResources(dict):
    """
    A TypedReference refers to an object by Name, Kind, and APIVersion. It is commonly used to reference cluster-scoped objects or objects where the namespace is already known.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 uid: Optional[str] = None):
        """
        A TypedReference refers to an object by Name, Kind, and APIVersion. It is commonly used to reference cluster-scoped objects or objects where the namespace is already known.
        :param str api_version: APIVersion of the referenced object.
        :param str kind: Kind of the referenced object.
        :param str name: Name of the referenced object.
        :param str uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManualScalerTraitSpec(dict):
    """
    A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
    """
    def __init__(__self__, *,
                 replica_count: int,
                 workload_ref: 'outputs.ManualScalerTraitSpecWorkloadRef'):
        """
        A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
        :param int replica_count: ReplicaCount of the workload this trait applies to.
        :param 'ManualScalerTraitSpecWorkloadRefArgs' workload_ref: WorkloadReference to the workload this trait applies to.
        """
        pulumi.set(__self__, "replica_count", replica_count)
        pulumi.set(__self__, "workload_ref", workload_ref)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> int:
        """
        ReplicaCount of the workload this trait applies to.
        """
        return pulumi.get(self, "replica_count")

    @property
    @pulumi.getter(name="workloadRef")
    def workload_ref(self) -> 'outputs.ManualScalerTraitSpecWorkloadRef':
        """
        WorkloadReference to the workload this trait applies to.
        """
        return pulumi.get(self, "workload_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManualScalerTraitSpecWorkloadRef(dict):
    """
    WorkloadReference to the workload this trait applies to.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 uid: Optional[str] = None):
        """
        WorkloadReference to the workload this trait applies to.
        :param str api_version: APIVersion of the referenced object.
        :param str kind: Kind of the referenced object.
        :param str name: Name of the referenced object.
        :param str uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManualScalerTraitStatus(dict):
    """
    A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ManualScalerTraitStatusConditions']] = None):
        """
        A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
        :param Sequence['ManualScalerTraitStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ManualScalerTraitStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManualScalerTraitStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScopeDefinitionSpec(dict):
    """
    A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
    """
    def __init__(__self__, *,
                 allow_component_overlap: bool,
                 definition_ref: 'outputs.ScopeDefinitionSpecDefinitionRef'):
        """
        A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
        :param bool allow_component_overlap: AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
        :param 'ScopeDefinitionSpecDefinitionRefArgs' definition_ref: Reference to the CustomResourceDefinition that defines this scope kind.
        """
        pulumi.set(__self__, "allow_component_overlap", allow_component_overlap)
        pulumi.set(__self__, "definition_ref", definition_ref)

    @property
    @pulumi.getter(name="allowComponentOverlap")
    def allow_component_overlap(self) -> bool:
        """
        AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
        """
        return pulumi.get(self, "allow_component_overlap")

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> 'outputs.ScopeDefinitionSpecDefinitionRef':
        """
        Reference to the CustomResourceDefinition that defines this scope kind.
        """
        return pulumi.get(self, "definition_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScopeDefinitionSpecDefinitionRef(dict):
    """
    Reference to the CustomResourceDefinition that defines this scope kind.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Reference to the CustomResourceDefinition that defines this scope kind.
        :param str name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TraitDefinitionSpec(dict):
    """
    A TraitDefinitionSpec defines the desired state of a TraitDefinition.
    """
    def __init__(__self__, *,
                 definition_ref: 'outputs.TraitDefinitionSpecDefinitionRef',
                 applies_to_workloads: Optional[Sequence[str]] = None):
        """
        A TraitDefinitionSpec defines the desired state of a TraitDefinition.
        :param 'TraitDefinitionSpecDefinitionRefArgs' definition_ref: Reference to the CustomResourceDefinition that defines this trait kind.
        :param Sequence[str] applies_to_workloads: AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
        """
        pulumi.set(__self__, "definition_ref", definition_ref)
        if applies_to_workloads is not None:
            pulumi.set(__self__, "applies_to_workloads", applies_to_workloads)

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> 'outputs.TraitDefinitionSpecDefinitionRef':
        """
        Reference to the CustomResourceDefinition that defines this trait kind.
        """
        return pulumi.get(self, "definition_ref")

    @property
    @pulumi.getter(name="appliesToWorkloads")
    def applies_to_workloads(self) -> Optional[Sequence[str]]:
        """
        AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
        """
        return pulumi.get(self, "applies_to_workloads")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TraitDefinitionSpecDefinitionRef(dict):
    """
    Reference to the CustomResourceDefinition that defines this trait kind.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Reference to the CustomResourceDefinition that defines this trait kind.
        :param str name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WorkloadDefinitionSpec(dict):
    """
    A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
    """
    def __init__(__self__, *,
                 definition_ref: 'outputs.WorkloadDefinitionSpecDefinitionRef'):
        """
        A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
        :param 'WorkloadDefinitionSpecDefinitionRefArgs' definition_ref: Reference to the CustomResourceDefinition that defines this workload kind.
        """
        pulumi.set(__self__, "definition_ref", definition_ref)

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> 'outputs.WorkloadDefinitionSpecDefinitionRef':
        """
        Reference to the CustomResourceDefinition that defines this workload kind.
        """
        return pulumi.get(self, "definition_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WorkloadDefinitionSpecDefinitionRef(dict):
    """
    Reference to the CustomResourceDefinition that defines this workload kind.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Reference to the CustomResourceDefinition that defines this workload kind.
        :param str name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



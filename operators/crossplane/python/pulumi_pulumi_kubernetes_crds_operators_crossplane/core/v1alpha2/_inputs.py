# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ApplicationConfigurationSpecArgs',
    'ApplicationConfigurationSpecComponentsArgs',
    'ApplicationConfigurationSpecComponentsParameterValuesArgs',
    'ApplicationConfigurationSpecComponentsParameterValuesValueArgs',
    'ApplicationConfigurationSpecComponentsScopesArgs',
    'ApplicationConfigurationSpecComponentsScopesScopeRefArgs',
    'ApplicationConfigurationSpecComponentsTraitsArgs',
    'ApplicationConfigurationStatusArgs',
    'ApplicationConfigurationStatusConditionsArgs',
    'ApplicationConfigurationStatusWorkloadsArgs',
    'ApplicationConfigurationStatusWorkloadsTraitsArgs',
    'ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs',
    'ApplicationConfigurationStatusWorkloadsWorkloadRefArgs',
    'ComponentSpecArgs',
    'ComponentSpecParametersArgs',
    'ComponentStatusArgs',
    'ComponentStatusConditionsArgs',
    'ContainerizedWorkloadSpecArgs',
    'ContainerizedWorkloadSpecContainersArgs',
    'ContainerizedWorkloadSpecContainersConfigArgs',
    'ContainerizedWorkloadSpecContainersConfigFromSecretArgs',
    'ContainerizedWorkloadSpecContainersEnvArgs',
    'ContainerizedWorkloadSpecContainersEnvFromSecretArgs',
    'ContainerizedWorkloadSpecContainersLivenessProbeArgs',
    'ContainerizedWorkloadSpecContainersLivenessProbeExecArgs',
    'ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs',
    'ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs',
    'ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs',
    'ContainerizedWorkloadSpecContainersPortsArgs',
    'ContainerizedWorkloadSpecContainersReadinessProbeArgs',
    'ContainerizedWorkloadSpecContainersReadinessProbeExecArgs',
    'ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs',
    'ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs',
    'ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs',
    'ContainerizedWorkloadSpecContainersResourcesArgs',
    'ContainerizedWorkloadSpecContainersResourcesCpuArgs',
    'ContainerizedWorkloadSpecContainersResourcesExtendedArgs',
    'ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs',
    'ContainerizedWorkloadSpecContainersResourcesGpuArgs',
    'ContainerizedWorkloadSpecContainersResourcesMemoryArgs',
    'ContainerizedWorkloadSpecContainersResourcesVolumesArgs',
    'ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs',
    'ContainerizedWorkloadStatusArgs',
    'ContainerizedWorkloadStatusConditionsArgs',
    'ContainerizedWorkloadStatusResourcesArgs',
    'ManualScalerTraitSpecArgs',
    'ManualScalerTraitSpecWorkloadRefArgs',
    'ManualScalerTraitStatusArgs',
    'ManualScalerTraitStatusConditionsArgs',
    'ScopeDefinitionSpecArgs',
    'ScopeDefinitionSpecDefinitionRefArgs',
    'TraitDefinitionSpecArgs',
    'TraitDefinitionSpecDefinitionRefArgs',
    'WorkloadDefinitionSpecArgs',
    'WorkloadDefinitionSpecDefinitionRefArgs',
]

@pulumi.input_type
class ApplicationConfigurationSpecArgs:
    def __init__(__self__, *,
                 components: pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]):
        """
        An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]] components: Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        pulumi.set(__self__, "components", components)

    @property
    @pulumi.getter
    def components(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]:
        """
        Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]):
        pulumi.set(self, "components", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsArgs:
    def __init__(__self__, *,
                 component_name: pulumi.Input[str],
                 parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]] = None,
                 traits: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]] = None):
        """
        An ApplicationConfigurationComponent specifies a component of an ApplicationConfiguration. Each component is used to instantiate a workload.
        :param pulumi.Input[str] component_name: ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]] parameter_values: ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]] scopes: Scopes in which the specified component should exist.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]] traits: Traits of the specified component.
        """
        pulumi.set(__self__, "component_name", component_name)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> pulumi.Input[str]:
        """
        ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]]:
        """
        ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]]):
        pulumi.set(self, "parameter_values", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]]:
        """
        Scopes in which the specified component should exist.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def traits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]]:
        """
        Traits of the specified component.
        """
        return pulumi.get(self, "traits")

    @traits.setter
    def traits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]]):
        pulumi.set(self, "traits", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsParameterValuesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']):
        """
        A ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
        :param pulumi.Input[str] name: Name of the component parameter to set.
        :param pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs'] value: Value to set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the component parameter to set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']:
        """
        Value to set.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsParameterValuesValueArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ApplicationConfigurationSpecComponentsScopesArgs:
    def __init__(__self__, *,
                 scope_ref: pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']):
        """
        A ComponentScope specifies a scope in which a component should exist.
        :param pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs'] scope_ref: A ScopeReference must refer to an OAM scope resource.
        """
        pulumi.set(__self__, "scope_ref", scope_ref)

    @property
    @pulumi.getter(name="scopeRef")
    def scope_ref(self) -> pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']:
        """
        A ScopeReference must refer to an OAM scope resource.
        """
        return pulumi.get(self, "scope_ref")

    @scope_ref.setter
    def scope_ref(self, value: pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']):
        pulumi.set(self, "scope_ref", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsScopesScopeRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        A ScopeReference must refer to an OAM scope resource.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsTraitsArgs:
    def __init__(__self__, *,
                 trait: pulumi.Input[Mapping[str, Any]]):
        """
        A ComponentTrait specifies a trait that should be applied to a component.
        :param pulumi.Input[Mapping[str, Any]] trait: A Trait that will be created for the component
        """
        pulumi.set(__self__, "trait", trait)

    @property
    @pulumi.getter
    def trait(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A Trait that will be created for the component
        """
        return pulumi.get(self, "trait")

    @trait.setter
    def trait(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "trait", value)


@pulumi.input_type
class ApplicationConfigurationStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]] = None):
        """
        An ApplicationConfigurationStatus represents the observed state of a ApplicationConfiguration.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]] conditions: Conditions of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]] workloads: Workloads created by this ApplicationConfiguration.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]]:
        """
        Workloads created by this ApplicationConfiguration.
        """
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class ApplicationConfigurationStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsArgs:
    def __init__(__self__, *,
                 component_name: Optional[pulumi.Input[str]] = None,
                 traits: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]] = None,
                 workload_ref: Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']] = None):
        """
        A WorkloadStatus represents the status of a workload.
        :param pulumi.Input[str] component_name: ComponentName that produced this workload.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]] traits: Traits associated with this workload.
        :param pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs'] workload_ref: Reference to a workload created by an ApplicationConfiguration.
        """
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)
        if workload_ref is not None:
            pulumi.set(__self__, "workload_ref", workload_ref)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        """
        ComponentName that produced this workload.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter
    def traits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]]:
        """
        Traits associated with this workload.
        """
        return pulumi.get(self, "traits")

    @traits.setter
    def traits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]]):
        pulumi.set(self, "traits", value)

    @property
    @pulumi.getter(name="workloadRef")
    def workload_ref(self) -> Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']]:
        """
        Reference to a workload created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "workload_ref")

    @workload_ref.setter
    def workload_ref(self, value: Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']]):
        pulumi.set(self, "workload_ref", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsTraitsArgs:
    def __init__(__self__, *,
                 trait_ref: pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']):
        """
        A WorkloadTrait represents a trait associated with a workload.
        :param pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs'] trait_ref: Reference to a trait created by an ApplicationConfiguration.
        """
        pulumi.set(__self__, "trait_ref", trait_ref)

    @property
    @pulumi.getter(name="traitRef")
    def trait_ref(self) -> pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']:
        """
        Reference to a trait created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "trait_ref")

    @trait_ref.setter
    def trait_ref(self, value: pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']):
        pulumi.set(self, "trait_ref", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Reference to a trait created by an ApplicationConfiguration.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsWorkloadRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Reference to a workload created by an ApplicationConfiguration.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ComponentSpecArgs:
    def __init__(__self__, *,
                 workload: pulumi.Input[Mapping[str, Any]],
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSpecParametersArgs']]]] = None):
        """
        A ComponentSpec defines the desired state of a Component.
        :param pulumi.Input[Mapping[str, Any]] workload: A Workload that will be created for each ApplicationConfiguration that includes this Component. Workloads must be defined by a WorkloadDefinition.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentSpecParametersArgs']]] parameters: Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.
        """
        pulumi.set(__self__, "workload", workload)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def workload(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A Workload that will be created for each ApplicationConfiguration that includes this Component. Workloads must be defined by a WorkloadDefinition.
        """
        return pulumi.get(self, "workload")

    @workload.setter
    def workload(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "workload", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSpecParametersArgs']]]]:
        """
        Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSpecParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ComponentSpecParametersArgs:
    def __init__(__self__, *,
                 field_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        """
        A ComponentParameter defines a configurable parameter of a component.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_paths: FieldPaths specifies an array of fields within this Component's workload that will be overwritten by the value of this parameter. The type of the parameter (e.g. int, string) is inferred from the type of these fields; All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
        :param pulumi.Input[str] name: Name of this parameter. OAM ApplicationConfigurations will specify parameter values using this name.
        :param pulumi.Input[str] description: Description of this parameter.
        :param pulumi.Input[bool] required: Required specifies whether or not a value for this parameter must be supplied when authoring an ApplicationConfiguration.
        """
        pulumi.set(__self__, "field_paths", field_paths)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter(name="fieldPaths")
    def field_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        FieldPaths specifies an array of fields within this Component's workload that will be overwritten by the value of this parameter. The type of the parameter (e.g. int, string) is inferred from the type of these fields; All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
        """
        return pulumi.get(self, "field_paths")

    @field_paths.setter
    def field_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "field_paths", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this parameter. OAM ApplicationConfigurations will specify parameter values using this name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this parameter.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Required specifies whether or not a value for this parameter must be supplied when authoring an ApplicationConfiguration.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ComponentStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentStatusConditionsArgs']]]] = None):
        """
        A ComponentStatus represents the observed state of a Component.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentStatusConditionsArgs']]] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ComponentStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ContainerizedWorkloadSpecArgs:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersArgs']]],
                 arch: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None):
        """
        A ContainerizedWorkloadSpec defines the desired state of a ContainerizedWorkload.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersArgs']]] containers: Containers of which this workload consists.
        :param pulumi.Input[str] arch: CPUArchitecture required by this workload.
        :param pulumi.Input[str] os_type: OperatingSystem required by this workload.
        """
        pulumi.set(__self__, "containers", containers)
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersArgs']]]:
        """
        Containers of which this workload consists.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersArgs']]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        """
        CPUArchitecture required by this workload.
        """
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        OperatingSystem required by this workload.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersConfigArgs']]]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersEnvArgs']]]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 liveness_probe: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersPortsArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesArgs']] = None):
        """
        A Container represents an Open Containers Initiative (OCI) container.
        :param pulumi.Input[str] image: Image this container should run. Must be a path-like or URI-like representation of an OCI image. May be prefixed with a registry address and should be suffixed with a tag.
        :param pulumi.Input[str] name: Name of this container. Must be unique within its workload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to be passed to the command run by this container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command to be run by this container.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersConfigArgs']]] config: ConfigFiles that should be written within this container.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersEnvArgs']]] env: Environment variables that should be set within this container.
        :param pulumi.Input[str] image_pull_secret: ImagePullSecret specifies the name of a Secret from which the credentials required to pull this container's image can be loaded.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeArgs'] liveness_probe: A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersPortsArgs']]] ports: Ports exposed by this container.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeArgs'] readiness_probe: A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesArgs'] resources: Resources required by this container
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Image this container should run. Must be a path-like or URI-like representation of an OCI image. May be prefixed with a registry address and should be suffixed with a tag.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this container. Must be unique within its workload.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to be passed to the command run by this container.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command to be run by this container.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersConfigArgs']]]]:
        """
        ConfigFiles that should be written within this container.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersConfigArgs']]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersEnvArgs']]]]:
        """
        Environment variables that should be set within this container.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        """
        ImagePullSecret specifies the name of a Secret from which the credentials required to pull this container's image can be loaded.
        """
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeArgs']]:
        """
        A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersPortsArgs']]]]:
        """
        Ports exposed by this container.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersPortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeArgs']]:
        """
        A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesArgs']]:
        """
        Resources required by this container
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersConfigArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 from_secret: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersConfigFromSecretArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        A ContainerConfigFile specifies a configuration file that should be written within a container.
        :param pulumi.Input[str] path: Path within the container at which the configuration file should be written.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersConfigFromSecretArgs'] from_secret: FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        :param pulumi.Input[str] value: Value that should be written to the configuration file.
        """
        pulumi.set(__self__, "path", path)
        if from_secret is not None:
            pulumi.set(__self__, "from_secret", from_secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the configuration file should be written.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fromSecret")
    def from_secret(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersConfigFromSecretArgs']]:
        """
        FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        """
        return pulumi.get(self, "from_secret")

    @from_secret.setter
    def from_secret(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersConfigFromSecretArgs']]):
        pulumi.set(self, "from_secret", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that should be written to the configuration file.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersConfigFromSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        FromSecret is a secret key reference which can be used to assign a value to be written to the configuration file at the given path in the container.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: The name of the secret.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 from_secret: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersEnvFromSecretArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        A ContainerEnvVar specifies an environment variable that should be set within a container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be composed of valid Unicode letter and number characters, as well as _ and -.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersEnvFromSecretArgs'] from_secret: FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        :param pulumi.Input[str] value: Value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        if from_secret is not None:
            pulumi.set(__self__, "from_secret", from_secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be composed of valid Unicode letter and number characters, as well as _ and -.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="fromSecret")
    def from_secret(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersEnvFromSecretArgs']]:
        """
        FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        """
        return pulumi.get(self, "from_secret")

    @from_secret.setter
    def from_secret(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersEnvFromSecretArgs']]):
        pulumi.set(self, "from_secret", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the environment variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersEnvFromSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        FromSecret is a secret key reference which can be used to assign a value to the environment variable.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: The name of the secret.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        A LivenessProbe assesses whether this container is alive. Containers that fail liveness probes will be restarted.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeExecArgs'] exec_: Exec probes a container's health by executing a command.
        :param pulumi.Input[int] failure_threshold: FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs'] http_get: HTTPGet probes a container's health by sending an HTTP GET request.
        :param pulumi.Input[int] initial_delay_seconds: InitialDelaySeconds after a container starts before the first probe.
        :param pulumi.Input[int] period_seconds: PeriodSeconds between probes.
        :param pulumi.Input[int] success_threshold: SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs'] tcp_socket: TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param pulumi.Input[int] timeout_seconds: TimeoutSeconds after which the probe times out.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeExecArgs']]:
        """
        Exec probes a container's health by executing a command.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs']]:
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        InitialDelaySeconds after a container starts before the first probe.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        PeriodSeconds between probes.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs']]:
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TimeoutSeconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersLivenessProbeExecArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Exec probes a container's health by executing a command.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command to be run by this probe.
        """
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Command to be run by this probe.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]] = None):
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        :param pulumi.Input[str] path: Path to probe, e.g. '/healthz'.
        :param pulumi.Input[int] port: Port to probe.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]] http_headers: HTTPHeaders to send with the GET request.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path to probe, e.g. '/healthz'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port to probe.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]]:
        """
        HTTPHeaders to send with the GET request.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersLivenessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A HTTPHeader to be passed when probing a container.
        :param pulumi.Input[str] name: Name of this HTTP header. Must be unique per probe.
        :param pulumi.Input[str] value: Value of this HTTP header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this HTTP header. Must be unique per probe.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of this HTTP header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param pulumi.Input[int] port: Port this probe should connect to.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port this probe should connect to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersPortsArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 name: pulumi.Input[str],
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        A ContainerPort specifies a port that is exposed by a container.
        :param pulumi.Input[int] container_port: Port number. Must be unique within its container.
        :param pulumi.Input[str] name: Name of this port. Must be unique within its container. Must be lowercase alphabetical characters.
        :param pulumi.Input[str] protocol: Protocol used by the server listening on this port.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Port number. Must be unique within its container.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this port. Must be unique within its container. Must be lowercase alphabetical characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used by the server listening on this port.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        A ReadinessProbe assesses whether this container is ready to serve requests. Containers that fail readiness probes will be withdrawn from service.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeExecArgs'] exec_: Exec probes a container's health by executing a command.
        :param pulumi.Input[int] failure_threshold: FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs'] http_get: HTTPGet probes a container's health by sending an HTTP GET request.
        :param pulumi.Input[int] initial_delay_seconds: InitialDelaySeconds after a container starts before the first probe.
        :param pulumi.Input[int] period_seconds: PeriodSeconds between probes.
        :param pulumi.Input[int] success_threshold: SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs'] tcp_socket: TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param pulumi.Input[int] timeout_seconds: TimeoutSeconds after which the probe times out.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeExecArgs']]:
        """
        Exec probes a container's health by executing a command.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        FailureThreshold specifies how many consecutive probes must fail in order for the container to be considered healthy.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs']]:
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        InitialDelaySeconds after a container starts before the first probe.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        PeriodSeconds between probes.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        SuccessThreshold specifies how many consecutive probes must success in order for the container to be considered healthy.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs']]:
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TimeoutSeconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersReadinessProbeExecArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Exec probes a container's health by executing a command.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command to be run by this probe.
        """
        pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Command to be run by this probe.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]] = None):
        """
        HTTPGet probes a container's health by sending an HTTP GET request.
        :param pulumi.Input[str] path: Path to probe, e.g. '/healthz'.
        :param pulumi.Input[int] port: Port to probe.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]] http_headers: HTTPHeaders to send with the GET request.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path to probe, e.g. '/healthz'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port to probe.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]]:
        """
        HTTPHeaders to send with the GET request.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersReadinessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A HTTPHeader to be passed when probing a container.
        :param pulumi.Input[str] name: Name of this HTTP header. Must be unique per probe.
        :param pulumi.Input[str] value: Value of this HTTP header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this HTTP header. Must be unique per probe.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of this HTTP header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        """
        TCPSocketProbe probes a container's health by connecting to a TCP socket.
        :param pulumi.Input[int] port: Port this probe should connect to.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port this probe should connect to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesCpuArgs'],
                 memory: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesMemoryArgs'],
                 extended: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedArgs']]]] = None,
                 gpu: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesGpuArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesArgs']]]] = None):
        """
        Resources required by this container
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesCpuArgs'] cpu: CPU required by this container.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesMemoryArgs'] memory: Memory required by this container.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedArgs']]] extended: Extended resources required by this container.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesGpuArgs'] gpu: GPU required by this container.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesArgs']]] volumes: Volumes required by this container.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        if extended is not None:
            pulumi.set(__self__, "extended", extended)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input['ContainerizedWorkloadSpecContainersResourcesCpuArgs']:
        """
        CPU required by this container.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesCpuArgs']):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input['ContainerizedWorkloadSpecContainersResourcesMemoryArgs']:
        """
        Memory required by this container.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesMemoryArgs']):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def extended(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedArgs']]]]:
        """
        Extended resources required by this container.
        """
        return pulumi.get(self, "extended")

    @extended.setter
    def extended(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedArgs']]]]):
        pulumi.set(self, "extended", value)

    @property
    @pulumi.getter
    def gpu(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesGpuArgs']]:
        """
        GPU required by this container.
        """
        return pulumi.get(self, "gpu")

    @gpu.setter
    def gpu(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesGpuArgs']]):
        pulumi.set(self, "gpu", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesArgs']]]]:
        """
        Volumes required by this container.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesCpuArgs:
    def __init__(__self__, *,
                 required: pulumi.Input[str]):
        """
        CPU required by this container.
        :param pulumi.Input[str] required: Required CPU count. 1.0 represents one CPU core.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[str]:
        """
        Required CPU count. 1.0 represents one CPU core.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[str]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesExtendedArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs']):
        """
        ExtendedResource required by a container.
        :param pulumi.Input[str] name: Name of the external resource. Resource names are specified in kind.group/version format, e.g. motionsensor.ext.example.com/v1.
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs'] required: Required extended resource(s), e.g. 8 or "very-cool-widget"
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the external resource. Resource names are specified in kind.group/version format, e.g. motionsensor.ext.example.com/v1.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs']:
        """
        Required extended resource(s), e.g. 8 or "very-cool-widget"
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input['ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs']):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesExtendedRequiredArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesGpuArgs:
    def __init__(__self__, *,
                 required: pulumi.Input[str]):
        """
        GPU required by this container.
        :param pulumi.Input[str] required: Required GPU count.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[str]:
        """
        Required GPU count.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[str]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesMemoryArgs:
    def __init__(__self__, *,
                 required: pulumi.Input[str]):
        """
        Memory required by this container.
        :param pulumi.Input[str] required: Required memory.
        """
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[str]:
        """
        Required memory.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[str]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesVolumesArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 access_mode: Optional[pulumi.Input[str]] = None,
                 disk: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs']] = None,
                 sharing_policy: Optional[pulumi.Input[str]] = None):
        """
        VolumeResource required by a container.
        :param pulumi.Input[str] mount_path: MouthPath at which this volume will be mounted within its container.
        :param pulumi.Input[str] name: Name of this volume. Must be unique within its container.
        :param pulumi.Input[str] access_mode: AccessMode of this volume; RO (read only) or RW (read and write).
        :param pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs'] disk: Disk requirements of this volume.
        :param pulumi.Input[str] sharing_policy: SharingPolicy of this volume; Exclusive or Shared.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if sharing_policy is not None:
            pulumi.set(__self__, "sharing_policy", sharing_policy)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        MouthPath at which this volume will be mounted within its container.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this volume. Must be unique within its container.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        """
        AccessMode of this volume; RO (read only) or RW (read and write).
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs']]:
        """
        Disk requirements of this volume.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="sharingPolicy")
    def sharing_policy(self) -> Optional[pulumi.Input[str]]:
        """
        SharingPolicy of this volume; Exclusive or Shared.
        """
        return pulumi.get(self, "sharing_policy")

    @sharing_policy.setter
    def sharing_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing_policy", value)


@pulumi.input_type
class ContainerizedWorkloadSpecContainersResourcesVolumesDiskArgs:
    def __init__(__self__, *,
                 required: pulumi.Input[str],
                 ephemeral: Optional[pulumi.Input[bool]] = None):
        """
        Disk requirements of this volume.
        :param pulumi.Input[str] required: Required disk space.
        :param pulumi.Input[bool] ephemeral: Ephemeral specifies whether an external disk needs to be mounted.
        """
        pulumi.set(__self__, "required", required)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[str]:
        """
        Required disk space.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[str]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[pulumi.Input[bool]]:
        """
        Ephemeral specifies whether an external disk needs to be mounted.
        """
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ephemeral", value)


@pulumi.input_type
class ContainerizedWorkloadStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusConditionsArgs']]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusResourcesArgs']]]] = None):
        """
        A ContainerizedWorkloadStatus represents the observed state of a ContainerizedWorkload.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusConditionsArgs']]] conditions: Conditions of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusResourcesArgs']]] resources: Resources managed by this containerised workload.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusResourcesArgs']]]]:
        """
        Resources managed by this containerised workload.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerizedWorkloadStatusResourcesArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ContainerizedWorkloadStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ContainerizedWorkloadStatusResourcesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        A TypedReference refers to an object by Name, Kind, and APIVersion. It is commonly used to reference cluster-scoped objects or objects where the namespace is already known.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ManualScalerTraitSpecArgs:
    def __init__(__self__, *,
                 replica_count: pulumi.Input[int],
                 workload_ref: pulumi.Input['ManualScalerTraitSpecWorkloadRefArgs']):
        """
        A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
        :param pulumi.Input[int] replica_count: ReplicaCount of the workload this trait applies to.
        :param pulumi.Input['ManualScalerTraitSpecWorkloadRefArgs'] workload_ref: WorkloadReference to the workload this trait applies to.
        """
        pulumi.set(__self__, "replica_count", replica_count)
        pulumi.set(__self__, "workload_ref", workload_ref)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> pulumi.Input[int]:
        """
        ReplicaCount of the workload this trait applies to.
        """
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "replica_count", value)

    @property
    @pulumi.getter(name="workloadRef")
    def workload_ref(self) -> pulumi.Input['ManualScalerTraitSpecWorkloadRefArgs']:
        """
        WorkloadReference to the workload this trait applies to.
        """
        return pulumi.get(self, "workload_ref")

    @workload_ref.setter
    def workload_ref(self, value: pulumi.Input['ManualScalerTraitSpecWorkloadRefArgs']):
        pulumi.set(self, "workload_ref", value)


@pulumi.input_type
class ManualScalerTraitSpecWorkloadRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        WorkloadReference to the workload this trait applies to.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ManualScalerTraitStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ManualScalerTraitStatusConditionsArgs']]]] = None):
        """
        A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
        :param pulumi.Input[Sequence[pulumi.Input['ManualScalerTraitStatusConditionsArgs']]] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManualScalerTraitStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManualScalerTraitStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ManualScalerTraitStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ScopeDefinitionSpecArgs:
    def __init__(__self__, *,
                 allow_component_overlap: pulumi.Input[bool],
                 definition_ref: pulumi.Input['ScopeDefinitionSpecDefinitionRefArgs']):
        """
        A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
        :param pulumi.Input[bool] allow_component_overlap: AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
        :param pulumi.Input['ScopeDefinitionSpecDefinitionRefArgs'] definition_ref: Reference to the CustomResourceDefinition that defines this scope kind.
        """
        pulumi.set(__self__, "allow_component_overlap", allow_component_overlap)
        pulumi.set(__self__, "definition_ref", definition_ref)

    @property
    @pulumi.getter(name="allowComponentOverlap")
    def allow_component_overlap(self) -> pulumi.Input[bool]:
        """
        AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
        """
        return pulumi.get(self, "allow_component_overlap")

    @allow_component_overlap.setter
    def allow_component_overlap(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_component_overlap", value)

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> pulumi.Input['ScopeDefinitionSpecDefinitionRefArgs']:
        """
        Reference to the CustomResourceDefinition that defines this scope kind.
        """
        return pulumi.get(self, "definition_ref")

    @definition_ref.setter
    def definition_ref(self, value: pulumi.Input['ScopeDefinitionSpecDefinitionRefArgs']):
        pulumi.set(self, "definition_ref", value)


@pulumi.input_type
class ScopeDefinitionSpecDefinitionRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Reference to the CustomResourceDefinition that defines this scope kind.
        :param pulumi.Input[str] name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TraitDefinitionSpecArgs:
    def __init__(__self__, *,
                 definition_ref: pulumi.Input['TraitDefinitionSpecDefinitionRefArgs'],
                 applies_to_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A TraitDefinitionSpec defines the desired state of a TraitDefinition.
        :param pulumi.Input['TraitDefinitionSpecDefinitionRefArgs'] definition_ref: Reference to the CustomResourceDefinition that defines this trait kind.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] applies_to_workloads: AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
        """
        pulumi.set(__self__, "definition_ref", definition_ref)
        if applies_to_workloads is not None:
            pulumi.set(__self__, "applies_to_workloads", applies_to_workloads)

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> pulumi.Input['TraitDefinitionSpecDefinitionRefArgs']:
        """
        Reference to the CustomResourceDefinition that defines this trait kind.
        """
        return pulumi.get(self, "definition_ref")

    @definition_ref.setter
    def definition_ref(self, value: pulumi.Input['TraitDefinitionSpecDefinitionRefArgs']):
        pulumi.set(self, "definition_ref", value)

    @property
    @pulumi.getter(name="appliesToWorkloads")
    def applies_to_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
        """
        return pulumi.get(self, "applies_to_workloads")

    @applies_to_workloads.setter
    def applies_to_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "applies_to_workloads", value)


@pulumi.input_type
class TraitDefinitionSpecDefinitionRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Reference to the CustomResourceDefinition that defines this trait kind.
        :param pulumi.Input[str] name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkloadDefinitionSpecArgs:
    def __init__(__self__, *,
                 definition_ref: pulumi.Input['WorkloadDefinitionSpecDefinitionRefArgs']):
        """
        A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
        :param pulumi.Input['WorkloadDefinitionSpecDefinitionRefArgs'] definition_ref: Reference to the CustomResourceDefinition that defines this workload kind.
        """
        pulumi.set(__self__, "definition_ref", definition_ref)

    @property
    @pulumi.getter(name="definitionRef")
    def definition_ref(self) -> pulumi.Input['WorkloadDefinitionSpecDefinitionRefArgs']:
        """
        Reference to the CustomResourceDefinition that defines this workload kind.
        """
        return pulumi.get(self, "definition_ref")

    @definition_ref.setter
    def definition_ref(self, value: pulumi.Input['WorkloadDefinitionSpecDefinitionRefArgs']):
        pulumi.set(self, "definition_ref", value)


@pulumi.input_type
class WorkloadDefinitionSpecDefinitionRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Reference to the CustomResourceDefinition that defines this workload kind.
        :param pulumi.Input[str] name: Name of the referenced CustomResourceDefinition.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced CustomResourceDefinition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'KubernetesApplicationResourceSpec',
    'KubernetesApplicationResourceSpecSecrets',
    'KubernetesApplicationResourceSpecTargetRef',
    'KubernetesApplicationResourceStatus',
    'KubernetesApplicationResourceStatusConditionedStatus',
    'KubernetesApplicationResourceStatusConditionedStatusConditions',
    'KubernetesApplicationResourceStatusRemote',
    'KubernetesApplicationSpec',
    'KubernetesApplicationSpecResourceSelector',
    'KubernetesApplicationSpecResourceSelectorMatchExpressions',
    'KubernetesApplicationSpecResourceTemplates',
    'KubernetesApplicationSpecResourceTemplatesSpec',
    'KubernetesApplicationSpecResourceTemplatesSpecSecrets',
    'KubernetesApplicationSpecResourceTemplatesSpecTargetRef',
    'KubernetesApplicationSpecTargetRef',
    'KubernetesApplicationSpecTargetSelector',
    'KubernetesApplicationSpecTargetSelectorMatchExpressions',
    'KubernetesApplicationStatus',
    'KubernetesApplicationStatusConditionedStatus',
    'KubernetesApplicationStatusConditionedStatusConditions',
    'KubernetesTargetSpec',
    'KubernetesTargetSpecClusterRef',
    'KubernetesTargetSpecConnectionSecretRef',
    'KubernetesTargetStatus',
    'KubernetesTargetStatusConditions',
]

@pulumi.output_type
class KubernetesApplicationResourceSpec(dict):
    """
    KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
    """
    def __init__(__self__, *,
                 template: Mapping[str, Any],
                 secrets: Optional[Sequence['outputs.KubernetesApplicationResourceSpecSecrets']] = None,
                 target_ref: Optional['outputs.KubernetesApplicationResourceSpecTargetRef'] = None):
        """
        KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
        :param Mapping[str, Any] template: A Template for a Kubernetes resource to be submitted to the KubernetesCluster to which this application resource is scheduled. The resource must be understood by the KubernetesCluster. Crossplane requires only that the resource contains standard Kubernetes type and object metadata.
        :param Sequence['KubernetesApplicationResourceSpecSecretsArgs'] secrets: Secrets upon which this application resource depends. These secrets will be propagated to the Kubernetes cluster to which this application is scheduled.
        :param 'KubernetesApplicationResourceSpecTargetRefArgs' target_ref: Target to which this application has been scheduled.
        """
        pulumi.set(__self__, "template", template)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if target_ref is not None:
            pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, Any]:
        """
        A Template for a Kubernetes resource to be submitted to the KubernetesCluster to which this application resource is scheduled. The resource must be understood by the KubernetesCluster. Crossplane requires only that the resource contains standard Kubernetes type and object metadata.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.KubernetesApplicationResourceSpecSecrets']]:
        """
        Secrets upon which this application resource depends. These secrets will be propagated to the Kubernetes cluster to which this application is scheduled.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> Optional['outputs.KubernetesApplicationResourceSpecTargetRef']:
        """
        Target to which this application has been scheduled.
        """
        return pulumi.get(self, "target_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceSpecSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceSpecTargetRef(dict):
    """
    Target to which this application has been scheduled.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Target to which this application has been scheduled.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceStatus(dict):
    """
    KubernetesApplicationResourceStatus represents the observed state of a KubernetesApplicationResource.
    """
    def __init__(__self__, *,
                 conditioned_status: Optional['outputs.KubernetesApplicationResourceStatusConditionedStatus'] = None,
                 remote: Optional['outputs.KubernetesApplicationResourceStatusRemote'] = None,
                 state: Optional[str] = None):
        """
        KubernetesApplicationResourceStatus represents the observed state of a KubernetesApplicationResource.
        :param 'KubernetesApplicationResourceStatusConditionedStatusArgs' conditioned_status: A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        :param 'KubernetesApplicationResourceStatusRemoteArgs' remote: Remote status of the resource templated by this application resource.
        :param str state: State of the application.
        """
        if conditioned_status is not None:
            pulumi.set(__self__, "conditioned_status", conditioned_status)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="conditionedStatus")
    def conditioned_status(self) -> Optional['outputs.KubernetesApplicationResourceStatusConditionedStatus']:
        """
        A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        """
        return pulumi.get(self, "conditioned_status")

    @property
    @pulumi.getter
    def remote(self) -> Optional['outputs.KubernetesApplicationResourceStatusRemote']:
        """
        Remote status of the resource templated by this application resource.
        """
        return pulumi.get(self, "remote")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State of the application.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceStatusConditionedStatus(dict):
    """
    A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.KubernetesApplicationResourceStatusConditionedStatusConditions']] = None):
        """
        A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        :param Sequence['KubernetesApplicationResourceStatusConditionedStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.KubernetesApplicationResourceStatusConditionedStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceStatusConditionedStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationResourceStatusRemote(dict):
    """
    Remote status of the resource templated by this application resource.
    """
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        """
        Remote status of the resource templated by this application resource.
        :param str raw: Raw JSON representation of the remote status as a byte array.
        """
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        """
        Raw JSON representation of the remote status as a byte array.
        """
        return pulumi.get(self, "raw")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpec(dict):
    """
    A KubernetesApplicationSpec specifies the resources of a Kubernetes application.
    """
    def __init__(__self__, *,
                 resource_selector: 'outputs.KubernetesApplicationSpecResourceSelector',
                 resource_templates: Sequence['outputs.KubernetesApplicationSpecResourceTemplates'],
                 target_ref: Optional['outputs.KubernetesApplicationSpecTargetRef'] = None,
                 target_selector: Optional['outputs.KubernetesApplicationSpecTargetSelector'] = None):
        """
        A KubernetesApplicationSpec specifies the resources of a Kubernetes application.
        :param 'KubernetesApplicationSpecResourceSelectorArgs' resource_selector: ResourceSelector selects the KubernetesApplicationResources that are managed by this KubernetesApplication. Note that a KubernetesApplication will never adopt orphaned KubernetesApplicationResources, and thus this selector serves only to help match a KubernetesApplication to its KubernetesApplicationResources.
        :param Sequence['KubernetesApplicationSpecResourceTemplatesArgs'] resource_templates: ResourceTemplates specifies a set of Kubernetes application resources managed by this application.
        :param 'KubernetesApplicationSpecTargetRefArgs' target_ref: Target to which this application has been scheduled.
        :param 'KubernetesApplicationSpecTargetSelectorArgs' target_selector: TargetSelector selects the targets to which this application may be scheduled. Leave both match labels and expressions empty to match any target.
        """
        pulumi.set(__self__, "resource_selector", resource_selector)
        pulumi.set(__self__, "resource_templates", resource_templates)
        if target_ref is not None:
            pulumi.set(__self__, "target_ref", target_ref)
        if target_selector is not None:
            pulumi.set(__self__, "target_selector", target_selector)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> 'outputs.KubernetesApplicationSpecResourceSelector':
        """
        ResourceSelector selects the KubernetesApplicationResources that are managed by this KubernetesApplication. Note that a KubernetesApplication will never adopt orphaned KubernetesApplicationResources, and thus this selector serves only to help match a KubernetesApplication to its KubernetesApplicationResources.
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter(name="resourceTemplates")
    def resource_templates(self) -> Sequence['outputs.KubernetesApplicationSpecResourceTemplates']:
        """
        ResourceTemplates specifies a set of Kubernetes application resources managed by this application.
        """
        return pulumi.get(self, "resource_templates")

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> Optional['outputs.KubernetesApplicationSpecTargetRef']:
        """
        Target to which this application has been scheduled.
        """
        return pulumi.get(self, "target_ref")

    @property
    @pulumi.getter(name="targetSelector")
    def target_selector(self) -> Optional['outputs.KubernetesApplicationSpecTargetSelector']:
        """
        TargetSelector selects the targets to which this application may be scheduled. Leave both match labels and expressions empty to match any target.
        """
        return pulumi.get(self, "target_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceSelector(dict):
    """
    ResourceSelector selects the KubernetesApplicationResources that are managed by this KubernetesApplication. Note that a KubernetesApplication will never adopt orphaned KubernetesApplicationResources, and thus this selector serves only to help match a KubernetesApplication to its KubernetesApplicationResources.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.KubernetesApplicationSpecResourceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        ResourceSelector selects the KubernetesApplicationResources that are managed by this KubernetesApplication. Note that a KubernetesApplication will never adopt orphaned KubernetesApplicationResources, and thus this selector serves only to help match a KubernetesApplication to its KubernetesApplicationResources.
        :param Sequence['KubernetesApplicationSpecResourceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.KubernetesApplicationSpecResourceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceTemplates(dict):
    """
    A KubernetesApplicationResourceTemplate is used to instantiate new KubernetesApplicationResources.
    """
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.KubernetesApplicationSpecResourceTemplatesSpec'] = None):
        """
        A KubernetesApplicationResourceTemplate is used to instantiate new KubernetesApplicationResources.
        :param 'KubernetesApplicationSpecResourceTemplatesSpecArgs' spec: KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.KubernetesApplicationSpecResourceTemplatesSpec']:
        """
        KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceTemplatesSpec(dict):
    """
    KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
    """
    def __init__(__self__, *,
                 template: Mapping[str, Any],
                 secrets: Optional[Sequence['outputs.KubernetesApplicationSpecResourceTemplatesSpecSecrets']] = None,
                 target_ref: Optional['outputs.KubernetesApplicationSpecResourceTemplatesSpecTargetRef'] = None):
        """
        KubernetesApplicationResourceSpec specifies the desired state of a KubernetesApplicationResource.
        :param Mapping[str, Any] template: A Template for a Kubernetes resource to be submitted to the KubernetesCluster to which this application resource is scheduled. The resource must be understood by the KubernetesCluster. Crossplane requires only that the resource contains standard Kubernetes type and object metadata.
        :param Sequence['KubernetesApplicationSpecResourceTemplatesSpecSecretsArgs'] secrets: Secrets upon which this application resource depends. These secrets will be propagated to the Kubernetes cluster to which this application is scheduled.
        :param 'KubernetesApplicationSpecResourceTemplatesSpecTargetRefArgs' target_ref: Target to which this application has been scheduled.
        """
        pulumi.set(__self__, "template", template)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if target_ref is not None:
            pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, Any]:
        """
        A Template for a Kubernetes resource to be submitted to the KubernetesCluster to which this application resource is scheduled. The resource must be understood by the KubernetesCluster. Crossplane requires only that the resource contains standard Kubernetes type and object metadata.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.KubernetesApplicationSpecResourceTemplatesSpecSecrets']]:
        """
        Secrets upon which this application resource depends. These secrets will be propagated to the Kubernetes cluster to which this application is scheduled.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> Optional['outputs.KubernetesApplicationSpecResourceTemplatesSpecTargetRef']:
        """
        Target to which this application has been scheduled.
        """
        return pulumi.get(self, "target_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceTemplatesSpecSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecResourceTemplatesSpecTargetRef(dict):
    """
    Target to which this application has been scheduled.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Target to which this application has been scheduled.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecTargetRef(dict):
    """
    Target to which this application has been scheduled.
    """
    def __init__(__self__, *,
                 name: str):
        """
        Target to which this application has been scheduled.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecTargetSelector(dict):
    """
    TargetSelector selects the targets to which this application may be scheduled. Leave both match labels and expressions empty to match any target.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.KubernetesApplicationSpecTargetSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        TargetSelector selects the targets to which this application may be scheduled. Leave both match labels and expressions empty to match any target.
        :param Sequence['KubernetesApplicationSpecTargetSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.KubernetesApplicationSpecTargetSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationSpecTargetSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationStatus(dict):
    """
    KubernetesApplicationStatus represents the observed state of a KubernetesApplication.
    """
    def __init__(__self__, *,
                 conditioned_status: Optional['outputs.KubernetesApplicationStatusConditionedStatus'] = None,
                 desired_resources: Optional[int] = None,
                 state: Optional[str] = None,
                 submitted_resources: Optional[int] = None):
        """
        KubernetesApplicationStatus represents the observed state of a KubernetesApplication.
        :param 'KubernetesApplicationStatusConditionedStatusArgs' conditioned_status: A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        :param int desired_resources: Desired resources of this application, i.e. the number of resources that match this application's resource selector.
        :param str state: State of the application.
        :param int submitted_resources: Submitted resources of this workload, i.e. the subset of desired resources that have been successfully submitted to their scheduled Kubernetes cluster.
        """
        if conditioned_status is not None:
            pulumi.set(__self__, "conditioned_status", conditioned_status)
        if desired_resources is not None:
            pulumi.set(__self__, "desired_resources", desired_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if submitted_resources is not None:
            pulumi.set(__self__, "submitted_resources", submitted_resources)

    @property
    @pulumi.getter(name="conditionedStatus")
    def conditioned_status(self) -> Optional['outputs.KubernetesApplicationStatusConditionedStatus']:
        """
        A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        """
        return pulumi.get(self, "conditioned_status")

    @property
    @pulumi.getter(name="desiredResources")
    def desired_resources(self) -> Optional[int]:
        """
        Desired resources of this application, i.e. the number of resources that match this application's resource selector.
        """
        return pulumi.get(self, "desired_resources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State of the application.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="submittedResources")
    def submitted_resources(self) -> Optional[int]:
        """
        Submitted resources of this workload, i.e. the subset of desired resources that have been successfully submitted to their scheduled Kubernetes cluster.
        """
        return pulumi.get(self, "submitted_resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationStatusConditionedStatus(dict):
    """
    A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.KubernetesApplicationStatusConditionedStatusConditions']] = None):
        """
        A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        :param Sequence['KubernetesApplicationStatusConditionedStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.KubernetesApplicationStatusConditionedStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesApplicationStatusConditionedStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesTargetSpec(dict):
    """
    A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
    """
    def __init__(__self__, *,
                 cluster_ref: Optional['outputs.KubernetesTargetSpecClusterRef'] = None,
                 connection_secret_ref: Optional['outputs.KubernetesTargetSpecConnectionSecretRef'] = None):
        """
        A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
        :param 'KubernetesTargetSpecClusterRefArgs' cluster_ref: A ResourceReference specifies an existing managed resource, in any namespace, which this target should attempt to propagate a connection secret from.
        :param 'KubernetesTargetSpecConnectionSecretRefArgs' connection_secret_ref: WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this target, to which any connection details for this target should be written or already exist. Connection secrets referenced by a target should contain information for connecting to a resource that allows for scheduling of workloads.
        """
        if cluster_ref is not None:
            pulumi.set(__self__, "cluster_ref", cluster_ref)
        if connection_secret_ref is not None:
            pulumi.set(__self__, "connection_secret_ref", connection_secret_ref)

    @property
    @pulumi.getter(name="clusterRef")
    def cluster_ref(self) -> Optional['outputs.KubernetesTargetSpecClusterRef']:
        """
        A ResourceReference specifies an existing managed resource, in any namespace, which this target should attempt to propagate a connection secret from.
        """
        return pulumi.get(self, "cluster_ref")

    @property
    @pulumi.getter(name="connectionSecretRef")
    def connection_secret_ref(self) -> Optional['outputs.KubernetesTargetSpecConnectionSecretRef']:
        """
        WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this target, to which any connection details for this target should be written or already exist. Connection secrets referenced by a target should contain information for connecting to a resource that allows for scheduling of workloads.
        """
        return pulumi.get(self, "connection_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesTargetSpecClusterRef(dict):
    """
    A ResourceReference specifies an existing managed resource, in any namespace, which this target should attempt to propagate a connection secret from.
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        A ResourceReference specifies an existing managed resource, in any namespace, which this target should attempt to propagate a connection secret from.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesTargetSpecConnectionSecretRef(dict):
    """
    WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this target, to which any connection details for this target should be written or already exist. Connection secrets referenced by a target should contain information for connecting to a resource that allows for scheduling of workloads.
    """
    def __init__(__self__, *,
                 name: str):
        """
        WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this target, to which any connection details for this target should be written or already exist. Connection secrets referenced by a target should contain information for connecting to a resource that allows for scheduling of workloads.
        :param str name: Name of the secret.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesTargetStatus(dict):
    """
    A TargetStatus defines the observed status a target.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.KubernetesTargetStatusConditions']] = None):
        """
        A TargetStatus defines the observed status a target.
        :param Sequence['KubernetesTargetStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.KubernetesTargetStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesTargetStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'CompositionSpecArgs',
    'CompositionSpecFromArgs',
    'CompositionSpecToArgs',
    'CompositionSpecToConnectionDetailsArgs',
    'CompositionSpecToPatchesArgs',
    'CompositionSpecToPatchesTransformsArgs',
    'CompositionSpecToPatchesTransformsMathArgs',
    'CompositionSpecToPatchesTransformsStringArgs',
    'CompositionStatusArgs',
    'CompositionStatusConditionsArgs',
    'InfrastructureDefinitionSpecArgs',
    'InfrastructureDefinitionSpecCrdSpecTemplateArgs',
    'InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs',
    'InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs',
    'InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs',
    'InfrastructureDefinitionStatusArgs',
    'InfrastructureDefinitionStatusConditionsArgs',
    'InfrastructurePublicationSpecArgs',
    'InfrastructurePublicationSpecInfrastructureDefinitionRefArgs',
    'InfrastructurePublicationStatusArgs',
    'InfrastructurePublicationStatusConditionsArgs',
]

@pulumi.input_type
class CompositionSpecArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input['CompositionSpecFromArgs'],
                 to: pulumi.Input[Sequence[pulumi.Input['CompositionSpecToArgs']]],
                 write_connection_secrets_to_namespace: pulumi.Input[str],
                 reclaim_policy: Optional[pulumi.Input[str]] = None):
        """
        CompositionSpec specifies the desired state of the definition.
        :param pulumi.Input['CompositionSpecFromArgs'] from_: From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        :param pulumi.Input[Sequence[pulumi.Input['CompositionSpecToArgs']]] to: To is the list of target resources that make up the composition.
        :param pulumi.Input[str] write_connection_secrets_to_namespace: WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
        :param pulumi.Input[str] reclaim_policy: ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)
        pulumi.set(__self__, "write_connection_secrets_to_namespace", write_connection_secrets_to_namespace)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input['CompositionSpecFromArgs']:
        """
        From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input['CompositionSpecFromArgs']):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[Sequence[pulumi.Input['CompositionSpecToArgs']]]:
        """
        To is the list of target resources that make up the composition.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[Sequence[pulumi.Input['CompositionSpecToArgs']]]):
        pulumi.set(self, "to", value)

    @property
    @pulumi.getter(name="writeConnectionSecretsToNamespace")
    def write_connection_secrets_to_namespace(self) -> pulumi.Input[str]:
        """
        WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
        """
        return pulumi.get(self, "write_connection_secrets_to_namespace")

    @write_connection_secrets_to_namespace.setter
    def write_connection_secrets_to_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "write_connection_secrets_to_namespace", value)

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[pulumi.Input[str]]:
        """
        ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
        """
        return pulumi.get(self, "reclaim_policy")

    @reclaim_policy.setter
    def reclaim_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reclaim_policy", value)


@pulumi.input_type
class CompositionSpecFromArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str]):
        """
        From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        :param pulumi.Input[str] api_version: APIVersion of the type.
        :param pulumi.Input[str] kind: Kind of the type.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the type.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the type.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class CompositionSpecToArgs:
    def __init__(__self__, *,
                 base: pulumi.Input[Mapping[str, Any]],
                 connection_details: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToConnectionDetailsArgs']]]] = None,
                 patches: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesArgs']]]] = None):
        """
        ComposedTemplate is used to provide information about how the composed resource should be processed.
        :param pulumi.Input[Mapping[str, Any]] base: Base is the target resource that the patches will be applied on.
        :param pulumi.Input[Sequence[pulumi.Input['CompositionSpecToConnectionDetailsArgs']]] connection_details: ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
        :param pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesArgs']]] patches: Patches will be applied as overlay to the base resource.
        """
        pulumi.set(__self__, "base", base)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)

    @property
    @pulumi.getter
    def base(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        Base is the target resource that the patches will be applied on.
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToConnectionDetailsArgs']]]]:
        """
        ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
        """
        return pulumi.get(self, "connection_details")

    @connection_details.setter
    def connection_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToConnectionDetailsArgs']]]]):
        pulumi.set(self, "connection_details", value)

    @property
    @pulumi.getter
    def patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesArgs']]]]:
        """
        Patches will be applied as overlay to the base resource.
        """
        return pulumi.get(self, "patches")

    @patches.setter
    def patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesArgs']]]]):
        pulumi.set(self, "patches", value)


@pulumi.input_type
class CompositionSpecToConnectionDetailsArgs:
    def __init__(__self__, *,
                 from_connection_secret_key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
        :param pulumi.Input[str] from_connection_secret_key: FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
        :param pulumi.Input[str] name: Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
        """
        pulumi.set(__self__, "from_connection_secret_key", from_connection_secret_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fromConnectionSecretKey")
    def from_connection_secret_key(self) -> pulumi.Input[str]:
        """
        FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
        """
        return pulumi.get(self, "from_connection_secret_key")

    @from_connection_secret_key.setter
    def from_connection_secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_connection_secret_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CompositionSpecToPatchesArgs:
    def __init__(__self__, *,
                 from_field_path: pulumi.Input[str],
                 to_field_path: Optional[pulumi.Input[str]] = None,
                 transforms: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesTransformsArgs']]]] = None):
        """
        Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
        :param pulumi.Input[str] from_field_path: FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
        :param pulumi.Input[str] to_field_path: ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
        :param pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesTransformsArgs']]] transforms: Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
        """
        pulumi.set(__self__, "from_field_path", from_field_path)
        if to_field_path is not None:
            pulumi.set(__self__, "to_field_path", to_field_path)
        if transforms is not None:
            pulumi.set(__self__, "transforms", transforms)

    @property
    @pulumi.getter(name="fromFieldPath")
    def from_field_path(self) -> pulumi.Input[str]:
        """
        FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
        """
        return pulumi.get(self, "from_field_path")

    @from_field_path.setter
    def from_field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_field_path", value)

    @property
    @pulumi.getter(name="toFieldPath")
    def to_field_path(self) -> Optional[pulumi.Input[str]]:
        """
        ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
        """
        return pulumi.get(self, "to_field_path")

    @to_field_path.setter
    def to_field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_field_path", value)

    @property
    @pulumi.getter
    def transforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesTransformsArgs']]]]:
        """
        Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
        """
        return pulumi.get(self, "transforms")

    @transforms.setter
    def transforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionSpecToPatchesTransformsArgs']]]]):
        pulumi.set(self, "transforms", value)


@pulumi.input_type
class CompositionSpecToPatchesTransformsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 math: Optional[pulumi.Input['CompositionSpecToPatchesTransformsMathArgs']] = None,
                 string: Optional[pulumi.Input['CompositionSpecToPatchesTransformsStringArgs']] = None):
        """
        Transform is a unit of process whose input is transformed into an output with the supplied configuration.
        :param pulumi.Input[str] type: Type of the transform to be run.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] map: Map uses the input as a key in the given map and returns the value.
        :param pulumi.Input['CompositionSpecToPatchesTransformsMathArgs'] math: Math is used to transform the input via mathematical operations such as multiplication.
        :param pulumi.Input['CompositionSpecToPatchesTransformsStringArgs'] string: String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        """
        pulumi.set(__self__, "type", type)
        if map is not None:
            pulumi.set(__self__, "map", map)
        if math is not None:
            pulumi.set(__self__, "math", math)
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the transform to be run.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map uses the input as a key in the given map and returns the value.
        """
        return pulumi.get(self, "map")

    @map.setter
    def map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "map", value)

    @property
    @pulumi.getter
    def math(self) -> Optional[pulumi.Input['CompositionSpecToPatchesTransformsMathArgs']]:
        """
        Math is used to transform the input via mathematical operations such as multiplication.
        """
        return pulumi.get(self, "math")

    @math.setter
    def math(self, value: Optional[pulumi.Input['CompositionSpecToPatchesTransformsMathArgs']]):
        pulumi.set(self, "math", value)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input['CompositionSpecToPatchesTransformsStringArgs']]:
        """
        String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        """
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input['CompositionSpecToPatchesTransformsStringArgs']]):
        pulumi.set(self, "string", value)


@pulumi.input_type
class CompositionSpecToPatchesTransformsMathArgs:
    def __init__(__self__, *,
                 multiply: Optional[pulumi.Input[int]] = None):
        """
        Math is used to transform the input via mathematical operations such as multiplication.
        :param pulumi.Input[int] multiply: Multiply the value.
        """
        if multiply is not None:
            pulumi.set(__self__, "multiply", multiply)

    @property
    @pulumi.getter
    def multiply(self) -> Optional[pulumi.Input[int]]:
        """
        Multiply the value.
        """
        return pulumi.get(self, "multiply")

    @multiply.setter
    def multiply(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multiply", value)


@pulumi.input_type
class CompositionSpecToPatchesTransformsStringArgs:
    def __init__(__self__, *,
                 fmt: pulumi.Input[str]):
        """
        String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        :param pulumi.Input[str] fmt: Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
        """
        pulumi.set(__self__, "fmt", fmt)

    @property
    @pulumi.getter
    def fmt(self) -> pulumi.Input[str]:
        """
        Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
        """
        return pulumi.get(self, "fmt")

    @fmt.setter
    def fmt(self, value: pulumi.Input[str]):
        pulumi.set(self, "fmt", value)


@pulumi.input_type
class CompositionStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionStatusConditionsArgs']]]] = None):
        """
        CompositionStatus shows the observed state of the composition.
        :param pulumi.Input[Sequence[pulumi.Input['CompositionStatusConditionsArgs']]] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CompositionStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CompositionStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class CompositionStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class InfrastructureDefinitionSpecArgs:
    def __init__(__self__, *,
                 connection_secret_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 crd_spec_template: Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateArgs']] = None):
        """
        InfrastructureDefinitionSpec specifies the desired state of the definition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] connection_secret_keys: ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
        :param pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateArgs'] crd_spec_template: CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        """
        if connection_secret_keys is not None:
            pulumi.set(__self__, "connection_secret_keys", connection_secret_keys)
        if crd_spec_template is not None:
            pulumi.set(__self__, "crd_spec_template", crd_spec_template)

    @property
    @pulumi.getter(name="connectionSecretKeys")
    def connection_secret_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
        """
        return pulumi.get(self, "connection_secret_keys")

    @connection_secret_keys.setter
    def connection_secret_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "connection_secret_keys", value)

    @property
    @pulumi.getter(name="crdSpecTemplate")
    def crd_spec_template(self) -> Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateArgs']]:
        """
        CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        """
        return pulumi.get(self, "crd_spec_template")

    @crd_spec_template.setter
    def crd_spec_template(self, value: Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateArgs']]):
        pulumi.set(self, "crd_spec_template", value)


@pulumi.input_type
class InfrastructureDefinitionSpecCrdSpecTemplateArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 names: pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs'],
                 additional_printer_columns: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs']]]] = None,
                 validation: Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        :param pulumi.Input[str] group: group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        :param pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs'] names: names specify the resource and kind names for the custom resource.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs']]] additional_printer_columns: additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        :param pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs'] validation: validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        :param pulumi.Input[str] version: version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "names", names)
        if additional_printer_columns is not None:
            pulumi.set(__self__, "additional_printer_columns", additional_printer_columns)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def names(self) -> pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs']:
        """
        names specify the resource and kind names for the custom resource.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs']):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter(name="additionalPrinterColumns")
    def additional_printer_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs']]]]:
        """
        additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        """
        return pulumi.get(self, "additional_printer_columns")

    @additional_printer_columns.setter
    def additional_printer_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs']]]]):
        pulumi.set(self, "additional_printer_columns", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs']]:
        """
        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        """
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs']]):
        pulumi.set(self, "validation", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs:
    def __init__(__self__, *,
                 json_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        CustomResourceColumnDefinition specifies a column for server side printing.
        :param pulumi.Input[str] json_path: JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        :param pulumi.Input[str] name: name is a human readable name for the column.
        :param pulumi.Input[str] type: type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param pulumi.Input[str] description: description is a human readable description of this column.
        :param pulumi.Input[str] format: format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param pulumi.Input[int] priority: priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        """
        pulumi.set(__self__, "json_path", json_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="JSONPath")
    def json_path(self) -> pulumi.Input[str]:
        """
        JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        """
        return pulumi.get(self, "json_path")

    @json_path.setter
    def json_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "json_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is a human readable name for the column.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description is a human readable description of this column.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 plural: pulumi.Input[str],
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 list_kind: Optional[pulumi.Input[str]] = None,
                 short_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 singular: Optional[pulumi.Input[str]] = None):
        """
        names specify the resource and kind names for the custom resource.
        :param pulumi.Input[str] kind: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
        :param pulumi.Input[str] plural: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] categories: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        :param pulumi.Input[str] list_kind: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] short_names: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
        :param pulumi.Input[str] singular: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "plural", plural)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if list_kind is not None:
            pulumi.set(__self__, "list_kind", list_kind)
        if short_names is not None:
            pulumi.set(__self__, "short_names", short_names)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def plural(self) -> pulumi.Input[str]:
        """
        plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        """
        return pulumi.get(self, "plural")

    @plural.setter
    def plural(self, value: pulumi.Input[str]):
        pulumi.set(self, "plural", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="listKind")
    def list_kind(self) -> Optional[pulumi.Input[str]]:
        """
        listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        """
        return pulumi.get(self, "list_kind")

    @list_kind.setter
    def list_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_kind", value)

    @property
    @pulumi.getter(name="shortNames")
    def short_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
        """
        return pulumi.get(self, "short_names")

    @short_names.setter
    def short_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "short_names", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input[str]]:
        """
        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "singular", value)


@pulumi.input_type
class InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs:
    def __init__(__self__, *,
                 open_apiv3_schema: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        :param pulumi.Input[Mapping[str, Any]] open_apiv3_schema: openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        """
        if open_apiv3_schema is not None:
            pulumi.set(__self__, "open_apiv3_schema", open_apiv3_schema)

    @property
    @pulumi.getter(name="openAPIV3Schema")
    def open_apiv3_schema(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        """
        return pulumi.get(self, "open_apiv3_schema")

    @open_apiv3_schema.setter
    def open_apiv3_schema(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "open_apiv3_schema", value)


@pulumi.input_type
class InfrastructureDefinitionStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionStatusConditionsArgs']]]] = None):
        """
        InfrastructureDefinitionStatus shows the observed state of the definition.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionStatusConditionsArgs']]] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructureDefinitionStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class InfrastructureDefinitionStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class InfrastructurePublicationSpecArgs:
    def __init__(__self__, *,
                 infrastructure_definition_ref: pulumi.Input['InfrastructurePublicationSpecInfrastructureDefinitionRefArgs']):
        """
        InfrastructurePublicationSpec specifies the desired state of the definition.
        :param pulumi.Input['InfrastructurePublicationSpecInfrastructureDefinitionRefArgs'] infrastructure_definition_ref: InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        """
        pulumi.set(__self__, "infrastructure_definition_ref", infrastructure_definition_ref)

    @property
    @pulumi.getter(name="infrastructureDefinitionRef")
    def infrastructure_definition_ref(self) -> pulumi.Input['InfrastructurePublicationSpecInfrastructureDefinitionRefArgs']:
        """
        InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        """
        return pulumi.get(self, "infrastructure_definition_ref")

    @infrastructure_definition_ref.setter
    def infrastructure_definition_ref(self, value: pulumi.Input['InfrastructurePublicationSpecInfrastructureDefinitionRefArgs']):
        pulumi.set(self, "infrastructure_definition_ref", value)


@pulumi.input_type
class InfrastructurePublicationSpecInfrastructureDefinitionRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        :param pulumi.Input[str] name: Name of the referenced object.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InfrastructurePublicationStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicationStatusConditionsArgs']]]] = None):
        """
        InfrastructurePublicationStatus shows the observed state of the definition.
        :param pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicationStatusConditionsArgs']]] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicationStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfrastructurePublicationStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class InfrastructurePublicationStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CompositionSpec',
    'CompositionSpecFrom',
    'CompositionSpecTo',
    'CompositionSpecToConnectionDetails',
    'CompositionSpecToPatches',
    'CompositionSpecToPatchesTransforms',
    'CompositionSpecToPatchesTransformsMath',
    'CompositionSpecToPatchesTransformsString',
    'CompositionStatus',
    'CompositionStatusConditions',
    'InfrastructureDefinitionSpec',
    'InfrastructureDefinitionSpecCrdSpecTemplate',
    'InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns',
    'InfrastructureDefinitionSpecCrdSpecTemplateNames',
    'InfrastructureDefinitionSpecCrdSpecTemplateValidation',
    'InfrastructureDefinitionStatus',
    'InfrastructureDefinitionStatusConditions',
    'InfrastructurePublicationSpec',
    'InfrastructurePublicationSpecInfrastructureDefinitionRef',
    'InfrastructurePublicationStatus',
    'InfrastructurePublicationStatusConditions',
]

@pulumi.output_type
class CompositionSpec(dict):
    """
    CompositionSpec specifies the desired state of the definition.
    """
    def __init__(__self__, *,
                 from_: 'outputs.CompositionSpecFrom',
                 to: Sequence['outputs.CompositionSpecTo'],
                 write_connection_secrets_to_namespace: str,
                 reclaim_policy: Optional[str] = None):
        """
        CompositionSpec specifies the desired state of the definition.
        :param 'CompositionSpecFromArgs' from_: From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        :param Sequence['CompositionSpecToArgs'] to: To is the list of target resources that make up the composition.
        :param str write_connection_secrets_to_namespace: WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
        :param str reclaim_policy: ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)
        pulumi.set(__self__, "write_connection_secrets_to_namespace", write_connection_secrets_to_namespace)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.CompositionSpecFrom':
        """
        From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Sequence['outputs.CompositionSpecTo']:
        """
        To is the list of target resources that make up the composition.
        """
        return pulumi.get(self, "to")

    @property
    @pulumi.getter(name="writeConnectionSecretsToNamespace")
    def write_connection_secrets_to_namespace(self) -> str:
        """
        WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
        """
        return pulumi.get(self, "write_connection_secrets_to_namespace")

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[str]:
        """
        ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
        """
        return pulumi.get(self, "reclaim_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecFrom(dict):
    """
    From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str):
        """
        From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
        :param str api_version: APIVersion of the type.
        :param str kind: Kind of the type.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion of the type.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the type.
        """
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecTo(dict):
    """
    ComposedTemplate is used to provide information about how the composed resource should be processed.
    """
    def __init__(__self__, *,
                 base: Mapping[str, Any],
                 connection_details: Optional[Sequence['outputs.CompositionSpecToConnectionDetails']] = None,
                 patches: Optional[Sequence['outputs.CompositionSpecToPatches']] = None):
        """
        ComposedTemplate is used to provide information about how the composed resource should be processed.
        :param Mapping[str, Any] base: Base is the target resource that the patches will be applied on.
        :param Sequence['CompositionSpecToConnectionDetailsArgs'] connection_details: ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
        :param Sequence['CompositionSpecToPatchesArgs'] patches: Patches will be applied as overlay to the base resource.
        """
        pulumi.set(__self__, "base", base)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)

    @property
    @pulumi.getter
    def base(self) -> Mapping[str, Any]:
        """
        Base is the target resource that the patches will be applied on.
        """
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[Sequence['outputs.CompositionSpecToConnectionDetails']]:
        """
        ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter
    def patches(self) -> Optional[Sequence['outputs.CompositionSpecToPatches']]:
        """
        Patches will be applied as overlay to the base resource.
        """
        return pulumi.get(self, "patches")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecToConnectionDetails(dict):
    """
    ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
    """
    def __init__(__self__, *,
                 from_connection_secret_key: str,
                 name: Optional[str] = None):
        """
        ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
        :param str from_connection_secret_key: FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
        :param str name: Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
        """
        pulumi.set(__self__, "from_connection_secret_key", from_connection_secret_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fromConnectionSecretKey")
    def from_connection_secret_key(self) -> str:
        """
        FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
        """
        return pulumi.get(self, "from_connection_secret_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecToPatches(dict):
    """
    Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
    """
    def __init__(__self__, *,
                 from_field_path: str,
                 to_field_path: Optional[str] = None,
                 transforms: Optional[Sequence['outputs.CompositionSpecToPatchesTransforms']] = None):
        """
        Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
        :param str from_field_path: FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
        :param str to_field_path: ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
        :param Sequence['CompositionSpecToPatchesTransformsArgs'] transforms: Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
        """
        pulumi.set(__self__, "from_field_path", from_field_path)
        if to_field_path is not None:
            pulumi.set(__self__, "to_field_path", to_field_path)
        if transforms is not None:
            pulumi.set(__self__, "transforms", transforms)

    @property
    @pulumi.getter(name="fromFieldPath")
    def from_field_path(self) -> str:
        """
        FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
        """
        return pulumi.get(self, "from_field_path")

    @property
    @pulumi.getter(name="toFieldPath")
    def to_field_path(self) -> Optional[str]:
        """
        ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
        """
        return pulumi.get(self, "to_field_path")

    @property
    @pulumi.getter
    def transforms(self) -> Optional[Sequence['outputs.CompositionSpecToPatchesTransforms']]:
        """
        Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
        """
        return pulumi.get(self, "transforms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecToPatchesTransforms(dict):
    """
    Transform is a unit of process whose input is transformed into an output with the supplied configuration.
    """
    def __init__(__self__, *,
                 type: str,
                 map: Optional[Mapping[str, str]] = None,
                 math: Optional['outputs.CompositionSpecToPatchesTransformsMath'] = None,
                 string: Optional['outputs.CompositionSpecToPatchesTransformsString'] = None):
        """
        Transform is a unit of process whose input is transformed into an output with the supplied configuration.
        :param str type: Type of the transform to be run.
        :param Mapping[str, str] map: Map uses the input as a key in the given map and returns the value.
        :param 'CompositionSpecToPatchesTransformsMathArgs' math: Math is used to transform the input via mathematical operations such as multiplication.
        :param 'CompositionSpecToPatchesTransformsStringArgs' string: String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        """
        pulumi.set(__self__, "type", type)
        if map is not None:
            pulumi.set(__self__, "map", map)
        if math is not None:
            pulumi.set(__self__, "math", math)
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the transform to be run.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def map(self) -> Optional[Mapping[str, str]]:
        """
        Map uses the input as a key in the given map and returns the value.
        """
        return pulumi.get(self, "map")

    @property
    @pulumi.getter
    def math(self) -> Optional['outputs.CompositionSpecToPatchesTransformsMath']:
        """
        Math is used to transform the input via mathematical operations such as multiplication.
        """
        return pulumi.get(self, "math")

    @property
    @pulumi.getter
    def string(self) -> Optional['outputs.CompositionSpecToPatchesTransformsString']:
        """
        String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        """
        return pulumi.get(self, "string")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecToPatchesTransformsMath(dict):
    """
    Math is used to transform the input via mathematical operations such as multiplication.
    """
    def __init__(__self__, *,
                 multiply: Optional[int] = None):
        """
        Math is used to transform the input via mathematical operations such as multiplication.
        :param int multiply: Multiply the value.
        """
        if multiply is not None:
            pulumi.set(__self__, "multiply", multiply)

    @property
    @pulumi.getter
    def multiply(self) -> Optional[int]:
        """
        Multiply the value.
        """
        return pulumi.get(self, "multiply")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionSpecToPatchesTransformsString(dict):
    """
    String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
    """
    def __init__(__self__, *,
                 fmt: str):
        """
        String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
        :param str fmt: Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
        """
        pulumi.set(__self__, "fmt", fmt)

    @property
    @pulumi.getter
    def fmt(self) -> str:
        """
        Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
        """
        return pulumi.get(self, "fmt")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionStatus(dict):
    """
    CompositionStatus shows the observed state of the composition.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.CompositionStatusConditions']] = None):
        """
        CompositionStatus shows the observed state of the composition.
        :param Sequence['CompositionStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.CompositionStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CompositionStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionSpec(dict):
    """
    InfrastructureDefinitionSpec specifies the desired state of the definition.
    """
    def __init__(__self__, *,
                 connection_secret_keys: Optional[Sequence[str]] = None,
                 crd_spec_template: Optional['outputs.InfrastructureDefinitionSpecCrdSpecTemplate'] = None):
        """
        InfrastructureDefinitionSpec specifies the desired state of the definition.
        :param Sequence[str] connection_secret_keys: ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
        :param 'InfrastructureDefinitionSpecCrdSpecTemplateArgs' crd_spec_template: CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        """
        if connection_secret_keys is not None:
            pulumi.set(__self__, "connection_secret_keys", connection_secret_keys)
        if crd_spec_template is not None:
            pulumi.set(__self__, "crd_spec_template", crd_spec_template)

    @property
    @pulumi.getter(name="connectionSecretKeys")
    def connection_secret_keys(self) -> Optional[Sequence[str]]:
        """
        ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
        """
        return pulumi.get(self, "connection_secret_keys")

    @property
    @pulumi.getter(name="crdSpecTemplate")
    def crd_spec_template(self) -> Optional['outputs.InfrastructureDefinitionSpecCrdSpecTemplate']:
        """
        CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        """
        return pulumi.get(self, "crd_spec_template")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionSpecCrdSpecTemplate(dict):
    """
    CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
    """
    def __init__(__self__, *,
                 group: str,
                 names: 'outputs.InfrastructureDefinitionSpecCrdSpecTemplateNames',
                 additional_printer_columns: Optional[Sequence['outputs.InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns']] = None,
                 validation: Optional['outputs.InfrastructureDefinitionSpecCrdSpecTemplateValidation'] = None,
                 version: Optional[str] = None):
        """
        CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
        :param str group: group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        :param 'InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs' names: names specify the resource and kind names for the custom resource.
        :param Sequence['InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs'] additional_printer_columns: additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        :param 'InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs' validation: validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        :param str version: version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "names", names)
        if additional_printer_columns is not None:
            pulumi.set(__self__, "additional_printer_columns", additional_printer_columns)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def names(self) -> 'outputs.InfrastructureDefinitionSpecCrdSpecTemplateNames':
        """
        names specify the resource and kind names for the custom resource.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="additionalPrinterColumns")
    def additional_printer_columns(self) -> Optional[Sequence['outputs.InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns']]:
        """
        additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        """
        return pulumi.get(self, "additional_printer_columns")

    @property
    @pulumi.getter
    def validation(self) -> Optional['outputs.InfrastructureDefinitionSpecCrdSpecTemplateValidation']:
        """
        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        """
        return pulumi.get(self, "validation")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns(dict):
    """
    CustomResourceColumnDefinition specifies a column for server side printing.
    """
    def __init__(__self__, *,
                 json_path: str,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 format: Optional[str] = None,
                 priority: Optional[int] = None):
        """
        CustomResourceColumnDefinition specifies a column for server side printing.
        :param str json_path: JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        :param str name: name is a human readable name for the column.
        :param str type: type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param str description: description is a human readable description of this column.
        :param str format: format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param int priority: priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        """
        pulumi.set(__self__, "json_path", json_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="JSONPath")
    def json_path(self) -> str:
        """
        JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        """
        return pulumi.get(self, "json_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is a human readable name for the column.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description is a human readable description of this column.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        """
        return pulumi.get(self, "priority")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionSpecCrdSpecTemplateNames(dict):
    """
    names specify the resource and kind names for the custom resource.
    """
    def __init__(__self__, *,
                 kind: str,
                 plural: str,
                 categories: Optional[Sequence[str]] = None,
                 list_kind: Optional[str] = None,
                 short_names: Optional[Sequence[str]] = None,
                 singular: Optional[str] = None):
        """
        names specify the resource and kind names for the custom resource.
        :param str kind: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
        :param str plural: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        :param Sequence[str] categories: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        :param str list_kind: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        :param Sequence[str] short_names: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
        :param str singular: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "plural", plural)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if list_kind is not None:
            pulumi.set(__self__, "list_kind", list_kind)
        if short_names is not None:
            pulumi.set(__self__, "short_names", short_names)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def plural(self) -> str:
        """
        plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        """
        return pulumi.get(self, "plural")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        """
        categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="listKind")
    def list_kind(self) -> Optional[str]:
        """
        listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        """
        return pulumi.get(self, "list_kind")

    @property
    @pulumi.getter(name="shortNames")
    def short_names(self) -> Optional[Sequence[str]]:
        """
        shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
        """
        return pulumi.get(self, "short_names")

    @property
    @pulumi.getter
    def singular(self) -> Optional[str]:
        """
        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        """
        return pulumi.get(self, "singular")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionSpecCrdSpecTemplateValidation(dict):
    """
    validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
    """
    def __init__(__self__, *,
                 open_apiv3_schema: Optional[Mapping[str, Any]] = None):
        """
        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        :param Mapping[str, Any] open_apiv3_schema: openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        """
        if open_apiv3_schema is not None:
            pulumi.set(__self__, "open_apiv3_schema", open_apiv3_schema)

    @property
    @pulumi.getter(name="openAPIV3Schema")
    def open_apiv3_schema(self) -> Optional[Mapping[str, Any]]:
        """
        openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        """
        return pulumi.get(self, "open_apiv3_schema")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionStatus(dict):
    """
    InfrastructureDefinitionStatus shows the observed state of the definition.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.InfrastructureDefinitionStatusConditions']] = None):
        """
        InfrastructureDefinitionStatus shows the observed state of the definition.
        :param Sequence['InfrastructureDefinitionStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.InfrastructureDefinitionStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructureDefinitionStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructurePublicationSpec(dict):
    """
    InfrastructurePublicationSpec specifies the desired state of the definition.
    """
    def __init__(__self__, *,
                 infrastructure_definition_ref: 'outputs.InfrastructurePublicationSpecInfrastructureDefinitionRef'):
        """
        InfrastructurePublicationSpec specifies the desired state of the definition.
        :param 'InfrastructurePublicationSpecInfrastructureDefinitionRefArgs' infrastructure_definition_ref: InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        """
        pulumi.set(__self__, "infrastructure_definition_ref", infrastructure_definition_ref)

    @property
    @pulumi.getter(name="infrastructureDefinitionRef")
    def infrastructure_definition_ref(self) -> 'outputs.InfrastructurePublicationSpecInfrastructureDefinitionRef':
        """
        InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        """
        return pulumi.get(self, "infrastructure_definition_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructurePublicationSpecInfrastructureDefinitionRef(dict):
    """
    InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
    """
    def __init__(__self__, *,
                 name: str):
        """
        InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
        :param str name: Name of the referenced object.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructurePublicationStatus(dict):
    """
    InfrastructurePublicationStatus shows the observed state of the definition.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.InfrastructurePublicationStatusConditions']] = None):
        """
        InfrastructurePublicationStatus shows the observed state of the definition.
        :param Sequence['InfrastructurePublicationStatusConditionsArgs'] conditions: Conditions of the resource.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.InfrastructurePublicationStatusConditions']]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfrastructurePublicationStatusConditions(dict):
    """
    A Condition that may apply to a resource.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        """
        A Condition that may apply to a resource.
        :param str last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param str reason: A Reason for this condition's last transition from one status to another.
        :param str status: Status of this condition; is it currently True, False, or Unknown?
        :param str type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param str message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



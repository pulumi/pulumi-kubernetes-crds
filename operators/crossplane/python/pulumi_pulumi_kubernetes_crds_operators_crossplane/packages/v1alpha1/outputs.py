# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ClusterPackageInstallSpec',
    'ClusterPackageInstallSpecImagePullSecrets',
    'ClusterPackageInstallSpecServiceAccount',
    'ClusterPackageInstallStatus',
    'ClusterPackageInstallStatusConditionedStatus',
    'ClusterPackageInstallStatusConditionedStatusConditions',
    'ClusterPackageInstallStatusInstallJob',
    'ClusterPackageInstallStatusPackageRecord',
    'PackageInstallSpec',
    'PackageInstallSpecImagePullSecrets',
    'PackageInstallSpecServiceAccount',
    'PackageInstallStatus',
    'PackageInstallStatusConditionedStatus',
    'PackageInstallStatusConditionedStatusConditions',
    'PackageInstallStatusInstallJob',
    'PackageInstallStatusPackageRecord',
    'PackageSpec',
    'PackageSpecController',
    'PackageSpecControllerDeployment',
    'PackageSpecControllerDeploymentSpec',
    'PackageSpecControllerDeploymentSpecSelector',
    'PackageSpecControllerDeploymentSpecSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecStrategy',
    'PackageSpecControllerDeploymentSpecStrategyRollingUpdate',
    'PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge',
    'PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable',
    'PackageSpecControllerDeploymentSpecTemplate',
    'PackageSpecControllerDeploymentSpecTemplateSpec',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinity',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainers',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnv',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecycle',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersPorts',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersResources',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices',
    'PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts',
    'PackageSpecControllerDeploymentSpecTemplateSpecDnsConfig',
    'PackageSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainers',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices',
    'PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts',
    'PackageSpecControllerDeploymentSpecTemplateSpecHostAliases',
    'PackageSpecControllerDeploymentSpecTemplateSpecImagePullSecrets',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainers',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnv',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersPorts',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersResources',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices',
    'PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts',
    'PackageSpecControllerDeploymentSpecTemplateSpecReadinessGates',
    'PackageSpecControllerDeploymentSpecTemplateSpecSecurityContext',
    'PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls',
    'PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions',
    'PackageSpecControllerDeploymentSpecTemplateSpecTolerations',
    'PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints',
    'PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector',
    'PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumes',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfs',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinder',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsi',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesFc',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlocker',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesHostPath',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsi',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesNfs',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjected',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbd',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecret',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageos',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef',
    'PackageSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume',
    'PackageSpecControllerServiceAccount',
    'PackageSpecCustomresourcedefinitions',
    'PackageSpecDependsOn',
    'PackageSpecDependsOnImagePullSecrets',
    'PackageSpecDependsOnServiceAccount',
    'PackageSpecIcons',
    'PackageSpecMaintainers',
    'PackageSpecOwners',
    'PackageSpecPermissions',
    'PackageSpecPermissionsRules',
    'PackageStatus',
    'PackageStatusConditionedStatus',
    'PackageStatusConditionedStatusConditions',
    'PackageStatusControllerRef',
    'StackDefinitionSpec',
    'StackDefinitionSpecBehavior',
    'StackDefinitionSpecBehaviorCrd',
    'StackDefinitionSpecBehaviorEngine',
    'StackDefinitionSpecBehaviorEngineKustomize',
    'StackDefinitionSpecBehaviorEngineKustomizeOverlays',
    'StackDefinitionSpecBehaviorEngineKustomizeOverlaysBindings',
    'StackDefinitionSpecBehaviorSource',
    'StackDefinitionSpecController',
    'StackDefinitionSpecControllerDeployment',
    'StackDefinitionSpecControllerDeploymentSpec',
    'StackDefinitionSpecControllerDeploymentSpecSelector',
    'StackDefinitionSpecControllerDeploymentSpecSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecStrategy',
    'StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdate',
    'StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge',
    'StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable',
    'StackDefinitionSpecControllerDeploymentSpecTemplate',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinity',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainers',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnv',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecycle',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersPorts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersResources',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfig',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainers',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecHostAliases',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecImagePullSecrets',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainers',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnv',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersPorts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersResources',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecReadinessGates',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContext',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecTolerations',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumes',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfs',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinder',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsi',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFc',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlocker',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesHostPath',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsi',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesNfs',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjected',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbd',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecret',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageos',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef',
    'StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume',
    'StackDefinitionSpecControllerServiceAccount',
    'StackDefinitionSpecCustomresourcedefinitions',
    'StackDefinitionSpecDependsOn',
    'StackDefinitionSpecDependsOnImagePullSecrets',
    'StackDefinitionSpecDependsOnServiceAccount',
    'StackDefinitionSpecIcons',
    'StackDefinitionSpecMaintainers',
    'StackDefinitionSpecOwners',
    'StackDefinitionSpecPermissions',
    'StackDefinitionSpecPermissionsRules',
]

@pulumi.output_type
class ClusterPackageInstallSpec(dict):
    def __init__(__self__, *,
                 crd: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ClusterPackageInstallSpecImagePullSecrets']] = None,
                 package: Optional[str] = None,
                 service_account: Optional['outputs.ClusterPackageInstallSpecServiceAccount'] = None,
                 source: Optional[str] = None):
        if crd is not None:
            pulumi.set(__self__, "crd", crd)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def crd(self) -> Optional[str]:
        return pulumi.get(self, "crd")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ClusterPackageInstallSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def package(self) -> Optional[str]:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.ClusterPackageInstallSpecServiceAccount']:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallSpecServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallStatus(dict):
    def __init__(__self__, *,
                 conditioned_status: Optional['outputs.ClusterPackageInstallStatusConditionedStatus'] = None,
                 install_job: Optional['outputs.ClusterPackageInstallStatusInstallJob'] = None,
                 package_record: Optional['outputs.ClusterPackageInstallStatusPackageRecord'] = None):
        if conditioned_status is not None:
            pulumi.set(__self__, "conditioned_status", conditioned_status)
        if install_job is not None:
            pulumi.set(__self__, "install_job", install_job)
        if package_record is not None:
            pulumi.set(__self__, "package_record", package_record)

    @property
    @pulumi.getter(name="conditionedStatus")
    def conditioned_status(self) -> Optional['outputs.ClusterPackageInstallStatusConditionedStatus']:
        return pulumi.get(self, "conditioned_status")

    @property
    @pulumi.getter(name="installJob")
    def install_job(self) -> Optional['outputs.ClusterPackageInstallStatusInstallJob']:
        return pulumi.get(self, "install_job")

    @property
    @pulumi.getter(name="packageRecord")
    def package_record(self) -> Optional['outputs.ClusterPackageInstallStatusPackageRecord']:
        return pulumi.get(self, "package_record")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallStatusConditionedStatus(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ClusterPackageInstallStatusConditionedStatusConditions']] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterPackageInstallStatusConditionedStatusConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallStatusConditionedStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallStatusInstallJob(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPackageInstallStatusPackageRecord(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallSpec(dict):
    def __init__(__self__, *,
                 crd: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.PackageInstallSpecImagePullSecrets']] = None,
                 package: Optional[str] = None,
                 service_account: Optional['outputs.PackageInstallSpecServiceAccount'] = None,
                 source: Optional[str] = None):
        if crd is not None:
            pulumi.set(__self__, "crd", crd)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def crd(self) -> Optional[str]:
        return pulumi.get(self, "crd")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.PackageInstallSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def package(self) -> Optional[str]:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.PackageInstallSpecServiceAccount']:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallSpecServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallStatus(dict):
    def __init__(__self__, *,
                 conditioned_status: Optional['outputs.PackageInstallStatusConditionedStatus'] = None,
                 install_job: Optional['outputs.PackageInstallStatusInstallJob'] = None,
                 package_record: Optional['outputs.PackageInstallStatusPackageRecord'] = None):
        if conditioned_status is not None:
            pulumi.set(__self__, "conditioned_status", conditioned_status)
        if install_job is not None:
            pulumi.set(__self__, "install_job", install_job)
        if package_record is not None:
            pulumi.set(__self__, "package_record", package_record)

    @property
    @pulumi.getter(name="conditionedStatus")
    def conditioned_status(self) -> Optional['outputs.PackageInstallStatusConditionedStatus']:
        return pulumi.get(self, "conditioned_status")

    @property
    @pulumi.getter(name="installJob")
    def install_job(self) -> Optional['outputs.PackageInstallStatusInstallJob']:
        return pulumi.get(self, "install_job")

    @property
    @pulumi.getter(name="packageRecord")
    def package_record(self) -> Optional['outputs.PackageInstallStatusPackageRecord']:
        return pulumi.get(self, "package_record")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallStatusConditionedStatus(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.PackageInstallStatusConditionedStatusConditions']] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.PackageInstallStatusConditionedStatusConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallStatusConditionedStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallStatusInstallJob(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageInstallStatusPackageRecord(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpec(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 company: Optional[str] = None,
                 controller: Optional['outputs.PackageSpecController'] = None,
                 customresourcedefinitions: Optional[Sequence['outputs.PackageSpecCustomresourcedefinitions']] = None,
                 depends_on: Optional[Sequence['outputs.PackageSpecDependsOn']] = None,
                 icons: Optional[Sequence['outputs.PackageSpecIcons']] = None,
                 keywords: Optional[Sequence[str]] = None,
                 license: Optional[str] = None,
                 maintainers: Optional[Sequence['outputs.PackageSpecMaintainers']] = None,
                 overview: Optional[str] = None,
                 overview_short: Optional[str] = None,
                 owners: Optional[Sequence['outputs.PackageSpecOwners']] = None,
                 package_type: Optional[str] = None,
                 permission_scope: Optional[str] = None,
                 permissions: Optional['outputs.PackageSpecPermissions'] = None,
                 readme: Optional[str] = None,
                 source: Optional[str] = None,
                 title: Optional[str] = None,
                 version: Optional[str] = None,
                 website: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if customresourcedefinitions is not None:
            pulumi.set(__self__, "customresourcedefinitions", customresourcedefinitions)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if icons is not None:
            pulumi.set(__self__, "icons", icons)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if maintainers is not None:
            pulumi.set(__self__, "maintainers", maintainers)
        if overview is not None:
            pulumi.set(__self__, "overview", overview)
        if overview_short is not None:
            pulumi.set(__self__, "overview_short", overview_short)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if permission_scope is not None:
            pulumi.set(__self__, "permission_scope", permission_scope)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def company(self) -> Optional[str]:
        return pulumi.get(self, "company")

    @property
    @pulumi.getter
    def controller(self) -> Optional['outputs.PackageSpecController']:
        return pulumi.get(self, "controller")

    @property
    @pulumi.getter
    def customresourcedefinitions(self) -> Optional[Sequence['outputs.PackageSpecCustomresourcedefinitions']]:
        return pulumi.get(self, "customresourcedefinitions")

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Optional[Sequence['outputs.PackageSpecDependsOn']]:
        return pulumi.get(self, "depends_on")

    @property
    @pulumi.getter
    def icons(self) -> Optional[Sequence['outputs.PackageSpecIcons']]:
        return pulumi.get(self, "icons")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def maintainers(self) -> Optional[Sequence['outputs.PackageSpecMaintainers']]:
        return pulumi.get(self, "maintainers")

    @property
    @pulumi.getter
    def overview(self) -> Optional[str]:
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter(name="overviewShort")
    def overview_short(self) -> Optional[str]:
        return pulumi.get(self, "overview_short")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.PackageSpecOwners']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> Optional[str]:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter
    def permissions(self) -> Optional['outputs.PackageSpecPermissions']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def readme(self) -> Optional[str]:
        return pulumi.get(self, "readme")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def website(self) -> Optional[str]:
        return pulumi.get(self, "website")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecController(dict):
    def __init__(__self__, *,
                 deployment: Optional['outputs.PackageSpecControllerDeployment'] = None,
                 service_account: Optional['outputs.PackageSpecControllerServiceAccount'] = None):
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.PackageSpecControllerDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.PackageSpecControllerServiceAccount']:
        return pulumi.get(self, "service_account")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeployment(dict):
    def __init__(__self__, *,
                 name: str,
                 spec: 'outputs.PackageSpecControllerDeploymentSpec'):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.PackageSpecControllerDeploymentSpec':
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpec(dict):
    def __init__(__self__, *,
                 selector: 'outputs.PackageSpecControllerDeploymentSpecSelector',
                 template: 'outputs.PackageSpecControllerDeploymentSpecTemplate',
                 min_ready_seconds: Optional[int] = None,
                 paused: Optional[bool] = None,
                 progress_deadline_seconds: Optional[int] = None,
                 replicas: Optional[int] = None,
                 revision_history_limit: Optional[int] = None,
                 strategy: Optional['outputs.PackageSpecControllerDeploymentSpecStrategy'] = None):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "template", template)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if progress_deadline_seconds is not None:
            pulumi.set(__self__, "progress_deadline_seconds", progress_deadline_seconds)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def selector(self) -> 'outputs.PackageSpecControllerDeploymentSpecSelector':
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplate':
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[int]:
        return pulumi.get(self, "min_ready_seconds")

    @property
    @pulumi.getter
    def paused(self) -> Optional[bool]:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> Optional[int]:
        return pulumi.get(self, "progress_deadline_seconds")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpec(dict):
    def __init__(__self__, *,
                 containers: Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainers'],
                 active_deadline_seconds: Optional[int] = None,
                 affinity: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinity'] = None,
                 automount_service_account_token: Optional[bool] = None,
                 dns_config: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecDnsConfig'] = None,
                 dns_policy: Optional[str] = None,
                 enable_service_links: Optional[bool] = None,
                 ephemeral_containers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainers']] = None,
                 host_aliases: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecHostAliases']] = None,
                 host_ipc: Optional[bool] = None,
                 host_network: Optional[bool] = None,
                 host_pid: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecImagePullSecrets']] = None,
                 init_containers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainers']] = None,
                 node_name: Optional[str] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 overhead: Optional[Mapping[str, str]] = None,
                 preemption_policy: Optional[str] = None,
                 priority: Optional[int] = None,
                 priority_class_name: Optional[str] = None,
                 readiness_gates: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecReadinessGates']] = None,
                 restart_policy: Optional[str] = None,
                 runtime_class_name: Optional[str] = None,
                 scheduler_name: Optional[str] = None,
                 security_context: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContext'] = None,
                 service_account: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 share_process_namespace: Optional[bool] = None,
                 subdomain: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTolerations']] = None,
                 topology_spread_constraints: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints']] = None,
                 volumes: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumes']] = None):
        pulumi.set(__self__, "containers", containers)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if preemption_policy is not None:
            pulumi.set(__self__, "preemption_policy", preemption_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainers']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[int]:
        return pulumi.get(self, "active_deadline_seconds")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[bool]:
        return pulumi.get(self, "automount_service_account_token")

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecDnsConfig']:
        return pulumi.get(self, "dns_config")

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[str]:
        return pulumi.get(self, "dns_policy")

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[bool]:
        return pulumi.get(self, "enable_service_links")

    @property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainers']]:
        return pulumi.get(self, "ephemeral_containers")

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecHostAliases']]:
        return pulumi.get(self, "host_aliases")

    @property
    @pulumi.getter(name="hostIPC")
    def host_ipc(self) -> Optional[bool]:
        return pulumi.get(self, "host_ipc")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="hostPID")
    def host_pid(self) -> Optional[bool]:
        return pulumi.get(self, "host_pid")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainers']]:
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def overhead(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter(name="preemptionPolicy")
    def preemption_policy(self) -> Optional[str]:
        return pulumi.get(self, "preemption_policy")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecReadinessGates']]:
        return pulumi.get(self, "readiness_gates")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[str]:
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[str]:
        return pulumi.get(self, "runtime_class_name")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "share_process_namespace")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints']]:
        return pulumi.get(self, "topology_spread_constraints")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersPorts']] = None,
                 readiness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe'] = None,
                 resources: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersResources'] = None,
                 security_context: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecDnsConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions']] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts']] = None,
                 readiness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe'] = None,
                 resources: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources'] = None,
                 security_context: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 target_container_name: Optional[str] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if target_container_name is not None:
            pulumi.set(__self__, "target_container_name", target_container_name)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="targetContainerName")
    def target_container_name(self) -> Optional[str]:
        return pulumi.get(self, "target_container_name")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecHostAliases(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ip: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersPorts']] = None,
                 readiness_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe'] = None,
                 resources: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersResources'] = None,
                 security_context: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecReadinessGates(dict):
    def __init__(__self__, *,
                 condition_type: str):
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 fs_group_change_policy: Optional[str] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints(dict):
    def __init__(__self__, *,
                 max_skew: int,
                 topology_key: str,
                 when_unsatisfiable: str,
                 label_selector: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector'] = None):
        pulumi.set(__self__, "max_skew", max_skew)
        pulumi.set(__self__, "topology_key", topology_key)
        pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> int:
        return pulumi.get(self, "max_skew")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> str:
        return pulumi.get(self, "when_unsatisfiable")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector']:
        return pulumi.get(self, "label_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfs'] = None,
                 cinder: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinder'] = None,
                 config_map: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap'] = None,
                 csi: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsi'] = None,
                 downward_api: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir'] = None,
                 fc: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFc'] = None,
                 flex_volume: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesHostPath'] = None,
                 iscsi: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsi'] = None,
                 nfs: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjected'] = None,
                 quobyte: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte'] = None,
                 rbd: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbd'] = None,
                 scale_io: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO'] = None,
                 secret: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecret'] = None,
                 storageos: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[str] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[str]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecControllerServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecCustomresourcedefinitions(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 kind: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecDependsOn(dict):
    def __init__(__self__, *,
                 crd: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.PackageSpecDependsOnImagePullSecrets']] = None,
                 package: Optional[str] = None,
                 service_account: Optional['outputs.PackageSpecDependsOnServiceAccount'] = None,
                 source: Optional[str] = None):
        if crd is not None:
            pulumi.set(__self__, "crd", crd)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def crd(self) -> Optional[str]:
        return pulumi.get(self, "crd")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.PackageSpecDependsOnImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def package(self) -> Optional[str]:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.PackageSpecDependsOnServiceAccount']:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecDependsOnImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecDependsOnServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecIcons(dict):
    def __init__(__self__, *,
                 base64_data: str,
                 mediatype: str):
        pulumi.set(__self__, "base64_data", base64_data)
        pulumi.set(__self__, "mediatype", mediatype)

    @property
    @pulumi.getter(name="base64Data")
    def base64_data(self) -> str:
        return pulumi.get(self, "base64_data")

    @property
    @pulumi.getter
    def mediatype(self) -> str:
        return pulumi.get(self, "mediatype")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecMaintainers(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecOwners(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecPermissions(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.PackageSpecPermissionsRules']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.PackageSpecPermissionsRules']]:
        return pulumi.get(self, "rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageSpecPermissionsRules(dict):
    def __init__(__self__, *,
                 verbs: Sequence[str],
                 api_groups: Optional[Sequence[str]] = None,
                 non_resource_urls: Optional[Sequence[str]] = None,
                 resource_names: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "verbs", verbs)
        if api_groups is not None:
            pulumi.set(__self__, "api_groups", api_groups)
        if non_resource_urls is not None:
            pulumi.set(__self__, "non_resource_urls", non_resource_urls)
        if resource_names is not None:
            pulumi.set(__self__, "resource_names", resource_names)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def verbs(self) -> Sequence[str]:
        return pulumi.get(self, "verbs")

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_groups")

    @property
    @pulumi.getter(name="nonResourceURLs")
    def non_resource_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "non_resource_urls")

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_names")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageStatus(dict):
    def __init__(__self__, *,
                 conditioned_status: Optional['outputs.PackageStatusConditionedStatus'] = None,
                 controller_ref: Optional['outputs.PackageStatusControllerRef'] = None):
        if conditioned_status is not None:
            pulumi.set(__self__, "conditioned_status", conditioned_status)
        if controller_ref is not None:
            pulumi.set(__self__, "controller_ref", controller_ref)

    @property
    @pulumi.getter(name="conditionedStatus")
    def conditioned_status(self) -> Optional['outputs.PackageStatusConditionedStatus']:
        return pulumi.get(self, "conditioned_status")

    @property
    @pulumi.getter(name="controllerRef")
    def controller_ref(self) -> Optional['outputs.PackageStatusControllerRef']:
        return pulumi.get(self, "controller_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageStatusConditionedStatus(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.PackageStatusConditionedStatusConditions']] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.PackageStatusConditionedStatusConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageStatusConditionedStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: str,
                 reason: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None):
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PackageStatusControllerRef(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpec(dict):
    def __init__(__self__, *,
                 behavior: Optional['outputs.StackDefinitionSpecBehavior'] = None,
                 category: Optional[str] = None,
                 company: Optional[str] = None,
                 controller: Optional['outputs.StackDefinitionSpecController'] = None,
                 customresourcedefinitions: Optional[Sequence['outputs.StackDefinitionSpecCustomresourcedefinitions']] = None,
                 depends_on: Optional[Sequence['outputs.StackDefinitionSpecDependsOn']] = None,
                 icons: Optional[Sequence['outputs.StackDefinitionSpecIcons']] = None,
                 keywords: Optional[Sequence[str]] = None,
                 license: Optional[str] = None,
                 maintainers: Optional[Sequence['outputs.StackDefinitionSpecMaintainers']] = None,
                 overview: Optional[str] = None,
                 overview_short: Optional[str] = None,
                 owners: Optional[Sequence['outputs.StackDefinitionSpecOwners']] = None,
                 package_type: Optional[str] = None,
                 permission_scope: Optional[str] = None,
                 permissions: Optional['outputs.StackDefinitionSpecPermissions'] = None,
                 readme: Optional[str] = None,
                 source: Optional[str] = None,
                 title: Optional[str] = None,
                 version: Optional[str] = None,
                 website: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if customresourcedefinitions is not None:
            pulumi.set(__self__, "customresourcedefinitions", customresourcedefinitions)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if icons is not None:
            pulumi.set(__self__, "icons", icons)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if maintainers is not None:
            pulumi.set(__self__, "maintainers", maintainers)
        if overview is not None:
            pulumi.set(__self__, "overview", overview)
        if overview_short is not None:
            pulumi.set(__self__, "overview_short", overview_short)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if permission_scope is not None:
            pulumi.set(__self__, "permission_scope", permission_scope)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def behavior(self) -> Optional['outputs.StackDefinitionSpecBehavior']:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def company(self) -> Optional[str]:
        return pulumi.get(self, "company")

    @property
    @pulumi.getter
    def controller(self) -> Optional['outputs.StackDefinitionSpecController']:
        return pulumi.get(self, "controller")

    @property
    @pulumi.getter
    def customresourcedefinitions(self) -> Optional[Sequence['outputs.StackDefinitionSpecCustomresourcedefinitions']]:
        return pulumi.get(self, "customresourcedefinitions")

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Optional[Sequence['outputs.StackDefinitionSpecDependsOn']]:
        return pulumi.get(self, "depends_on")

    @property
    @pulumi.getter
    def icons(self) -> Optional[Sequence['outputs.StackDefinitionSpecIcons']]:
        return pulumi.get(self, "icons")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def maintainers(self) -> Optional[Sequence['outputs.StackDefinitionSpecMaintainers']]:
        return pulumi.get(self, "maintainers")

    @property
    @pulumi.getter
    def overview(self) -> Optional[str]:
        return pulumi.get(self, "overview")

    @property
    @pulumi.getter(name="overviewShort")
    def overview_short(self) -> Optional[str]:
        return pulumi.get(self, "overview_short")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.StackDefinitionSpecOwners']]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> Optional[str]:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter
    def permissions(self) -> Optional['outputs.StackDefinitionSpecPermissions']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def readme(self) -> Optional[str]:
        return pulumi.get(self, "readme")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def website(self) -> Optional[str]:
        return pulumi.get(self, "website")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehavior(dict):
    def __init__(__self__, *,
                 crd: Optional['outputs.StackDefinitionSpecBehaviorCrd'] = None,
                 engine: Optional['outputs.StackDefinitionSpecBehaviorEngine'] = None,
                 source: Optional['outputs.StackDefinitionSpecBehaviorSource'] = None):
        if crd is not None:
            pulumi.set(__self__, "crd", crd)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def crd(self) -> Optional['outputs.StackDefinitionSpecBehaviorCrd']:
        return pulumi.get(self, "crd")

    @property
    @pulumi.getter
    def engine(self) -> Optional['outputs.StackDefinitionSpecBehaviorEngine']:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.StackDefinitionSpecBehaviorSource']:
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorCrd(dict):
    def __init__(__self__, *,
                 api_version: str,
                 kind: str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorEngine(dict):
    def __init__(__self__, *,
                 type: str,
                 controller_image: Optional[str] = None,
                 kustomize: Optional['outputs.StackDefinitionSpecBehaviorEngineKustomize'] = None):
        pulumi.set(__self__, "type", type)
        if controller_image is not None:
            pulumi.set(__self__, "controller_image", controller_image)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="controllerImage")
    def controller_image(self) -> Optional[str]:
        return pulumi.get(self, "controller_image")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.StackDefinitionSpecBehaviorEngineKustomize']:
        return pulumi.get(self, "kustomize")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorEngineKustomize(dict):
    def __init__(__self__, *,
                 kustomization: Optional[Mapping[str, Any]] = None,
                 overlays: Optional[Sequence['outputs.StackDefinitionSpecBehaviorEngineKustomizeOverlays']] = None):
        if kustomization is not None:
            pulumi.set(__self__, "kustomization", kustomization)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)

    @property
    @pulumi.getter
    def kustomization(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "kustomization")

    @property
    @pulumi.getter
    def overlays(self) -> Optional[Sequence['outputs.StackDefinitionSpecBehaviorEngineKustomizeOverlays']]:
        return pulumi.get(self, "overlays")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorEngineKustomizeOverlays(dict):
    def __init__(__self__, *,
                 api_version: str,
                 bindings: Sequence['outputs.StackDefinitionSpecBehaviorEngineKustomizeOverlaysBindings'],
                 kind: str,
                 name: str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "bindings", bindings)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def bindings(self) -> Sequence['outputs.StackDefinitionSpecBehaviorEngineKustomizeOverlaysBindings']:
        return pulumi.get(self, "bindings")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorEngineKustomizeOverlaysBindings(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        return pulumi.get(self, "to")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecBehaviorSource(dict):
    def __init__(__self__, *,
                 path: str,
                 image: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecController(dict):
    def __init__(__self__, *,
                 deployment: Optional['outputs.StackDefinitionSpecControllerDeployment'] = None,
                 service_account: Optional['outputs.StackDefinitionSpecControllerServiceAccount'] = None):
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.StackDefinitionSpecControllerDeployment']:
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.StackDefinitionSpecControllerServiceAccount']:
        return pulumi.get(self, "service_account")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeployment(dict):
    def __init__(__self__, *,
                 name: str,
                 spec: 'outputs.StackDefinitionSpecControllerDeploymentSpec'):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpec':
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpec(dict):
    def __init__(__self__, *,
                 selector: 'outputs.StackDefinitionSpecControllerDeploymentSpecSelector',
                 template: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplate',
                 min_ready_seconds: Optional[int] = None,
                 paused: Optional[bool] = None,
                 progress_deadline_seconds: Optional[int] = None,
                 replicas: Optional[int] = None,
                 revision_history_limit: Optional[int] = None,
                 strategy: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategy'] = None):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "template", template)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if progress_deadline_seconds is not None:
            pulumi.set(__self__, "progress_deadline_seconds", progress_deadline_seconds)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def selector(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecSelector':
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def template(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplate':
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[int]:
        return pulumi.get(self, "min_ready_seconds")

    @property
    @pulumi.getter
    def paused(self) -> Optional[bool]:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="progressDeadlineSeconds")
    def progress_deadline_seconds(self) -> Optional[int]:
        return pulumi.get(self, "progress_deadline_seconds")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def strategy(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategy']:
        return pulumi.get(self, "strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecStrategy(dict):
    def __init__(__self__, *,
                 rolling_update: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdate']:
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdate(dict):
    def __init__(__self__, *,
                 max_surge: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge'] = None,
                 max_unavailable: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable'] = None):
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge']:
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxSurge(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecStrategyRollingUpdateMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpec(dict):
    def __init__(__self__, *,
                 containers: Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainers'],
                 active_deadline_seconds: Optional[int] = None,
                 affinity: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinity'] = None,
                 automount_service_account_token: Optional[bool] = None,
                 dns_config: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfig'] = None,
                 dns_policy: Optional[str] = None,
                 enable_service_links: Optional[bool] = None,
                 ephemeral_containers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainers']] = None,
                 host_aliases: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecHostAliases']] = None,
                 host_ipc: Optional[bool] = None,
                 host_network: Optional[bool] = None,
                 host_pid: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecImagePullSecrets']] = None,
                 init_containers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainers']] = None,
                 node_name: Optional[str] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 overhead: Optional[Mapping[str, str]] = None,
                 preemption_policy: Optional[str] = None,
                 priority: Optional[int] = None,
                 priority_class_name: Optional[str] = None,
                 readiness_gates: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecReadinessGates']] = None,
                 restart_policy: Optional[str] = None,
                 runtime_class_name: Optional[str] = None,
                 scheduler_name: Optional[str] = None,
                 security_context: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContext'] = None,
                 service_account: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 share_process_namespace: Optional[bool] = None,
                 subdomain: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTolerations']] = None,
                 topology_spread_constraints: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints']] = None,
                 volumes: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumes']] = None):
        pulumi.set(__self__, "containers", containers)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if preemption_policy is not None:
            pulumi.set(__self__, "preemption_policy", preemption_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainers']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[int]:
        return pulumi.get(self, "active_deadline_seconds")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinity']:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[bool]:
        return pulumi.get(self, "automount_service_account_token")

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfig']:
        return pulumi.get(self, "dns_config")

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[str]:
        return pulumi.get(self, "dns_policy")

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[bool]:
        return pulumi.get(self, "enable_service_links")

    @property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainers']]:
        return pulumi.get(self, "ephemeral_containers")

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecHostAliases']]:
        return pulumi.get(self, "host_aliases")

    @property
    @pulumi.getter(name="hostIPC")
    def host_ipc(self) -> Optional[bool]:
        return pulumi.get(self, "host_ipc")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="hostPID")
    def host_pid(self) -> Optional[bool]:
        return pulumi.get(self, "host_pid")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainers']]:
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def overhead(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter(name="preemptionPolicy")
    def preemption_policy(self) -> Optional[str]:
        return pulumi.get(self, "preemption_policy")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecReadinessGates']]:
        return pulumi.get(self, "readiness_gates")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[str]:
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[str]:
        return pulumi.get(self, "runtime_class_name")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "share_process_namespace")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTolerations']]:
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints']]:
        return pulumi.get(self, "topology_spread_constraints")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumes']]:
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinity(dict):
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity'] = None):
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity']:
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity']:
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity']:
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 preference: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinity(dict):
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersPorts']] = None,
                 readiness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe'] = None,
                 resources: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersResources'] = None,
                 security_context: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions']] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecDnsConfigOptions(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts']] = None,
                 readiness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe'] = None,
                 resources: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources'] = None,
                 security_context: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 target_container_name: Optional[str] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if target_container_name is not None:
            pulumi.set(__self__, "target_container_name", target_container_name)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="targetContainerName")
    def target_container_name(self) -> Optional[str]:
        return pulumi.get(self, "target_container_name")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecEphemeralContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecHostAliases(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ip: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainers(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersPorts']] = None,
                 readiness_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe'] = None,
                 resources: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersResources'] = None,
                 security_context: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom']]:
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersPorts']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe']:
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices']]:
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom'] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom']:
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFrom(dict):
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef'] = None):
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef']:
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromConfigMapRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvFromSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFrom(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef'] = None):
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef']:
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef']:
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef(dict):
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecycle(dict):
    def __init__(__self__, *,
                 post_start: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStart(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStop(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersPorts(dict):
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersResources(dict):
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContext(dict):
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions'] = None,
                 windows_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions'] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbe(dict):
    def __init__(__self__, *,
                 exec_: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec']:
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeExec(dict):
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGet(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort':
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeDevices(dict):
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecInitContainersVolumeMounts(dict):
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecReadinessGates(dict):
    def __init__(__self__, *,
                 condition_type: str):
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContext(dict):
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 fs_group_change_policy: Optional[str] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions'] = None):
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions']:
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls']]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions']:
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSeLinuxOptions(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextSysctls(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecSecurityContextWindowsOptions(dict):
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecTolerations(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraints(dict):
    def __init__(__self__, *,
                 max_skew: int,
                 topology_key: str,
                 when_unsatisfiable: str,
                 label_selector: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector'] = None):
        pulumi.set(__self__, "max_skew", max_skew)
        pulumi.set(__self__, "topology_key", topology_key)
        pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> int:
        return pulumi.get(self, "max_skew")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> str:
        return pulumi.get(self, "when_unsatisfiable")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector']:
        return pulumi.get(self, "label_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumes(dict):
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfs'] = None,
                 cinder: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinder'] = None,
                 config_map: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap'] = None,
                 csi: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsi'] = None,
                 downward_api: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir'] = None,
                 fc: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFc'] = None,
                 flex_volume: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesHostPath'] = None,
                 iscsi: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsi'] = None,
                 nfs: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjected'] = None,
                 quobyte: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte'] = None,
                 rbd: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbd'] = None,
                 scale_io: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO'] = None,
                 secret: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecret'] = None,
                 storageos: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume'] = None):
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore']:
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk']:
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile']:
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfs']:
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinder']:
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsi']:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir']:
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFc']:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume']:
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlocker']:
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk']:
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo']:
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs']:
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesHostPath']:
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsi']:
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim']:
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk']:
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume']:
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjected']:
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte']:
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbd']:
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO']:
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageos']:
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume']:
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAwsElasticBlockStore(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureDisk(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesAzureFile(dict):
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfs(dict):
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCephfsSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinder(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef'] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCinderSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMap(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsi(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef']:
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesCsiNodePublishSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPI(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems']] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesEmptyDir(dict):
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[str] = None):
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[str]:
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFc(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolume(dict):
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef'] = None):
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlexVolumeSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesFlocker(dict):
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGcePersistentDisk(dict):
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGitRepo(dict):
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesGlusterfs(dict):
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesHostPath(dict):
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsi(dict):
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef'] = None):
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef']:
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesIscsiSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesNfs(dict):
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPersistentVolumeClaim(dict):
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPhotonPersistentDisk(dict):
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesPortworxVolume(dict):
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjected(dict):
    def __init__(__self__, *,
                 sources: Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources']:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSources(dict):
    def __init__(__self__, *,
                 config_map: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken'] = None):
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap']:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI']:
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken']:
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMap(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesConfigMapItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPI(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems']]:
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems(dict):
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecret(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken(dict):
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesQuobyte(dict):
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbd(dict):
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesRbdSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIO(dict):
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef':
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesScaleIOSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecret(dict):
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesSecretItems(dict):
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageos(dict):
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef']:
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesStorageosSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerDeploymentSpecTemplateSpecVolumesVsphereVolume(dict):
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecControllerServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecCustomresourcedefinitions(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 kind: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecDependsOn(dict):
    def __init__(__self__, *,
                 crd: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.StackDefinitionSpecDependsOnImagePullSecrets']] = None,
                 package: Optional[str] = None,
                 service_account: Optional['outputs.StackDefinitionSpecDependsOnServiceAccount'] = None,
                 source: Optional[str] = None):
        if crd is not None:
            pulumi.set(__self__, "crd", crd)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def crd(self) -> Optional[str]:
        return pulumi.get(self, "crd")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.StackDefinitionSpecDependsOnImagePullSecrets']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter
    def package(self) -> Optional[str]:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional['outputs.StackDefinitionSpecDependsOnServiceAccount']:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecDependsOnImagePullSecrets(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecDependsOnServiceAccount(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecIcons(dict):
    def __init__(__self__, *,
                 base64_data: str,
                 mediatype: str):
        pulumi.set(__self__, "base64_data", base64_data)
        pulumi.set(__self__, "mediatype", mediatype)

    @property
    @pulumi.getter(name="base64Data")
    def base64_data(self) -> str:
        return pulumi.get(self, "base64_data")

    @property
    @pulumi.getter
    def mediatype(self) -> str:
        return pulumi.get(self, "mediatype")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecMaintainers(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecOwners(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecPermissions(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.StackDefinitionSpecPermissionsRules']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.StackDefinitionSpecPermissionsRules']]:
        return pulumi.get(self, "rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StackDefinitionSpecPermissionsRules(dict):
    def __init__(__self__, *,
                 verbs: Sequence[str],
                 api_groups: Optional[Sequence[str]] = None,
                 non_resource_urls: Optional[Sequence[str]] = None,
                 resource_names: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "verbs", verbs)
        if api_groups is not None:
            pulumi.set(__self__, "api_groups", api_groups)
        if non_resource_urls is not None:
            pulumi.set(__self__, "non_resource_urls", non_resource_urls)
        if resource_names is not None:
            pulumi.set(__self__, "resource_names", resource_names)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def verbs(self) -> Sequence[str]:
        return pulumi.get(self, "verbs")

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_groups")

    @property
    @pulumi.getter(name="nonResourceURLs")
    def non_resource_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "non_resource_urls")

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_names")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



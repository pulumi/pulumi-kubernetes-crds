// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Workload.V1Alpha1
{

    [OutputType]
    public sealed class KubernetesApplicationResourceStatus
    {
        /// <summary>
        /// A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Workload.V1Alpha1.KubernetesApplicationResourceStatusConditionedStatus ConditionedStatus;
        /// <summary>
        /// Remote status of the resource templated by this application resource.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Workload.V1Alpha1.KubernetesApplicationResourceStatusRemote Remote;
        /// <summary>
        /// State of the application.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private KubernetesApplicationResourceStatus(
            Pulumi.Kubernetes.Types.Outputs.Workload.V1Alpha1.KubernetesApplicationResourceStatusConditionedStatus conditionedStatus,

            Pulumi.Kubernetes.Types.Outputs.Workload.V1Alpha1.KubernetesApplicationResourceStatusRemote remote,

            string state)
        {
            ConditionedStatus = conditionedStatus;
            Remote = remote;
            State = state;
        }
    }
}

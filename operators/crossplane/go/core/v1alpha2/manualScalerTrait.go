// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A ManualScalerTrait determines how many replicas a workload should have.
type ManualScalerTrait struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
	Spec ManualScalerTraitSpecPtrOutput `pulumi:"spec"`
	// A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
	Status ManualScalerTraitStatusPtrOutput `pulumi:"status"`
}

// NewManualScalerTrait registers a new resource with the given unique name, arguments, and options.
func NewManualScalerTrait(ctx *pulumi.Context,
	name string, args *ManualScalerTraitArgs, opts ...pulumi.ResourceOption) (*ManualScalerTrait, error) {
	if args == nil {
		args = &ManualScalerTraitArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("core.oam.dev/v1alpha2")
	args.Kind = pulumi.StringPtr("ManualScalerTrait")
	var resource ManualScalerTrait
	err := ctx.RegisterResource("kubernetes:core.oam.dev/v1alpha2:ManualScalerTrait", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManualScalerTrait gets an existing ManualScalerTrait resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManualScalerTrait(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManualScalerTraitState, opts ...pulumi.ResourceOption) (*ManualScalerTrait, error) {
	var resource ManualScalerTrait
	err := ctx.ReadResource("kubernetes:core.oam.dev/v1alpha2:ManualScalerTrait", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManualScalerTrait resources.
type manualScalerTraitState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
	Spec *ManualScalerTraitSpec `pulumi:"spec"`
	// A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
	Status *ManualScalerTraitStatus `pulumi:"status"`
}

type ManualScalerTraitState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
	Spec ManualScalerTraitSpecPtrInput
	// A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
	Status ManualScalerTraitStatusPtrInput
}

func (ManualScalerTraitState) ElementType() reflect.Type {
	return reflect.TypeOf((*manualScalerTraitState)(nil)).Elem()
}

type manualScalerTraitArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
	Spec *ManualScalerTraitSpec `pulumi:"spec"`
	// A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
	Status *ManualScalerTraitStatus `pulumi:"status"`
}

// The set of arguments for constructing a ManualScalerTrait resource.
type ManualScalerTraitArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A ManualScalerTraitSpec defines the desired state of a ManualScalerTrait.
	Spec ManualScalerTraitSpecPtrInput
	// A ManualScalerTraitStatus represents the observed state of a ManualScalerTrait.
	Status ManualScalerTraitStatusPtrInput
}

func (ManualScalerTraitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*manualScalerTraitArgs)(nil)).Elem()
}

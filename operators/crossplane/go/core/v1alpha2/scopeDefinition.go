// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
type ScopeDefinition struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
	Spec ScopeDefinitionSpecPtrOutput `pulumi:"spec"`
}

// NewScopeDefinition registers a new resource with the given unique name, arguments, and options.
func NewScopeDefinition(ctx *pulumi.Context,
	name string, args *ScopeDefinitionArgs, opts ...pulumi.ResourceOption) (*ScopeDefinition, error) {
	if args == nil {
		args = &ScopeDefinitionArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("core.oam.dev/v1alpha2")
	args.Kind = pulumi.StringPtr("ScopeDefinition")
	var resource ScopeDefinition
	err := ctx.RegisterResource("kubernetes:core.oam.dev/v1alpha2:ScopeDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeDefinition gets an existing ScopeDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeDefinitionState, opts ...pulumi.ResourceOption) (*ScopeDefinition, error) {
	var resource ScopeDefinition
	err := ctx.ReadResource("kubernetes:core.oam.dev/v1alpha2:ScopeDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeDefinition resources.
type scopeDefinitionState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
	Spec *ScopeDefinitionSpec `pulumi:"spec"`
}

type ScopeDefinitionState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
	Spec ScopeDefinitionSpecPtrInput
}

func (ScopeDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeDefinitionState)(nil)).Elem()
}

type scopeDefinitionArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
	Spec *ScopeDefinitionSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ScopeDefinition resource.
type ScopeDefinitionArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
	Spec ScopeDefinitionSpecPtrInput
}

func (ScopeDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeDefinitionArgs)(nil)).Elem()
}

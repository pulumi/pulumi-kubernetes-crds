// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A KubernetesTarget is a scheduling target for a Kubernetes Application.
type KubernetesTarget struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
	Spec KubernetesTargetSpecOutput `pulumi:"spec"`
	// A TargetStatus defines the observed status a target.
	Status KubernetesTargetStatusPtrOutput `pulumi:"status"`
}

// NewKubernetesTarget registers a new resource with the given unique name, arguments, and options.
func NewKubernetesTarget(ctx *pulumi.Context,
	name string, args *KubernetesTargetArgs, opts ...pulumi.ResourceOption) (*KubernetesTarget, error) {
	if args == nil {
		args = &KubernetesTargetArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("workload.crossplane.io/v1alpha1")
	args.Kind = pulumi.StringPtr("KubernetesTarget")
	var resource KubernetesTarget
	err := ctx.RegisterResource("kubernetes:workload.crossplane.io/v1alpha1:KubernetesTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesTarget gets an existing KubernetesTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesTargetState, opts ...pulumi.ResourceOption) (*KubernetesTarget, error) {
	var resource KubernetesTarget
	err := ctx.ReadResource("kubernetes:workload.crossplane.io/v1alpha1:KubernetesTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesTarget resources.
type kubernetesTargetState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
	Spec *KubernetesTargetSpec `pulumi:"spec"`
	// A TargetStatus defines the observed status a target.
	Status *KubernetesTargetStatus `pulumi:"status"`
}

type KubernetesTargetState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
	Spec KubernetesTargetSpecPtrInput
	// A TargetStatus defines the observed status a target.
	Status KubernetesTargetStatusPtrInput
}

func (KubernetesTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesTargetState)(nil)).Elem()
}

type kubernetesTargetArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
	Spec *KubernetesTargetSpec `pulumi:"spec"`
	// A TargetStatus defines the observed status a target.
	Status *KubernetesTargetStatus `pulumi:"status"`
}

// The set of arguments for constructing a KubernetesTarget resource.
type KubernetesTargetArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// A TargetSpec defines the common fields of objects used for exposing infrastructure to workloads that can be scheduled to.
	Spec KubernetesTargetSpecPtrInput
	// A TargetStatus defines the observed status a target.
	Status KubernetesTargetStatusPtrInput
}

func (KubernetesTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesTargetArgs)(nil)).Elem()
}

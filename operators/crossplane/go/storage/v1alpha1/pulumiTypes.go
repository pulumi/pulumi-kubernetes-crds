// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Bucket is a portable resource claim that may be satisfied by binding to a managed resource such as an AWS S3 bucket or Azure storage container.
type BucketType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BucketSpec specifies the desired state of a Bucket.
	Spec *BucketSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *BucketStatus `pulumi:"status"`
}

// BucketTypeInput is an input type that accepts BucketTypeArgs and BucketTypeOutput values.
// You can construct a concrete instance of `BucketTypeInput` via:
//
//          BucketTypeArgs{...}
type BucketTypeInput interface {
	pulumi.Input

	ToBucketTypeOutput() BucketTypeOutput
	ToBucketTypeOutputWithContext(context.Context) BucketTypeOutput
}

// A Bucket is a portable resource claim that may be satisfied by binding to a managed resource such as an AWS S3 bucket or Azure storage container.
type BucketTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// BucketSpec specifies the desired state of a Bucket.
	Spec BucketSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status BucketStatusPtrInput `pulumi:"status"`
}

func (BucketTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (i BucketTypeArgs) ToBucketTypeOutput() BucketTypeOutput {
	return i.ToBucketTypeOutputWithContext(context.Background())
}

func (i BucketTypeArgs) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTypeOutput)
}

// A Bucket is a portable resource claim that may be satisfied by binding to a managed resource such as an AWS S3 bucket or Azure storage container.
type BucketTypeOutput struct{ *pulumi.OutputState }

func (BucketTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (o BucketTypeOutput) ToBucketTypeOutput() BucketTypeOutput {
	return o
}

func (o BucketTypeOutput) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return o
}

func (o BucketTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BucketTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BucketTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BucketType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// BucketSpec specifies the desired state of a Bucket.
func (o BucketTypeOutput) Spec() BucketSpecPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketSpec { return v.Spec }).(BucketSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o BucketTypeOutput) Status() BucketStatusPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketStatus { return v.Status }).(BucketStatusPtrOutput)
}

type BucketMetadata struct {
}

// BucketMetadataInput is an input type that accepts BucketMetadataArgs and BucketMetadataOutput values.
// You can construct a concrete instance of `BucketMetadataInput` via:
//
//          BucketMetadataArgs{...}
type BucketMetadataInput interface {
	pulumi.Input

	ToBucketMetadataOutput() BucketMetadataOutput
	ToBucketMetadataOutputWithContext(context.Context) BucketMetadataOutput
}

type BucketMetadataArgs struct {
}

func (BucketMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketMetadata)(nil)).Elem()
}

func (i BucketMetadataArgs) ToBucketMetadataOutput() BucketMetadataOutput {
	return i.ToBucketMetadataOutputWithContext(context.Background())
}

func (i BucketMetadataArgs) ToBucketMetadataOutputWithContext(ctx context.Context) BucketMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMetadataOutput)
}

type BucketMetadataOutput struct{ *pulumi.OutputState }

func (BucketMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketMetadata)(nil)).Elem()
}

func (o BucketMetadataOutput) ToBucketMetadataOutput() BucketMetadataOutput {
	return o
}

func (o BucketMetadataOutput) ToBucketMetadataOutputWithContext(ctx context.Context) BucketMetadataOutput {
	return o
}

// BucketSpec specifies the desired state of a Bucket.
type BucketSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *BucketSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *BucketSpecClassSelector `pulumi:"classSelector"`
	// LocalPermission specifies permissions granted to a provider specific service account for this bucket, e.g. Read, ReadWrite, or Write.
	LocalPermission *string `pulumi:"localPermission"`
	// PredefinedACL specifies a predefined ACL (e.g. Private, ReadWrite, etc) to be applied to the bucket.
	PredefinedACL *string `pulumi:"predefinedACL"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *BucketSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *BucketSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// BucketSpecInput is an input type that accepts BucketSpecArgs and BucketSpecOutput values.
// You can construct a concrete instance of `BucketSpecInput` via:
//
//          BucketSpecArgs{...}
type BucketSpecInput interface {
	pulumi.Input

	ToBucketSpecOutput() BucketSpecOutput
	ToBucketSpecOutputWithContext(context.Context) BucketSpecOutput
}

// BucketSpec specifies the desired state of a Bucket.
type BucketSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef BucketSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector BucketSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// LocalPermission specifies permissions granted to a provider specific service account for this bucket, e.g. Read, ReadWrite, or Write.
	LocalPermission pulumi.StringPtrInput `pulumi:"localPermission"`
	// PredefinedACL specifies a predefined ACL (e.g. Private, ReadWrite, etc) to be applied to the bucket.
	PredefinedACL pulumi.StringPtrInput `pulumi:"predefinedACL"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef BucketSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef BucketSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (BucketSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (i BucketSpecArgs) ToBucketSpecOutput() BucketSpecOutput {
	return i.ToBucketSpecOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput)
}

func (i BucketSpecArgs) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput).ToBucketSpecPtrOutputWithContext(ctx)
}

// BucketSpecPtrInput is an input type that accepts BucketSpecArgs, BucketSpecPtr and BucketSpecPtrOutput values.
// You can construct a concrete instance of `BucketSpecPtrInput` via:
//
//          BucketSpecArgs{...}
//
//  or:
//
//          nil
type BucketSpecPtrInput interface {
	pulumi.Input

	ToBucketSpecPtrOutput() BucketSpecPtrOutput
	ToBucketSpecPtrOutputWithContext(context.Context) BucketSpecPtrOutput
}

type bucketSpecPtrType BucketSpecArgs

func BucketSpecPtr(v *BucketSpecArgs) BucketSpecPtrInput {
	return (*bucketSpecPtrType)(v)
}

func (*bucketSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPtrOutput)
}

// BucketSpec specifies the desired state of a Bucket.
type BucketSpecOutput struct{ *pulumi.OutputState }

func (BucketSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (o BucketSpecOutput) ToBucketSpecOutput() BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (o BucketSpecOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpec {
		return &v
	}).(BucketSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o BucketSpecOutput) ClassRef() BucketSpecClassRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecClassRef { return v.ClassRef }).(BucketSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o BucketSpecOutput) ClassSelector() BucketSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecClassSelector { return v.ClassSelector }).(BucketSpecClassSelectorPtrOutput)
}

// LocalPermission specifies permissions granted to a provider specific service account for this bucket, e.g. Read, ReadWrite, or Write.
func (o BucketSpecOutput) LocalPermission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.LocalPermission }).(pulumi.StringPtrOutput)
}

// PredefinedACL specifies a predefined ACL (e.g. Private, ReadWrite, etc) to be applied to the bucket.
func (o BucketSpecOutput) PredefinedACL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.PredefinedACL }).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o BucketSpecOutput) ResourceRef() BucketSpecResourceRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecResourceRef { return v.ResourceRef }).(BucketSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o BucketSpecOutput) WriteConnectionSecretToRef() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecWriteConnectionSecretToRef { return v.WriteConnectionSecretToRef }).(BucketSpecWriteConnectionSecretToRefPtrOutput)
}

type BucketSpecPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) Elem() BucketSpecOutput {
	return o.ApplyT(func(v *BucketSpec) BucketSpec { return *v }).(BucketSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o BucketSpecPtrOutput) ClassRef() BucketSpecClassRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(BucketSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o BucketSpecPtrOutput) ClassSelector() BucketSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(BucketSpecClassSelectorPtrOutput)
}

// LocalPermission specifies permissions granted to a provider specific service account for this bucket, e.g. Read, ReadWrite, or Write.
func (o BucketSpecPtrOutput) LocalPermission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.LocalPermission
	}).(pulumi.StringPtrOutput)
}

// PredefinedACL specifies a predefined ACL (e.g. Private, ReadWrite, etc) to be applied to the bucket.
func (o BucketSpecPtrOutput) PredefinedACL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.PredefinedACL
	}).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o BucketSpecPtrOutput) ResourceRef() BucketSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(BucketSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o BucketSpecPtrOutput) WriteConnectionSecretToRef() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(BucketSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type BucketSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// BucketSpecClassRefInput is an input type that accepts BucketSpecClassRefArgs and BucketSpecClassRefOutput values.
// You can construct a concrete instance of `BucketSpecClassRefInput` via:
//
//          BucketSpecClassRefArgs{...}
type BucketSpecClassRefInput interface {
	pulumi.Input

	ToBucketSpecClassRefOutput() BucketSpecClassRefOutput
	ToBucketSpecClassRefOutputWithContext(context.Context) BucketSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type BucketSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BucketSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassRef)(nil)).Elem()
}

func (i BucketSpecClassRefArgs) ToBucketSpecClassRefOutput() BucketSpecClassRefOutput {
	return i.ToBucketSpecClassRefOutputWithContext(context.Background())
}

func (i BucketSpecClassRefArgs) ToBucketSpecClassRefOutputWithContext(ctx context.Context) BucketSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassRefOutput)
}

func (i BucketSpecClassRefArgs) ToBucketSpecClassRefPtrOutput() BucketSpecClassRefPtrOutput {
	return i.ToBucketSpecClassRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecClassRefArgs) ToBucketSpecClassRefPtrOutputWithContext(ctx context.Context) BucketSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassRefOutput).ToBucketSpecClassRefPtrOutputWithContext(ctx)
}

// BucketSpecClassRefPtrInput is an input type that accepts BucketSpecClassRefArgs, BucketSpecClassRefPtr and BucketSpecClassRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecClassRefPtrInput` via:
//
//          BucketSpecClassRefArgs{...}
//
//  or:
//
//          nil
type BucketSpecClassRefPtrInput interface {
	pulumi.Input

	ToBucketSpecClassRefPtrOutput() BucketSpecClassRefPtrOutput
	ToBucketSpecClassRefPtrOutputWithContext(context.Context) BucketSpecClassRefPtrOutput
}

type bucketSpecClassRefPtrType BucketSpecClassRefArgs

func BucketSpecClassRefPtr(v *BucketSpecClassRefArgs) BucketSpecClassRefPtrInput {
	return (*bucketSpecClassRefPtrType)(v)
}

func (*bucketSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecClassRef)(nil)).Elem()
}

func (i *bucketSpecClassRefPtrType) ToBucketSpecClassRefPtrOutput() BucketSpecClassRefPtrOutput {
	return i.ToBucketSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecClassRefPtrType) ToBucketSpecClassRefPtrOutputWithContext(ctx context.Context) BucketSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type BucketSpecClassRefOutput struct{ *pulumi.OutputState }

func (BucketSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassRef)(nil)).Elem()
}

func (o BucketSpecClassRefOutput) ToBucketSpecClassRefOutput() BucketSpecClassRefOutput {
	return o
}

func (o BucketSpecClassRefOutput) ToBucketSpecClassRefOutputWithContext(ctx context.Context) BucketSpecClassRefOutput {
	return o
}

func (o BucketSpecClassRefOutput) ToBucketSpecClassRefPtrOutput() BucketSpecClassRefPtrOutput {
	return o.ToBucketSpecClassRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecClassRefOutput) ToBucketSpecClassRefPtrOutputWithContext(ctx context.Context) BucketSpecClassRefPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *BucketSpecClassRef {
		return &v
	}).(BucketSpecClassRefPtrOutput)
}

// API version of the referent.
func (o BucketSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o BucketSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o BucketSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o BucketSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o BucketSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o BucketSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type BucketSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecClassRef)(nil)).Elem()
}

func (o BucketSpecClassRefPtrOutput) ToBucketSpecClassRefPtrOutput() BucketSpecClassRefPtrOutput {
	return o
}

func (o BucketSpecClassRefPtrOutput) ToBucketSpecClassRefPtrOutputWithContext(ctx context.Context) BucketSpecClassRefPtrOutput {
	return o
}

func (o BucketSpecClassRefPtrOutput) Elem() BucketSpecClassRefOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) BucketSpecClassRef { return *v }).(BucketSpecClassRefOutput)
}

// API version of the referent.
func (o BucketSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o BucketSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o BucketSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o BucketSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o BucketSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o BucketSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type BucketSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []BucketSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// BucketSpecClassSelectorInput is an input type that accepts BucketSpecClassSelectorArgs and BucketSpecClassSelectorOutput values.
// You can construct a concrete instance of `BucketSpecClassSelectorInput` via:
//
//          BucketSpecClassSelectorArgs{...}
type BucketSpecClassSelectorInput interface {
	pulumi.Input

	ToBucketSpecClassSelectorOutput() BucketSpecClassSelectorOutput
	ToBucketSpecClassSelectorOutputWithContext(context.Context) BucketSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type BucketSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions BucketSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (BucketSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelector)(nil)).Elem()
}

func (i BucketSpecClassSelectorArgs) ToBucketSpecClassSelectorOutput() BucketSpecClassSelectorOutput {
	return i.ToBucketSpecClassSelectorOutputWithContext(context.Background())
}

func (i BucketSpecClassSelectorArgs) ToBucketSpecClassSelectorOutputWithContext(ctx context.Context) BucketSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorOutput)
}

func (i BucketSpecClassSelectorArgs) ToBucketSpecClassSelectorPtrOutput() BucketSpecClassSelectorPtrOutput {
	return i.ToBucketSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i BucketSpecClassSelectorArgs) ToBucketSpecClassSelectorPtrOutputWithContext(ctx context.Context) BucketSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorOutput).ToBucketSpecClassSelectorPtrOutputWithContext(ctx)
}

// BucketSpecClassSelectorPtrInput is an input type that accepts BucketSpecClassSelectorArgs, BucketSpecClassSelectorPtr and BucketSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `BucketSpecClassSelectorPtrInput` via:
//
//          BucketSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type BucketSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToBucketSpecClassSelectorPtrOutput() BucketSpecClassSelectorPtrOutput
	ToBucketSpecClassSelectorPtrOutputWithContext(context.Context) BucketSpecClassSelectorPtrOutput
}

type bucketSpecClassSelectorPtrType BucketSpecClassSelectorArgs

func BucketSpecClassSelectorPtr(v *BucketSpecClassSelectorArgs) BucketSpecClassSelectorPtrInput {
	return (*bucketSpecClassSelectorPtrType)(v)
}

func (*bucketSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecClassSelector)(nil)).Elem()
}

func (i *bucketSpecClassSelectorPtrType) ToBucketSpecClassSelectorPtrOutput() BucketSpecClassSelectorPtrOutput {
	return i.ToBucketSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *bucketSpecClassSelectorPtrType) ToBucketSpecClassSelectorPtrOutputWithContext(ctx context.Context) BucketSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type BucketSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (BucketSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelector)(nil)).Elem()
}

func (o BucketSpecClassSelectorOutput) ToBucketSpecClassSelectorOutput() BucketSpecClassSelectorOutput {
	return o
}

func (o BucketSpecClassSelectorOutput) ToBucketSpecClassSelectorOutputWithContext(ctx context.Context) BucketSpecClassSelectorOutput {
	return o
}

func (o BucketSpecClassSelectorOutput) ToBucketSpecClassSelectorPtrOutput() BucketSpecClassSelectorPtrOutput {
	return o.ToBucketSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o BucketSpecClassSelectorOutput) ToBucketSpecClassSelectorPtrOutputWithContext(ctx context.Context) BucketSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v BucketSpecClassSelector) *BucketSpecClassSelector {
		return &v
	}).(BucketSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BucketSpecClassSelectorOutput) MatchExpressions() BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v BucketSpecClassSelector) []BucketSpecClassSelectorMatchExpressions { return v.MatchExpressions }).(BucketSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BucketSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BucketSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type BucketSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecClassSelector)(nil)).Elem()
}

func (o BucketSpecClassSelectorPtrOutput) ToBucketSpecClassSelectorPtrOutput() BucketSpecClassSelectorPtrOutput {
	return o
}

func (o BucketSpecClassSelectorPtrOutput) ToBucketSpecClassSelectorPtrOutputWithContext(ctx context.Context) BucketSpecClassSelectorPtrOutput {
	return o
}

func (o BucketSpecClassSelectorPtrOutput) Elem() BucketSpecClassSelectorOutput {
	return o.ApplyT(func(v *BucketSpecClassSelector) BucketSpecClassSelector { return *v }).(BucketSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BucketSpecClassSelectorPtrOutput) MatchExpressions() BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *BucketSpecClassSelector) []BucketSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(BucketSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BucketSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BucketSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BucketSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// BucketSpecClassSelectorMatchExpressionsInput is an input type that accepts BucketSpecClassSelectorMatchExpressionsArgs and BucketSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `BucketSpecClassSelectorMatchExpressionsInput` via:
//
//          BucketSpecClassSelectorMatchExpressionsArgs{...}
type BucketSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToBucketSpecClassSelectorMatchExpressionsOutput() BucketSpecClassSelectorMatchExpressionsOutput
	ToBucketSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) BucketSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BucketSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BucketSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i BucketSpecClassSelectorMatchExpressionsArgs) ToBucketSpecClassSelectorMatchExpressionsOutput() BucketSpecClassSelectorMatchExpressionsOutput {
	return i.ToBucketSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i BucketSpecClassSelectorMatchExpressionsArgs) ToBucketSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorMatchExpressionsOutput)
}

// BucketSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts BucketSpecClassSelectorMatchExpressionsArray and BucketSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `BucketSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          BucketSpecClassSelectorMatchExpressionsArray{ BucketSpecClassSelectorMatchExpressionsArgs{...} }
type BucketSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToBucketSpecClassSelectorMatchExpressionsArrayOutput() BucketSpecClassSelectorMatchExpressionsArrayOutput
	ToBucketSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) BucketSpecClassSelectorMatchExpressionsArrayOutput
}

type BucketSpecClassSelectorMatchExpressionsArray []BucketSpecClassSelectorMatchExpressionsInput

func (BucketSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i BucketSpecClassSelectorMatchExpressionsArray) ToBucketSpecClassSelectorMatchExpressionsArrayOutput() BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToBucketSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i BucketSpecClassSelectorMatchExpressionsArray) ToBucketSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BucketSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (BucketSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o BucketSpecClassSelectorMatchExpressionsOutput) ToBucketSpecClassSelectorMatchExpressionsOutput() BucketSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o BucketSpecClassSelectorMatchExpressionsOutput) ToBucketSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o BucketSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BucketSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o BucketSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BucketSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o BucketSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BucketSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BucketSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (BucketSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o BucketSpecClassSelectorMatchExpressionsArrayOutput) ToBucketSpecClassSelectorMatchExpressionsArrayOutput() BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BucketSpecClassSelectorMatchExpressionsArrayOutput) ToBucketSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BucketSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) BucketSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketSpecClassSelectorMatchExpressions {
		return vs[0].([]BucketSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(BucketSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BucketSpecClassSelectorMatchLabels struct {
}

// BucketSpecClassSelectorMatchLabelsInput is an input type that accepts BucketSpecClassSelectorMatchLabelsArgs and BucketSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `BucketSpecClassSelectorMatchLabelsInput` via:
//
//          BucketSpecClassSelectorMatchLabelsArgs{...}
type BucketSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToBucketSpecClassSelectorMatchLabelsOutput() BucketSpecClassSelectorMatchLabelsOutput
	ToBucketSpecClassSelectorMatchLabelsOutputWithContext(context.Context) BucketSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BucketSpecClassSelectorMatchLabelsArgs struct {
}

func (BucketSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i BucketSpecClassSelectorMatchLabelsArgs) ToBucketSpecClassSelectorMatchLabelsOutput() BucketSpecClassSelectorMatchLabelsOutput {
	return i.ToBucketSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i BucketSpecClassSelectorMatchLabelsArgs) ToBucketSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BucketSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (BucketSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o BucketSpecClassSelectorMatchLabelsOutput) ToBucketSpecClassSelectorMatchLabelsOutput() BucketSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o BucketSpecClassSelectorMatchLabelsOutput) ToBucketSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) BucketSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type BucketSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// BucketSpecResourceRefInput is an input type that accepts BucketSpecResourceRefArgs and BucketSpecResourceRefOutput values.
// You can construct a concrete instance of `BucketSpecResourceRefInput` via:
//
//          BucketSpecResourceRefArgs{...}
type BucketSpecResourceRefInput interface {
	pulumi.Input

	ToBucketSpecResourceRefOutput() BucketSpecResourceRefOutput
	ToBucketSpecResourceRefOutputWithContext(context.Context) BucketSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type BucketSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (BucketSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecResourceRef)(nil)).Elem()
}

func (i BucketSpecResourceRefArgs) ToBucketSpecResourceRefOutput() BucketSpecResourceRefOutput {
	return i.ToBucketSpecResourceRefOutputWithContext(context.Background())
}

func (i BucketSpecResourceRefArgs) ToBucketSpecResourceRefOutputWithContext(ctx context.Context) BucketSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecResourceRefOutput)
}

func (i BucketSpecResourceRefArgs) ToBucketSpecResourceRefPtrOutput() BucketSpecResourceRefPtrOutput {
	return i.ToBucketSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecResourceRefArgs) ToBucketSpecResourceRefPtrOutputWithContext(ctx context.Context) BucketSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecResourceRefOutput).ToBucketSpecResourceRefPtrOutputWithContext(ctx)
}

// BucketSpecResourceRefPtrInput is an input type that accepts BucketSpecResourceRefArgs, BucketSpecResourceRefPtr and BucketSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecResourceRefPtrInput` via:
//
//          BucketSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type BucketSpecResourceRefPtrInput interface {
	pulumi.Input

	ToBucketSpecResourceRefPtrOutput() BucketSpecResourceRefPtrOutput
	ToBucketSpecResourceRefPtrOutputWithContext(context.Context) BucketSpecResourceRefPtrOutput
}

type bucketSpecResourceRefPtrType BucketSpecResourceRefArgs

func BucketSpecResourceRefPtr(v *BucketSpecResourceRefArgs) BucketSpecResourceRefPtrInput {
	return (*bucketSpecResourceRefPtrType)(v)
}

func (*bucketSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecResourceRef)(nil)).Elem()
}

func (i *bucketSpecResourceRefPtrType) ToBucketSpecResourceRefPtrOutput() BucketSpecResourceRefPtrOutput {
	return i.ToBucketSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecResourceRefPtrType) ToBucketSpecResourceRefPtrOutputWithContext(ctx context.Context) BucketSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type BucketSpecResourceRefOutput struct{ *pulumi.OutputState }

func (BucketSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecResourceRef)(nil)).Elem()
}

func (o BucketSpecResourceRefOutput) ToBucketSpecResourceRefOutput() BucketSpecResourceRefOutput {
	return o
}

func (o BucketSpecResourceRefOutput) ToBucketSpecResourceRefOutputWithContext(ctx context.Context) BucketSpecResourceRefOutput {
	return o
}

func (o BucketSpecResourceRefOutput) ToBucketSpecResourceRefPtrOutput() BucketSpecResourceRefPtrOutput {
	return o.ToBucketSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecResourceRefOutput) ToBucketSpecResourceRefPtrOutputWithContext(ctx context.Context) BucketSpecResourceRefPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *BucketSpecResourceRef {
		return &v
	}).(BucketSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o BucketSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o BucketSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o BucketSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o BucketSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o BucketSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o BucketSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type BucketSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecResourceRef)(nil)).Elem()
}

func (o BucketSpecResourceRefPtrOutput) ToBucketSpecResourceRefPtrOutput() BucketSpecResourceRefPtrOutput {
	return o
}

func (o BucketSpecResourceRefPtrOutput) ToBucketSpecResourceRefPtrOutputWithContext(ctx context.Context) BucketSpecResourceRefPtrOutput {
	return o
}

func (o BucketSpecResourceRefPtrOutput) Elem() BucketSpecResourceRefOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) BucketSpecResourceRef { return *v }).(BucketSpecResourceRefOutput)
}

// API version of the referent.
func (o BucketSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o BucketSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o BucketSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o BucketSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o BucketSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o BucketSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type BucketSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// BucketSpecWriteConnectionSecretToRefInput is an input type that accepts BucketSpecWriteConnectionSecretToRefArgs and BucketSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `BucketSpecWriteConnectionSecretToRefInput` via:
//
//          BucketSpecWriteConnectionSecretToRefArgs{...}
type BucketSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToBucketSpecWriteConnectionSecretToRefOutput() BucketSpecWriteConnectionSecretToRefOutput
	ToBucketSpecWriteConnectionSecretToRefOutputWithContext(context.Context) BucketSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type BucketSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (BucketSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i BucketSpecWriteConnectionSecretToRefArgs) ToBucketSpecWriteConnectionSecretToRefOutput() BucketSpecWriteConnectionSecretToRefOutput {
	return i.ToBucketSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i BucketSpecWriteConnectionSecretToRefArgs) ToBucketSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecWriteConnectionSecretToRefOutput)
}

func (i BucketSpecWriteConnectionSecretToRefArgs) ToBucketSpecWriteConnectionSecretToRefPtrOutput() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecWriteConnectionSecretToRefArgs) ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecWriteConnectionSecretToRefOutput).ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// BucketSpecWriteConnectionSecretToRefPtrInput is an input type that accepts BucketSpecWriteConnectionSecretToRefArgs, BucketSpecWriteConnectionSecretToRefPtr and BucketSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecWriteConnectionSecretToRefPtrInput` via:
//
//          BucketSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type BucketSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToBucketSpecWriteConnectionSecretToRefPtrOutput() BucketSpecWriteConnectionSecretToRefPtrOutput
	ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) BucketSpecWriteConnectionSecretToRefPtrOutput
}

type bucketSpecWriteConnectionSecretToRefPtrType BucketSpecWriteConnectionSecretToRefArgs

func BucketSpecWriteConnectionSecretToRefPtr(v *BucketSpecWriteConnectionSecretToRefArgs) BucketSpecWriteConnectionSecretToRefPtrInput {
	return (*bucketSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*bucketSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *bucketSpecWriteConnectionSecretToRefPtrType) ToBucketSpecWriteConnectionSecretToRefPtrOutput() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecWriteConnectionSecretToRefPtrType) ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type BucketSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (BucketSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o BucketSpecWriteConnectionSecretToRefOutput) ToBucketSpecWriteConnectionSecretToRefOutput() BucketSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o BucketSpecWriteConnectionSecretToRefOutput) ToBucketSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o BucketSpecWriteConnectionSecretToRefOutput) ToBucketSpecWriteConnectionSecretToRefPtrOutput() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecWriteConnectionSecretToRefOutput) ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v BucketSpecWriteConnectionSecretToRef) *BucketSpecWriteConnectionSecretToRef {
		return &v
	}).(BucketSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o BucketSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BucketSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type BucketSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o BucketSpecWriteConnectionSecretToRefPtrOutput) ToBucketSpecWriteConnectionSecretToRefPtrOutput() BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o BucketSpecWriteConnectionSecretToRefPtrOutput) ToBucketSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) BucketSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o BucketSpecWriteConnectionSecretToRefPtrOutput) Elem() BucketSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *BucketSpecWriteConnectionSecretToRef) BucketSpecWriteConnectionSecretToRef { return *v }).(BucketSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o BucketSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type BucketStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []BucketStatusConditions `pulumi:"conditions"`
}

// BucketStatusInput is an input type that accepts BucketStatusArgs and BucketStatusOutput values.
// You can construct a concrete instance of `BucketStatusInput` via:
//
//          BucketStatusArgs{...}
type BucketStatusInput interface {
	pulumi.Input

	ToBucketStatusOutput() BucketStatusOutput
	ToBucketStatusOutputWithContext(context.Context) BucketStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type BucketStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions BucketStatusConditionsArrayInput `pulumi:"conditions"`
}

func (BucketStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (i BucketStatusArgs) ToBucketStatusOutput() BucketStatusOutput {
	return i.ToBucketStatusOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput)
}

func (i BucketStatusArgs) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput).ToBucketStatusPtrOutputWithContext(ctx)
}

// BucketStatusPtrInput is an input type that accepts BucketStatusArgs, BucketStatusPtr and BucketStatusPtrOutput values.
// You can construct a concrete instance of `BucketStatusPtrInput` via:
//
//          BucketStatusArgs{...}
//
//  or:
//
//          nil
type BucketStatusPtrInput interface {
	pulumi.Input

	ToBucketStatusPtrOutput() BucketStatusPtrOutput
	ToBucketStatusPtrOutputWithContext(context.Context) BucketStatusPtrOutput
}

type bucketStatusPtrType BucketStatusArgs

func BucketStatusPtr(v *BucketStatusArgs) BucketStatusPtrInput {
	return (*bucketStatusPtrType)(v)
}

func (*bucketStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type BucketStatusOutput struct{ *pulumi.OutputState }

func (BucketStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (o BucketStatusOutput) ToBucketStatusOutput() BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (o BucketStatusOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o.ApplyT(func(v BucketStatus) *BucketStatus {
		return &v
	}).(BucketStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o BucketStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o BucketStatusOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v BucketStatus) []BucketStatusConditions { return v.Conditions }).(BucketStatusConditionsArrayOutput)
}

type BucketStatusPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) Elem() BucketStatusOutput {
	return o.ApplyT(func(v *BucketStatus) BucketStatus { return *v }).(BucketStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o BucketStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o BucketStatusPtrOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v *BucketStatus) []BucketStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(BucketStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type BucketStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// BucketStatusConditionsInput is an input type that accepts BucketStatusConditionsArgs and BucketStatusConditionsOutput values.
// You can construct a concrete instance of `BucketStatusConditionsInput` via:
//
//          BucketStatusConditionsArgs{...}
type BucketStatusConditionsInput interface {
	pulumi.Input

	ToBucketStatusConditionsOutput() BucketStatusConditionsOutput
	ToBucketStatusConditionsOutputWithContext(context.Context) BucketStatusConditionsOutput
}

// A Condition that may apply to a resource.
type BucketStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BucketStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return i.ToBucketStatusConditionsOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsOutput)
}

// BucketStatusConditionsArrayInput is an input type that accepts BucketStatusConditionsArray and BucketStatusConditionsArrayOutput values.
// You can construct a concrete instance of `BucketStatusConditionsArrayInput` via:
//
//          BucketStatusConditionsArray{ BucketStatusConditionsArgs{...} }
type BucketStatusConditionsArrayInput interface {
	pulumi.Input

	ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput
	ToBucketStatusConditionsArrayOutputWithContext(context.Context) BucketStatusConditionsArrayOutput
}

type BucketStatusConditionsArray []BucketStatusConditionsInput

func (BucketStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return i.ToBucketStatusConditionsArrayOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type BucketStatusConditionsOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return o
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o BucketStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v BucketStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o BucketStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o BucketStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v BucketStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o BucketStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BucketStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o BucketStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BucketStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type BucketStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) Index(i pulumi.IntInput) BucketStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketStatusConditions {
		return vs[0].([]BucketStatusConditions)[vs[1].(int)]
	}).(BucketStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(BucketTypeOutput{})
	pulumi.RegisterOutputType(BucketMetadataOutput{})
	pulumi.RegisterOutputType(BucketSpecOutput{})
	pulumi.RegisterOutputType(BucketSpecPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecClassRefOutput{})
	pulumi.RegisterOutputType(BucketSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(BucketSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(BucketSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(BucketSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(BucketSpecResourceRefOutput{})
	pulumi.RegisterOutputType(BucketSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(BucketSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusOutput{})
	pulumi.RegisterOutputType(BucketStatusPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsArrayOutput{})
}

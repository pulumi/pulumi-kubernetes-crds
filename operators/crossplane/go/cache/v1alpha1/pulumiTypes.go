// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A RedisCluster is a portable resource claim that may be satisfied by binding to a Redis managed resource such as a GCP CloudMemorystore instance or an AWS ReplicationGroup. Despite the name RedisCluster claims may bind to Redis managed resources that are a single node, or not in cluster mode.
type RedisClusterType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RedisClusterSpec specifies the desired state of a RedisCluster.
	Spec *RedisClusterSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *RedisClusterStatus `pulumi:"status"`
}

// RedisClusterTypeInput is an input type that accepts RedisClusterTypeArgs and RedisClusterTypeOutput values.
// You can construct a concrete instance of `RedisClusterTypeInput` via:
//
//          RedisClusterTypeArgs{...}
type RedisClusterTypeInput interface {
	pulumi.Input

	ToRedisClusterTypeOutput() RedisClusterTypeOutput
	ToRedisClusterTypeOutputWithContext(context.Context) RedisClusterTypeOutput
}

// A RedisCluster is a portable resource claim that may be satisfied by binding to a Redis managed resource such as a GCP CloudMemorystore instance or an AWS ReplicationGroup. Despite the name RedisCluster claims may bind to Redis managed resources that are a single node, or not in cluster mode.
type RedisClusterTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RedisClusterSpec specifies the desired state of a RedisCluster.
	Spec RedisClusterSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status RedisClusterStatusPtrInput `pulumi:"status"`
}

func (RedisClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterType)(nil)).Elem()
}

func (i RedisClusterTypeArgs) ToRedisClusterTypeOutput() RedisClusterTypeOutput {
	return i.ToRedisClusterTypeOutputWithContext(context.Background())
}

func (i RedisClusterTypeArgs) ToRedisClusterTypeOutputWithContext(ctx context.Context) RedisClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterTypeOutput)
}

// A RedisCluster is a portable resource claim that may be satisfied by binding to a Redis managed resource such as a GCP CloudMemorystore instance or an AWS ReplicationGroup. Despite the name RedisCluster claims may bind to Redis managed resources that are a single node, or not in cluster mode.
type RedisClusterTypeOutput struct{ *pulumi.OutputState }

func (RedisClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterType)(nil)).Elem()
}

func (o RedisClusterTypeOutput) ToRedisClusterTypeOutput() RedisClusterTypeOutput {
	return o
}

func (o RedisClusterTypeOutput) ToRedisClusterTypeOutputWithContext(ctx context.Context) RedisClusterTypeOutput {
	return o
}

func (o RedisClusterTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o RedisClusterTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RedisClusterTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RedisClusterType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RedisClusterSpec specifies the desired state of a RedisCluster.
func (o RedisClusterTypeOutput) Spec() RedisClusterSpecPtrOutput {
	return o.ApplyT(func(v RedisClusterType) *RedisClusterSpec { return v.Spec }).(RedisClusterSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o RedisClusterTypeOutput) Status() RedisClusterStatusPtrOutput {
	return o.ApplyT(func(v RedisClusterType) *RedisClusterStatus { return v.Status }).(RedisClusterStatusPtrOutput)
}

type RedisClusterMetadata struct {
}

// RedisClusterMetadataInput is an input type that accepts RedisClusterMetadataArgs and RedisClusterMetadataOutput values.
// You can construct a concrete instance of `RedisClusterMetadataInput` via:
//
//          RedisClusterMetadataArgs{...}
type RedisClusterMetadataInput interface {
	pulumi.Input

	ToRedisClusterMetadataOutput() RedisClusterMetadataOutput
	ToRedisClusterMetadataOutputWithContext(context.Context) RedisClusterMetadataOutput
}

type RedisClusterMetadataArgs struct {
}

func (RedisClusterMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterMetadata)(nil)).Elem()
}

func (i RedisClusterMetadataArgs) ToRedisClusterMetadataOutput() RedisClusterMetadataOutput {
	return i.ToRedisClusterMetadataOutputWithContext(context.Background())
}

func (i RedisClusterMetadataArgs) ToRedisClusterMetadataOutputWithContext(ctx context.Context) RedisClusterMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterMetadataOutput)
}

type RedisClusterMetadataOutput struct{ *pulumi.OutputState }

func (RedisClusterMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterMetadata)(nil)).Elem()
}

func (o RedisClusterMetadataOutput) ToRedisClusterMetadataOutput() RedisClusterMetadataOutput {
	return o
}

func (o RedisClusterMetadataOutput) ToRedisClusterMetadataOutputWithContext(ctx context.Context) RedisClusterMetadataOutput {
	return o
}

// RedisClusterSpec specifies the desired state of a RedisCluster.
type RedisClusterSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *RedisClusterSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *RedisClusterSpecClassSelector `pulumi:"classSelector"`
	// EngineVersion specifies the desired Redis version.
	EngineVersion *string `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *RedisClusterSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *RedisClusterSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// RedisClusterSpecInput is an input type that accepts RedisClusterSpecArgs and RedisClusterSpecOutput values.
// You can construct a concrete instance of `RedisClusterSpecInput` via:
//
//          RedisClusterSpecArgs{...}
type RedisClusterSpecInput interface {
	pulumi.Input

	ToRedisClusterSpecOutput() RedisClusterSpecOutput
	ToRedisClusterSpecOutputWithContext(context.Context) RedisClusterSpecOutput
}

// RedisClusterSpec specifies the desired state of a RedisCluster.
type RedisClusterSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef RedisClusterSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector RedisClusterSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// EngineVersion specifies the desired Redis version.
	EngineVersion pulumi.StringPtrInput `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef RedisClusterSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef RedisClusterSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (RedisClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpec)(nil)).Elem()
}

func (i RedisClusterSpecArgs) ToRedisClusterSpecOutput() RedisClusterSpecOutput {
	return i.ToRedisClusterSpecOutputWithContext(context.Background())
}

func (i RedisClusterSpecArgs) ToRedisClusterSpecOutputWithContext(ctx context.Context) RedisClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecOutput)
}

func (i RedisClusterSpecArgs) ToRedisClusterSpecPtrOutput() RedisClusterSpecPtrOutput {
	return i.ToRedisClusterSpecPtrOutputWithContext(context.Background())
}

func (i RedisClusterSpecArgs) ToRedisClusterSpecPtrOutputWithContext(ctx context.Context) RedisClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecOutput).ToRedisClusterSpecPtrOutputWithContext(ctx)
}

// RedisClusterSpecPtrInput is an input type that accepts RedisClusterSpecArgs, RedisClusterSpecPtr and RedisClusterSpecPtrOutput values.
// You can construct a concrete instance of `RedisClusterSpecPtrInput` via:
//
//          RedisClusterSpecArgs{...}
//
//  or:
//
//          nil
type RedisClusterSpecPtrInput interface {
	pulumi.Input

	ToRedisClusterSpecPtrOutput() RedisClusterSpecPtrOutput
	ToRedisClusterSpecPtrOutputWithContext(context.Context) RedisClusterSpecPtrOutput
}

type redisClusterSpecPtrType RedisClusterSpecArgs

func RedisClusterSpecPtr(v *RedisClusterSpecArgs) RedisClusterSpecPtrInput {
	return (*redisClusterSpecPtrType)(v)
}

func (*redisClusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpec)(nil)).Elem()
}

func (i *redisClusterSpecPtrType) ToRedisClusterSpecPtrOutput() RedisClusterSpecPtrOutput {
	return i.ToRedisClusterSpecPtrOutputWithContext(context.Background())
}

func (i *redisClusterSpecPtrType) ToRedisClusterSpecPtrOutputWithContext(ctx context.Context) RedisClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecPtrOutput)
}

// RedisClusterSpec specifies the desired state of a RedisCluster.
type RedisClusterSpecOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpec)(nil)).Elem()
}

func (o RedisClusterSpecOutput) ToRedisClusterSpecOutput() RedisClusterSpecOutput {
	return o
}

func (o RedisClusterSpecOutput) ToRedisClusterSpecOutputWithContext(ctx context.Context) RedisClusterSpecOutput {
	return o
}

func (o RedisClusterSpecOutput) ToRedisClusterSpecPtrOutput() RedisClusterSpecPtrOutput {
	return o.ToRedisClusterSpecPtrOutputWithContext(context.Background())
}

func (o RedisClusterSpecOutput) ToRedisClusterSpecPtrOutputWithContext(ctx context.Context) RedisClusterSpecPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *RedisClusterSpec {
		return &v
	}).(RedisClusterSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o RedisClusterSpecOutput) ClassRef() RedisClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *RedisClusterSpecClassRef { return v.ClassRef }).(RedisClusterSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o RedisClusterSpecOutput) ClassSelector() RedisClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *RedisClusterSpecClassSelector { return v.ClassSelector }).(RedisClusterSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired Redis version.
func (o RedisClusterSpecOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *string { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o RedisClusterSpecOutput) ResourceRef() RedisClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *RedisClusterSpecResourceRef { return v.ResourceRef }).(RedisClusterSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o RedisClusterSpecOutput) WriteConnectionSecretToRef() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpec) *RedisClusterSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(RedisClusterSpecWriteConnectionSecretToRefPtrOutput)
}

type RedisClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpec)(nil)).Elem()
}

func (o RedisClusterSpecPtrOutput) ToRedisClusterSpecPtrOutput() RedisClusterSpecPtrOutput {
	return o
}

func (o RedisClusterSpecPtrOutput) ToRedisClusterSpecPtrOutputWithContext(ctx context.Context) RedisClusterSpecPtrOutput {
	return o
}

func (o RedisClusterSpecPtrOutput) Elem() RedisClusterSpecOutput {
	return o.ApplyT(func(v *RedisClusterSpec) RedisClusterSpec { return *v }).(RedisClusterSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o RedisClusterSpecPtrOutput) ClassRef() RedisClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpec) *RedisClusterSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(RedisClusterSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o RedisClusterSpecPtrOutput) ClassSelector() RedisClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpec) *RedisClusterSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(RedisClusterSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired Redis version.
func (o RedisClusterSpecPtrOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpec) *string {
		if v == nil {
			return nil
		}
		return v.EngineVersion
	}).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o RedisClusterSpecPtrOutput) ResourceRef() RedisClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpec) *RedisClusterSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(RedisClusterSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o RedisClusterSpecPtrOutput) WriteConnectionSecretToRef() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpec) *RedisClusterSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(RedisClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type RedisClusterSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// RedisClusterSpecClassRefInput is an input type that accepts RedisClusterSpecClassRefArgs and RedisClusterSpecClassRefOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassRefInput` via:
//
//          RedisClusterSpecClassRefArgs{...}
type RedisClusterSpecClassRefInput interface {
	pulumi.Input

	ToRedisClusterSpecClassRefOutput() RedisClusterSpecClassRefOutput
	ToRedisClusterSpecClassRefOutputWithContext(context.Context) RedisClusterSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type RedisClusterSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RedisClusterSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassRef)(nil)).Elem()
}

func (i RedisClusterSpecClassRefArgs) ToRedisClusterSpecClassRefOutput() RedisClusterSpecClassRefOutput {
	return i.ToRedisClusterSpecClassRefOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassRefArgs) ToRedisClusterSpecClassRefOutputWithContext(ctx context.Context) RedisClusterSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassRefOutput)
}

func (i RedisClusterSpecClassRefArgs) ToRedisClusterSpecClassRefPtrOutput() RedisClusterSpecClassRefPtrOutput {
	return i.ToRedisClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassRefArgs) ToRedisClusterSpecClassRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassRefOutput).ToRedisClusterSpecClassRefPtrOutputWithContext(ctx)
}

// RedisClusterSpecClassRefPtrInput is an input type that accepts RedisClusterSpecClassRefArgs, RedisClusterSpecClassRefPtr and RedisClusterSpecClassRefPtrOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassRefPtrInput` via:
//
//          RedisClusterSpecClassRefArgs{...}
//
//  or:
//
//          nil
type RedisClusterSpecClassRefPtrInput interface {
	pulumi.Input

	ToRedisClusterSpecClassRefPtrOutput() RedisClusterSpecClassRefPtrOutput
	ToRedisClusterSpecClassRefPtrOutputWithContext(context.Context) RedisClusterSpecClassRefPtrOutput
}

type redisClusterSpecClassRefPtrType RedisClusterSpecClassRefArgs

func RedisClusterSpecClassRefPtr(v *RedisClusterSpecClassRefArgs) RedisClusterSpecClassRefPtrInput {
	return (*redisClusterSpecClassRefPtrType)(v)
}

func (*redisClusterSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecClassRef)(nil)).Elem()
}

func (i *redisClusterSpecClassRefPtrType) ToRedisClusterSpecClassRefPtrOutput() RedisClusterSpecClassRefPtrOutput {
	return i.ToRedisClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *redisClusterSpecClassRefPtrType) ToRedisClusterSpecClassRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type RedisClusterSpecClassRefOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassRef)(nil)).Elem()
}

func (o RedisClusterSpecClassRefOutput) ToRedisClusterSpecClassRefOutput() RedisClusterSpecClassRefOutput {
	return o
}

func (o RedisClusterSpecClassRefOutput) ToRedisClusterSpecClassRefOutputWithContext(ctx context.Context) RedisClusterSpecClassRefOutput {
	return o
}

func (o RedisClusterSpecClassRefOutput) ToRedisClusterSpecClassRefPtrOutput() RedisClusterSpecClassRefPtrOutput {
	return o.ToRedisClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (o RedisClusterSpecClassRefOutput) ToRedisClusterSpecClassRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *RedisClusterSpecClassRef {
		return &v
	}).(RedisClusterSpecClassRefPtrOutput)
}

// API version of the referent.
func (o RedisClusterSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RedisClusterSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisClusterSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RedisClusterSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RedisClusterSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RedisClusterSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RedisClusterSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RedisClusterSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecClassRef)(nil)).Elem()
}

func (o RedisClusterSpecClassRefPtrOutput) ToRedisClusterSpecClassRefPtrOutput() RedisClusterSpecClassRefPtrOutput {
	return o
}

func (o RedisClusterSpecClassRefPtrOutput) ToRedisClusterSpecClassRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassRefPtrOutput {
	return o
}

func (o RedisClusterSpecClassRefPtrOutput) Elem() RedisClusterSpecClassRefOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) RedisClusterSpecClassRef { return *v }).(RedisClusterSpecClassRefOutput)
}

// API version of the referent.
func (o RedisClusterSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RedisClusterSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisClusterSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RedisClusterSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RedisClusterSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RedisClusterSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RedisClusterSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type RedisClusterSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisClusterSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisClusterSpecClassSelectorInput is an input type that accepts RedisClusterSpecClassSelectorArgs and RedisClusterSpecClassSelectorOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassSelectorInput` via:
//
//          RedisClusterSpecClassSelectorArgs{...}
type RedisClusterSpecClassSelectorInput interface {
	pulumi.Input

	ToRedisClusterSpecClassSelectorOutput() RedisClusterSpecClassSelectorOutput
	ToRedisClusterSpecClassSelectorOutputWithContext(context.Context) RedisClusterSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type RedisClusterSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisClusterSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisClusterSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelector)(nil)).Elem()
}

func (i RedisClusterSpecClassSelectorArgs) ToRedisClusterSpecClassSelectorOutput() RedisClusterSpecClassSelectorOutput {
	return i.ToRedisClusterSpecClassSelectorOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassSelectorArgs) ToRedisClusterSpecClassSelectorOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorOutput)
}

func (i RedisClusterSpecClassSelectorArgs) ToRedisClusterSpecClassSelectorPtrOutput() RedisClusterSpecClassSelectorPtrOutput {
	return i.ToRedisClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassSelectorArgs) ToRedisClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorOutput).ToRedisClusterSpecClassSelectorPtrOutputWithContext(ctx)
}

// RedisClusterSpecClassSelectorPtrInput is an input type that accepts RedisClusterSpecClassSelectorArgs, RedisClusterSpecClassSelectorPtr and RedisClusterSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassSelectorPtrInput` via:
//
//          RedisClusterSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type RedisClusterSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToRedisClusterSpecClassSelectorPtrOutput() RedisClusterSpecClassSelectorPtrOutput
	ToRedisClusterSpecClassSelectorPtrOutputWithContext(context.Context) RedisClusterSpecClassSelectorPtrOutput
}

type redisClusterSpecClassSelectorPtrType RedisClusterSpecClassSelectorArgs

func RedisClusterSpecClassSelectorPtr(v *RedisClusterSpecClassSelectorArgs) RedisClusterSpecClassSelectorPtrInput {
	return (*redisClusterSpecClassSelectorPtrType)(v)
}

func (*redisClusterSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecClassSelector)(nil)).Elem()
}

func (i *redisClusterSpecClassSelectorPtrType) ToRedisClusterSpecClassSelectorPtrOutput() RedisClusterSpecClassSelectorPtrOutput {
	return i.ToRedisClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *redisClusterSpecClassSelectorPtrType) ToRedisClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type RedisClusterSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelector)(nil)).Elem()
}

func (o RedisClusterSpecClassSelectorOutput) ToRedisClusterSpecClassSelectorOutput() RedisClusterSpecClassSelectorOutput {
	return o
}

func (o RedisClusterSpecClassSelectorOutput) ToRedisClusterSpecClassSelectorOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorOutput {
	return o
}

func (o RedisClusterSpecClassSelectorOutput) ToRedisClusterSpecClassSelectorPtrOutput() RedisClusterSpecClassSelectorPtrOutput {
	return o.ToRedisClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o RedisClusterSpecClassSelectorOutput) ToRedisClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelector) *RedisClusterSpecClassSelector {
		return &v
	}).(RedisClusterSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisClusterSpecClassSelectorOutput) MatchExpressions() RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelector) []RedisClusterSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisClusterSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type RedisClusterSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecClassSelector)(nil)).Elem()
}

func (o RedisClusterSpecClassSelectorPtrOutput) ToRedisClusterSpecClassSelectorPtrOutput() RedisClusterSpecClassSelectorPtrOutput {
	return o
}

func (o RedisClusterSpecClassSelectorPtrOutput) ToRedisClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorPtrOutput {
	return o
}

func (o RedisClusterSpecClassSelectorPtrOutput) Elem() RedisClusterSpecClassSelectorOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassSelector) RedisClusterSpecClassSelector { return *v }).(RedisClusterSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisClusterSpecClassSelectorPtrOutput) MatchExpressions() RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassSelector) []RedisClusterSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisClusterSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisClusterSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisClusterSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisClusterSpecClassSelectorMatchExpressionsInput is an input type that accepts RedisClusterSpecClassSelectorMatchExpressionsArgs and RedisClusterSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassSelectorMatchExpressionsInput` via:
//
//          RedisClusterSpecClassSelectorMatchExpressionsArgs{...}
type RedisClusterSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisClusterSpecClassSelectorMatchExpressionsOutput() RedisClusterSpecClassSelectorMatchExpressionsOutput
	ToRedisClusterSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) RedisClusterSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisClusterSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisClusterSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisClusterSpecClassSelectorMatchExpressionsArgs) ToRedisClusterSpecClassSelectorMatchExpressionsOutput() RedisClusterSpecClassSelectorMatchExpressionsOutput {
	return i.ToRedisClusterSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassSelectorMatchExpressionsArgs) ToRedisClusterSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorMatchExpressionsOutput)
}

// RedisClusterSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts RedisClusterSpecClassSelectorMatchExpressionsArray and RedisClusterSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          RedisClusterSpecClassSelectorMatchExpressionsArray{ RedisClusterSpecClassSelectorMatchExpressionsArgs{...} }
type RedisClusterSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutput() RedisClusterSpecClassSelectorMatchExpressionsArrayOutput
	ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisClusterSpecClassSelectorMatchExpressionsArrayOutput
}

type RedisClusterSpecClassSelectorMatchExpressionsArray []RedisClusterSpecClassSelectorMatchExpressionsInput

func (RedisClusterSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisClusterSpecClassSelectorMatchExpressionsArray) ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutput() RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassSelectorMatchExpressionsArray) ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisClusterSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisClusterSpecClassSelectorMatchExpressionsOutput) ToRedisClusterSpecClassSelectorMatchExpressionsOutput() RedisClusterSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o RedisClusterSpecClassSelectorMatchExpressionsOutput) ToRedisClusterSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisClusterSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisClusterSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisClusterSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisClusterSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RedisClusterSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisClusterSpecClassSelectorMatchExpressionsArrayOutput) ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutput() RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisClusterSpecClassSelectorMatchExpressionsArrayOutput) ToRedisClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisClusterSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisClusterSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisClusterSpecClassSelectorMatchExpressions {
		return vs[0].([]RedisClusterSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisClusterSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisClusterSpecClassSelectorMatchLabels struct {
}

// RedisClusterSpecClassSelectorMatchLabelsInput is an input type that accepts RedisClusterSpecClassSelectorMatchLabelsArgs and RedisClusterSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `RedisClusterSpecClassSelectorMatchLabelsInput` via:
//
//          RedisClusterSpecClassSelectorMatchLabelsArgs{...}
type RedisClusterSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToRedisClusterSpecClassSelectorMatchLabelsOutput() RedisClusterSpecClassSelectorMatchLabelsOutput
	ToRedisClusterSpecClassSelectorMatchLabelsOutputWithContext(context.Context) RedisClusterSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisClusterSpecClassSelectorMatchLabelsArgs struct {
}

func (RedisClusterSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i RedisClusterSpecClassSelectorMatchLabelsArgs) ToRedisClusterSpecClassSelectorMatchLabelsOutput() RedisClusterSpecClassSelectorMatchLabelsOutput {
	return i.ToRedisClusterSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i RedisClusterSpecClassSelectorMatchLabelsArgs) ToRedisClusterSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisClusterSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o RedisClusterSpecClassSelectorMatchLabelsOutput) ToRedisClusterSpecClassSelectorMatchLabelsOutput() RedisClusterSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o RedisClusterSpecClassSelectorMatchLabelsOutput) ToRedisClusterSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) RedisClusterSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type RedisClusterSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// RedisClusterSpecResourceRefInput is an input type that accepts RedisClusterSpecResourceRefArgs and RedisClusterSpecResourceRefOutput values.
// You can construct a concrete instance of `RedisClusterSpecResourceRefInput` via:
//
//          RedisClusterSpecResourceRefArgs{...}
type RedisClusterSpecResourceRefInput interface {
	pulumi.Input

	ToRedisClusterSpecResourceRefOutput() RedisClusterSpecResourceRefOutput
	ToRedisClusterSpecResourceRefOutputWithContext(context.Context) RedisClusterSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type RedisClusterSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RedisClusterSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecResourceRef)(nil)).Elem()
}

func (i RedisClusterSpecResourceRefArgs) ToRedisClusterSpecResourceRefOutput() RedisClusterSpecResourceRefOutput {
	return i.ToRedisClusterSpecResourceRefOutputWithContext(context.Background())
}

func (i RedisClusterSpecResourceRefArgs) ToRedisClusterSpecResourceRefOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecResourceRefOutput)
}

func (i RedisClusterSpecResourceRefArgs) ToRedisClusterSpecResourceRefPtrOutput() RedisClusterSpecResourceRefPtrOutput {
	return i.ToRedisClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i RedisClusterSpecResourceRefArgs) ToRedisClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecResourceRefOutput).ToRedisClusterSpecResourceRefPtrOutputWithContext(ctx)
}

// RedisClusterSpecResourceRefPtrInput is an input type that accepts RedisClusterSpecResourceRefArgs, RedisClusterSpecResourceRefPtr and RedisClusterSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `RedisClusterSpecResourceRefPtrInput` via:
//
//          RedisClusterSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type RedisClusterSpecResourceRefPtrInput interface {
	pulumi.Input

	ToRedisClusterSpecResourceRefPtrOutput() RedisClusterSpecResourceRefPtrOutput
	ToRedisClusterSpecResourceRefPtrOutputWithContext(context.Context) RedisClusterSpecResourceRefPtrOutput
}

type redisClusterSpecResourceRefPtrType RedisClusterSpecResourceRefArgs

func RedisClusterSpecResourceRefPtr(v *RedisClusterSpecResourceRefArgs) RedisClusterSpecResourceRefPtrInput {
	return (*redisClusterSpecResourceRefPtrType)(v)
}

func (*redisClusterSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecResourceRef)(nil)).Elem()
}

func (i *redisClusterSpecResourceRefPtrType) ToRedisClusterSpecResourceRefPtrOutput() RedisClusterSpecResourceRefPtrOutput {
	return i.ToRedisClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *redisClusterSpecResourceRefPtrType) ToRedisClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type RedisClusterSpecResourceRefOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecResourceRef)(nil)).Elem()
}

func (o RedisClusterSpecResourceRefOutput) ToRedisClusterSpecResourceRefOutput() RedisClusterSpecResourceRefOutput {
	return o
}

func (o RedisClusterSpecResourceRefOutput) ToRedisClusterSpecResourceRefOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefOutput {
	return o
}

func (o RedisClusterSpecResourceRefOutput) ToRedisClusterSpecResourceRefPtrOutput() RedisClusterSpecResourceRefPtrOutput {
	return o.ToRedisClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o RedisClusterSpecResourceRefOutput) ToRedisClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *RedisClusterSpecResourceRef {
		return &v
	}).(RedisClusterSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o RedisClusterSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RedisClusterSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisClusterSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RedisClusterSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RedisClusterSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RedisClusterSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RedisClusterSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RedisClusterSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecResourceRef)(nil)).Elem()
}

func (o RedisClusterSpecResourceRefPtrOutput) ToRedisClusterSpecResourceRefPtrOutput() RedisClusterSpecResourceRefPtrOutput {
	return o
}

func (o RedisClusterSpecResourceRefPtrOutput) ToRedisClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecResourceRefPtrOutput {
	return o
}

func (o RedisClusterSpecResourceRefPtrOutput) Elem() RedisClusterSpecResourceRefOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) RedisClusterSpecResourceRef { return *v }).(RedisClusterSpecResourceRefOutput)
}

// API version of the referent.
func (o RedisClusterSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RedisClusterSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisClusterSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RedisClusterSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RedisClusterSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RedisClusterSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RedisClusterSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type RedisClusterSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// RedisClusterSpecWriteConnectionSecretToRefInput is an input type that accepts RedisClusterSpecWriteConnectionSecretToRefArgs and RedisClusterSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `RedisClusterSpecWriteConnectionSecretToRefInput` via:
//
//          RedisClusterSpecWriteConnectionSecretToRefArgs{...}
type RedisClusterSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToRedisClusterSpecWriteConnectionSecretToRefOutput() RedisClusterSpecWriteConnectionSecretToRefOutput
	ToRedisClusterSpecWriteConnectionSecretToRefOutputWithContext(context.Context) RedisClusterSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type RedisClusterSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisClusterSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i RedisClusterSpecWriteConnectionSecretToRefArgs) ToRedisClusterSpecWriteConnectionSecretToRefOutput() RedisClusterSpecWriteConnectionSecretToRefOutput {
	return i.ToRedisClusterSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i RedisClusterSpecWriteConnectionSecretToRefArgs) ToRedisClusterSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecWriteConnectionSecretToRefOutput)
}

func (i RedisClusterSpecWriteConnectionSecretToRefArgs) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutput() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i RedisClusterSpecWriteConnectionSecretToRefArgs) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecWriteConnectionSecretToRefOutput).ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// RedisClusterSpecWriteConnectionSecretToRefPtrInput is an input type that accepts RedisClusterSpecWriteConnectionSecretToRefArgs, RedisClusterSpecWriteConnectionSecretToRefPtr and RedisClusterSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `RedisClusterSpecWriteConnectionSecretToRefPtrInput` via:
//
//          RedisClusterSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type RedisClusterSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToRedisClusterSpecWriteConnectionSecretToRefPtrOutput() RedisClusterSpecWriteConnectionSecretToRefPtrOutput
	ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) RedisClusterSpecWriteConnectionSecretToRefPtrOutput
}

type redisClusterSpecWriteConnectionSecretToRefPtrType RedisClusterSpecWriteConnectionSecretToRefArgs

func RedisClusterSpecWriteConnectionSecretToRefPtr(v *RedisClusterSpecWriteConnectionSecretToRefArgs) RedisClusterSpecWriteConnectionSecretToRefPtrInput {
	return (*redisClusterSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*redisClusterSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *redisClusterSpecWriteConnectionSecretToRefPtrType) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutput() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *redisClusterSpecWriteConnectionSecretToRefPtrType) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type RedisClusterSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o RedisClusterSpecWriteConnectionSecretToRefOutput) ToRedisClusterSpecWriteConnectionSecretToRefOutput() RedisClusterSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o RedisClusterSpecWriteConnectionSecretToRefOutput) ToRedisClusterSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o RedisClusterSpecWriteConnectionSecretToRefOutput) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutput() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o RedisClusterSpecWriteConnectionSecretToRefOutput) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v RedisClusterSpecWriteConnectionSecretToRef) *RedisClusterSpecWriteConnectionSecretToRef {
		return &v
	}).(RedisClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o RedisClusterSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type RedisClusterSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o RedisClusterSpecWriteConnectionSecretToRefPtrOutput) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutput() RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o RedisClusterSpecWriteConnectionSecretToRefPtrOutput) ToRedisClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) RedisClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o RedisClusterSpecWriteConnectionSecretToRefPtrOutput) Elem() RedisClusterSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *RedisClusterSpecWriteConnectionSecretToRef) RedisClusterSpecWriteConnectionSecretToRef {
		return *v
	}).(RedisClusterSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o RedisClusterSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type RedisClusterStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []RedisClusterStatusConditions `pulumi:"conditions"`
}

// RedisClusterStatusInput is an input type that accepts RedisClusterStatusArgs and RedisClusterStatusOutput values.
// You can construct a concrete instance of `RedisClusterStatusInput` via:
//
//          RedisClusterStatusArgs{...}
type RedisClusterStatusInput interface {
	pulumi.Input

	ToRedisClusterStatusOutput() RedisClusterStatusOutput
	ToRedisClusterStatusOutputWithContext(context.Context) RedisClusterStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type RedisClusterStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions RedisClusterStatusConditionsArrayInput `pulumi:"conditions"`
}

func (RedisClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterStatus)(nil)).Elem()
}

func (i RedisClusterStatusArgs) ToRedisClusterStatusOutput() RedisClusterStatusOutput {
	return i.ToRedisClusterStatusOutputWithContext(context.Background())
}

func (i RedisClusterStatusArgs) ToRedisClusterStatusOutputWithContext(ctx context.Context) RedisClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterStatusOutput)
}

func (i RedisClusterStatusArgs) ToRedisClusterStatusPtrOutput() RedisClusterStatusPtrOutput {
	return i.ToRedisClusterStatusPtrOutputWithContext(context.Background())
}

func (i RedisClusterStatusArgs) ToRedisClusterStatusPtrOutputWithContext(ctx context.Context) RedisClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterStatusOutput).ToRedisClusterStatusPtrOutputWithContext(ctx)
}

// RedisClusterStatusPtrInput is an input type that accepts RedisClusterStatusArgs, RedisClusterStatusPtr and RedisClusterStatusPtrOutput values.
// You can construct a concrete instance of `RedisClusterStatusPtrInput` via:
//
//          RedisClusterStatusArgs{...}
//
//  or:
//
//          nil
type RedisClusterStatusPtrInput interface {
	pulumi.Input

	ToRedisClusterStatusPtrOutput() RedisClusterStatusPtrOutput
	ToRedisClusterStatusPtrOutputWithContext(context.Context) RedisClusterStatusPtrOutput
}

type redisClusterStatusPtrType RedisClusterStatusArgs

func RedisClusterStatusPtr(v *RedisClusterStatusArgs) RedisClusterStatusPtrInput {
	return (*redisClusterStatusPtrType)(v)
}

func (*redisClusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterStatus)(nil)).Elem()
}

func (i *redisClusterStatusPtrType) ToRedisClusterStatusPtrOutput() RedisClusterStatusPtrOutput {
	return i.ToRedisClusterStatusPtrOutputWithContext(context.Background())
}

func (i *redisClusterStatusPtrType) ToRedisClusterStatusPtrOutputWithContext(ctx context.Context) RedisClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type RedisClusterStatusOutput struct{ *pulumi.OutputState }

func (RedisClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterStatus)(nil)).Elem()
}

func (o RedisClusterStatusOutput) ToRedisClusterStatusOutput() RedisClusterStatusOutput {
	return o
}

func (o RedisClusterStatusOutput) ToRedisClusterStatusOutputWithContext(ctx context.Context) RedisClusterStatusOutput {
	return o
}

func (o RedisClusterStatusOutput) ToRedisClusterStatusPtrOutput() RedisClusterStatusPtrOutput {
	return o.ToRedisClusterStatusPtrOutputWithContext(context.Background())
}

func (o RedisClusterStatusOutput) ToRedisClusterStatusPtrOutputWithContext(ctx context.Context) RedisClusterStatusPtrOutput {
	return o.ApplyT(func(v RedisClusterStatus) *RedisClusterStatus {
		return &v
	}).(RedisClusterStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o RedisClusterStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o RedisClusterStatusOutput) Conditions() RedisClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v RedisClusterStatus) []RedisClusterStatusConditions { return v.Conditions }).(RedisClusterStatusConditionsArrayOutput)
}

type RedisClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (RedisClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterStatus)(nil)).Elem()
}

func (o RedisClusterStatusPtrOutput) ToRedisClusterStatusPtrOutput() RedisClusterStatusPtrOutput {
	return o
}

func (o RedisClusterStatusPtrOutput) ToRedisClusterStatusPtrOutputWithContext(ctx context.Context) RedisClusterStatusPtrOutput {
	return o
}

func (o RedisClusterStatusPtrOutput) Elem() RedisClusterStatusOutput {
	return o.ApplyT(func(v *RedisClusterStatus) RedisClusterStatus { return *v }).(RedisClusterStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o RedisClusterStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o RedisClusterStatusPtrOutput) Conditions() RedisClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v *RedisClusterStatus) []RedisClusterStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(RedisClusterStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type RedisClusterStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// RedisClusterStatusConditionsInput is an input type that accepts RedisClusterStatusConditionsArgs and RedisClusterStatusConditionsOutput values.
// You can construct a concrete instance of `RedisClusterStatusConditionsInput` via:
//
//          RedisClusterStatusConditionsArgs{...}
type RedisClusterStatusConditionsInput interface {
	pulumi.Input

	ToRedisClusterStatusConditionsOutput() RedisClusterStatusConditionsOutput
	ToRedisClusterStatusConditionsOutputWithContext(context.Context) RedisClusterStatusConditionsOutput
}

// A Condition that may apply to a resource.
type RedisClusterStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisClusterStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterStatusConditions)(nil)).Elem()
}

func (i RedisClusterStatusConditionsArgs) ToRedisClusterStatusConditionsOutput() RedisClusterStatusConditionsOutput {
	return i.ToRedisClusterStatusConditionsOutputWithContext(context.Background())
}

func (i RedisClusterStatusConditionsArgs) ToRedisClusterStatusConditionsOutputWithContext(ctx context.Context) RedisClusterStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterStatusConditionsOutput)
}

// RedisClusterStatusConditionsArrayInput is an input type that accepts RedisClusterStatusConditionsArray and RedisClusterStatusConditionsArrayOutput values.
// You can construct a concrete instance of `RedisClusterStatusConditionsArrayInput` via:
//
//          RedisClusterStatusConditionsArray{ RedisClusterStatusConditionsArgs{...} }
type RedisClusterStatusConditionsArrayInput interface {
	pulumi.Input

	ToRedisClusterStatusConditionsArrayOutput() RedisClusterStatusConditionsArrayOutput
	ToRedisClusterStatusConditionsArrayOutputWithContext(context.Context) RedisClusterStatusConditionsArrayOutput
}

type RedisClusterStatusConditionsArray []RedisClusterStatusConditionsInput

func (RedisClusterStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterStatusConditions)(nil)).Elem()
}

func (i RedisClusterStatusConditionsArray) ToRedisClusterStatusConditionsArrayOutput() RedisClusterStatusConditionsArrayOutput {
	return i.ToRedisClusterStatusConditionsArrayOutputWithContext(context.Background())
}

func (i RedisClusterStatusConditionsArray) ToRedisClusterStatusConditionsArrayOutputWithContext(ctx context.Context) RedisClusterStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type RedisClusterStatusConditionsOutput struct{ *pulumi.OutputState }

func (RedisClusterStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisClusterStatusConditions)(nil)).Elem()
}

func (o RedisClusterStatusConditionsOutput) ToRedisClusterStatusConditionsOutput() RedisClusterStatusConditionsOutput {
	return o
}

func (o RedisClusterStatusConditionsOutput) ToRedisClusterStatusConditionsOutputWithContext(ctx context.Context) RedisClusterStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o RedisClusterStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o RedisClusterStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisClusterStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o RedisClusterStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o RedisClusterStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o RedisClusterStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisClusterStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type RedisClusterStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisClusterStatusConditions)(nil)).Elem()
}

func (o RedisClusterStatusConditionsArrayOutput) ToRedisClusterStatusConditionsArrayOutput() RedisClusterStatusConditionsArrayOutput {
	return o
}

func (o RedisClusterStatusConditionsArrayOutput) ToRedisClusterStatusConditionsArrayOutputWithContext(ctx context.Context) RedisClusterStatusConditionsArrayOutput {
	return o
}

func (o RedisClusterStatusConditionsArrayOutput) Index(i pulumi.IntInput) RedisClusterStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisClusterStatusConditions {
		return vs[0].([]RedisClusterStatusConditions)[vs[1].(int)]
	}).(RedisClusterStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisClusterTypeOutput{})
	pulumi.RegisterOutputType(RedisClusterMetadataOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassRefOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecResourceRefOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(RedisClusterSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterStatusOutput{})
	pulumi.RegisterOutputType(RedisClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(RedisClusterStatusConditionsOutput{})
	pulumi.RegisterOutputType(RedisClusterStatusConditionsArrayOutput{})
}

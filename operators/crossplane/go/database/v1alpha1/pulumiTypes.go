// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A MySQLInstance is a portable resource claim that may be satisfied by binding to a MySQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type MySQLInstanceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
	Spec *MySQLInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *MySQLInstanceStatus `pulumi:"status"`
}

// MySQLInstanceTypeInput is an input type that accepts MySQLInstanceTypeArgs and MySQLInstanceTypeOutput values.
// You can construct a concrete instance of `MySQLInstanceTypeInput` via:
//
//          MySQLInstanceTypeArgs{...}
type MySQLInstanceTypeInput interface {
	pulumi.Input

	ToMySQLInstanceTypeOutput() MySQLInstanceTypeOutput
	ToMySQLInstanceTypeOutputWithContext(context.Context) MySQLInstanceTypeOutput
}

// A MySQLInstance is a portable resource claim that may be satisfied by binding to a MySQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type MySQLInstanceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
	Spec MySQLInstanceSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status MySQLInstanceStatusPtrInput `pulumi:"status"`
}

func (MySQLInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceType)(nil)).Elem()
}

func (i MySQLInstanceTypeArgs) ToMySQLInstanceTypeOutput() MySQLInstanceTypeOutput {
	return i.ToMySQLInstanceTypeOutputWithContext(context.Background())
}

func (i MySQLInstanceTypeArgs) ToMySQLInstanceTypeOutputWithContext(ctx context.Context) MySQLInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceTypeOutput)
}

// A MySQLInstance is a portable resource claim that may be satisfied by binding to a MySQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type MySQLInstanceTypeOutput struct{ *pulumi.OutputState }

func (MySQLInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceType)(nil)).Elem()
}

func (o MySQLInstanceTypeOutput) ToMySQLInstanceTypeOutput() MySQLInstanceTypeOutput {
	return o
}

func (o MySQLInstanceTypeOutput) ToMySQLInstanceTypeOutputWithContext(ctx context.Context) MySQLInstanceTypeOutput {
	return o
}

func (o MySQLInstanceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MySQLInstanceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MySQLInstanceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v MySQLInstanceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
func (o MySQLInstanceTypeOutput) Spec() MySQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v MySQLInstanceType) *MySQLInstanceSpec { return v.Spec }).(MySQLInstanceSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o MySQLInstanceTypeOutput) Status() MySQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v MySQLInstanceType) *MySQLInstanceStatus { return v.Status }).(MySQLInstanceStatusPtrOutput)
}

type MySQLInstanceMetadata struct {
}

// MySQLInstanceMetadataInput is an input type that accepts MySQLInstanceMetadataArgs and MySQLInstanceMetadataOutput values.
// You can construct a concrete instance of `MySQLInstanceMetadataInput` via:
//
//          MySQLInstanceMetadataArgs{...}
type MySQLInstanceMetadataInput interface {
	pulumi.Input

	ToMySQLInstanceMetadataOutput() MySQLInstanceMetadataOutput
	ToMySQLInstanceMetadataOutputWithContext(context.Context) MySQLInstanceMetadataOutput
}

type MySQLInstanceMetadataArgs struct {
}

func (MySQLInstanceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceMetadata)(nil)).Elem()
}

func (i MySQLInstanceMetadataArgs) ToMySQLInstanceMetadataOutput() MySQLInstanceMetadataOutput {
	return i.ToMySQLInstanceMetadataOutputWithContext(context.Background())
}

func (i MySQLInstanceMetadataArgs) ToMySQLInstanceMetadataOutputWithContext(ctx context.Context) MySQLInstanceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceMetadataOutput)
}

type MySQLInstanceMetadataOutput struct{ *pulumi.OutputState }

func (MySQLInstanceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceMetadata)(nil)).Elem()
}

func (o MySQLInstanceMetadataOutput) ToMySQLInstanceMetadataOutput() MySQLInstanceMetadataOutput {
	return o
}

func (o MySQLInstanceMetadataOutput) ToMySQLInstanceMetadataOutputWithContext(ctx context.Context) MySQLInstanceMetadataOutput {
	return o
}

// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
type MySQLInstanceSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *MySQLInstanceSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *MySQLInstanceSpecClassSelector `pulumi:"classSelector"`
	// EngineVersion specifies the desired MySQL engine version, e.g. 5.7.
	EngineVersion *string `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *MySQLInstanceSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *MySQLInstanceSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// MySQLInstanceSpecInput is an input type that accepts MySQLInstanceSpecArgs and MySQLInstanceSpecOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecInput` via:
//
//          MySQLInstanceSpecArgs{...}
type MySQLInstanceSpecInput interface {
	pulumi.Input

	ToMySQLInstanceSpecOutput() MySQLInstanceSpecOutput
	ToMySQLInstanceSpecOutputWithContext(context.Context) MySQLInstanceSpecOutput
}

// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
type MySQLInstanceSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef MySQLInstanceSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector MySQLInstanceSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// EngineVersion specifies the desired MySQL engine version, e.g. 5.7.
	EngineVersion pulumi.StringPtrInput `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef MySQLInstanceSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef MySQLInstanceSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (MySQLInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpec)(nil)).Elem()
}

func (i MySQLInstanceSpecArgs) ToMySQLInstanceSpecOutput() MySQLInstanceSpecOutput {
	return i.ToMySQLInstanceSpecOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecArgs) ToMySQLInstanceSpecOutputWithContext(ctx context.Context) MySQLInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecOutput)
}

func (i MySQLInstanceSpecArgs) ToMySQLInstanceSpecPtrOutput() MySQLInstanceSpecPtrOutput {
	return i.ToMySQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecArgs) ToMySQLInstanceSpecPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecOutput).ToMySQLInstanceSpecPtrOutputWithContext(ctx)
}

// MySQLInstanceSpecPtrInput is an input type that accepts MySQLInstanceSpecArgs, MySQLInstanceSpecPtr and MySQLInstanceSpecPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecPtrInput` via:
//
//          MySQLInstanceSpecArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceSpecPtrInput interface {
	pulumi.Input

	ToMySQLInstanceSpecPtrOutput() MySQLInstanceSpecPtrOutput
	ToMySQLInstanceSpecPtrOutputWithContext(context.Context) MySQLInstanceSpecPtrOutput
}

type mySQLInstanceSpecPtrType MySQLInstanceSpecArgs

func MySQLInstanceSpecPtr(v *MySQLInstanceSpecArgs) MySQLInstanceSpecPtrInput {
	return (*mySQLInstanceSpecPtrType)(v)
}

func (*mySQLInstanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpec)(nil)).Elem()
}

func (i *mySQLInstanceSpecPtrType) ToMySQLInstanceSpecPtrOutput() MySQLInstanceSpecPtrOutput {
	return i.ToMySQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceSpecPtrType) ToMySQLInstanceSpecPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecPtrOutput)
}

// MySQLInstanceSpec specifies the desired state of a MySQLInstance.
type MySQLInstanceSpecOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpec)(nil)).Elem()
}

func (o MySQLInstanceSpecOutput) ToMySQLInstanceSpecOutput() MySQLInstanceSpecOutput {
	return o
}

func (o MySQLInstanceSpecOutput) ToMySQLInstanceSpecOutputWithContext(ctx context.Context) MySQLInstanceSpecOutput {
	return o
}

func (o MySQLInstanceSpecOutput) ToMySQLInstanceSpecPtrOutput() MySQLInstanceSpecPtrOutput {
	return o.ToMySQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceSpecOutput) ToMySQLInstanceSpecPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *MySQLInstanceSpec {
		return &v
	}).(MySQLInstanceSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o MySQLInstanceSpecOutput) ClassRef() MySQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *MySQLInstanceSpecClassRef { return v.ClassRef }).(MySQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o MySQLInstanceSpecOutput) ClassSelector() MySQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *MySQLInstanceSpecClassSelector { return v.ClassSelector }).(MySQLInstanceSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired MySQL engine version, e.g. 5.7.
func (o MySQLInstanceSpecOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *string { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o MySQLInstanceSpecOutput) ResourceRef() MySQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *MySQLInstanceSpecResourceRef { return v.ResourceRef }).(MySQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o MySQLInstanceSpecOutput) WriteConnectionSecretToRef() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpec) *MySQLInstanceSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

type MySQLInstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpec)(nil)).Elem()
}

func (o MySQLInstanceSpecPtrOutput) ToMySQLInstanceSpecPtrOutput() MySQLInstanceSpecPtrOutput {
	return o
}

func (o MySQLInstanceSpecPtrOutput) ToMySQLInstanceSpecPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecPtrOutput {
	return o
}

func (o MySQLInstanceSpecPtrOutput) Elem() MySQLInstanceSpecOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) MySQLInstanceSpec { return *v }).(MySQLInstanceSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o MySQLInstanceSpecPtrOutput) ClassRef() MySQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) *MySQLInstanceSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(MySQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o MySQLInstanceSpecPtrOutput) ClassSelector() MySQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) *MySQLInstanceSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(MySQLInstanceSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired MySQL engine version, e.g. 5.7.
func (o MySQLInstanceSpecPtrOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.EngineVersion
	}).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o MySQLInstanceSpecPtrOutput) ResourceRef() MySQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) *MySQLInstanceSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(MySQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o MySQLInstanceSpecPtrOutput) WriteConnectionSecretToRef() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpec) *MySQLInstanceSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MySQLInstanceSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MySQLInstanceSpecClassRefInput is an input type that accepts MySQLInstanceSpecClassRefArgs and MySQLInstanceSpecClassRefOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassRefInput` via:
//
//          MySQLInstanceSpecClassRefArgs{...}
type MySQLInstanceSpecClassRefInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassRefOutput() MySQLInstanceSpecClassRefOutput
	ToMySQLInstanceSpecClassRefOutputWithContext(context.Context) MySQLInstanceSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MySQLInstanceSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MySQLInstanceSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassRef)(nil)).Elem()
}

func (i MySQLInstanceSpecClassRefArgs) ToMySQLInstanceSpecClassRefOutput() MySQLInstanceSpecClassRefOutput {
	return i.ToMySQLInstanceSpecClassRefOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassRefArgs) ToMySQLInstanceSpecClassRefOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassRefOutput)
}

func (i MySQLInstanceSpecClassRefArgs) ToMySQLInstanceSpecClassRefPtrOutput() MySQLInstanceSpecClassRefPtrOutput {
	return i.ToMySQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassRefArgs) ToMySQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassRefOutput).ToMySQLInstanceSpecClassRefPtrOutputWithContext(ctx)
}

// MySQLInstanceSpecClassRefPtrInput is an input type that accepts MySQLInstanceSpecClassRefArgs, MySQLInstanceSpecClassRefPtr and MySQLInstanceSpecClassRefPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassRefPtrInput` via:
//
//          MySQLInstanceSpecClassRefArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceSpecClassRefPtrInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassRefPtrOutput() MySQLInstanceSpecClassRefPtrOutput
	ToMySQLInstanceSpecClassRefPtrOutputWithContext(context.Context) MySQLInstanceSpecClassRefPtrOutput
}

type mySQLInstanceSpecClassRefPtrType MySQLInstanceSpecClassRefArgs

func MySQLInstanceSpecClassRefPtr(v *MySQLInstanceSpecClassRefArgs) MySQLInstanceSpecClassRefPtrInput {
	return (*mySQLInstanceSpecClassRefPtrType)(v)
}

func (*mySQLInstanceSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecClassRef)(nil)).Elem()
}

func (i *mySQLInstanceSpecClassRefPtrType) ToMySQLInstanceSpecClassRefPtrOutput() MySQLInstanceSpecClassRefPtrOutput {
	return i.ToMySQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceSpecClassRefPtrType) ToMySQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MySQLInstanceSpecClassRefOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassRef)(nil)).Elem()
}

func (o MySQLInstanceSpecClassRefOutput) ToMySQLInstanceSpecClassRefOutput() MySQLInstanceSpecClassRefOutput {
	return o
}

func (o MySQLInstanceSpecClassRefOutput) ToMySQLInstanceSpecClassRefOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefOutput {
	return o
}

func (o MySQLInstanceSpecClassRefOutput) ToMySQLInstanceSpecClassRefPtrOutput() MySQLInstanceSpecClassRefPtrOutput {
	return o.ToMySQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceSpecClassRefOutput) ToMySQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *MySQLInstanceSpecClassRef {
		return &v
	}).(MySQLInstanceSpecClassRefPtrOutput)
}

// API version of the referent.
func (o MySQLInstanceSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MySQLInstanceSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MySQLInstanceSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MySQLInstanceSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MySQLInstanceSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MySQLInstanceSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MySQLInstanceSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MySQLInstanceSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecClassRef)(nil)).Elem()
}

func (o MySQLInstanceSpecClassRefPtrOutput) ToMySQLInstanceSpecClassRefPtrOutput() MySQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecClassRefPtrOutput) ToMySQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecClassRefPtrOutput) Elem() MySQLInstanceSpecClassRefOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) MySQLInstanceSpecClassRef { return *v }).(MySQLInstanceSpecClassRefOutput)
}

// API version of the referent.
func (o MySQLInstanceSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MySQLInstanceSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MySQLInstanceSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MySQLInstanceSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MySQLInstanceSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MySQLInstanceSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MySQLInstanceSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MySQLInstanceSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []MySQLInstanceSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// MySQLInstanceSpecClassSelectorInput is an input type that accepts MySQLInstanceSpecClassSelectorArgs and MySQLInstanceSpecClassSelectorOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassSelectorInput` via:
//
//          MySQLInstanceSpecClassSelectorArgs{...}
type MySQLInstanceSpecClassSelectorInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassSelectorOutput() MySQLInstanceSpecClassSelectorOutput
	ToMySQLInstanceSpecClassSelectorOutputWithContext(context.Context) MySQLInstanceSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MySQLInstanceSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions MySQLInstanceSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (MySQLInstanceSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i MySQLInstanceSpecClassSelectorArgs) ToMySQLInstanceSpecClassSelectorOutput() MySQLInstanceSpecClassSelectorOutput {
	return i.ToMySQLInstanceSpecClassSelectorOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassSelectorArgs) ToMySQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorOutput)
}

func (i MySQLInstanceSpecClassSelectorArgs) ToMySQLInstanceSpecClassSelectorPtrOutput() MySQLInstanceSpecClassSelectorPtrOutput {
	return i.ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassSelectorArgs) ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorOutput).ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(ctx)
}

// MySQLInstanceSpecClassSelectorPtrInput is an input type that accepts MySQLInstanceSpecClassSelectorArgs, MySQLInstanceSpecClassSelectorPtr and MySQLInstanceSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassSelectorPtrInput` via:
//
//          MySQLInstanceSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassSelectorPtrOutput() MySQLInstanceSpecClassSelectorPtrOutput
	ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(context.Context) MySQLInstanceSpecClassSelectorPtrOutput
}

type mySQLInstanceSpecClassSelectorPtrType MySQLInstanceSpecClassSelectorArgs

func MySQLInstanceSpecClassSelectorPtr(v *MySQLInstanceSpecClassSelectorArgs) MySQLInstanceSpecClassSelectorPtrInput {
	return (*mySQLInstanceSpecClassSelectorPtrType)(v)
}

func (*mySQLInstanceSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i *mySQLInstanceSpecClassSelectorPtrType) ToMySQLInstanceSpecClassSelectorPtrOutput() MySQLInstanceSpecClassSelectorPtrOutput {
	return i.ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceSpecClassSelectorPtrType) ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MySQLInstanceSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o MySQLInstanceSpecClassSelectorOutput) ToMySQLInstanceSpecClassSelectorOutput() MySQLInstanceSpecClassSelectorOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorOutput) ToMySQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorOutput) ToMySQLInstanceSpecClassSelectorPtrOutput() MySQLInstanceSpecClassSelectorPtrOutput {
	return o.ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceSpecClassSelectorOutput) ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelector) *MySQLInstanceSpecClassSelector {
		return &v
	}).(MySQLInstanceSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MySQLInstanceSpecClassSelectorOutput) MatchExpressions() MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelector) []MySQLInstanceSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MySQLInstanceSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type MySQLInstanceSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o MySQLInstanceSpecClassSelectorPtrOutput) ToMySQLInstanceSpecClassSelectorPtrOutput() MySQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorPtrOutput) ToMySQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorPtrOutput) Elem() MySQLInstanceSpecClassSelectorOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassSelector) MySQLInstanceSpecClassSelector { return *v }).(MySQLInstanceSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MySQLInstanceSpecClassSelectorPtrOutput) MatchExpressions() MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassSelector) []MySQLInstanceSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MySQLInstanceSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MySQLInstanceSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// MySQLInstanceSpecClassSelectorMatchExpressionsInput is an input type that accepts MySQLInstanceSpecClassSelectorMatchExpressionsArgs and MySQLInstanceSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassSelectorMatchExpressionsInput` via:
//
//          MySQLInstanceSpecClassSelectorMatchExpressionsArgs{...}
type MySQLInstanceSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassSelectorMatchExpressionsOutput() MySQLInstanceSpecClassSelectorMatchExpressionsOutput
	ToMySQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MySQLInstanceSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MySQLInstanceSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i MySQLInstanceSpecClassSelectorMatchExpressionsArgs) ToMySQLInstanceSpecClassSelectorMatchExpressionsOutput() MySQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return i.ToMySQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassSelectorMatchExpressionsArgs) ToMySQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// MySQLInstanceSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts MySQLInstanceSpecClassSelectorMatchExpressionsArray and MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          MySQLInstanceSpecClassSelectorMatchExpressionsArray{ MySQLInstanceSpecClassSelectorMatchExpressionsArgs{...} }
type MySQLInstanceSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
	ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
}

type MySQLInstanceSpecClassSelectorMatchExpressionsArray []MySQLInstanceSpecClassSelectorMatchExpressionsInput

func (MySQLInstanceSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MySQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i MySQLInstanceSpecClassSelectorMatchExpressionsArray) ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassSelectorMatchExpressionsArray) ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MySQLInstanceSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o MySQLInstanceSpecClassSelectorMatchExpressionsOutput) ToMySQLInstanceSpecClassSelectorMatchExpressionsOutput() MySQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorMatchExpressionsOutput) ToMySQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o MySQLInstanceSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o MySQLInstanceSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o MySQLInstanceSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MySQLInstanceSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MySQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToMySQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) MySQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MySQLInstanceSpecClassSelectorMatchExpressions {
		return vs[0].([]MySQLInstanceSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(MySQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MySQLInstanceSpecClassSelectorMatchLabels struct {
}

// MySQLInstanceSpecClassSelectorMatchLabelsInput is an input type that accepts MySQLInstanceSpecClassSelectorMatchLabelsArgs and MySQLInstanceSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecClassSelectorMatchLabelsInput` via:
//
//          MySQLInstanceSpecClassSelectorMatchLabelsArgs{...}
type MySQLInstanceSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToMySQLInstanceSpecClassSelectorMatchLabelsOutput() MySQLInstanceSpecClassSelectorMatchLabelsOutput
	ToMySQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Context) MySQLInstanceSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MySQLInstanceSpecClassSelectorMatchLabelsArgs struct {
}

func (MySQLInstanceSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i MySQLInstanceSpecClassSelectorMatchLabelsArgs) ToMySQLInstanceSpecClassSelectorMatchLabelsOutput() MySQLInstanceSpecClassSelectorMatchLabelsOutput {
	return i.ToMySQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecClassSelectorMatchLabelsArgs) ToMySQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MySQLInstanceSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o MySQLInstanceSpecClassSelectorMatchLabelsOutput) ToMySQLInstanceSpecClassSelectorMatchLabelsOutput() MySQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o MySQLInstanceSpecClassSelectorMatchLabelsOutput) ToMySQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) MySQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MySQLInstanceSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MySQLInstanceSpecResourceRefInput is an input type that accepts MySQLInstanceSpecResourceRefArgs and MySQLInstanceSpecResourceRefOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecResourceRefInput` via:
//
//          MySQLInstanceSpecResourceRefArgs{...}
type MySQLInstanceSpecResourceRefInput interface {
	pulumi.Input

	ToMySQLInstanceSpecResourceRefOutput() MySQLInstanceSpecResourceRefOutput
	ToMySQLInstanceSpecResourceRefOutputWithContext(context.Context) MySQLInstanceSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MySQLInstanceSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MySQLInstanceSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i MySQLInstanceSpecResourceRefArgs) ToMySQLInstanceSpecResourceRefOutput() MySQLInstanceSpecResourceRefOutput {
	return i.ToMySQLInstanceSpecResourceRefOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecResourceRefArgs) ToMySQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecResourceRefOutput)
}

func (i MySQLInstanceSpecResourceRefArgs) ToMySQLInstanceSpecResourceRefPtrOutput() MySQLInstanceSpecResourceRefPtrOutput {
	return i.ToMySQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecResourceRefArgs) ToMySQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecResourceRefOutput).ToMySQLInstanceSpecResourceRefPtrOutputWithContext(ctx)
}

// MySQLInstanceSpecResourceRefPtrInput is an input type that accepts MySQLInstanceSpecResourceRefArgs, MySQLInstanceSpecResourceRefPtr and MySQLInstanceSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecResourceRefPtrInput` via:
//
//          MySQLInstanceSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceSpecResourceRefPtrInput interface {
	pulumi.Input

	ToMySQLInstanceSpecResourceRefPtrOutput() MySQLInstanceSpecResourceRefPtrOutput
	ToMySQLInstanceSpecResourceRefPtrOutputWithContext(context.Context) MySQLInstanceSpecResourceRefPtrOutput
}

type mySQLInstanceSpecResourceRefPtrType MySQLInstanceSpecResourceRefArgs

func MySQLInstanceSpecResourceRefPtr(v *MySQLInstanceSpecResourceRefArgs) MySQLInstanceSpecResourceRefPtrInput {
	return (*mySQLInstanceSpecResourceRefPtrType)(v)
}

func (*mySQLInstanceSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i *mySQLInstanceSpecResourceRefPtrType) ToMySQLInstanceSpecResourceRefPtrOutput() MySQLInstanceSpecResourceRefPtrOutput {
	return i.ToMySQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceSpecResourceRefPtrType) ToMySQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MySQLInstanceSpecResourceRefOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o MySQLInstanceSpecResourceRefOutput) ToMySQLInstanceSpecResourceRefOutput() MySQLInstanceSpecResourceRefOutput {
	return o
}

func (o MySQLInstanceSpecResourceRefOutput) ToMySQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefOutput {
	return o
}

func (o MySQLInstanceSpecResourceRefOutput) ToMySQLInstanceSpecResourceRefPtrOutput() MySQLInstanceSpecResourceRefPtrOutput {
	return o.ToMySQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceSpecResourceRefOutput) ToMySQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *MySQLInstanceSpecResourceRef {
		return &v
	}).(MySQLInstanceSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o MySQLInstanceSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MySQLInstanceSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MySQLInstanceSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MySQLInstanceSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MySQLInstanceSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MySQLInstanceSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MySQLInstanceSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MySQLInstanceSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o MySQLInstanceSpecResourceRefPtrOutput) ToMySQLInstanceSpecResourceRefPtrOutput() MySQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecResourceRefPtrOutput) ToMySQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecResourceRefPtrOutput) Elem() MySQLInstanceSpecResourceRefOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) MySQLInstanceSpecResourceRef { return *v }).(MySQLInstanceSpecResourceRefOutput)
}

// API version of the referent.
func (o MySQLInstanceSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MySQLInstanceSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MySQLInstanceSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MySQLInstanceSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MySQLInstanceSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MySQLInstanceSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MySQLInstanceSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MySQLInstanceSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// MySQLInstanceSpecWriteConnectionSecretToRefInput is an input type that accepts MySQLInstanceSpecWriteConnectionSecretToRefArgs and MySQLInstanceSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecWriteConnectionSecretToRefInput` via:
//
//          MySQLInstanceSpecWriteConnectionSecretToRefArgs{...}
type MySQLInstanceSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToMySQLInstanceSpecWriteConnectionSecretToRefOutput() MySQLInstanceSpecWriteConnectionSecretToRefOutput
	ToMySQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Context) MySQLInstanceSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MySQLInstanceSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (MySQLInstanceSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i MySQLInstanceSpecWriteConnectionSecretToRefArgs) ToMySQLInstanceSpecWriteConnectionSecretToRefOutput() MySQLInstanceSpecWriteConnectionSecretToRefOutput {
	return i.ToMySQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecWriteConnectionSecretToRefArgs) ToMySQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecWriteConnectionSecretToRefOutput)
}

func (i MySQLInstanceSpecWriteConnectionSecretToRefArgs) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutput() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceSpecWriteConnectionSecretToRefArgs) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecWriteConnectionSecretToRefOutput).ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// MySQLInstanceSpecWriteConnectionSecretToRefPtrInput is an input type that accepts MySQLInstanceSpecWriteConnectionSecretToRefArgs, MySQLInstanceSpecWriteConnectionSecretToRefPtr and MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceSpecWriteConnectionSecretToRefPtrInput` via:
//
//          MySQLInstanceSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutput() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput
	ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput
}

type mySQLInstanceSpecWriteConnectionSecretToRefPtrType MySQLInstanceSpecWriteConnectionSecretToRefArgs

func MySQLInstanceSpecWriteConnectionSecretToRefPtr(v *MySQLInstanceSpecWriteConnectionSecretToRefArgs) MySQLInstanceSpecWriteConnectionSecretToRefPtrInput {
	return (*mySQLInstanceSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*mySQLInstanceSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *mySQLInstanceSpecWriteConnectionSecretToRefPtrType) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutput() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceSpecWriteConnectionSecretToRefPtrType) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MySQLInstanceSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefOutput() MySQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutput() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v MySQLInstanceSpecWriteConnectionSecretToRef) *MySQLInstanceSpecWriteConnectionSecretToRef {
		return &v
	}).(MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o MySQLInstanceSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutput() MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToMySQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Elem() MySQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecWriteConnectionSecretToRef) MySQLInstanceSpecWriteConnectionSecretToRef {
		return *v
	}).(MySQLInstanceSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MySQLInstanceStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []MySQLInstanceStatusConditions `pulumi:"conditions"`
}

// MySQLInstanceStatusInput is an input type that accepts MySQLInstanceStatusArgs and MySQLInstanceStatusOutput values.
// You can construct a concrete instance of `MySQLInstanceStatusInput` via:
//
//          MySQLInstanceStatusArgs{...}
type MySQLInstanceStatusInput interface {
	pulumi.Input

	ToMySQLInstanceStatusOutput() MySQLInstanceStatusOutput
	ToMySQLInstanceStatusOutputWithContext(context.Context) MySQLInstanceStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MySQLInstanceStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions MySQLInstanceStatusConditionsArrayInput `pulumi:"conditions"`
}

func (MySQLInstanceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceStatus)(nil)).Elem()
}

func (i MySQLInstanceStatusArgs) ToMySQLInstanceStatusOutput() MySQLInstanceStatusOutput {
	return i.ToMySQLInstanceStatusOutputWithContext(context.Background())
}

func (i MySQLInstanceStatusArgs) ToMySQLInstanceStatusOutputWithContext(ctx context.Context) MySQLInstanceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceStatusOutput)
}

func (i MySQLInstanceStatusArgs) ToMySQLInstanceStatusPtrOutput() MySQLInstanceStatusPtrOutput {
	return i.ToMySQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i MySQLInstanceStatusArgs) ToMySQLInstanceStatusPtrOutputWithContext(ctx context.Context) MySQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceStatusOutput).ToMySQLInstanceStatusPtrOutputWithContext(ctx)
}

// MySQLInstanceStatusPtrInput is an input type that accepts MySQLInstanceStatusArgs, MySQLInstanceStatusPtr and MySQLInstanceStatusPtrOutput values.
// You can construct a concrete instance of `MySQLInstanceStatusPtrInput` via:
//
//          MySQLInstanceStatusArgs{...}
//
//  or:
//
//          nil
type MySQLInstanceStatusPtrInput interface {
	pulumi.Input

	ToMySQLInstanceStatusPtrOutput() MySQLInstanceStatusPtrOutput
	ToMySQLInstanceStatusPtrOutputWithContext(context.Context) MySQLInstanceStatusPtrOutput
}

type mySQLInstanceStatusPtrType MySQLInstanceStatusArgs

func MySQLInstanceStatusPtr(v *MySQLInstanceStatusArgs) MySQLInstanceStatusPtrInput {
	return (*mySQLInstanceStatusPtrType)(v)
}

func (*mySQLInstanceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceStatus)(nil)).Elem()
}

func (i *mySQLInstanceStatusPtrType) ToMySQLInstanceStatusPtrOutput() MySQLInstanceStatusPtrOutput {
	return i.ToMySQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i *mySQLInstanceStatusPtrType) ToMySQLInstanceStatusPtrOutputWithContext(ctx context.Context) MySQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MySQLInstanceStatusOutput struct{ *pulumi.OutputState }

func (MySQLInstanceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceStatus)(nil)).Elem()
}

func (o MySQLInstanceStatusOutput) ToMySQLInstanceStatusOutput() MySQLInstanceStatusOutput {
	return o
}

func (o MySQLInstanceStatusOutput) ToMySQLInstanceStatusOutputWithContext(ctx context.Context) MySQLInstanceStatusOutput {
	return o
}

func (o MySQLInstanceStatusOutput) ToMySQLInstanceStatusPtrOutput() MySQLInstanceStatusPtrOutput {
	return o.ToMySQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (o MySQLInstanceStatusOutput) ToMySQLInstanceStatusPtrOutputWithContext(ctx context.Context) MySQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v MySQLInstanceStatus) *MySQLInstanceStatus {
		return &v
	}).(MySQLInstanceStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o MySQLInstanceStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o MySQLInstanceStatusOutput) Conditions() MySQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v MySQLInstanceStatus) []MySQLInstanceStatusConditions { return v.Conditions }).(MySQLInstanceStatusConditionsArrayOutput)
}

type MySQLInstanceStatusPtrOutput struct{ *pulumi.OutputState }

func (MySQLInstanceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLInstanceStatus)(nil)).Elem()
}

func (o MySQLInstanceStatusPtrOutput) ToMySQLInstanceStatusPtrOutput() MySQLInstanceStatusPtrOutput {
	return o
}

func (o MySQLInstanceStatusPtrOutput) ToMySQLInstanceStatusPtrOutputWithContext(ctx context.Context) MySQLInstanceStatusPtrOutput {
	return o
}

func (o MySQLInstanceStatusPtrOutput) Elem() MySQLInstanceStatusOutput {
	return o.ApplyT(func(v *MySQLInstanceStatus) MySQLInstanceStatus { return *v }).(MySQLInstanceStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o MySQLInstanceStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLInstanceStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o MySQLInstanceStatusPtrOutput) Conditions() MySQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *MySQLInstanceStatus) []MySQLInstanceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MySQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type MySQLInstanceStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// MySQLInstanceStatusConditionsInput is an input type that accepts MySQLInstanceStatusConditionsArgs and MySQLInstanceStatusConditionsOutput values.
// You can construct a concrete instance of `MySQLInstanceStatusConditionsInput` via:
//
//          MySQLInstanceStatusConditionsArgs{...}
type MySQLInstanceStatusConditionsInput interface {
	pulumi.Input

	ToMySQLInstanceStatusConditionsOutput() MySQLInstanceStatusConditionsOutput
	ToMySQLInstanceStatusConditionsOutputWithContext(context.Context) MySQLInstanceStatusConditionsOutput
}

// A Condition that may apply to a resource.
type MySQLInstanceStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySQLInstanceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceStatusConditions)(nil)).Elem()
}

func (i MySQLInstanceStatusConditionsArgs) ToMySQLInstanceStatusConditionsOutput() MySQLInstanceStatusConditionsOutput {
	return i.ToMySQLInstanceStatusConditionsOutputWithContext(context.Background())
}

func (i MySQLInstanceStatusConditionsArgs) ToMySQLInstanceStatusConditionsOutputWithContext(ctx context.Context) MySQLInstanceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceStatusConditionsOutput)
}

// MySQLInstanceStatusConditionsArrayInput is an input type that accepts MySQLInstanceStatusConditionsArray and MySQLInstanceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `MySQLInstanceStatusConditionsArrayInput` via:
//
//          MySQLInstanceStatusConditionsArray{ MySQLInstanceStatusConditionsArgs{...} }
type MySQLInstanceStatusConditionsArrayInput interface {
	pulumi.Input

	ToMySQLInstanceStatusConditionsArrayOutput() MySQLInstanceStatusConditionsArrayOutput
	ToMySQLInstanceStatusConditionsArrayOutputWithContext(context.Context) MySQLInstanceStatusConditionsArrayOutput
}

type MySQLInstanceStatusConditionsArray []MySQLInstanceStatusConditionsInput

func (MySQLInstanceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MySQLInstanceStatusConditions)(nil)).Elem()
}

func (i MySQLInstanceStatusConditionsArray) ToMySQLInstanceStatusConditionsArrayOutput() MySQLInstanceStatusConditionsArrayOutput {
	return i.ToMySQLInstanceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i MySQLInstanceStatusConditionsArray) ToMySQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) MySQLInstanceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type MySQLInstanceStatusConditionsOutput struct{ *pulumi.OutputState }

func (MySQLInstanceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySQLInstanceStatusConditions)(nil)).Elem()
}

func (o MySQLInstanceStatusConditionsOutput) ToMySQLInstanceStatusConditionsOutput() MySQLInstanceStatusConditionsOutput {
	return o
}

func (o MySQLInstanceStatusConditionsOutput) ToMySQLInstanceStatusConditionsOutputWithContext(ctx context.Context) MySQLInstanceStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o MySQLInstanceStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o MySQLInstanceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySQLInstanceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o MySQLInstanceStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o MySQLInstanceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o MySQLInstanceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySQLInstanceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MySQLInstanceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (MySQLInstanceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MySQLInstanceStatusConditions)(nil)).Elem()
}

func (o MySQLInstanceStatusConditionsArrayOutput) ToMySQLInstanceStatusConditionsArrayOutput() MySQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o MySQLInstanceStatusConditionsArrayOutput) ToMySQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) MySQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o MySQLInstanceStatusConditionsArrayOutput) Index(i pulumi.IntInput) MySQLInstanceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MySQLInstanceStatusConditions {
		return vs[0].([]MySQLInstanceStatusConditions)[vs[1].(int)]
	}).(MySQLInstanceStatusConditionsOutput)
}

// A NoSQLInstance is a portable resource claim that may be satisfied by binding to a NoSQL managed resource such as an AWS DynamoDB or an Azure CosmosDB instance.
type NoSQLInstanceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
	Spec *NoSQLInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *NoSQLInstanceStatus `pulumi:"status"`
}

// NoSQLInstanceTypeInput is an input type that accepts NoSQLInstanceTypeArgs and NoSQLInstanceTypeOutput values.
// You can construct a concrete instance of `NoSQLInstanceTypeInput` via:
//
//          NoSQLInstanceTypeArgs{...}
type NoSQLInstanceTypeInput interface {
	pulumi.Input

	ToNoSQLInstanceTypeOutput() NoSQLInstanceTypeOutput
	ToNoSQLInstanceTypeOutputWithContext(context.Context) NoSQLInstanceTypeOutput
}

// A NoSQLInstance is a portable resource claim that may be satisfied by binding to a NoSQL managed resource such as an AWS DynamoDB or an Azure CosmosDB instance.
type NoSQLInstanceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
	Spec NoSQLInstanceSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status NoSQLInstanceStatusPtrInput `pulumi:"status"`
}

func (NoSQLInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceType)(nil)).Elem()
}

func (i NoSQLInstanceTypeArgs) ToNoSQLInstanceTypeOutput() NoSQLInstanceTypeOutput {
	return i.ToNoSQLInstanceTypeOutputWithContext(context.Background())
}

func (i NoSQLInstanceTypeArgs) ToNoSQLInstanceTypeOutputWithContext(ctx context.Context) NoSQLInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceTypeOutput)
}

// A NoSQLInstance is a portable resource claim that may be satisfied by binding to a NoSQL managed resource such as an AWS DynamoDB or an Azure CosmosDB instance.
type NoSQLInstanceTypeOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceType)(nil)).Elem()
}

func (o NoSQLInstanceTypeOutput) ToNoSQLInstanceTypeOutput() NoSQLInstanceTypeOutput {
	return o
}

func (o NoSQLInstanceTypeOutput) ToNoSQLInstanceTypeOutputWithContext(ctx context.Context) NoSQLInstanceTypeOutput {
	return o
}

func (o NoSQLInstanceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o NoSQLInstanceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o NoSQLInstanceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
func (o NoSQLInstanceTypeOutput) Spec() NoSQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceType) *NoSQLInstanceSpec { return v.Spec }).(NoSQLInstanceSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o NoSQLInstanceTypeOutput) Status() NoSQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceType) *NoSQLInstanceStatus { return v.Status }).(NoSQLInstanceStatusPtrOutput)
}

type NoSQLInstanceMetadata struct {
}

// NoSQLInstanceMetadataInput is an input type that accepts NoSQLInstanceMetadataArgs and NoSQLInstanceMetadataOutput values.
// You can construct a concrete instance of `NoSQLInstanceMetadataInput` via:
//
//          NoSQLInstanceMetadataArgs{...}
type NoSQLInstanceMetadataInput interface {
	pulumi.Input

	ToNoSQLInstanceMetadataOutput() NoSQLInstanceMetadataOutput
	ToNoSQLInstanceMetadataOutputWithContext(context.Context) NoSQLInstanceMetadataOutput
}

type NoSQLInstanceMetadataArgs struct {
}

func (NoSQLInstanceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceMetadata)(nil)).Elem()
}

func (i NoSQLInstanceMetadataArgs) ToNoSQLInstanceMetadataOutput() NoSQLInstanceMetadataOutput {
	return i.ToNoSQLInstanceMetadataOutputWithContext(context.Background())
}

func (i NoSQLInstanceMetadataArgs) ToNoSQLInstanceMetadataOutputWithContext(ctx context.Context) NoSQLInstanceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceMetadataOutput)
}

type NoSQLInstanceMetadataOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceMetadata)(nil)).Elem()
}

func (o NoSQLInstanceMetadataOutput) ToNoSQLInstanceMetadataOutput() NoSQLInstanceMetadataOutput {
	return o
}

func (o NoSQLInstanceMetadataOutput) ToNoSQLInstanceMetadataOutputWithContext(ctx context.Context) NoSQLInstanceMetadataOutput {
	return o
}

// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
type NoSQLInstanceSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *NoSQLInstanceSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *NoSQLInstanceSpecClassSelector `pulumi:"classSelector"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *NoSQLInstanceSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *NoSQLInstanceSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// NoSQLInstanceSpecInput is an input type that accepts NoSQLInstanceSpecArgs and NoSQLInstanceSpecOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecInput` via:
//
//          NoSQLInstanceSpecArgs{...}
type NoSQLInstanceSpecInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecOutput() NoSQLInstanceSpecOutput
	ToNoSQLInstanceSpecOutputWithContext(context.Context) NoSQLInstanceSpecOutput
}

// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
type NoSQLInstanceSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef NoSQLInstanceSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector NoSQLInstanceSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef NoSQLInstanceSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef NoSQLInstanceSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (NoSQLInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpec)(nil)).Elem()
}

func (i NoSQLInstanceSpecArgs) ToNoSQLInstanceSpecOutput() NoSQLInstanceSpecOutput {
	return i.ToNoSQLInstanceSpecOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecArgs) ToNoSQLInstanceSpecOutputWithContext(ctx context.Context) NoSQLInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecOutput)
}

func (i NoSQLInstanceSpecArgs) ToNoSQLInstanceSpecPtrOutput() NoSQLInstanceSpecPtrOutput {
	return i.ToNoSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecArgs) ToNoSQLInstanceSpecPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecOutput).ToNoSQLInstanceSpecPtrOutputWithContext(ctx)
}

// NoSQLInstanceSpecPtrInput is an input type that accepts NoSQLInstanceSpecArgs, NoSQLInstanceSpecPtr and NoSQLInstanceSpecPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecPtrInput` via:
//
//          NoSQLInstanceSpecArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceSpecPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecPtrOutput() NoSQLInstanceSpecPtrOutput
	ToNoSQLInstanceSpecPtrOutputWithContext(context.Context) NoSQLInstanceSpecPtrOutput
}

type noSQLInstanceSpecPtrType NoSQLInstanceSpecArgs

func NoSQLInstanceSpecPtr(v *NoSQLInstanceSpecArgs) NoSQLInstanceSpecPtrInput {
	return (*noSQLInstanceSpecPtrType)(v)
}

func (*noSQLInstanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpec)(nil)).Elem()
}

func (i *noSQLInstanceSpecPtrType) ToNoSQLInstanceSpecPtrOutput() NoSQLInstanceSpecPtrOutput {
	return i.ToNoSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceSpecPtrType) ToNoSQLInstanceSpecPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecPtrOutput)
}

// NoSQLInstanceSpec specifies the desired state of a NoSQLInstance.
type NoSQLInstanceSpecOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpec)(nil)).Elem()
}

func (o NoSQLInstanceSpecOutput) ToNoSQLInstanceSpecOutput() NoSQLInstanceSpecOutput {
	return o
}

func (o NoSQLInstanceSpecOutput) ToNoSQLInstanceSpecOutputWithContext(ctx context.Context) NoSQLInstanceSpecOutput {
	return o
}

func (o NoSQLInstanceSpecOutput) ToNoSQLInstanceSpecPtrOutput() NoSQLInstanceSpecPtrOutput {
	return o.ToNoSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceSpecOutput) ToNoSQLInstanceSpecPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpec) *NoSQLInstanceSpec {
		return &v
	}).(NoSQLInstanceSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o NoSQLInstanceSpecOutput) ClassRef() NoSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpec) *NoSQLInstanceSpecClassRef { return v.ClassRef }).(NoSQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o NoSQLInstanceSpecOutput) ClassSelector() NoSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpec) *NoSQLInstanceSpecClassSelector { return v.ClassSelector }).(NoSQLInstanceSpecClassSelectorPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o NoSQLInstanceSpecOutput) ResourceRef() NoSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpec) *NoSQLInstanceSpecResourceRef { return v.ResourceRef }).(NoSQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o NoSQLInstanceSpecOutput) WriteConnectionSecretToRef() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpec) *NoSQLInstanceSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

type NoSQLInstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpec)(nil)).Elem()
}

func (o NoSQLInstanceSpecPtrOutput) ToNoSQLInstanceSpecPtrOutput() NoSQLInstanceSpecPtrOutput {
	return o
}

func (o NoSQLInstanceSpecPtrOutput) ToNoSQLInstanceSpecPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecPtrOutput {
	return o
}

func (o NoSQLInstanceSpecPtrOutput) Elem() NoSQLInstanceSpecOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpec) NoSQLInstanceSpec { return *v }).(NoSQLInstanceSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o NoSQLInstanceSpecPtrOutput) ClassRef() NoSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpec) *NoSQLInstanceSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(NoSQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o NoSQLInstanceSpecPtrOutput) ClassSelector() NoSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpec) *NoSQLInstanceSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(NoSQLInstanceSpecClassSelectorPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o NoSQLInstanceSpecPtrOutput) ResourceRef() NoSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpec) *NoSQLInstanceSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(NoSQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o NoSQLInstanceSpecPtrOutput) WriteConnectionSecretToRef() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpec) *NoSQLInstanceSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type NoSQLInstanceSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// NoSQLInstanceSpecClassRefInput is an input type that accepts NoSQLInstanceSpecClassRefArgs and NoSQLInstanceSpecClassRefOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassRefInput` via:
//
//          NoSQLInstanceSpecClassRefArgs{...}
type NoSQLInstanceSpecClassRefInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassRefOutput() NoSQLInstanceSpecClassRefOutput
	ToNoSQLInstanceSpecClassRefOutputWithContext(context.Context) NoSQLInstanceSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type NoSQLInstanceSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (NoSQLInstanceSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassRef)(nil)).Elem()
}

func (i NoSQLInstanceSpecClassRefArgs) ToNoSQLInstanceSpecClassRefOutput() NoSQLInstanceSpecClassRefOutput {
	return i.ToNoSQLInstanceSpecClassRefOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassRefArgs) ToNoSQLInstanceSpecClassRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassRefOutput)
}

func (i NoSQLInstanceSpecClassRefArgs) ToNoSQLInstanceSpecClassRefPtrOutput() NoSQLInstanceSpecClassRefPtrOutput {
	return i.ToNoSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassRefArgs) ToNoSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassRefOutput).ToNoSQLInstanceSpecClassRefPtrOutputWithContext(ctx)
}

// NoSQLInstanceSpecClassRefPtrInput is an input type that accepts NoSQLInstanceSpecClassRefArgs, NoSQLInstanceSpecClassRefPtr and NoSQLInstanceSpecClassRefPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassRefPtrInput` via:
//
//          NoSQLInstanceSpecClassRefArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceSpecClassRefPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassRefPtrOutput() NoSQLInstanceSpecClassRefPtrOutput
	ToNoSQLInstanceSpecClassRefPtrOutputWithContext(context.Context) NoSQLInstanceSpecClassRefPtrOutput
}

type noSQLInstanceSpecClassRefPtrType NoSQLInstanceSpecClassRefArgs

func NoSQLInstanceSpecClassRefPtr(v *NoSQLInstanceSpecClassRefArgs) NoSQLInstanceSpecClassRefPtrInput {
	return (*noSQLInstanceSpecClassRefPtrType)(v)
}

func (*noSQLInstanceSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecClassRef)(nil)).Elem()
}

func (i *noSQLInstanceSpecClassRefPtrType) ToNoSQLInstanceSpecClassRefPtrOutput() NoSQLInstanceSpecClassRefPtrOutput {
	return i.ToNoSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceSpecClassRefPtrType) ToNoSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type NoSQLInstanceSpecClassRefOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassRefOutput) ToNoSQLInstanceSpecClassRefOutput() NoSQLInstanceSpecClassRefOutput {
	return o
}

func (o NoSQLInstanceSpecClassRefOutput) ToNoSQLInstanceSpecClassRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefOutput {
	return o
}

func (o NoSQLInstanceSpecClassRefOutput) ToNoSQLInstanceSpecClassRefPtrOutput() NoSQLInstanceSpecClassRefPtrOutput {
	return o.ToNoSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceSpecClassRefOutput) ToNoSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *NoSQLInstanceSpecClassRef {
		return &v
	}).(NoSQLInstanceSpecClassRefPtrOutput)
}

// API version of the referent.
func (o NoSQLInstanceSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o NoSQLInstanceSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NoSQLInstanceSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o NoSQLInstanceSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o NoSQLInstanceSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o NoSQLInstanceSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o NoSQLInstanceSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type NoSQLInstanceSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecClassRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassRefPtrOutput) ToNoSQLInstanceSpecClassRefPtrOutput() NoSQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecClassRefPtrOutput) ToNoSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecClassRefPtrOutput) Elem() NoSQLInstanceSpecClassRefOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) NoSQLInstanceSpecClassRef { return *v }).(NoSQLInstanceSpecClassRefOutput)
}

// API version of the referent.
func (o NoSQLInstanceSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o NoSQLInstanceSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NoSQLInstanceSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o NoSQLInstanceSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o NoSQLInstanceSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o NoSQLInstanceSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o NoSQLInstanceSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type NoSQLInstanceSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []NoSQLInstanceSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// NoSQLInstanceSpecClassSelectorInput is an input type that accepts NoSQLInstanceSpecClassSelectorArgs and NoSQLInstanceSpecClassSelectorOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassSelectorInput` via:
//
//          NoSQLInstanceSpecClassSelectorArgs{...}
type NoSQLInstanceSpecClassSelectorInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassSelectorOutput() NoSQLInstanceSpecClassSelectorOutput
	ToNoSQLInstanceSpecClassSelectorOutputWithContext(context.Context) NoSQLInstanceSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type NoSQLInstanceSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions NoSQLInstanceSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (NoSQLInstanceSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i NoSQLInstanceSpecClassSelectorArgs) ToNoSQLInstanceSpecClassSelectorOutput() NoSQLInstanceSpecClassSelectorOutput {
	return i.ToNoSQLInstanceSpecClassSelectorOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassSelectorArgs) ToNoSQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorOutput)
}

func (i NoSQLInstanceSpecClassSelectorArgs) ToNoSQLInstanceSpecClassSelectorPtrOutput() NoSQLInstanceSpecClassSelectorPtrOutput {
	return i.ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassSelectorArgs) ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorOutput).ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx)
}

// NoSQLInstanceSpecClassSelectorPtrInput is an input type that accepts NoSQLInstanceSpecClassSelectorArgs, NoSQLInstanceSpecClassSelectorPtr and NoSQLInstanceSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassSelectorPtrInput` via:
//
//          NoSQLInstanceSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassSelectorPtrOutput() NoSQLInstanceSpecClassSelectorPtrOutput
	ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Context) NoSQLInstanceSpecClassSelectorPtrOutput
}

type noSQLInstanceSpecClassSelectorPtrType NoSQLInstanceSpecClassSelectorArgs

func NoSQLInstanceSpecClassSelectorPtr(v *NoSQLInstanceSpecClassSelectorArgs) NoSQLInstanceSpecClassSelectorPtrInput {
	return (*noSQLInstanceSpecClassSelectorPtrType)(v)
}

func (*noSQLInstanceSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i *noSQLInstanceSpecClassSelectorPtrType) ToNoSQLInstanceSpecClassSelectorPtrOutput() NoSQLInstanceSpecClassSelectorPtrOutput {
	return i.ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceSpecClassSelectorPtrType) ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type NoSQLInstanceSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassSelectorOutput) ToNoSQLInstanceSpecClassSelectorOutput() NoSQLInstanceSpecClassSelectorOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorOutput) ToNoSQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorOutput) ToNoSQLInstanceSpecClassSelectorPtrOutput() NoSQLInstanceSpecClassSelectorPtrOutput {
	return o.ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceSpecClassSelectorOutput) ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelector) *NoSQLInstanceSpecClassSelector {
		return &v
	}).(NoSQLInstanceSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o NoSQLInstanceSpecClassSelectorOutput) MatchExpressions() NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelector) []NoSQLInstanceSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o NoSQLInstanceSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type NoSQLInstanceSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassSelectorPtrOutput) ToNoSQLInstanceSpecClassSelectorPtrOutput() NoSQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorPtrOutput) ToNoSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorPtrOutput) Elem() NoSQLInstanceSpecClassSelectorOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassSelector) NoSQLInstanceSpecClassSelector { return *v }).(NoSQLInstanceSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o NoSQLInstanceSpecClassSelectorPtrOutput) MatchExpressions() NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassSelector) []NoSQLInstanceSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o NoSQLInstanceSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NoSQLInstanceSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// NoSQLInstanceSpecClassSelectorMatchExpressionsInput is an input type that accepts NoSQLInstanceSpecClassSelectorMatchExpressionsArgs and NoSQLInstanceSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassSelectorMatchExpressionsInput` via:
//
//          NoSQLInstanceSpecClassSelectorMatchExpressionsArgs{...}
type NoSQLInstanceSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsOutput
	ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NoSQLInstanceSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (NoSQLInstanceSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i NoSQLInstanceSpecClassSelectorMatchExpressionsArgs) ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return i.ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassSelectorMatchExpressionsArgs) ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// NoSQLInstanceSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts NoSQLInstanceSpecClassSelectorMatchExpressionsArray and NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          NoSQLInstanceSpecClassSelectorMatchExpressionsArray{ NoSQLInstanceSpecClassSelectorMatchExpressionsArgs{...} }
type NoSQLInstanceSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
	ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
}

type NoSQLInstanceSpecClassSelectorMatchExpressionsArray []NoSQLInstanceSpecClassSelectorMatchExpressionsInput

func (NoSQLInstanceSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NoSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i NoSQLInstanceSpecClassSelectorMatchExpressionsArray) ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassSelectorMatchExpressionsArray) ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type NoSQLInstanceSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) ToNoSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o NoSQLInstanceSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NoSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToNoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) NoSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NoSQLInstanceSpecClassSelectorMatchExpressions {
		return vs[0].([]NoSQLInstanceSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(NoSQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type NoSQLInstanceSpecClassSelectorMatchLabels struct {
}

// NoSQLInstanceSpecClassSelectorMatchLabelsInput is an input type that accepts NoSQLInstanceSpecClassSelectorMatchLabelsArgs and NoSQLInstanceSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecClassSelectorMatchLabelsInput` via:
//
//          NoSQLInstanceSpecClassSelectorMatchLabelsArgs{...}
type NoSQLInstanceSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecClassSelectorMatchLabelsOutput() NoSQLInstanceSpecClassSelectorMatchLabelsOutput
	ToNoSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Context) NoSQLInstanceSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type NoSQLInstanceSpecClassSelectorMatchLabelsArgs struct {
}

func (NoSQLInstanceSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i NoSQLInstanceSpecClassSelectorMatchLabelsArgs) ToNoSQLInstanceSpecClassSelectorMatchLabelsOutput() NoSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return i.ToNoSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecClassSelectorMatchLabelsArgs) ToNoSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type NoSQLInstanceSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o NoSQLInstanceSpecClassSelectorMatchLabelsOutput) ToNoSQLInstanceSpecClassSelectorMatchLabelsOutput() NoSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o NoSQLInstanceSpecClassSelectorMatchLabelsOutput) ToNoSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) NoSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type NoSQLInstanceSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// NoSQLInstanceSpecResourceRefInput is an input type that accepts NoSQLInstanceSpecResourceRefArgs and NoSQLInstanceSpecResourceRefOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecResourceRefInput` via:
//
//          NoSQLInstanceSpecResourceRefArgs{...}
type NoSQLInstanceSpecResourceRefInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecResourceRefOutput() NoSQLInstanceSpecResourceRefOutput
	ToNoSQLInstanceSpecResourceRefOutputWithContext(context.Context) NoSQLInstanceSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type NoSQLInstanceSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (NoSQLInstanceSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i NoSQLInstanceSpecResourceRefArgs) ToNoSQLInstanceSpecResourceRefOutput() NoSQLInstanceSpecResourceRefOutput {
	return i.ToNoSQLInstanceSpecResourceRefOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecResourceRefArgs) ToNoSQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecResourceRefOutput)
}

func (i NoSQLInstanceSpecResourceRefArgs) ToNoSQLInstanceSpecResourceRefPtrOutput() NoSQLInstanceSpecResourceRefPtrOutput {
	return i.ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecResourceRefArgs) ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecResourceRefOutput).ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(ctx)
}

// NoSQLInstanceSpecResourceRefPtrInput is an input type that accepts NoSQLInstanceSpecResourceRefArgs, NoSQLInstanceSpecResourceRefPtr and NoSQLInstanceSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecResourceRefPtrInput` via:
//
//          NoSQLInstanceSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceSpecResourceRefPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecResourceRefPtrOutput() NoSQLInstanceSpecResourceRefPtrOutput
	ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(context.Context) NoSQLInstanceSpecResourceRefPtrOutput
}

type noSQLInstanceSpecResourceRefPtrType NoSQLInstanceSpecResourceRefArgs

func NoSQLInstanceSpecResourceRefPtr(v *NoSQLInstanceSpecResourceRefArgs) NoSQLInstanceSpecResourceRefPtrInput {
	return (*noSQLInstanceSpecResourceRefPtrType)(v)
}

func (*noSQLInstanceSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i *noSQLInstanceSpecResourceRefPtrType) ToNoSQLInstanceSpecResourceRefPtrOutput() NoSQLInstanceSpecResourceRefPtrOutput {
	return i.ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceSpecResourceRefPtrType) ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type NoSQLInstanceSpecResourceRefOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecResourceRefOutput) ToNoSQLInstanceSpecResourceRefOutput() NoSQLInstanceSpecResourceRefOutput {
	return o
}

func (o NoSQLInstanceSpecResourceRefOutput) ToNoSQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefOutput {
	return o
}

func (o NoSQLInstanceSpecResourceRefOutput) ToNoSQLInstanceSpecResourceRefPtrOutput() NoSQLInstanceSpecResourceRefPtrOutput {
	return o.ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceSpecResourceRefOutput) ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *NoSQLInstanceSpecResourceRef {
		return &v
	}).(NoSQLInstanceSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o NoSQLInstanceSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o NoSQLInstanceSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NoSQLInstanceSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o NoSQLInstanceSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o NoSQLInstanceSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o NoSQLInstanceSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o NoSQLInstanceSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type NoSQLInstanceSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecResourceRefPtrOutput) ToNoSQLInstanceSpecResourceRefPtrOutput() NoSQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecResourceRefPtrOutput) ToNoSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecResourceRefPtrOutput) Elem() NoSQLInstanceSpecResourceRefOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) NoSQLInstanceSpecResourceRef { return *v }).(NoSQLInstanceSpecResourceRefOutput)
}

// API version of the referent.
func (o NoSQLInstanceSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o NoSQLInstanceSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o NoSQLInstanceSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o NoSQLInstanceSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o NoSQLInstanceSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o NoSQLInstanceSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o NoSQLInstanceSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type NoSQLInstanceSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// NoSQLInstanceSpecWriteConnectionSecretToRefInput is an input type that accepts NoSQLInstanceSpecWriteConnectionSecretToRefArgs and NoSQLInstanceSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecWriteConnectionSecretToRefInput` via:
//
//          NoSQLInstanceSpecWriteConnectionSecretToRefArgs{...}
type NoSQLInstanceSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecWriteConnectionSecretToRefOutput() NoSQLInstanceSpecWriteConnectionSecretToRefOutput
	ToNoSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type NoSQLInstanceSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NoSQLInstanceSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i NoSQLInstanceSpecWriteConnectionSecretToRefArgs) ToNoSQLInstanceSpecWriteConnectionSecretToRefOutput() NoSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return i.ToNoSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecWriteConnectionSecretToRefArgs) ToNoSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecWriteConnectionSecretToRefOutput)
}

func (i NoSQLInstanceSpecWriteConnectionSecretToRefArgs) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceSpecWriteConnectionSecretToRefArgs) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecWriteConnectionSecretToRefOutput).ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// NoSQLInstanceSpecWriteConnectionSecretToRefPtrInput is an input type that accepts NoSQLInstanceSpecWriteConnectionSecretToRefArgs, NoSQLInstanceSpecWriteConnectionSecretToRefPtr and NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceSpecWriteConnectionSecretToRefPtrInput` via:
//
//          NoSQLInstanceSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput
	ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput
}

type noSQLInstanceSpecWriteConnectionSecretToRefPtrType NoSQLInstanceSpecWriteConnectionSecretToRefArgs

func NoSQLInstanceSpecWriteConnectionSecretToRefPtr(v *NoSQLInstanceSpecWriteConnectionSecretToRefArgs) NoSQLInstanceSpecWriteConnectionSecretToRefPtrInput {
	return (*noSQLInstanceSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*noSQLInstanceSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *noSQLInstanceSpecWriteConnectionSecretToRefPtrType) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceSpecWriteConnectionSecretToRefPtrType) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type NoSQLInstanceSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefOutput() NoSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecWriteConnectionSecretToRef) *NoSQLInstanceSpecWriteConnectionSecretToRef {
		return &v
	}).(NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o NoSQLInstanceSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToNoSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Elem() NoSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecWriteConnectionSecretToRef) NoSQLInstanceSpecWriteConnectionSecretToRef {
		return *v
	}).(NoSQLInstanceSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type NoSQLInstanceStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []NoSQLInstanceStatusConditions `pulumi:"conditions"`
}

// NoSQLInstanceStatusInput is an input type that accepts NoSQLInstanceStatusArgs and NoSQLInstanceStatusOutput values.
// You can construct a concrete instance of `NoSQLInstanceStatusInput` via:
//
//          NoSQLInstanceStatusArgs{...}
type NoSQLInstanceStatusInput interface {
	pulumi.Input

	ToNoSQLInstanceStatusOutput() NoSQLInstanceStatusOutput
	ToNoSQLInstanceStatusOutputWithContext(context.Context) NoSQLInstanceStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type NoSQLInstanceStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions NoSQLInstanceStatusConditionsArrayInput `pulumi:"conditions"`
}

func (NoSQLInstanceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceStatus)(nil)).Elem()
}

func (i NoSQLInstanceStatusArgs) ToNoSQLInstanceStatusOutput() NoSQLInstanceStatusOutput {
	return i.ToNoSQLInstanceStatusOutputWithContext(context.Background())
}

func (i NoSQLInstanceStatusArgs) ToNoSQLInstanceStatusOutputWithContext(ctx context.Context) NoSQLInstanceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceStatusOutput)
}

func (i NoSQLInstanceStatusArgs) ToNoSQLInstanceStatusPtrOutput() NoSQLInstanceStatusPtrOutput {
	return i.ToNoSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i NoSQLInstanceStatusArgs) ToNoSQLInstanceStatusPtrOutputWithContext(ctx context.Context) NoSQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceStatusOutput).ToNoSQLInstanceStatusPtrOutputWithContext(ctx)
}

// NoSQLInstanceStatusPtrInput is an input type that accepts NoSQLInstanceStatusArgs, NoSQLInstanceStatusPtr and NoSQLInstanceStatusPtrOutput values.
// You can construct a concrete instance of `NoSQLInstanceStatusPtrInput` via:
//
//          NoSQLInstanceStatusArgs{...}
//
//  or:
//
//          nil
type NoSQLInstanceStatusPtrInput interface {
	pulumi.Input

	ToNoSQLInstanceStatusPtrOutput() NoSQLInstanceStatusPtrOutput
	ToNoSQLInstanceStatusPtrOutputWithContext(context.Context) NoSQLInstanceStatusPtrOutput
}

type noSQLInstanceStatusPtrType NoSQLInstanceStatusArgs

func NoSQLInstanceStatusPtr(v *NoSQLInstanceStatusArgs) NoSQLInstanceStatusPtrInput {
	return (*noSQLInstanceStatusPtrType)(v)
}

func (*noSQLInstanceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceStatus)(nil)).Elem()
}

func (i *noSQLInstanceStatusPtrType) ToNoSQLInstanceStatusPtrOutput() NoSQLInstanceStatusPtrOutput {
	return i.ToNoSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i *noSQLInstanceStatusPtrType) ToNoSQLInstanceStatusPtrOutputWithContext(ctx context.Context) NoSQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type NoSQLInstanceStatusOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceStatus)(nil)).Elem()
}

func (o NoSQLInstanceStatusOutput) ToNoSQLInstanceStatusOutput() NoSQLInstanceStatusOutput {
	return o
}

func (o NoSQLInstanceStatusOutput) ToNoSQLInstanceStatusOutputWithContext(ctx context.Context) NoSQLInstanceStatusOutput {
	return o
}

func (o NoSQLInstanceStatusOutput) ToNoSQLInstanceStatusPtrOutput() NoSQLInstanceStatusPtrOutput {
	return o.ToNoSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (o NoSQLInstanceStatusOutput) ToNoSQLInstanceStatusPtrOutputWithContext(ctx context.Context) NoSQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceStatus) *NoSQLInstanceStatus {
		return &v
	}).(NoSQLInstanceStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o NoSQLInstanceStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o NoSQLInstanceStatusOutput) Conditions() NoSQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v NoSQLInstanceStatus) []NoSQLInstanceStatusConditions { return v.Conditions }).(NoSQLInstanceStatusConditionsArrayOutput)
}

type NoSQLInstanceStatusPtrOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoSQLInstanceStatus)(nil)).Elem()
}

func (o NoSQLInstanceStatusPtrOutput) ToNoSQLInstanceStatusPtrOutput() NoSQLInstanceStatusPtrOutput {
	return o
}

func (o NoSQLInstanceStatusPtrOutput) ToNoSQLInstanceStatusPtrOutputWithContext(ctx context.Context) NoSQLInstanceStatusPtrOutput {
	return o
}

func (o NoSQLInstanceStatusPtrOutput) Elem() NoSQLInstanceStatusOutput {
	return o.ApplyT(func(v *NoSQLInstanceStatus) NoSQLInstanceStatus { return *v }).(NoSQLInstanceStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o NoSQLInstanceStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NoSQLInstanceStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o NoSQLInstanceStatusPtrOutput) Conditions() NoSQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *NoSQLInstanceStatus) []NoSQLInstanceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(NoSQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type NoSQLInstanceStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// NoSQLInstanceStatusConditionsInput is an input type that accepts NoSQLInstanceStatusConditionsArgs and NoSQLInstanceStatusConditionsOutput values.
// You can construct a concrete instance of `NoSQLInstanceStatusConditionsInput` via:
//
//          NoSQLInstanceStatusConditionsArgs{...}
type NoSQLInstanceStatusConditionsInput interface {
	pulumi.Input

	ToNoSQLInstanceStatusConditionsOutput() NoSQLInstanceStatusConditionsOutput
	ToNoSQLInstanceStatusConditionsOutputWithContext(context.Context) NoSQLInstanceStatusConditionsOutput
}

// A Condition that may apply to a resource.
type NoSQLInstanceStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NoSQLInstanceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceStatusConditions)(nil)).Elem()
}

func (i NoSQLInstanceStatusConditionsArgs) ToNoSQLInstanceStatusConditionsOutput() NoSQLInstanceStatusConditionsOutput {
	return i.ToNoSQLInstanceStatusConditionsOutputWithContext(context.Background())
}

func (i NoSQLInstanceStatusConditionsArgs) ToNoSQLInstanceStatusConditionsOutputWithContext(ctx context.Context) NoSQLInstanceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceStatusConditionsOutput)
}

// NoSQLInstanceStatusConditionsArrayInput is an input type that accepts NoSQLInstanceStatusConditionsArray and NoSQLInstanceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `NoSQLInstanceStatusConditionsArrayInput` via:
//
//          NoSQLInstanceStatusConditionsArray{ NoSQLInstanceStatusConditionsArgs{...} }
type NoSQLInstanceStatusConditionsArrayInput interface {
	pulumi.Input

	ToNoSQLInstanceStatusConditionsArrayOutput() NoSQLInstanceStatusConditionsArrayOutput
	ToNoSQLInstanceStatusConditionsArrayOutputWithContext(context.Context) NoSQLInstanceStatusConditionsArrayOutput
}

type NoSQLInstanceStatusConditionsArray []NoSQLInstanceStatusConditionsInput

func (NoSQLInstanceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NoSQLInstanceStatusConditions)(nil)).Elem()
}

func (i NoSQLInstanceStatusConditionsArray) ToNoSQLInstanceStatusConditionsArrayOutput() NoSQLInstanceStatusConditionsArrayOutput {
	return i.ToNoSQLInstanceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i NoSQLInstanceStatusConditionsArray) ToNoSQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) NoSQLInstanceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoSQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type NoSQLInstanceStatusConditionsOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoSQLInstanceStatusConditions)(nil)).Elem()
}

func (o NoSQLInstanceStatusConditionsOutput) ToNoSQLInstanceStatusConditionsOutput() NoSQLInstanceStatusConditionsOutput {
	return o
}

func (o NoSQLInstanceStatusConditionsOutput) ToNoSQLInstanceStatusConditionsOutputWithContext(ctx context.Context) NoSQLInstanceStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o NoSQLInstanceStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o NoSQLInstanceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoSQLInstanceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o NoSQLInstanceStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o NoSQLInstanceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o NoSQLInstanceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NoSQLInstanceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type NoSQLInstanceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (NoSQLInstanceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NoSQLInstanceStatusConditions)(nil)).Elem()
}

func (o NoSQLInstanceStatusConditionsArrayOutput) ToNoSQLInstanceStatusConditionsArrayOutput() NoSQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o NoSQLInstanceStatusConditionsArrayOutput) ToNoSQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) NoSQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o NoSQLInstanceStatusConditionsArrayOutput) Index(i pulumi.IntInput) NoSQLInstanceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NoSQLInstanceStatusConditions {
		return vs[0].([]NoSQLInstanceStatusConditions)[vs[1].(int)]
	}).(NoSQLInstanceStatusConditionsOutput)
}

// A PostgreSQLInstance is a portable resource claim that may be satisfied by binding to a PostgreSQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type PostgreSQLInstanceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
	Spec *PostgreSQLInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *PostgreSQLInstanceStatus `pulumi:"status"`
}

// PostgreSQLInstanceTypeInput is an input type that accepts PostgreSQLInstanceTypeArgs and PostgreSQLInstanceTypeOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceTypeInput` via:
//
//          PostgreSQLInstanceTypeArgs{...}
type PostgreSQLInstanceTypeInput interface {
	pulumi.Input

	ToPostgreSQLInstanceTypeOutput() PostgreSQLInstanceTypeOutput
	ToPostgreSQLInstanceTypeOutputWithContext(context.Context) PostgreSQLInstanceTypeOutput
}

// A PostgreSQLInstance is a portable resource claim that may be satisfied by binding to a PostgreSQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type PostgreSQLInstanceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
	Spec PostgreSQLInstanceSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status PostgreSQLInstanceStatusPtrInput `pulumi:"status"`
}

func (PostgreSQLInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceType)(nil)).Elem()
}

func (i PostgreSQLInstanceTypeArgs) ToPostgreSQLInstanceTypeOutput() PostgreSQLInstanceTypeOutput {
	return i.ToPostgreSQLInstanceTypeOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceTypeArgs) ToPostgreSQLInstanceTypeOutputWithContext(ctx context.Context) PostgreSQLInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceTypeOutput)
}

// A PostgreSQLInstance is a portable resource claim that may be satisfied by binding to a PostgreSQL managed resource such as an AWS RDS instance or a GCP CloudSQL instance.
type PostgreSQLInstanceTypeOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceType)(nil)).Elem()
}

func (o PostgreSQLInstanceTypeOutput) ToPostgreSQLInstanceTypeOutput() PostgreSQLInstanceTypeOutput {
	return o
}

func (o PostgreSQLInstanceTypeOutput) ToPostgreSQLInstanceTypeOutputWithContext(ctx context.Context) PostgreSQLInstanceTypeOutput {
	return o
}

func (o PostgreSQLInstanceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PostgreSQLInstanceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PostgreSQLInstanceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
func (o PostgreSQLInstanceTypeOutput) Spec() PostgreSQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceType) *PostgreSQLInstanceSpec { return v.Spec }).(PostgreSQLInstanceSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o PostgreSQLInstanceTypeOutput) Status() PostgreSQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceType) *PostgreSQLInstanceStatus { return v.Status }).(PostgreSQLInstanceStatusPtrOutput)
}

type PostgreSQLInstanceMetadata struct {
}

// PostgreSQLInstanceMetadataInput is an input type that accepts PostgreSQLInstanceMetadataArgs and PostgreSQLInstanceMetadataOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceMetadataInput` via:
//
//          PostgreSQLInstanceMetadataArgs{...}
type PostgreSQLInstanceMetadataInput interface {
	pulumi.Input

	ToPostgreSQLInstanceMetadataOutput() PostgreSQLInstanceMetadataOutput
	ToPostgreSQLInstanceMetadataOutputWithContext(context.Context) PostgreSQLInstanceMetadataOutput
}

type PostgreSQLInstanceMetadataArgs struct {
}

func (PostgreSQLInstanceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceMetadata)(nil)).Elem()
}

func (i PostgreSQLInstanceMetadataArgs) ToPostgreSQLInstanceMetadataOutput() PostgreSQLInstanceMetadataOutput {
	return i.ToPostgreSQLInstanceMetadataOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceMetadataArgs) ToPostgreSQLInstanceMetadataOutputWithContext(ctx context.Context) PostgreSQLInstanceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceMetadataOutput)
}

type PostgreSQLInstanceMetadataOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceMetadata)(nil)).Elem()
}

func (o PostgreSQLInstanceMetadataOutput) ToPostgreSQLInstanceMetadataOutput() PostgreSQLInstanceMetadataOutput {
	return o
}

func (o PostgreSQLInstanceMetadataOutput) ToPostgreSQLInstanceMetadataOutputWithContext(ctx context.Context) PostgreSQLInstanceMetadataOutput {
	return o
}

// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
type PostgreSQLInstanceSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *PostgreSQLInstanceSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *PostgreSQLInstanceSpecClassSelector `pulumi:"classSelector"`
	// EngineVersion specifies the desired PostgreSQL engine version. Allowed Versions: 9.6 and 11.
	EngineVersion *string `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *PostgreSQLInstanceSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *PostgreSQLInstanceSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// PostgreSQLInstanceSpecInput is an input type that accepts PostgreSQLInstanceSpecArgs and PostgreSQLInstanceSpecOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecInput` via:
//
//          PostgreSQLInstanceSpecArgs{...}
type PostgreSQLInstanceSpecInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecOutput() PostgreSQLInstanceSpecOutput
	ToPostgreSQLInstanceSpecOutputWithContext(context.Context) PostgreSQLInstanceSpecOutput
}

// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
type PostgreSQLInstanceSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef PostgreSQLInstanceSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector PostgreSQLInstanceSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// EngineVersion specifies the desired PostgreSQL engine version. Allowed Versions: 9.6 and 11.
	EngineVersion pulumi.StringPtrInput `pulumi:"engineVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef PostgreSQLInstanceSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (PostgreSQLInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpec)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecArgs) ToPostgreSQLInstanceSpecOutput() PostgreSQLInstanceSpecOutput {
	return i.ToPostgreSQLInstanceSpecOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecArgs) ToPostgreSQLInstanceSpecOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecOutput)
}

func (i PostgreSQLInstanceSpecArgs) ToPostgreSQLInstanceSpecPtrOutput() PostgreSQLInstanceSpecPtrOutput {
	return i.ToPostgreSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecArgs) ToPostgreSQLInstanceSpecPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecOutput).ToPostgreSQLInstanceSpecPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceSpecPtrInput is an input type that accepts PostgreSQLInstanceSpecArgs, PostgreSQLInstanceSpecPtr and PostgreSQLInstanceSpecPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecPtrInput` via:
//
//          PostgreSQLInstanceSpecArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceSpecPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecPtrOutput() PostgreSQLInstanceSpecPtrOutput
	ToPostgreSQLInstanceSpecPtrOutputWithContext(context.Context) PostgreSQLInstanceSpecPtrOutput
}

type postgreSQLInstanceSpecPtrType PostgreSQLInstanceSpecArgs

func PostgreSQLInstanceSpecPtr(v *PostgreSQLInstanceSpecArgs) PostgreSQLInstanceSpecPtrInput {
	return (*postgreSQLInstanceSpecPtrType)(v)
}

func (*postgreSQLInstanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpec)(nil)).Elem()
}

func (i *postgreSQLInstanceSpecPtrType) ToPostgreSQLInstanceSpecPtrOutput() PostgreSQLInstanceSpecPtrOutput {
	return i.ToPostgreSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceSpecPtrType) ToPostgreSQLInstanceSpecPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecPtrOutput)
}

// PostgreSQLInstanceSpec specifies the desired state of a PostgreSQLInstance. PostgreSQLInstance.
type PostgreSQLInstanceSpecOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpec)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecOutput) ToPostgreSQLInstanceSpecOutput() PostgreSQLInstanceSpecOutput {
	return o
}

func (o PostgreSQLInstanceSpecOutput) ToPostgreSQLInstanceSpecOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecOutput {
	return o
}

func (o PostgreSQLInstanceSpecOutput) ToPostgreSQLInstanceSpecPtrOutput() PostgreSQLInstanceSpecPtrOutput {
	return o.ToPostgreSQLInstanceSpecPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceSpecOutput) ToPostgreSQLInstanceSpecPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *PostgreSQLInstanceSpec {
		return &v
	}).(PostgreSQLInstanceSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o PostgreSQLInstanceSpecOutput) ClassRef() PostgreSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecClassRef { return v.ClassRef }).(PostgreSQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o PostgreSQLInstanceSpecOutput) ClassSelector() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecClassSelector { return v.ClassSelector }).(PostgreSQLInstanceSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired PostgreSQL engine version. Allowed Versions: 9.6 and 11.
func (o PostgreSQLInstanceSpecOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *string { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o PostgreSQLInstanceSpecOutput) ResourceRef() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecResourceRef { return v.ResourceRef }).(PostgreSQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o PostgreSQLInstanceSpecOutput) WriteConnectionSecretToRef() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

type PostgreSQLInstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpec)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecPtrOutput) ToPostgreSQLInstanceSpecPtrOutput() PostgreSQLInstanceSpecPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecPtrOutput) ToPostgreSQLInstanceSpecPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecPtrOutput) Elem() PostgreSQLInstanceSpecOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) PostgreSQLInstanceSpec { return *v }).(PostgreSQLInstanceSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o PostgreSQLInstanceSpecPtrOutput) ClassRef() PostgreSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(PostgreSQLInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o PostgreSQLInstanceSpecPtrOutput) ClassSelector() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(PostgreSQLInstanceSpecClassSelectorPtrOutput)
}

// EngineVersion specifies the desired PostgreSQL engine version. Allowed Versions: 9.6 and 11.
func (o PostgreSQLInstanceSpecPtrOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.EngineVersion
	}).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o PostgreSQLInstanceSpecPtrOutput) ResourceRef() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(PostgreSQLInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o PostgreSQLInstanceSpecPtrOutput) WriteConnectionSecretToRef() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpec) *PostgreSQLInstanceSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type PostgreSQLInstanceSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// PostgreSQLInstanceSpecClassRefInput is an input type that accepts PostgreSQLInstanceSpecClassRefArgs and PostgreSQLInstanceSpecClassRefOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassRefInput` via:
//
//          PostgreSQLInstanceSpecClassRefArgs{...}
type PostgreSQLInstanceSpecClassRefInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassRefOutput() PostgreSQLInstanceSpecClassRefOutput
	ToPostgreSQLInstanceSpecClassRefOutputWithContext(context.Context) PostgreSQLInstanceSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type PostgreSQLInstanceSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PostgreSQLInstanceSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassRef)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecClassRefArgs) ToPostgreSQLInstanceSpecClassRefOutput() PostgreSQLInstanceSpecClassRefOutput {
	return i.ToPostgreSQLInstanceSpecClassRefOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassRefArgs) ToPostgreSQLInstanceSpecClassRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassRefOutput)
}

func (i PostgreSQLInstanceSpecClassRefArgs) ToPostgreSQLInstanceSpecClassRefPtrOutput() PostgreSQLInstanceSpecClassRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassRefArgs) ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassRefOutput).ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceSpecClassRefPtrInput is an input type that accepts PostgreSQLInstanceSpecClassRefArgs, PostgreSQLInstanceSpecClassRefPtr and PostgreSQLInstanceSpecClassRefPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassRefPtrInput` via:
//
//          PostgreSQLInstanceSpecClassRefArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceSpecClassRefPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassRefPtrOutput() PostgreSQLInstanceSpecClassRefPtrOutput
	ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(context.Context) PostgreSQLInstanceSpecClassRefPtrOutput
}

type postgreSQLInstanceSpecClassRefPtrType PostgreSQLInstanceSpecClassRefArgs

func PostgreSQLInstanceSpecClassRefPtr(v *PostgreSQLInstanceSpecClassRefArgs) PostgreSQLInstanceSpecClassRefPtrInput {
	return (*postgreSQLInstanceSpecClassRefPtrType)(v)
}

func (*postgreSQLInstanceSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecClassRef)(nil)).Elem()
}

func (i *postgreSQLInstanceSpecClassRefPtrType) ToPostgreSQLInstanceSpecClassRefPtrOutput() PostgreSQLInstanceSpecClassRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceSpecClassRefPtrType) ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type PostgreSQLInstanceSpecClassRefOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassRefOutput) ToPostgreSQLInstanceSpecClassRefOutput() PostgreSQLInstanceSpecClassRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassRefOutput) ToPostgreSQLInstanceSpecClassRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassRefOutput) ToPostgreSQLInstanceSpecClassRefPtrOutput() PostgreSQLInstanceSpecClassRefPtrOutput {
	return o.ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceSpecClassRefOutput) ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *PostgreSQLInstanceSpecClassRef {
		return &v
	}).(PostgreSQLInstanceSpecClassRefPtrOutput)
}

// API version of the referent.
func (o PostgreSQLInstanceSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PostgreSQLInstanceSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgreSQLInstanceSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgreSQLInstanceSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PostgreSQLInstanceSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PostgreSQLInstanceSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PostgreSQLInstanceSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PostgreSQLInstanceSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecClassRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassRefPtrOutput) ToPostgreSQLInstanceSpecClassRefPtrOutput() PostgreSQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassRefPtrOutput) ToPostgreSQLInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassRefPtrOutput) Elem() PostgreSQLInstanceSpecClassRefOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) PostgreSQLInstanceSpecClassRef { return *v }).(PostgreSQLInstanceSpecClassRefOutput)
}

// API version of the referent.
func (o PostgreSQLInstanceSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PostgreSQLInstanceSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgreSQLInstanceSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgreSQLInstanceSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PostgreSQLInstanceSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PostgreSQLInstanceSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PostgreSQLInstanceSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type PostgreSQLInstanceSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []PostgreSQLInstanceSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// PostgreSQLInstanceSpecClassSelectorInput is an input type that accepts PostgreSQLInstanceSpecClassSelectorArgs and PostgreSQLInstanceSpecClassSelectorOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassSelectorInput` via:
//
//          PostgreSQLInstanceSpecClassSelectorArgs{...}
type PostgreSQLInstanceSpecClassSelectorInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassSelectorOutput() PostgreSQLInstanceSpecClassSelectorOutput
	ToPostgreSQLInstanceSpecClassSelectorOutputWithContext(context.Context) PostgreSQLInstanceSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type PostgreSQLInstanceSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (PostgreSQLInstanceSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecClassSelectorArgs) ToPostgreSQLInstanceSpecClassSelectorOutput() PostgreSQLInstanceSpecClassSelectorOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassSelectorArgs) ToPostgreSQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorOutput)
}

func (i PostgreSQLInstanceSpecClassSelectorArgs) ToPostgreSQLInstanceSpecClassSelectorPtrOutput() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassSelectorArgs) ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorOutput).ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceSpecClassSelectorPtrInput is an input type that accepts PostgreSQLInstanceSpecClassSelectorArgs, PostgreSQLInstanceSpecClassSelectorPtr and PostgreSQLInstanceSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassSelectorPtrInput` via:
//
//          PostgreSQLInstanceSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassSelectorPtrOutput() PostgreSQLInstanceSpecClassSelectorPtrOutput
	ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Context) PostgreSQLInstanceSpecClassSelectorPtrOutput
}

type postgreSQLInstanceSpecClassSelectorPtrType PostgreSQLInstanceSpecClassSelectorArgs

func PostgreSQLInstanceSpecClassSelectorPtr(v *PostgreSQLInstanceSpecClassSelectorArgs) PostgreSQLInstanceSpecClassSelectorPtrInput {
	return (*postgreSQLInstanceSpecClassSelectorPtrType)(v)
}

func (*postgreSQLInstanceSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (i *postgreSQLInstanceSpecClassSelectorPtrType) ToPostgreSQLInstanceSpecClassSelectorPtrOutput() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceSpecClassSelectorPtrType) ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type PostgreSQLInstanceSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassSelectorOutput) ToPostgreSQLInstanceSpecClassSelectorOutput() PostgreSQLInstanceSpecClassSelectorOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorOutput) ToPostgreSQLInstanceSpecClassSelectorOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorOutput) ToPostgreSQLInstanceSpecClassSelectorPtrOutput() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o.ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceSpecClassSelectorOutput) ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelector) *PostgreSQLInstanceSpecClassSelector {
		return &v
	}).(PostgreSQLInstanceSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgreSQLInstanceSpecClassSelectorOutput) MatchExpressions() PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelector) []PostgreSQLInstanceSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgreSQLInstanceSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type PostgreSQLInstanceSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecClassSelector)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassSelectorPtrOutput) ToPostgreSQLInstanceSpecClassSelectorPtrOutput() PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorPtrOutput) ToPostgreSQLInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorPtrOutput) Elem() PostgreSQLInstanceSpecClassSelectorOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassSelector) PostgreSQLInstanceSpecClassSelector { return *v }).(PostgreSQLInstanceSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o PostgreSQLInstanceSpecClassSelectorPtrOutput) MatchExpressions() PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassSelector) []PostgreSQLInstanceSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o PostgreSQLInstanceSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgreSQLInstanceSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// PostgreSQLInstanceSpecClassSelectorMatchExpressionsInput is an input type that accepts PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs and PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassSelectorMatchExpressionsInput` via:
//
//          PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs{...}
type PostgreSQLInstanceSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput
	ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray and PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray{ PostgreSQLInstanceSpecClassSelectorMatchExpressionsArgs{...} }
type PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
	ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput
}

type PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray []PostgreSQLInstanceSpecClassSelectorMatchExpressionsInput

func (PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgreSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassSelectorMatchExpressionsArray) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgreSQLInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput() PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToPostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgreSQLInstanceSpecClassSelectorMatchExpressions {
		return vs[0].([]PostgreSQLInstanceSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type PostgreSQLInstanceSpecClassSelectorMatchLabels struct {
}

// PostgreSQLInstanceSpecClassSelectorMatchLabelsInput is an input type that accepts PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs and PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecClassSelectorMatchLabelsInput` via:
//
//          PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs{...}
type PostgreSQLInstanceSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutput() PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput
	ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Context) PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs struct {
}

func (PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs) ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutput() PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return i.ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecClassSelectorMatchLabelsArgs) ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput) ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutput() PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput) ToPostgreSQLInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type PostgreSQLInstanceSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// PostgreSQLInstanceSpecResourceRefInput is an input type that accepts PostgreSQLInstanceSpecResourceRefArgs and PostgreSQLInstanceSpecResourceRefOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecResourceRefInput` via:
//
//          PostgreSQLInstanceSpecResourceRefArgs{...}
type PostgreSQLInstanceSpecResourceRefInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecResourceRefOutput() PostgreSQLInstanceSpecResourceRefOutput
	ToPostgreSQLInstanceSpecResourceRefOutputWithContext(context.Context) PostgreSQLInstanceSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type PostgreSQLInstanceSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PostgreSQLInstanceSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecResourceRefArgs) ToPostgreSQLInstanceSpecResourceRefOutput() PostgreSQLInstanceSpecResourceRefOutput {
	return i.ToPostgreSQLInstanceSpecResourceRefOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecResourceRefArgs) ToPostgreSQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecResourceRefOutput)
}

func (i PostgreSQLInstanceSpecResourceRefArgs) ToPostgreSQLInstanceSpecResourceRefPtrOutput() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecResourceRefArgs) ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecResourceRefOutput).ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceSpecResourceRefPtrInput is an input type that accepts PostgreSQLInstanceSpecResourceRefArgs, PostgreSQLInstanceSpecResourceRefPtr and PostgreSQLInstanceSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecResourceRefPtrInput` via:
//
//          PostgreSQLInstanceSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceSpecResourceRefPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecResourceRefPtrOutput() PostgreSQLInstanceSpecResourceRefPtrOutput
	ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(context.Context) PostgreSQLInstanceSpecResourceRefPtrOutput
}

type postgreSQLInstanceSpecResourceRefPtrType PostgreSQLInstanceSpecResourceRefArgs

func PostgreSQLInstanceSpecResourceRefPtr(v *PostgreSQLInstanceSpecResourceRefArgs) PostgreSQLInstanceSpecResourceRefPtrInput {
	return (*postgreSQLInstanceSpecResourceRefPtrType)(v)
}

func (*postgreSQLInstanceSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (i *postgreSQLInstanceSpecResourceRefPtrType) ToPostgreSQLInstanceSpecResourceRefPtrOutput() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceSpecResourceRefPtrType) ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type PostgreSQLInstanceSpecResourceRefOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecResourceRefOutput) ToPostgreSQLInstanceSpecResourceRefOutput() PostgreSQLInstanceSpecResourceRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecResourceRefOutput) ToPostgreSQLInstanceSpecResourceRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecResourceRefOutput) ToPostgreSQLInstanceSpecResourceRefPtrOutput() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o.ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceSpecResourceRefOutput) ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *PostgreSQLInstanceSpecResourceRef {
		return &v
	}).(PostgreSQLInstanceSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o PostgreSQLInstanceSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PostgreSQLInstanceSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgreSQLInstanceSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgreSQLInstanceSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PostgreSQLInstanceSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PostgreSQLInstanceSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PostgreSQLInstanceSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PostgreSQLInstanceSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecResourceRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecResourceRefPtrOutput) ToPostgreSQLInstanceSpecResourceRefPtrOutput() PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecResourceRefPtrOutput) ToPostgreSQLInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecResourceRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecResourceRefPtrOutput) Elem() PostgreSQLInstanceSpecResourceRefOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) PostgreSQLInstanceSpecResourceRef { return *v }).(PostgreSQLInstanceSpecResourceRefOutput)
}

// API version of the referent.
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PostgreSQLInstanceSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type PostgreSQLInstanceSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// PostgreSQLInstanceSpecWriteConnectionSecretToRefInput is an input type that accepts PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs and PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecWriteConnectionSecretToRefInput` via:
//
//          PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs{...}
type PostgreSQLInstanceSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput
	ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return i.ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput)
}

func (i PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput).ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrInput is an input type that accepts PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs, PostgreSQLInstanceSpecWriteConnectionSecretToRefPtr and PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrInput` via:
//
//          PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput
	ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput
}

type postgreSQLInstanceSpecWriteConnectionSecretToRefPtrType PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs

func PostgreSQLInstanceSpecWriteConnectionSecretToRefPtr(v *PostgreSQLInstanceSpecWriteConnectionSecretToRefArgs) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrInput {
	return (*postgreSQLInstanceSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*postgreSQLInstanceSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *postgreSQLInstanceSpecWriteConnectionSecretToRefPtrType) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceSpecWriteConnectionSecretToRefPtrType) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecWriteConnectionSecretToRef) *PostgreSQLInstanceSpecWriteConnectionSecretToRef {
		return &v
	}).(PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput() PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) ToPostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Elem() PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecWriteConnectionSecretToRef) PostgreSQLInstanceSpecWriteConnectionSecretToRef {
		return *v
	}).(PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type PostgreSQLInstanceStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []PostgreSQLInstanceStatusConditions `pulumi:"conditions"`
}

// PostgreSQLInstanceStatusInput is an input type that accepts PostgreSQLInstanceStatusArgs and PostgreSQLInstanceStatusOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceStatusInput` via:
//
//          PostgreSQLInstanceStatusArgs{...}
type PostgreSQLInstanceStatusInput interface {
	pulumi.Input

	ToPostgreSQLInstanceStatusOutput() PostgreSQLInstanceStatusOutput
	ToPostgreSQLInstanceStatusOutputWithContext(context.Context) PostgreSQLInstanceStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type PostgreSQLInstanceStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions PostgreSQLInstanceStatusConditionsArrayInput `pulumi:"conditions"`
}

func (PostgreSQLInstanceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceStatus)(nil)).Elem()
}

func (i PostgreSQLInstanceStatusArgs) ToPostgreSQLInstanceStatusOutput() PostgreSQLInstanceStatusOutput {
	return i.ToPostgreSQLInstanceStatusOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceStatusArgs) ToPostgreSQLInstanceStatusOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceStatusOutput)
}

func (i PostgreSQLInstanceStatusArgs) ToPostgreSQLInstanceStatusPtrOutput() PostgreSQLInstanceStatusPtrOutput {
	return i.ToPostgreSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceStatusArgs) ToPostgreSQLInstanceStatusPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceStatusOutput).ToPostgreSQLInstanceStatusPtrOutputWithContext(ctx)
}

// PostgreSQLInstanceStatusPtrInput is an input type that accepts PostgreSQLInstanceStatusArgs, PostgreSQLInstanceStatusPtr and PostgreSQLInstanceStatusPtrOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceStatusPtrInput` via:
//
//          PostgreSQLInstanceStatusArgs{...}
//
//  or:
//
//          nil
type PostgreSQLInstanceStatusPtrInput interface {
	pulumi.Input

	ToPostgreSQLInstanceStatusPtrOutput() PostgreSQLInstanceStatusPtrOutput
	ToPostgreSQLInstanceStatusPtrOutputWithContext(context.Context) PostgreSQLInstanceStatusPtrOutput
}

type postgreSQLInstanceStatusPtrType PostgreSQLInstanceStatusArgs

func PostgreSQLInstanceStatusPtr(v *PostgreSQLInstanceStatusArgs) PostgreSQLInstanceStatusPtrInput {
	return (*postgreSQLInstanceStatusPtrType)(v)
}

func (*postgreSQLInstanceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceStatus)(nil)).Elem()
}

func (i *postgreSQLInstanceStatusPtrType) ToPostgreSQLInstanceStatusPtrOutput() PostgreSQLInstanceStatusPtrOutput {
	return i.ToPostgreSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (i *postgreSQLInstanceStatusPtrType) ToPostgreSQLInstanceStatusPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type PostgreSQLInstanceStatusOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceStatus)(nil)).Elem()
}

func (o PostgreSQLInstanceStatusOutput) ToPostgreSQLInstanceStatusOutput() PostgreSQLInstanceStatusOutput {
	return o
}

func (o PostgreSQLInstanceStatusOutput) ToPostgreSQLInstanceStatusOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusOutput {
	return o
}

func (o PostgreSQLInstanceStatusOutput) ToPostgreSQLInstanceStatusPtrOutput() PostgreSQLInstanceStatusPtrOutput {
	return o.ToPostgreSQLInstanceStatusPtrOutputWithContext(context.Background())
}

func (o PostgreSQLInstanceStatusOutput) ToPostgreSQLInstanceStatusPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatus) *PostgreSQLInstanceStatus {
		return &v
	}).(PostgreSQLInstanceStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o PostgreSQLInstanceStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o PostgreSQLInstanceStatusOutput) Conditions() PostgreSQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatus) []PostgreSQLInstanceStatusConditions { return v.Conditions }).(PostgreSQLInstanceStatusConditionsArrayOutput)
}

type PostgreSQLInstanceStatusPtrOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSQLInstanceStatus)(nil)).Elem()
}

func (o PostgreSQLInstanceStatusPtrOutput) ToPostgreSQLInstanceStatusPtrOutput() PostgreSQLInstanceStatusPtrOutput {
	return o
}

func (o PostgreSQLInstanceStatusPtrOutput) ToPostgreSQLInstanceStatusPtrOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusPtrOutput {
	return o
}

func (o PostgreSQLInstanceStatusPtrOutput) Elem() PostgreSQLInstanceStatusOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceStatus) PostgreSQLInstanceStatus { return *v }).(PostgreSQLInstanceStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o PostgreSQLInstanceStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o PostgreSQLInstanceStatusPtrOutput) Conditions() PostgreSQLInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *PostgreSQLInstanceStatus) []PostgreSQLInstanceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PostgreSQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type PostgreSQLInstanceStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// PostgreSQLInstanceStatusConditionsInput is an input type that accepts PostgreSQLInstanceStatusConditionsArgs and PostgreSQLInstanceStatusConditionsOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceStatusConditionsInput` via:
//
//          PostgreSQLInstanceStatusConditionsArgs{...}
type PostgreSQLInstanceStatusConditionsInput interface {
	pulumi.Input

	ToPostgreSQLInstanceStatusConditionsOutput() PostgreSQLInstanceStatusConditionsOutput
	ToPostgreSQLInstanceStatusConditionsOutputWithContext(context.Context) PostgreSQLInstanceStatusConditionsOutput
}

// A Condition that may apply to a resource.
type PostgreSQLInstanceStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSQLInstanceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceStatusConditions)(nil)).Elem()
}

func (i PostgreSQLInstanceStatusConditionsArgs) ToPostgreSQLInstanceStatusConditionsOutput() PostgreSQLInstanceStatusConditionsOutput {
	return i.ToPostgreSQLInstanceStatusConditionsOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceStatusConditionsArgs) ToPostgreSQLInstanceStatusConditionsOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceStatusConditionsOutput)
}

// PostgreSQLInstanceStatusConditionsArrayInput is an input type that accepts PostgreSQLInstanceStatusConditionsArray and PostgreSQLInstanceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `PostgreSQLInstanceStatusConditionsArrayInput` via:
//
//          PostgreSQLInstanceStatusConditionsArray{ PostgreSQLInstanceStatusConditionsArgs{...} }
type PostgreSQLInstanceStatusConditionsArrayInput interface {
	pulumi.Input

	ToPostgreSQLInstanceStatusConditionsArrayOutput() PostgreSQLInstanceStatusConditionsArrayOutput
	ToPostgreSQLInstanceStatusConditionsArrayOutputWithContext(context.Context) PostgreSQLInstanceStatusConditionsArrayOutput
}

type PostgreSQLInstanceStatusConditionsArray []PostgreSQLInstanceStatusConditionsInput

func (PostgreSQLInstanceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgreSQLInstanceStatusConditions)(nil)).Elem()
}

func (i PostgreSQLInstanceStatusConditionsArray) ToPostgreSQLInstanceStatusConditionsArrayOutput() PostgreSQLInstanceStatusConditionsArrayOutput {
	return i.ToPostgreSQLInstanceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i PostgreSQLInstanceStatusConditionsArray) ToPostgreSQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSQLInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type PostgreSQLInstanceStatusConditionsOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSQLInstanceStatusConditions)(nil)).Elem()
}

func (o PostgreSQLInstanceStatusConditionsOutput) ToPostgreSQLInstanceStatusConditionsOutput() PostgreSQLInstanceStatusConditionsOutput {
	return o
}

func (o PostgreSQLInstanceStatusConditionsOutput) ToPostgreSQLInstanceStatusConditionsOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o PostgreSQLInstanceStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o PostgreSQLInstanceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o PostgreSQLInstanceStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o PostgreSQLInstanceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o PostgreSQLInstanceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSQLInstanceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type PostgreSQLInstanceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (PostgreSQLInstanceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgreSQLInstanceStatusConditions)(nil)).Elem()
}

func (o PostgreSQLInstanceStatusConditionsArrayOutput) ToPostgreSQLInstanceStatusConditionsArrayOutput() PostgreSQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o PostgreSQLInstanceStatusConditionsArrayOutput) ToPostgreSQLInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) PostgreSQLInstanceStatusConditionsArrayOutput {
	return o
}

func (o PostgreSQLInstanceStatusConditionsArrayOutput) Index(i pulumi.IntInput) PostgreSQLInstanceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgreSQLInstanceStatusConditions {
		return vs[0].([]PostgreSQLInstanceStatusConditions)[vs[1].(int)]
	}).(PostgreSQLInstanceStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(MySQLInstanceTypeOutput{})
	pulumi.RegisterOutputType(MySQLInstanceMetadataOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassRefOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecResourceRefOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(MySQLInstanceSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceStatusOutput{})
	pulumi.RegisterOutputType(MySQLInstanceStatusPtrOutput{})
	pulumi.RegisterOutputType(MySQLInstanceStatusConditionsOutput{})
	pulumi.RegisterOutputType(MySQLInstanceStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceTypeOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceMetadataOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassRefOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecResourceRefOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceStatusOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceStatusPtrOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceStatusConditionsOutput{})
	pulumi.RegisterOutputType(NoSQLInstanceStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceTypeOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceMetadataOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassRefOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecResourceRefOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceStatusOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceStatusPtrOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceStatusConditionsOutput{})
	pulumi.RegisterOutputType(PostgreSQLInstanceStatusConditionsArrayOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A KubernetesCluster is a portable resource claim that may be satisfied by binding to a Kubernetes cluster managed resource such as an AWS EKS cluster or an Azure AKS cluster.
type KubernetesClusterType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
	Spec *KubernetesClusterSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *KubernetesClusterStatus `pulumi:"status"`
}

// KubernetesClusterTypeInput is an input type that accepts KubernetesClusterTypeArgs and KubernetesClusterTypeOutput values.
// You can construct a concrete instance of `KubernetesClusterTypeInput` via:
//
//          KubernetesClusterTypeArgs{...}
type KubernetesClusterTypeInput interface {
	pulumi.Input

	ToKubernetesClusterTypeOutput() KubernetesClusterTypeOutput
	ToKubernetesClusterTypeOutputWithContext(context.Context) KubernetesClusterTypeOutput
}

// A KubernetesCluster is a portable resource claim that may be satisfied by binding to a Kubernetes cluster managed resource such as an AWS EKS cluster or an Azure AKS cluster.
type KubernetesClusterTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
	Spec KubernetesClusterSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status KubernetesClusterStatusPtrInput `pulumi:"status"`
}

func (KubernetesClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterType)(nil)).Elem()
}

func (i KubernetesClusterTypeArgs) ToKubernetesClusterTypeOutput() KubernetesClusterTypeOutput {
	return i.ToKubernetesClusterTypeOutputWithContext(context.Background())
}

func (i KubernetesClusterTypeArgs) ToKubernetesClusterTypeOutputWithContext(ctx context.Context) KubernetesClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterTypeOutput)
}

// A KubernetesCluster is a portable resource claim that may be satisfied by binding to a Kubernetes cluster managed resource such as an AWS EKS cluster or an Azure AKS cluster.
type KubernetesClusterTypeOutput struct{ *pulumi.OutputState }

func (KubernetesClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterType)(nil)).Elem()
}

func (o KubernetesClusterTypeOutput) ToKubernetesClusterTypeOutput() KubernetesClusterTypeOutput {
	return o
}

func (o KubernetesClusterTypeOutput) ToKubernetesClusterTypeOutputWithContext(ctx context.Context) KubernetesClusterTypeOutput {
	return o
}

func (o KubernetesClusterTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubernetesClusterTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubernetesClusterTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubernetesClusterType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
func (o KubernetesClusterTypeOutput) Spec() KubernetesClusterSpecPtrOutput {
	return o.ApplyT(func(v KubernetesClusterType) *KubernetesClusterSpec { return v.Spec }).(KubernetesClusterSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o KubernetesClusterTypeOutput) Status() KubernetesClusterStatusPtrOutput {
	return o.ApplyT(func(v KubernetesClusterType) *KubernetesClusterStatus { return v.Status }).(KubernetesClusterStatusPtrOutput)
}

type KubernetesClusterMetadata struct {
}

// KubernetesClusterMetadataInput is an input type that accepts KubernetesClusterMetadataArgs and KubernetesClusterMetadataOutput values.
// You can construct a concrete instance of `KubernetesClusterMetadataInput` via:
//
//          KubernetesClusterMetadataArgs{...}
type KubernetesClusterMetadataInput interface {
	pulumi.Input

	ToKubernetesClusterMetadataOutput() KubernetesClusterMetadataOutput
	ToKubernetesClusterMetadataOutputWithContext(context.Context) KubernetesClusterMetadataOutput
}

type KubernetesClusterMetadataArgs struct {
}

func (KubernetesClusterMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterMetadata)(nil)).Elem()
}

func (i KubernetesClusterMetadataArgs) ToKubernetesClusterMetadataOutput() KubernetesClusterMetadataOutput {
	return i.ToKubernetesClusterMetadataOutputWithContext(context.Background())
}

func (i KubernetesClusterMetadataArgs) ToKubernetesClusterMetadataOutputWithContext(ctx context.Context) KubernetesClusterMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterMetadataOutput)
}

type KubernetesClusterMetadataOutput struct{ *pulumi.OutputState }

func (KubernetesClusterMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterMetadata)(nil)).Elem()
}

func (o KubernetesClusterMetadataOutput) ToKubernetesClusterMetadataOutput() KubernetesClusterMetadataOutput {
	return o
}

func (o KubernetesClusterMetadataOutput) ToKubernetesClusterMetadataOutputWithContext(ctx context.Context) KubernetesClusterMetadataOutput {
	return o
}

// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
type KubernetesClusterSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *KubernetesClusterSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *KubernetesClusterSpecClassSelector `pulumi:"classSelector"`
	// ClusterVersion specifies the desired Kubernetes version, e.g. 1.15.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *KubernetesClusterSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *KubernetesClusterSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// KubernetesClusterSpecInput is an input type that accepts KubernetesClusterSpecArgs and KubernetesClusterSpecOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecInput` via:
//
//          KubernetesClusterSpecArgs{...}
type KubernetesClusterSpecInput interface {
	pulumi.Input

	ToKubernetesClusterSpecOutput() KubernetesClusterSpecOutput
	ToKubernetesClusterSpecOutputWithContext(context.Context) KubernetesClusterSpecOutput
}

// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
type KubernetesClusterSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef KubernetesClusterSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector KubernetesClusterSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// ClusterVersion specifies the desired Kubernetes version, e.g. 1.15.
	ClusterVersion pulumi.StringPtrInput `pulumi:"clusterVersion"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef KubernetesClusterSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef KubernetesClusterSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (KubernetesClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpec)(nil)).Elem()
}

func (i KubernetesClusterSpecArgs) ToKubernetesClusterSpecOutput() KubernetesClusterSpecOutput {
	return i.ToKubernetesClusterSpecOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecArgs) ToKubernetesClusterSpecOutputWithContext(ctx context.Context) KubernetesClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecOutput)
}

func (i KubernetesClusterSpecArgs) ToKubernetesClusterSpecPtrOutput() KubernetesClusterSpecPtrOutput {
	return i.ToKubernetesClusterSpecPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecArgs) ToKubernetesClusterSpecPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecOutput).ToKubernetesClusterSpecPtrOutputWithContext(ctx)
}

// KubernetesClusterSpecPtrInput is an input type that accepts KubernetesClusterSpecArgs, KubernetesClusterSpecPtr and KubernetesClusterSpecPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecPtrInput` via:
//
//          KubernetesClusterSpecArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterSpecPtrInput interface {
	pulumi.Input

	ToKubernetesClusterSpecPtrOutput() KubernetesClusterSpecPtrOutput
	ToKubernetesClusterSpecPtrOutputWithContext(context.Context) KubernetesClusterSpecPtrOutput
}

type kubernetesClusterSpecPtrType KubernetesClusterSpecArgs

func KubernetesClusterSpecPtr(v *KubernetesClusterSpecArgs) KubernetesClusterSpecPtrInput {
	return (*kubernetesClusterSpecPtrType)(v)
}

func (*kubernetesClusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpec)(nil)).Elem()
}

func (i *kubernetesClusterSpecPtrType) ToKubernetesClusterSpecPtrOutput() KubernetesClusterSpecPtrOutput {
	return i.ToKubernetesClusterSpecPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterSpecPtrType) ToKubernetesClusterSpecPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecPtrOutput)
}

// KubernetesClusterSpec specifies the desired state of a KubernetesCluster.
type KubernetesClusterSpecOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpec)(nil)).Elem()
}

func (o KubernetesClusterSpecOutput) ToKubernetesClusterSpecOutput() KubernetesClusterSpecOutput {
	return o
}

func (o KubernetesClusterSpecOutput) ToKubernetesClusterSpecOutputWithContext(ctx context.Context) KubernetesClusterSpecOutput {
	return o
}

func (o KubernetesClusterSpecOutput) ToKubernetesClusterSpecPtrOutput() KubernetesClusterSpecPtrOutput {
	return o.ToKubernetesClusterSpecPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterSpecOutput) ToKubernetesClusterSpecPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *KubernetesClusterSpec {
		return &v
	}).(KubernetesClusterSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o KubernetesClusterSpecOutput) ClassRef() KubernetesClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *KubernetesClusterSpecClassRef { return v.ClassRef }).(KubernetesClusterSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o KubernetesClusterSpecOutput) ClassSelector() KubernetesClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *KubernetesClusterSpecClassSelector { return v.ClassSelector }).(KubernetesClusterSpecClassSelectorPtrOutput)
}

// ClusterVersion specifies the desired Kubernetes version, e.g. 1.15.
func (o KubernetesClusterSpecOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *string { return v.ClusterVersion }).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o KubernetesClusterSpecOutput) ResourceRef() KubernetesClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *KubernetesClusterSpecResourceRef { return v.ResourceRef }).(KubernetesClusterSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o KubernetesClusterSpecOutput) WriteConnectionSecretToRef() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpec) *KubernetesClusterSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput)
}

type KubernetesClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpec)(nil)).Elem()
}

func (o KubernetesClusterSpecPtrOutput) ToKubernetesClusterSpecPtrOutput() KubernetesClusterSpecPtrOutput {
	return o
}

func (o KubernetesClusterSpecPtrOutput) ToKubernetesClusterSpecPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecPtrOutput {
	return o
}

func (o KubernetesClusterSpecPtrOutput) Elem() KubernetesClusterSpecOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) KubernetesClusterSpec { return *v }).(KubernetesClusterSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o KubernetesClusterSpecPtrOutput) ClassRef() KubernetesClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) *KubernetesClusterSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(KubernetesClusterSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o KubernetesClusterSpecPtrOutput) ClassSelector() KubernetesClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) *KubernetesClusterSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(KubernetesClusterSpecClassSelectorPtrOutput)
}

// ClusterVersion specifies the desired Kubernetes version, e.g. 1.15.
func (o KubernetesClusterSpecPtrOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterVersion
	}).(pulumi.StringPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o KubernetesClusterSpecPtrOutput) ResourceRef() KubernetesClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) *KubernetesClusterSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(KubernetesClusterSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o KubernetesClusterSpecPtrOutput) WriteConnectionSecretToRef() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpec) *KubernetesClusterSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type KubernetesClusterSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// KubernetesClusterSpecClassRefInput is an input type that accepts KubernetesClusterSpecClassRefArgs and KubernetesClusterSpecClassRefOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassRefInput` via:
//
//          KubernetesClusterSpecClassRefArgs{...}
type KubernetesClusterSpecClassRefInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassRefOutput() KubernetesClusterSpecClassRefOutput
	ToKubernetesClusterSpecClassRefOutputWithContext(context.Context) KubernetesClusterSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type KubernetesClusterSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (KubernetesClusterSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassRef)(nil)).Elem()
}

func (i KubernetesClusterSpecClassRefArgs) ToKubernetesClusterSpecClassRefOutput() KubernetesClusterSpecClassRefOutput {
	return i.ToKubernetesClusterSpecClassRefOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassRefArgs) ToKubernetesClusterSpecClassRefOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassRefOutput)
}

func (i KubernetesClusterSpecClassRefArgs) ToKubernetesClusterSpecClassRefPtrOutput() KubernetesClusterSpecClassRefPtrOutput {
	return i.ToKubernetesClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassRefArgs) ToKubernetesClusterSpecClassRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassRefOutput).ToKubernetesClusterSpecClassRefPtrOutputWithContext(ctx)
}

// KubernetesClusterSpecClassRefPtrInput is an input type that accepts KubernetesClusterSpecClassRefArgs, KubernetesClusterSpecClassRefPtr and KubernetesClusterSpecClassRefPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassRefPtrInput` via:
//
//          KubernetesClusterSpecClassRefArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterSpecClassRefPtrInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassRefPtrOutput() KubernetesClusterSpecClassRefPtrOutput
	ToKubernetesClusterSpecClassRefPtrOutputWithContext(context.Context) KubernetesClusterSpecClassRefPtrOutput
}

type kubernetesClusterSpecClassRefPtrType KubernetesClusterSpecClassRefArgs

func KubernetesClusterSpecClassRefPtr(v *KubernetesClusterSpecClassRefArgs) KubernetesClusterSpecClassRefPtrInput {
	return (*kubernetesClusterSpecClassRefPtrType)(v)
}

func (*kubernetesClusterSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecClassRef)(nil)).Elem()
}

func (i *kubernetesClusterSpecClassRefPtrType) ToKubernetesClusterSpecClassRefPtrOutput() KubernetesClusterSpecClassRefPtrOutput {
	return i.ToKubernetesClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterSpecClassRefPtrType) ToKubernetesClusterSpecClassRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type KubernetesClusterSpecClassRefOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassRef)(nil)).Elem()
}

func (o KubernetesClusterSpecClassRefOutput) ToKubernetesClusterSpecClassRefOutput() KubernetesClusterSpecClassRefOutput {
	return o
}

func (o KubernetesClusterSpecClassRefOutput) ToKubernetesClusterSpecClassRefOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefOutput {
	return o
}

func (o KubernetesClusterSpecClassRefOutput) ToKubernetesClusterSpecClassRefPtrOutput() KubernetesClusterSpecClassRefPtrOutput {
	return o.ToKubernetesClusterSpecClassRefPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterSpecClassRefOutput) ToKubernetesClusterSpecClassRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *KubernetesClusterSpecClassRef {
		return &v
	}).(KubernetesClusterSpecClassRefPtrOutput)
}

// API version of the referent.
func (o KubernetesClusterSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o KubernetesClusterSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KubernetesClusterSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o KubernetesClusterSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o KubernetesClusterSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o KubernetesClusterSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o KubernetesClusterSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type KubernetesClusterSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecClassRef)(nil)).Elem()
}

func (o KubernetesClusterSpecClassRefPtrOutput) ToKubernetesClusterSpecClassRefPtrOutput() KubernetesClusterSpecClassRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecClassRefPtrOutput) ToKubernetesClusterSpecClassRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecClassRefPtrOutput) Elem() KubernetesClusterSpecClassRefOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) KubernetesClusterSpecClassRef { return *v }).(KubernetesClusterSpecClassRefOutput)
}

// API version of the referent.
func (o KubernetesClusterSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o KubernetesClusterSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KubernetesClusterSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o KubernetesClusterSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o KubernetesClusterSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o KubernetesClusterSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o KubernetesClusterSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type KubernetesClusterSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []KubernetesClusterSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// KubernetesClusterSpecClassSelectorInput is an input type that accepts KubernetesClusterSpecClassSelectorArgs and KubernetesClusterSpecClassSelectorOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassSelectorInput` via:
//
//          KubernetesClusterSpecClassSelectorArgs{...}
type KubernetesClusterSpecClassSelectorInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassSelectorOutput() KubernetesClusterSpecClassSelectorOutput
	ToKubernetesClusterSpecClassSelectorOutputWithContext(context.Context) KubernetesClusterSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type KubernetesClusterSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions KubernetesClusterSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (KubernetesClusterSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelector)(nil)).Elem()
}

func (i KubernetesClusterSpecClassSelectorArgs) ToKubernetesClusterSpecClassSelectorOutput() KubernetesClusterSpecClassSelectorOutput {
	return i.ToKubernetesClusterSpecClassSelectorOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassSelectorArgs) ToKubernetesClusterSpecClassSelectorOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorOutput)
}

func (i KubernetesClusterSpecClassSelectorArgs) ToKubernetesClusterSpecClassSelectorPtrOutput() KubernetesClusterSpecClassSelectorPtrOutput {
	return i.ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassSelectorArgs) ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorOutput).ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(ctx)
}

// KubernetesClusterSpecClassSelectorPtrInput is an input type that accepts KubernetesClusterSpecClassSelectorArgs, KubernetesClusterSpecClassSelectorPtr and KubernetesClusterSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassSelectorPtrInput` via:
//
//          KubernetesClusterSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassSelectorPtrOutput() KubernetesClusterSpecClassSelectorPtrOutput
	ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(context.Context) KubernetesClusterSpecClassSelectorPtrOutput
}

type kubernetesClusterSpecClassSelectorPtrType KubernetesClusterSpecClassSelectorArgs

func KubernetesClusterSpecClassSelectorPtr(v *KubernetesClusterSpecClassSelectorArgs) KubernetesClusterSpecClassSelectorPtrInput {
	return (*kubernetesClusterSpecClassSelectorPtrType)(v)
}

func (*kubernetesClusterSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecClassSelector)(nil)).Elem()
}

func (i *kubernetesClusterSpecClassSelectorPtrType) ToKubernetesClusterSpecClassSelectorPtrOutput() KubernetesClusterSpecClassSelectorPtrOutput {
	return i.ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterSpecClassSelectorPtrType) ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type KubernetesClusterSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelector)(nil)).Elem()
}

func (o KubernetesClusterSpecClassSelectorOutput) ToKubernetesClusterSpecClassSelectorOutput() KubernetesClusterSpecClassSelectorOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorOutput) ToKubernetesClusterSpecClassSelectorOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorOutput) ToKubernetesClusterSpecClassSelectorPtrOutput() KubernetesClusterSpecClassSelectorPtrOutput {
	return o.ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterSpecClassSelectorOutput) ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelector) *KubernetesClusterSpecClassSelector {
		return &v
	}).(KubernetesClusterSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o KubernetesClusterSpecClassSelectorOutput) MatchExpressions() KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelector) []KubernetesClusterSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o KubernetesClusterSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type KubernetesClusterSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecClassSelector)(nil)).Elem()
}

func (o KubernetesClusterSpecClassSelectorPtrOutput) ToKubernetesClusterSpecClassSelectorPtrOutput() KubernetesClusterSpecClassSelectorPtrOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorPtrOutput) ToKubernetesClusterSpecClassSelectorPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorPtrOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorPtrOutput) Elem() KubernetesClusterSpecClassSelectorOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassSelector) KubernetesClusterSpecClassSelector { return *v }).(KubernetesClusterSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o KubernetesClusterSpecClassSelectorPtrOutput) MatchExpressions() KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassSelector) []KubernetesClusterSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o KubernetesClusterSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type KubernetesClusterSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// KubernetesClusterSpecClassSelectorMatchExpressionsInput is an input type that accepts KubernetesClusterSpecClassSelectorMatchExpressionsArgs and KubernetesClusterSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassSelectorMatchExpressionsInput` via:
//
//          KubernetesClusterSpecClassSelectorMatchExpressionsArgs{...}
type KubernetesClusterSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassSelectorMatchExpressionsOutput() KubernetesClusterSpecClassSelectorMatchExpressionsOutput
	ToKubernetesClusterSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type KubernetesClusterSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (KubernetesClusterSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i KubernetesClusterSpecClassSelectorMatchExpressionsArgs) ToKubernetesClusterSpecClassSelectorMatchExpressionsOutput() KubernetesClusterSpecClassSelectorMatchExpressionsOutput {
	return i.ToKubernetesClusterSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassSelectorMatchExpressionsArgs) ToKubernetesClusterSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorMatchExpressionsOutput)
}

// KubernetesClusterSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts KubernetesClusterSpecClassSelectorMatchExpressionsArray and KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          KubernetesClusterSpecClassSelectorMatchExpressionsArray{ KubernetesClusterSpecClassSelectorMatchExpressionsArgs{...} }
type KubernetesClusterSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput() KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput
	ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput
}

type KubernetesClusterSpecClassSelectorMatchExpressionsArray []KubernetesClusterSpecClassSelectorMatchExpressionsInput

func (KubernetesClusterSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i KubernetesClusterSpecClassSelectorMatchExpressionsArray) ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput() KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassSelectorMatchExpressionsArray) ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type KubernetesClusterSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o KubernetesClusterSpecClassSelectorMatchExpressionsOutput) ToKubernetesClusterSpecClassSelectorMatchExpressionsOutput() KubernetesClusterSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorMatchExpressionsOutput) ToKubernetesClusterSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o KubernetesClusterSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o KubernetesClusterSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o KubernetesClusterSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubernetesClusterSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput) ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput() KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput) ToKubernetesClusterSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) KubernetesClusterSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterSpecClassSelectorMatchExpressions {
		return vs[0].([]KubernetesClusterSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(KubernetesClusterSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type KubernetesClusterSpecClassSelectorMatchLabels struct {
}

// KubernetesClusterSpecClassSelectorMatchLabelsInput is an input type that accepts KubernetesClusterSpecClassSelectorMatchLabelsArgs and KubernetesClusterSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecClassSelectorMatchLabelsInput` via:
//
//          KubernetesClusterSpecClassSelectorMatchLabelsArgs{...}
type KubernetesClusterSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToKubernetesClusterSpecClassSelectorMatchLabelsOutput() KubernetesClusterSpecClassSelectorMatchLabelsOutput
	ToKubernetesClusterSpecClassSelectorMatchLabelsOutputWithContext(context.Context) KubernetesClusterSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type KubernetesClusterSpecClassSelectorMatchLabelsArgs struct {
}

func (KubernetesClusterSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i KubernetesClusterSpecClassSelectorMatchLabelsArgs) ToKubernetesClusterSpecClassSelectorMatchLabelsOutput() KubernetesClusterSpecClassSelectorMatchLabelsOutput {
	return i.ToKubernetesClusterSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecClassSelectorMatchLabelsArgs) ToKubernetesClusterSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type KubernetesClusterSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o KubernetesClusterSpecClassSelectorMatchLabelsOutput) ToKubernetesClusterSpecClassSelectorMatchLabelsOutput() KubernetesClusterSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o KubernetesClusterSpecClassSelectorMatchLabelsOutput) ToKubernetesClusterSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) KubernetesClusterSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type KubernetesClusterSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// KubernetesClusterSpecResourceRefInput is an input type that accepts KubernetesClusterSpecResourceRefArgs and KubernetesClusterSpecResourceRefOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecResourceRefInput` via:
//
//          KubernetesClusterSpecResourceRefArgs{...}
type KubernetesClusterSpecResourceRefInput interface {
	pulumi.Input

	ToKubernetesClusterSpecResourceRefOutput() KubernetesClusterSpecResourceRefOutput
	ToKubernetesClusterSpecResourceRefOutputWithContext(context.Context) KubernetesClusterSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type KubernetesClusterSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (KubernetesClusterSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecResourceRef)(nil)).Elem()
}

func (i KubernetesClusterSpecResourceRefArgs) ToKubernetesClusterSpecResourceRefOutput() KubernetesClusterSpecResourceRefOutput {
	return i.ToKubernetesClusterSpecResourceRefOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecResourceRefArgs) ToKubernetesClusterSpecResourceRefOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecResourceRefOutput)
}

func (i KubernetesClusterSpecResourceRefArgs) ToKubernetesClusterSpecResourceRefPtrOutput() KubernetesClusterSpecResourceRefPtrOutput {
	return i.ToKubernetesClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecResourceRefArgs) ToKubernetesClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecResourceRefOutput).ToKubernetesClusterSpecResourceRefPtrOutputWithContext(ctx)
}

// KubernetesClusterSpecResourceRefPtrInput is an input type that accepts KubernetesClusterSpecResourceRefArgs, KubernetesClusterSpecResourceRefPtr and KubernetesClusterSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecResourceRefPtrInput` via:
//
//          KubernetesClusterSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterSpecResourceRefPtrInput interface {
	pulumi.Input

	ToKubernetesClusterSpecResourceRefPtrOutput() KubernetesClusterSpecResourceRefPtrOutput
	ToKubernetesClusterSpecResourceRefPtrOutputWithContext(context.Context) KubernetesClusterSpecResourceRefPtrOutput
}

type kubernetesClusterSpecResourceRefPtrType KubernetesClusterSpecResourceRefArgs

func KubernetesClusterSpecResourceRefPtr(v *KubernetesClusterSpecResourceRefArgs) KubernetesClusterSpecResourceRefPtrInput {
	return (*kubernetesClusterSpecResourceRefPtrType)(v)
}

func (*kubernetesClusterSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecResourceRef)(nil)).Elem()
}

func (i *kubernetesClusterSpecResourceRefPtrType) ToKubernetesClusterSpecResourceRefPtrOutput() KubernetesClusterSpecResourceRefPtrOutput {
	return i.ToKubernetesClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterSpecResourceRefPtrType) ToKubernetesClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type KubernetesClusterSpecResourceRefOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecResourceRef)(nil)).Elem()
}

func (o KubernetesClusterSpecResourceRefOutput) ToKubernetesClusterSpecResourceRefOutput() KubernetesClusterSpecResourceRefOutput {
	return o
}

func (o KubernetesClusterSpecResourceRefOutput) ToKubernetesClusterSpecResourceRefOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefOutput {
	return o
}

func (o KubernetesClusterSpecResourceRefOutput) ToKubernetesClusterSpecResourceRefPtrOutput() KubernetesClusterSpecResourceRefPtrOutput {
	return o.ToKubernetesClusterSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterSpecResourceRefOutput) ToKubernetesClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *KubernetesClusterSpecResourceRef {
		return &v
	}).(KubernetesClusterSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o KubernetesClusterSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o KubernetesClusterSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KubernetesClusterSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o KubernetesClusterSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o KubernetesClusterSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o KubernetesClusterSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o KubernetesClusterSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type KubernetesClusterSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecResourceRef)(nil)).Elem()
}

func (o KubernetesClusterSpecResourceRefPtrOutput) ToKubernetesClusterSpecResourceRefPtrOutput() KubernetesClusterSpecResourceRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecResourceRefPtrOutput) ToKubernetesClusterSpecResourceRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecResourceRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecResourceRefPtrOutput) Elem() KubernetesClusterSpecResourceRefOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) KubernetesClusterSpecResourceRef { return *v }).(KubernetesClusterSpecResourceRefOutput)
}

// API version of the referent.
func (o KubernetesClusterSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o KubernetesClusterSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KubernetesClusterSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o KubernetesClusterSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o KubernetesClusterSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o KubernetesClusterSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o KubernetesClusterSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type KubernetesClusterSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// KubernetesClusterSpecWriteConnectionSecretToRefInput is an input type that accepts KubernetesClusterSpecWriteConnectionSecretToRefArgs and KubernetesClusterSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecWriteConnectionSecretToRefInput` via:
//
//          KubernetesClusterSpecWriteConnectionSecretToRefArgs{...}
type KubernetesClusterSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToKubernetesClusterSpecWriteConnectionSecretToRefOutput() KubernetesClusterSpecWriteConnectionSecretToRefOutput
	ToKubernetesClusterSpecWriteConnectionSecretToRefOutputWithContext(context.Context) KubernetesClusterSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type KubernetesClusterSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (KubernetesClusterSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i KubernetesClusterSpecWriteConnectionSecretToRefArgs) ToKubernetesClusterSpecWriteConnectionSecretToRefOutput() KubernetesClusterSpecWriteConnectionSecretToRefOutput {
	return i.ToKubernetesClusterSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecWriteConnectionSecretToRefArgs) ToKubernetesClusterSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecWriteConnectionSecretToRefOutput)
}

func (i KubernetesClusterSpecWriteConnectionSecretToRefArgs) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutput() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterSpecWriteConnectionSecretToRefArgs) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecWriteConnectionSecretToRefOutput).ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// KubernetesClusterSpecWriteConnectionSecretToRefPtrInput is an input type that accepts KubernetesClusterSpecWriteConnectionSecretToRefArgs, KubernetesClusterSpecWriteConnectionSecretToRefPtr and KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterSpecWriteConnectionSecretToRefPtrInput` via:
//
//          KubernetesClusterSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutput() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput
	ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput
}

type kubernetesClusterSpecWriteConnectionSecretToRefPtrType KubernetesClusterSpecWriteConnectionSecretToRefArgs

func KubernetesClusterSpecWriteConnectionSecretToRefPtr(v *KubernetesClusterSpecWriteConnectionSecretToRefArgs) KubernetesClusterSpecWriteConnectionSecretToRefPtrInput {
	return (*kubernetesClusterSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*kubernetesClusterSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *kubernetesClusterSpecWriteConnectionSecretToRefPtrType) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutput() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterSpecWriteConnectionSecretToRefPtrType) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type KubernetesClusterSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefOutput() KubernetesClusterSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutput() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v KubernetesClusterSpecWriteConnectionSecretToRef) *KubernetesClusterSpecWriteConnectionSecretToRef {
		return &v
	}).(KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o KubernetesClusterSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutput() KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput) ToKubernetesClusterSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput) Elem() KubernetesClusterSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecWriteConnectionSecretToRef) KubernetesClusterSpecWriteConnectionSecretToRef {
		return *v
	}).(KubernetesClusterSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type KubernetesClusterStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []KubernetesClusterStatusConditions `pulumi:"conditions"`
}

// KubernetesClusterStatusInput is an input type that accepts KubernetesClusterStatusArgs and KubernetesClusterStatusOutput values.
// You can construct a concrete instance of `KubernetesClusterStatusInput` via:
//
//          KubernetesClusterStatusArgs{...}
type KubernetesClusterStatusInput interface {
	pulumi.Input

	ToKubernetesClusterStatusOutput() KubernetesClusterStatusOutput
	ToKubernetesClusterStatusOutputWithContext(context.Context) KubernetesClusterStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type KubernetesClusterStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions KubernetesClusterStatusConditionsArrayInput `pulumi:"conditions"`
}

func (KubernetesClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterStatus)(nil)).Elem()
}

func (i KubernetesClusterStatusArgs) ToKubernetesClusterStatusOutput() KubernetesClusterStatusOutput {
	return i.ToKubernetesClusterStatusOutputWithContext(context.Background())
}

func (i KubernetesClusterStatusArgs) ToKubernetesClusterStatusOutputWithContext(ctx context.Context) KubernetesClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterStatusOutput)
}

func (i KubernetesClusterStatusArgs) ToKubernetesClusterStatusPtrOutput() KubernetesClusterStatusPtrOutput {
	return i.ToKubernetesClusterStatusPtrOutputWithContext(context.Background())
}

func (i KubernetesClusterStatusArgs) ToKubernetesClusterStatusPtrOutputWithContext(ctx context.Context) KubernetesClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterStatusOutput).ToKubernetesClusterStatusPtrOutputWithContext(ctx)
}

// KubernetesClusterStatusPtrInput is an input type that accepts KubernetesClusterStatusArgs, KubernetesClusterStatusPtr and KubernetesClusterStatusPtrOutput values.
// You can construct a concrete instance of `KubernetesClusterStatusPtrInput` via:
//
//          KubernetesClusterStatusArgs{...}
//
//  or:
//
//          nil
type KubernetesClusterStatusPtrInput interface {
	pulumi.Input

	ToKubernetesClusterStatusPtrOutput() KubernetesClusterStatusPtrOutput
	ToKubernetesClusterStatusPtrOutputWithContext(context.Context) KubernetesClusterStatusPtrOutput
}

type kubernetesClusterStatusPtrType KubernetesClusterStatusArgs

func KubernetesClusterStatusPtr(v *KubernetesClusterStatusArgs) KubernetesClusterStatusPtrInput {
	return (*kubernetesClusterStatusPtrType)(v)
}

func (*kubernetesClusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterStatus)(nil)).Elem()
}

func (i *kubernetesClusterStatusPtrType) ToKubernetesClusterStatusPtrOutput() KubernetesClusterStatusPtrOutput {
	return i.ToKubernetesClusterStatusPtrOutputWithContext(context.Background())
}

func (i *kubernetesClusterStatusPtrType) ToKubernetesClusterStatusPtrOutputWithContext(ctx context.Context) KubernetesClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type KubernetesClusterStatusOutput struct{ *pulumi.OutputState }

func (KubernetesClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterStatus)(nil)).Elem()
}

func (o KubernetesClusterStatusOutput) ToKubernetesClusterStatusOutput() KubernetesClusterStatusOutput {
	return o
}

func (o KubernetesClusterStatusOutput) ToKubernetesClusterStatusOutputWithContext(ctx context.Context) KubernetesClusterStatusOutput {
	return o
}

func (o KubernetesClusterStatusOutput) ToKubernetesClusterStatusPtrOutput() KubernetesClusterStatusPtrOutput {
	return o.ToKubernetesClusterStatusPtrOutputWithContext(context.Background())
}

func (o KubernetesClusterStatusOutput) ToKubernetesClusterStatusPtrOutputWithContext(ctx context.Context) KubernetesClusterStatusPtrOutput {
	return o.ApplyT(func(v KubernetesClusterStatus) *KubernetesClusterStatus {
		return &v
	}).(KubernetesClusterStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o KubernetesClusterStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o KubernetesClusterStatusOutput) Conditions() KubernetesClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v KubernetesClusterStatus) []KubernetesClusterStatusConditions { return v.Conditions }).(KubernetesClusterStatusConditionsArrayOutput)
}

type KubernetesClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (KubernetesClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterStatus)(nil)).Elem()
}

func (o KubernetesClusterStatusPtrOutput) ToKubernetesClusterStatusPtrOutput() KubernetesClusterStatusPtrOutput {
	return o
}

func (o KubernetesClusterStatusPtrOutput) ToKubernetesClusterStatusPtrOutputWithContext(ctx context.Context) KubernetesClusterStatusPtrOutput {
	return o
}

func (o KubernetesClusterStatusPtrOutput) Elem() KubernetesClusterStatusOutput {
	return o.ApplyT(func(v *KubernetesClusterStatus) KubernetesClusterStatus { return *v }).(KubernetesClusterStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o KubernetesClusterStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o KubernetesClusterStatusPtrOutput) Conditions() KubernetesClusterStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterStatus) []KubernetesClusterStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KubernetesClusterStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type KubernetesClusterStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// KubernetesClusterStatusConditionsInput is an input type that accepts KubernetesClusterStatusConditionsArgs and KubernetesClusterStatusConditionsOutput values.
// You can construct a concrete instance of `KubernetesClusterStatusConditionsInput` via:
//
//          KubernetesClusterStatusConditionsArgs{...}
type KubernetesClusterStatusConditionsInput interface {
	pulumi.Input

	ToKubernetesClusterStatusConditionsOutput() KubernetesClusterStatusConditionsOutput
	ToKubernetesClusterStatusConditionsOutputWithContext(context.Context) KubernetesClusterStatusConditionsOutput
}

// A Condition that may apply to a resource.
type KubernetesClusterStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KubernetesClusterStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterStatusConditions)(nil)).Elem()
}

func (i KubernetesClusterStatusConditionsArgs) ToKubernetesClusterStatusConditionsOutput() KubernetesClusterStatusConditionsOutput {
	return i.ToKubernetesClusterStatusConditionsOutputWithContext(context.Background())
}

func (i KubernetesClusterStatusConditionsArgs) ToKubernetesClusterStatusConditionsOutputWithContext(ctx context.Context) KubernetesClusterStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterStatusConditionsOutput)
}

// KubernetesClusterStatusConditionsArrayInput is an input type that accepts KubernetesClusterStatusConditionsArray and KubernetesClusterStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KubernetesClusterStatusConditionsArrayInput` via:
//
//          KubernetesClusterStatusConditionsArray{ KubernetesClusterStatusConditionsArgs{...} }
type KubernetesClusterStatusConditionsArrayInput interface {
	pulumi.Input

	ToKubernetesClusterStatusConditionsArrayOutput() KubernetesClusterStatusConditionsArrayOutput
	ToKubernetesClusterStatusConditionsArrayOutputWithContext(context.Context) KubernetesClusterStatusConditionsArrayOutput
}

type KubernetesClusterStatusConditionsArray []KubernetesClusterStatusConditionsInput

func (KubernetesClusterStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterStatusConditions)(nil)).Elem()
}

func (i KubernetesClusterStatusConditionsArray) ToKubernetesClusterStatusConditionsArrayOutput() KubernetesClusterStatusConditionsArrayOutput {
	return i.ToKubernetesClusterStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KubernetesClusterStatusConditionsArray) ToKubernetesClusterStatusConditionsArrayOutputWithContext(ctx context.Context) KubernetesClusterStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type KubernetesClusterStatusConditionsOutput struct{ *pulumi.OutputState }

func (KubernetesClusterStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterStatusConditions)(nil)).Elem()
}

func (o KubernetesClusterStatusConditionsOutput) ToKubernetesClusterStatusConditionsOutput() KubernetesClusterStatusConditionsOutput {
	return o
}

func (o KubernetesClusterStatusConditionsOutput) ToKubernetesClusterStatusConditionsOutputWithContext(ctx context.Context) KubernetesClusterStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o KubernetesClusterStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o KubernetesClusterStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesClusterStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o KubernetesClusterStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o KubernetesClusterStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o KubernetesClusterStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KubernetesClusterStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterStatusConditions)(nil)).Elem()
}

func (o KubernetesClusterStatusConditionsArrayOutput) ToKubernetesClusterStatusConditionsArrayOutput() KubernetesClusterStatusConditionsArrayOutput {
	return o
}

func (o KubernetesClusterStatusConditionsArrayOutput) ToKubernetesClusterStatusConditionsArrayOutputWithContext(ctx context.Context) KubernetesClusterStatusConditionsArrayOutput {
	return o
}

func (o KubernetesClusterStatusConditionsArrayOutput) Index(i pulumi.IntInput) KubernetesClusterStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterStatusConditions {
		return vs[0].([]KubernetesClusterStatusConditions)[vs[1].(int)]
	}).(KubernetesClusterStatusConditionsOutput)
}

// A MachineInstance is a portable resource claim that may be satisfied by binding to a machine instance, which may include Virtual Machine managed resources such as an AWS EC2 instance or bare metal managed resources such as a Packet Device.
type MachineInstanceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec *MachineInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *MachineInstanceStatus `pulumi:"status"`
}

// MachineInstanceTypeInput is an input type that accepts MachineInstanceTypeArgs and MachineInstanceTypeOutput values.
// You can construct a concrete instance of `MachineInstanceTypeInput` via:
//
//          MachineInstanceTypeArgs{...}
type MachineInstanceTypeInput interface {
	pulumi.Input

	ToMachineInstanceTypeOutput() MachineInstanceTypeOutput
	ToMachineInstanceTypeOutputWithContext(context.Context) MachineInstanceTypeOutput
}

// A MachineInstance is a portable resource claim that may be satisfied by binding to a machine instance, which may include Virtual Machine managed resources such as an AWS EC2 instance or bare metal managed resources such as a Packet Device.
type MachineInstanceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec MachineInstanceSpecPtrInput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status MachineInstanceStatusPtrInput `pulumi:"status"`
}

func (MachineInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceType)(nil)).Elem()
}

func (i MachineInstanceTypeArgs) ToMachineInstanceTypeOutput() MachineInstanceTypeOutput {
	return i.ToMachineInstanceTypeOutputWithContext(context.Background())
}

func (i MachineInstanceTypeArgs) ToMachineInstanceTypeOutputWithContext(ctx context.Context) MachineInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceTypeOutput)
}

// A MachineInstance is a portable resource claim that may be satisfied by binding to a machine instance, which may include Virtual Machine managed resources such as an AWS EC2 instance or bare metal managed resources such as a Packet Device.
type MachineInstanceTypeOutput struct{ *pulumi.OutputState }

func (MachineInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceType)(nil)).Elem()
}

func (o MachineInstanceTypeOutput) ToMachineInstanceTypeOutput() MachineInstanceTypeOutput {
	return o
}

func (o MachineInstanceTypeOutput) ToMachineInstanceTypeOutputWithContext(ctx context.Context) MachineInstanceTypeOutput {
	return o
}

func (o MachineInstanceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MachineInstanceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MachineInstanceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v MachineInstanceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// MachineInstanceSpec specifies the desired state of a MachineInstance.
func (o MachineInstanceTypeOutput) Spec() MachineInstanceSpecPtrOutput {
	return o.ApplyT(func(v MachineInstanceType) *MachineInstanceSpec { return v.Spec }).(MachineInstanceSpecPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
func (o MachineInstanceTypeOutput) Status() MachineInstanceStatusPtrOutput {
	return o.ApplyT(func(v MachineInstanceType) *MachineInstanceStatus { return v.Status }).(MachineInstanceStatusPtrOutput)
}

type MachineInstanceMetadata struct {
}

// MachineInstanceMetadataInput is an input type that accepts MachineInstanceMetadataArgs and MachineInstanceMetadataOutput values.
// You can construct a concrete instance of `MachineInstanceMetadataInput` via:
//
//          MachineInstanceMetadataArgs{...}
type MachineInstanceMetadataInput interface {
	pulumi.Input

	ToMachineInstanceMetadataOutput() MachineInstanceMetadataOutput
	ToMachineInstanceMetadataOutputWithContext(context.Context) MachineInstanceMetadataOutput
}

type MachineInstanceMetadataArgs struct {
}

func (MachineInstanceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceMetadata)(nil)).Elem()
}

func (i MachineInstanceMetadataArgs) ToMachineInstanceMetadataOutput() MachineInstanceMetadataOutput {
	return i.ToMachineInstanceMetadataOutputWithContext(context.Background())
}

func (i MachineInstanceMetadataArgs) ToMachineInstanceMetadataOutputWithContext(ctx context.Context) MachineInstanceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceMetadataOutput)
}

type MachineInstanceMetadataOutput struct{ *pulumi.OutputState }

func (MachineInstanceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceMetadata)(nil)).Elem()
}

func (o MachineInstanceMetadataOutput) ToMachineInstanceMetadataOutput() MachineInstanceMetadataOutput {
	return o
}

func (o MachineInstanceMetadataOutput) ToMachineInstanceMetadataOutputWithContext(ctx context.Context) MachineInstanceMetadataOutput {
	return o
}

// MachineInstanceSpec specifies the desired state of a MachineInstance.
type MachineInstanceSpec struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef *MachineInstanceSpecClassRef `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector *MachineInstanceSpecClassSelector `pulumi:"classSelector"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef *MachineInstanceSpecResourceRef `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef *MachineInstanceSpecWriteConnectionSecretToRef `pulumi:"writeConnectionSecretToRef"`
}

// MachineInstanceSpecInput is an input type that accepts MachineInstanceSpecArgs and MachineInstanceSpecOutput values.
// You can construct a concrete instance of `MachineInstanceSpecInput` via:
//
//          MachineInstanceSpecArgs{...}
type MachineInstanceSpecInput interface {
	pulumi.Input

	ToMachineInstanceSpecOutput() MachineInstanceSpecOutput
	ToMachineInstanceSpecOutputWithContext(context.Context) MachineInstanceSpecOutput
}

// MachineInstanceSpec specifies the desired state of a MachineInstance.
type MachineInstanceSpecArgs struct {
	// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
	ClassRef MachineInstanceSpecClassRefPtrInput `pulumi:"classRef"`
	// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
	ClassSelector MachineInstanceSpecClassSelectorPtrInput `pulumi:"classSelector"`
	// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
	ResourceRef MachineInstanceSpecResourceRefPtrInput `pulumi:"resourceRef"`
	// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
	WriteConnectionSecretToRef MachineInstanceSpecWriteConnectionSecretToRefPtrInput `pulumi:"writeConnectionSecretToRef"`
}

func (MachineInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpec)(nil)).Elem()
}

func (i MachineInstanceSpecArgs) ToMachineInstanceSpecOutput() MachineInstanceSpecOutput {
	return i.ToMachineInstanceSpecOutputWithContext(context.Background())
}

func (i MachineInstanceSpecArgs) ToMachineInstanceSpecOutputWithContext(ctx context.Context) MachineInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecOutput)
}

func (i MachineInstanceSpecArgs) ToMachineInstanceSpecPtrOutput() MachineInstanceSpecPtrOutput {
	return i.ToMachineInstanceSpecPtrOutputWithContext(context.Background())
}

func (i MachineInstanceSpecArgs) ToMachineInstanceSpecPtrOutputWithContext(ctx context.Context) MachineInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecOutput).ToMachineInstanceSpecPtrOutputWithContext(ctx)
}

// MachineInstanceSpecPtrInput is an input type that accepts MachineInstanceSpecArgs, MachineInstanceSpecPtr and MachineInstanceSpecPtrOutput values.
// You can construct a concrete instance of `MachineInstanceSpecPtrInput` via:
//
//          MachineInstanceSpecArgs{...}
//
//  or:
//
//          nil
type MachineInstanceSpecPtrInput interface {
	pulumi.Input

	ToMachineInstanceSpecPtrOutput() MachineInstanceSpecPtrOutput
	ToMachineInstanceSpecPtrOutputWithContext(context.Context) MachineInstanceSpecPtrOutput
}

type machineInstanceSpecPtrType MachineInstanceSpecArgs

func MachineInstanceSpecPtr(v *MachineInstanceSpecArgs) MachineInstanceSpecPtrInput {
	return (*machineInstanceSpecPtrType)(v)
}

func (*machineInstanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpec)(nil)).Elem()
}

func (i *machineInstanceSpecPtrType) ToMachineInstanceSpecPtrOutput() MachineInstanceSpecPtrOutput {
	return i.ToMachineInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *machineInstanceSpecPtrType) ToMachineInstanceSpecPtrOutputWithContext(ctx context.Context) MachineInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecPtrOutput)
}

// MachineInstanceSpec specifies the desired state of a MachineInstance.
type MachineInstanceSpecOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpec)(nil)).Elem()
}

func (o MachineInstanceSpecOutput) ToMachineInstanceSpecOutput() MachineInstanceSpecOutput {
	return o
}

func (o MachineInstanceSpecOutput) ToMachineInstanceSpecOutputWithContext(ctx context.Context) MachineInstanceSpecOutput {
	return o
}

func (o MachineInstanceSpecOutput) ToMachineInstanceSpecPtrOutput() MachineInstanceSpecPtrOutput {
	return o.ToMachineInstanceSpecPtrOutputWithContext(context.Background())
}

func (o MachineInstanceSpecOutput) ToMachineInstanceSpecPtrOutputWithContext(ctx context.Context) MachineInstanceSpecPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpec) *MachineInstanceSpec {
		return &v
	}).(MachineInstanceSpecPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o MachineInstanceSpecOutput) ClassRef() MachineInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpec) *MachineInstanceSpecClassRef { return v.ClassRef }).(MachineInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o MachineInstanceSpecOutput) ClassSelector() MachineInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpec) *MachineInstanceSpecClassSelector { return v.ClassSelector }).(MachineInstanceSpecClassSelectorPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o MachineInstanceSpecOutput) ResourceRef() MachineInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpec) *MachineInstanceSpecResourceRef { return v.ResourceRef }).(MachineInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o MachineInstanceSpecOutput) WriteConnectionSecretToRef() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpec) *MachineInstanceSpecWriteConnectionSecretToRef {
		return v.WriteConnectionSecretToRef
	}).(MachineInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

type MachineInstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpec)(nil)).Elem()
}

func (o MachineInstanceSpecPtrOutput) ToMachineInstanceSpecPtrOutput() MachineInstanceSpecPtrOutput {
	return o
}

func (o MachineInstanceSpecPtrOutput) ToMachineInstanceSpecPtrOutputWithContext(ctx context.Context) MachineInstanceSpecPtrOutput {
	return o
}

func (o MachineInstanceSpecPtrOutput) Elem() MachineInstanceSpecOutput {
	return o.ApplyT(func(v *MachineInstanceSpec) MachineInstanceSpec { return *v }).(MachineInstanceSpecOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
func (o MachineInstanceSpecPtrOutput) ClassRef() MachineInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpec) *MachineInstanceSpecClassRef {
		if v == nil {
			return nil
		}
		return v.ClassRef
	}).(MachineInstanceSpecClassRefPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
func (o MachineInstanceSpecPtrOutput) ClassSelector() MachineInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpec) *MachineInstanceSpecClassSelector {
		if v == nil {
			return nil
		}
		return v.ClassSelector
	}).(MachineInstanceSpecClassSelectorPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
func (o MachineInstanceSpecPtrOutput) ResourceRef() MachineInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpec) *MachineInstanceSpecResourceRef {
		if v == nil {
			return nil
		}
		return v.ResourceRef
	}).(MachineInstanceSpecResourceRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
func (o MachineInstanceSpecPtrOutput) WriteConnectionSecretToRef() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpec) *MachineInstanceSpecWriteConnectionSecretToRef {
		if v == nil {
			return nil
		}
		return v.WriteConnectionSecretToRef
	}).(MachineInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MachineInstanceSpecClassRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineInstanceSpecClassRefInput is an input type that accepts MachineInstanceSpecClassRefArgs and MachineInstanceSpecClassRefOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassRefInput` via:
//
//          MachineInstanceSpecClassRefArgs{...}
type MachineInstanceSpecClassRefInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassRefOutput() MachineInstanceSpecClassRefOutput
	ToMachineInstanceSpecClassRefOutputWithContext(context.Context) MachineInstanceSpecClassRefOutput
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MachineInstanceSpecClassRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineInstanceSpecClassRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassRef)(nil)).Elem()
}

func (i MachineInstanceSpecClassRefArgs) ToMachineInstanceSpecClassRefOutput() MachineInstanceSpecClassRefOutput {
	return i.ToMachineInstanceSpecClassRefOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassRefArgs) ToMachineInstanceSpecClassRefOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassRefOutput)
}

func (i MachineInstanceSpecClassRefArgs) ToMachineInstanceSpecClassRefPtrOutput() MachineInstanceSpecClassRefPtrOutput {
	return i.ToMachineInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassRefArgs) ToMachineInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassRefOutput).ToMachineInstanceSpecClassRefPtrOutputWithContext(ctx)
}

// MachineInstanceSpecClassRefPtrInput is an input type that accepts MachineInstanceSpecClassRefArgs, MachineInstanceSpecClassRefPtr and MachineInstanceSpecClassRefPtrOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassRefPtrInput` via:
//
//          MachineInstanceSpecClassRefArgs{...}
//
//  or:
//
//          nil
type MachineInstanceSpecClassRefPtrInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassRefPtrOutput() MachineInstanceSpecClassRefPtrOutput
	ToMachineInstanceSpecClassRefPtrOutputWithContext(context.Context) MachineInstanceSpecClassRefPtrOutput
}

type machineInstanceSpecClassRefPtrType MachineInstanceSpecClassRefArgs

func MachineInstanceSpecClassRefPtr(v *MachineInstanceSpecClassRefArgs) MachineInstanceSpecClassRefPtrInput {
	return (*machineInstanceSpecClassRefPtrType)(v)
}

func (*machineInstanceSpecClassRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecClassRef)(nil)).Elem()
}

func (i *machineInstanceSpecClassRefPtrType) ToMachineInstanceSpecClassRefPtrOutput() MachineInstanceSpecClassRefPtrOutput {
	return i.ToMachineInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (i *machineInstanceSpecClassRefPtrType) ToMachineInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassRefPtrOutput)
}

// A ClassReference specifies a resource class that will be used to dynamically provision a managed resource when the resource claim is created.
type MachineInstanceSpecClassRefOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassRef)(nil)).Elem()
}

func (o MachineInstanceSpecClassRefOutput) ToMachineInstanceSpecClassRefOutput() MachineInstanceSpecClassRefOutput {
	return o
}

func (o MachineInstanceSpecClassRefOutput) ToMachineInstanceSpecClassRefOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefOutput {
	return o
}

func (o MachineInstanceSpecClassRefOutput) ToMachineInstanceSpecClassRefPtrOutput() MachineInstanceSpecClassRefPtrOutput {
	return o.ToMachineInstanceSpecClassRefPtrOutputWithContext(context.Background())
}

func (o MachineInstanceSpecClassRefOutput) ToMachineInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *MachineInstanceSpecClassRef {
		return &v
	}).(MachineInstanceSpecClassRefPtrOutput)
}

// API version of the referent.
func (o MachineInstanceSpecClassRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineInstanceSpecClassRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineInstanceSpecClassRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineInstanceSpecClassRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineInstanceSpecClassRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineInstanceSpecClassRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineInstanceSpecClassRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineInstanceSpecClassRefPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecClassRef)(nil)).Elem()
}

func (o MachineInstanceSpecClassRefPtrOutput) ToMachineInstanceSpecClassRefPtrOutput() MachineInstanceSpecClassRefPtrOutput {
	return o
}

func (o MachineInstanceSpecClassRefPtrOutput) ToMachineInstanceSpecClassRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassRefPtrOutput {
	return o
}

func (o MachineInstanceSpecClassRefPtrOutput) Elem() MachineInstanceSpecClassRefOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) MachineInstanceSpecClassRef { return *v }).(MachineInstanceSpecClassRefOutput)
}

// API version of the referent.
func (o MachineInstanceSpecClassRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineInstanceSpecClassRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineInstanceSpecClassRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineInstanceSpecClassRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineInstanceSpecClassRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineInstanceSpecClassRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineInstanceSpecClassRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MachineInstanceSpecClassSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []MachineInstanceSpecClassSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// MachineInstanceSpecClassSelectorInput is an input type that accepts MachineInstanceSpecClassSelectorArgs and MachineInstanceSpecClassSelectorOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassSelectorInput` via:
//
//          MachineInstanceSpecClassSelectorArgs{...}
type MachineInstanceSpecClassSelectorInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassSelectorOutput() MachineInstanceSpecClassSelectorOutput
	ToMachineInstanceSpecClassSelectorOutputWithContext(context.Context) MachineInstanceSpecClassSelectorOutput
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MachineInstanceSpecClassSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions MachineInstanceSpecClassSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (MachineInstanceSpecClassSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelector)(nil)).Elem()
}

func (i MachineInstanceSpecClassSelectorArgs) ToMachineInstanceSpecClassSelectorOutput() MachineInstanceSpecClassSelectorOutput {
	return i.ToMachineInstanceSpecClassSelectorOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassSelectorArgs) ToMachineInstanceSpecClassSelectorOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorOutput)
}

func (i MachineInstanceSpecClassSelectorArgs) ToMachineInstanceSpecClassSelectorPtrOutput() MachineInstanceSpecClassSelectorPtrOutput {
	return i.ToMachineInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassSelectorArgs) ToMachineInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorOutput).ToMachineInstanceSpecClassSelectorPtrOutputWithContext(ctx)
}

// MachineInstanceSpecClassSelectorPtrInput is an input type that accepts MachineInstanceSpecClassSelectorArgs, MachineInstanceSpecClassSelectorPtr and MachineInstanceSpecClassSelectorPtrOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassSelectorPtrInput` via:
//
//          MachineInstanceSpecClassSelectorArgs{...}
//
//  or:
//
//          nil
type MachineInstanceSpecClassSelectorPtrInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassSelectorPtrOutput() MachineInstanceSpecClassSelectorPtrOutput
	ToMachineInstanceSpecClassSelectorPtrOutputWithContext(context.Context) MachineInstanceSpecClassSelectorPtrOutput
}

type machineInstanceSpecClassSelectorPtrType MachineInstanceSpecClassSelectorArgs

func MachineInstanceSpecClassSelectorPtr(v *MachineInstanceSpecClassSelectorArgs) MachineInstanceSpecClassSelectorPtrInput {
	return (*machineInstanceSpecClassSelectorPtrType)(v)
}

func (*machineInstanceSpecClassSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecClassSelector)(nil)).Elem()
}

func (i *machineInstanceSpecClassSelectorPtrType) ToMachineInstanceSpecClassSelectorPtrOutput() MachineInstanceSpecClassSelectorPtrOutput {
	return i.ToMachineInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (i *machineInstanceSpecClassSelectorPtrType) ToMachineInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorPtrOutput)
}

// A ClassSelector specifies labels that will be used to select a resource class for this claim. If multiple classes match the labels one will be chosen at random.
type MachineInstanceSpecClassSelectorOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelector)(nil)).Elem()
}

func (o MachineInstanceSpecClassSelectorOutput) ToMachineInstanceSpecClassSelectorOutput() MachineInstanceSpecClassSelectorOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorOutput) ToMachineInstanceSpecClassSelectorOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorOutput) ToMachineInstanceSpecClassSelectorPtrOutput() MachineInstanceSpecClassSelectorPtrOutput {
	return o.ToMachineInstanceSpecClassSelectorPtrOutputWithContext(context.Background())
}

func (o MachineInstanceSpecClassSelectorOutput) ToMachineInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelector) *MachineInstanceSpecClassSelector {
		return &v
	}).(MachineInstanceSpecClassSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineInstanceSpecClassSelectorOutput) MatchExpressions() MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelector) []MachineInstanceSpecClassSelectorMatchExpressions {
		return v.MatchExpressions
	}).(MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineInstanceSpecClassSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type MachineInstanceSpecClassSelectorPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecClassSelector)(nil)).Elem()
}

func (o MachineInstanceSpecClassSelectorPtrOutput) ToMachineInstanceSpecClassSelectorPtrOutput() MachineInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorPtrOutput) ToMachineInstanceSpecClassSelectorPtrOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorPtrOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorPtrOutput) Elem() MachineInstanceSpecClassSelectorOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassSelector) MachineInstanceSpecClassSelector { return *v }).(MachineInstanceSpecClassSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o MachineInstanceSpecClassSelectorPtrOutput) MatchExpressions() MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassSelector) []MachineInstanceSpecClassSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o MachineInstanceSpecClassSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MachineInstanceSpecClassSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineInstanceSpecClassSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// MachineInstanceSpecClassSelectorMatchExpressionsInput is an input type that accepts MachineInstanceSpecClassSelectorMatchExpressionsArgs and MachineInstanceSpecClassSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassSelectorMatchExpressionsInput` via:
//
//          MachineInstanceSpecClassSelectorMatchExpressionsArgs{...}
type MachineInstanceSpecClassSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassSelectorMatchExpressionsOutput() MachineInstanceSpecClassSelectorMatchExpressionsOutput
	ToMachineInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Context) MachineInstanceSpecClassSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineInstanceSpecClassSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MachineInstanceSpecClassSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineInstanceSpecClassSelectorMatchExpressionsArgs) ToMachineInstanceSpecClassSelectorMatchExpressionsOutput() MachineInstanceSpecClassSelectorMatchExpressionsOutput {
	return i.ToMachineInstanceSpecClassSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassSelectorMatchExpressionsArgs) ToMachineInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorMatchExpressionsOutput)
}

// MachineInstanceSpecClassSelectorMatchExpressionsArrayInput is an input type that accepts MachineInstanceSpecClassSelectorMatchExpressionsArray and MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassSelectorMatchExpressionsArrayInput` via:
//
//          MachineInstanceSpecClassSelectorMatchExpressionsArray{ MachineInstanceSpecClassSelectorMatchExpressionsArgs{...} }
type MachineInstanceSpecClassSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutput() MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput
	ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Context) MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput
}

type MachineInstanceSpecClassSelectorMatchExpressionsArray []MachineInstanceSpecClassSelectorMatchExpressionsInput

func (MachineInstanceSpecClassSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (i MachineInstanceSpecClassSelectorMatchExpressionsArray) ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutput() MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return i.ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassSelectorMatchExpressionsArray) ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type MachineInstanceSpecClassSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineInstanceSpecClassSelectorMatchExpressionsOutput) ToMachineInstanceSpecClassSelectorMatchExpressionsOutput() MachineInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorMatchExpressionsOutput) ToMachineInstanceSpecClassSelectorMatchExpressionsOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o MachineInstanceSpecClassSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o MachineInstanceSpecClassSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o MachineInstanceSpecClassSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineInstanceSpecClassSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInstanceSpecClassSelectorMatchExpressions)(nil)).Elem()
}

func (o MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutput() MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput) ToMachineInstanceSpecClassSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) MachineInstanceSpecClassSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineInstanceSpecClassSelectorMatchExpressions {
		return vs[0].([]MachineInstanceSpecClassSelectorMatchExpressions)[vs[1].(int)]
	}).(MachineInstanceSpecClassSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineInstanceSpecClassSelectorMatchLabels struct {
}

// MachineInstanceSpecClassSelectorMatchLabelsInput is an input type that accepts MachineInstanceSpecClassSelectorMatchLabelsArgs and MachineInstanceSpecClassSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `MachineInstanceSpecClassSelectorMatchLabelsInput` via:
//
//          MachineInstanceSpecClassSelectorMatchLabelsArgs{...}
type MachineInstanceSpecClassSelectorMatchLabelsInput interface {
	pulumi.Input

	ToMachineInstanceSpecClassSelectorMatchLabelsOutput() MachineInstanceSpecClassSelectorMatchLabelsOutput
	ToMachineInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Context) MachineInstanceSpecClassSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineInstanceSpecClassSelectorMatchLabelsArgs struct {
}

func (MachineInstanceSpecClassSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (i MachineInstanceSpecClassSelectorMatchLabelsArgs) ToMachineInstanceSpecClassSelectorMatchLabelsOutput() MachineInstanceSpecClassSelectorMatchLabelsOutput {
	return i.ToMachineInstanceSpecClassSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i MachineInstanceSpecClassSelectorMatchLabelsArgs) ToMachineInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecClassSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type MachineInstanceSpecClassSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecClassSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecClassSelectorMatchLabels)(nil)).Elem()
}

func (o MachineInstanceSpecClassSelectorMatchLabelsOutput) ToMachineInstanceSpecClassSelectorMatchLabelsOutput() MachineInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

func (o MachineInstanceSpecClassSelectorMatchLabelsOutput) ToMachineInstanceSpecClassSelectorMatchLabelsOutputWithContext(ctx context.Context) MachineInstanceSpecClassSelectorMatchLabelsOutput {
	return o
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MachineInstanceSpecResourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// MachineInstanceSpecResourceRefInput is an input type that accepts MachineInstanceSpecResourceRefArgs and MachineInstanceSpecResourceRefOutput values.
// You can construct a concrete instance of `MachineInstanceSpecResourceRefInput` via:
//
//          MachineInstanceSpecResourceRefArgs{...}
type MachineInstanceSpecResourceRefInput interface {
	pulumi.Input

	ToMachineInstanceSpecResourceRefOutput() MachineInstanceSpecResourceRefOutput
	ToMachineInstanceSpecResourceRefOutputWithContext(context.Context) MachineInstanceSpecResourceRefOutput
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MachineInstanceSpecResourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (MachineInstanceSpecResourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecResourceRef)(nil)).Elem()
}

func (i MachineInstanceSpecResourceRefArgs) ToMachineInstanceSpecResourceRefOutput() MachineInstanceSpecResourceRefOutput {
	return i.ToMachineInstanceSpecResourceRefOutputWithContext(context.Background())
}

func (i MachineInstanceSpecResourceRefArgs) ToMachineInstanceSpecResourceRefOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecResourceRefOutput)
}

func (i MachineInstanceSpecResourceRefArgs) ToMachineInstanceSpecResourceRefPtrOutput() MachineInstanceSpecResourceRefPtrOutput {
	return i.ToMachineInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i MachineInstanceSpecResourceRefArgs) ToMachineInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecResourceRefOutput).ToMachineInstanceSpecResourceRefPtrOutputWithContext(ctx)
}

// MachineInstanceSpecResourceRefPtrInput is an input type that accepts MachineInstanceSpecResourceRefArgs, MachineInstanceSpecResourceRefPtr and MachineInstanceSpecResourceRefPtrOutput values.
// You can construct a concrete instance of `MachineInstanceSpecResourceRefPtrInput` via:
//
//          MachineInstanceSpecResourceRefArgs{...}
//
//  or:
//
//          nil
type MachineInstanceSpecResourceRefPtrInput interface {
	pulumi.Input

	ToMachineInstanceSpecResourceRefPtrOutput() MachineInstanceSpecResourceRefPtrOutput
	ToMachineInstanceSpecResourceRefPtrOutputWithContext(context.Context) MachineInstanceSpecResourceRefPtrOutput
}

type machineInstanceSpecResourceRefPtrType MachineInstanceSpecResourceRefArgs

func MachineInstanceSpecResourceRefPtr(v *MachineInstanceSpecResourceRefArgs) MachineInstanceSpecResourceRefPtrInput {
	return (*machineInstanceSpecResourceRefPtrType)(v)
}

func (*machineInstanceSpecResourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecResourceRef)(nil)).Elem()
}

func (i *machineInstanceSpecResourceRefPtrType) ToMachineInstanceSpecResourceRefPtrOutput() MachineInstanceSpecResourceRefPtrOutput {
	return i.ToMachineInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (i *machineInstanceSpecResourceRefPtrType) ToMachineInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecResourceRefPtrOutput)
}

// A ResourceReference specifies an existing managed resource, in any namespace, to which this resource claim should attempt to bind. Omit the resource reference to enable dynamic provisioning using a resource class; the resource reference will be automatically populated by Crossplane.
type MachineInstanceSpecResourceRefOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecResourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecResourceRef)(nil)).Elem()
}

func (o MachineInstanceSpecResourceRefOutput) ToMachineInstanceSpecResourceRefOutput() MachineInstanceSpecResourceRefOutput {
	return o
}

func (o MachineInstanceSpecResourceRefOutput) ToMachineInstanceSpecResourceRefOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefOutput {
	return o
}

func (o MachineInstanceSpecResourceRefOutput) ToMachineInstanceSpecResourceRefPtrOutput() MachineInstanceSpecResourceRefPtrOutput {
	return o.ToMachineInstanceSpecResourceRefPtrOutputWithContext(context.Background())
}

func (o MachineInstanceSpecResourceRefOutput) ToMachineInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *MachineInstanceSpecResourceRef {
		return &v
	}).(MachineInstanceSpecResourceRefPtrOutput)
}

// API version of the referent.
func (o MachineInstanceSpecResourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineInstanceSpecResourceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineInstanceSpecResourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineInstanceSpecResourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineInstanceSpecResourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineInstanceSpecResourceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineInstanceSpecResourceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecResourceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type MachineInstanceSpecResourceRefPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecResourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecResourceRef)(nil)).Elem()
}

func (o MachineInstanceSpecResourceRefPtrOutput) ToMachineInstanceSpecResourceRefPtrOutput() MachineInstanceSpecResourceRefPtrOutput {
	return o
}

func (o MachineInstanceSpecResourceRefPtrOutput) ToMachineInstanceSpecResourceRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecResourceRefPtrOutput {
	return o
}

func (o MachineInstanceSpecResourceRefPtrOutput) Elem() MachineInstanceSpecResourceRefOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) MachineInstanceSpecResourceRef { return *v }).(MachineInstanceSpecResourceRefOutput)
}

// API version of the referent.
func (o MachineInstanceSpecResourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o MachineInstanceSpecResourceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MachineInstanceSpecResourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o MachineInstanceSpecResourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o MachineInstanceSpecResourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o MachineInstanceSpecResourceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o MachineInstanceSpecResourceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecResourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MachineInstanceSpecWriteConnectionSecretToRef struct {
	// Name of the secret.
	Name string `pulumi:"name"`
}

// MachineInstanceSpecWriteConnectionSecretToRefInput is an input type that accepts MachineInstanceSpecWriteConnectionSecretToRefArgs and MachineInstanceSpecWriteConnectionSecretToRefOutput values.
// You can construct a concrete instance of `MachineInstanceSpecWriteConnectionSecretToRefInput` via:
//
//          MachineInstanceSpecWriteConnectionSecretToRefArgs{...}
type MachineInstanceSpecWriteConnectionSecretToRefInput interface {
	pulumi.Input

	ToMachineInstanceSpecWriteConnectionSecretToRefOutput() MachineInstanceSpecWriteConnectionSecretToRefOutput
	ToMachineInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Context) MachineInstanceSpecWriteConnectionSecretToRefOutput
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MachineInstanceSpecWriteConnectionSecretToRefArgs struct {
	// Name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (MachineInstanceSpecWriteConnectionSecretToRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i MachineInstanceSpecWriteConnectionSecretToRefArgs) ToMachineInstanceSpecWriteConnectionSecretToRefOutput() MachineInstanceSpecWriteConnectionSecretToRefOutput {
	return i.ToMachineInstanceSpecWriteConnectionSecretToRefOutputWithContext(context.Background())
}

func (i MachineInstanceSpecWriteConnectionSecretToRefArgs) ToMachineInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecWriteConnectionSecretToRefOutput)
}

func (i MachineInstanceSpecWriteConnectionSecretToRefArgs) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutput() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i MachineInstanceSpecWriteConnectionSecretToRefArgs) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecWriteConnectionSecretToRefOutput).ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx)
}

// MachineInstanceSpecWriteConnectionSecretToRefPtrInput is an input type that accepts MachineInstanceSpecWriteConnectionSecretToRefArgs, MachineInstanceSpecWriteConnectionSecretToRefPtr and MachineInstanceSpecWriteConnectionSecretToRefPtrOutput values.
// You can construct a concrete instance of `MachineInstanceSpecWriteConnectionSecretToRefPtrInput` via:
//
//          MachineInstanceSpecWriteConnectionSecretToRefArgs{...}
//
//  or:
//
//          nil
type MachineInstanceSpecWriteConnectionSecretToRefPtrInput interface {
	pulumi.Input

	ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutput() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput
	ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Context) MachineInstanceSpecWriteConnectionSecretToRefPtrOutput
}

type machineInstanceSpecWriteConnectionSecretToRefPtrType MachineInstanceSpecWriteConnectionSecretToRefArgs

func MachineInstanceSpecWriteConnectionSecretToRefPtr(v *MachineInstanceSpecWriteConnectionSecretToRefArgs) MachineInstanceSpecWriteConnectionSecretToRefPtrInput {
	return (*machineInstanceSpecWriteConnectionSecretToRefPtrType)(v)
}

func (*machineInstanceSpecWriteConnectionSecretToRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (i *machineInstanceSpecWriteConnectionSecretToRefPtrType) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutput() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return i.ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (i *machineInstanceSpecWriteConnectionSecretToRefPtrType) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// WriteConnectionSecretToReference specifies the name of a Secret, in the same namespace as this resource claim, to which any connection details for this resource claim should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource bound to this resource claim.
type MachineInstanceSpecWriteConnectionSecretToRefOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecWriteConnectionSecretToRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o MachineInstanceSpecWriteConnectionSecretToRefOutput) ToMachineInstanceSpecWriteConnectionSecretToRefOutput() MachineInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o MachineInstanceSpecWriteConnectionSecretToRefOutput) ToMachineInstanceSpecWriteConnectionSecretToRefOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefOutput {
	return o
}

func (o MachineInstanceSpecWriteConnectionSecretToRefOutput) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutput() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(context.Background())
}

func (o MachineInstanceSpecWriteConnectionSecretToRefOutput) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o.ApplyT(func(v MachineInstanceSpecWriteConnectionSecretToRef) *MachineInstanceSpecWriteConnectionSecretToRef {
		return &v
	}).(MachineInstanceSpecWriteConnectionSecretToRefPtrOutput)
}

// Name of the secret.
func (o MachineInstanceSpecWriteConnectionSecretToRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceSpecWriteConnectionSecretToRef) string { return v.Name }).(pulumi.StringOutput)
}

type MachineInstanceSpecWriteConnectionSecretToRefPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceSpecWriteConnectionSecretToRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceSpecWriteConnectionSecretToRef)(nil)).Elem()
}

func (o MachineInstanceSpecWriteConnectionSecretToRefPtrOutput) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutput() MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o MachineInstanceSpecWriteConnectionSecretToRefPtrOutput) ToMachineInstanceSpecWriteConnectionSecretToRefPtrOutputWithContext(ctx context.Context) MachineInstanceSpecWriteConnectionSecretToRefPtrOutput {
	return o
}

func (o MachineInstanceSpecWriteConnectionSecretToRefPtrOutput) Elem() MachineInstanceSpecWriteConnectionSecretToRefOutput {
	return o.ApplyT(func(v *MachineInstanceSpecWriteConnectionSecretToRef) MachineInstanceSpecWriteConnectionSecretToRef {
		return *v
	}).(MachineInstanceSpecWriteConnectionSecretToRefOutput)
}

// Name of the secret.
func (o MachineInstanceSpecWriteConnectionSecretToRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceSpecWriteConnectionSecretToRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MachineInstanceStatus struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase *string `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions []MachineInstanceStatusConditions `pulumi:"conditions"`
}

// MachineInstanceStatusInput is an input type that accepts MachineInstanceStatusArgs and MachineInstanceStatusOutput values.
// You can construct a concrete instance of `MachineInstanceStatusInput` via:
//
//          MachineInstanceStatusArgs{...}
type MachineInstanceStatusInput interface {
	pulumi.Input

	ToMachineInstanceStatusOutput() MachineInstanceStatusOutput
	ToMachineInstanceStatusOutputWithContext(context.Context) MachineInstanceStatusOutput
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MachineInstanceStatusArgs struct {
	// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
	BindingPhase pulumi.StringPtrInput `pulumi:"bindingPhase"`
	// Conditions of the resource.
	Conditions MachineInstanceStatusConditionsArrayInput `pulumi:"conditions"`
}

func (MachineInstanceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceStatus)(nil)).Elem()
}

func (i MachineInstanceStatusArgs) ToMachineInstanceStatusOutput() MachineInstanceStatusOutput {
	return i.ToMachineInstanceStatusOutputWithContext(context.Background())
}

func (i MachineInstanceStatusArgs) ToMachineInstanceStatusOutputWithContext(ctx context.Context) MachineInstanceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceStatusOutput)
}

func (i MachineInstanceStatusArgs) ToMachineInstanceStatusPtrOutput() MachineInstanceStatusPtrOutput {
	return i.ToMachineInstanceStatusPtrOutputWithContext(context.Background())
}

func (i MachineInstanceStatusArgs) ToMachineInstanceStatusPtrOutputWithContext(ctx context.Context) MachineInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceStatusOutput).ToMachineInstanceStatusPtrOutputWithContext(ctx)
}

// MachineInstanceStatusPtrInput is an input type that accepts MachineInstanceStatusArgs, MachineInstanceStatusPtr and MachineInstanceStatusPtrOutput values.
// You can construct a concrete instance of `MachineInstanceStatusPtrInput` via:
//
//          MachineInstanceStatusArgs{...}
//
//  or:
//
//          nil
type MachineInstanceStatusPtrInput interface {
	pulumi.Input

	ToMachineInstanceStatusPtrOutput() MachineInstanceStatusPtrOutput
	ToMachineInstanceStatusPtrOutputWithContext(context.Context) MachineInstanceStatusPtrOutput
}

type machineInstanceStatusPtrType MachineInstanceStatusArgs

func MachineInstanceStatusPtr(v *MachineInstanceStatusArgs) MachineInstanceStatusPtrInput {
	return (*machineInstanceStatusPtrType)(v)
}

func (*machineInstanceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceStatus)(nil)).Elem()
}

func (i *machineInstanceStatusPtrType) ToMachineInstanceStatusPtrOutput() MachineInstanceStatusPtrOutput {
	return i.ToMachineInstanceStatusPtrOutputWithContext(context.Background())
}

func (i *machineInstanceStatusPtrType) ToMachineInstanceStatusPtrOutputWithContext(ctx context.Context) MachineInstanceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceStatusPtrOutput)
}

// A ResourceClaimStatus represents the observed status of a resource claim.
type MachineInstanceStatusOutput struct{ *pulumi.OutputState }

func (MachineInstanceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceStatus)(nil)).Elem()
}

func (o MachineInstanceStatusOutput) ToMachineInstanceStatusOutput() MachineInstanceStatusOutput {
	return o
}

func (o MachineInstanceStatusOutput) ToMachineInstanceStatusOutputWithContext(ctx context.Context) MachineInstanceStatusOutput {
	return o
}

func (o MachineInstanceStatusOutput) ToMachineInstanceStatusPtrOutput() MachineInstanceStatusPtrOutput {
	return o.ToMachineInstanceStatusPtrOutputWithContext(context.Background())
}

func (o MachineInstanceStatusOutput) ToMachineInstanceStatusPtrOutputWithContext(ctx context.Context) MachineInstanceStatusPtrOutput {
	return o.ApplyT(func(v MachineInstanceStatus) *MachineInstanceStatus {
		return &v
	}).(MachineInstanceStatusPtrOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o MachineInstanceStatusOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceStatus) *string { return v.BindingPhase }).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o MachineInstanceStatusOutput) Conditions() MachineInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v MachineInstanceStatus) []MachineInstanceStatusConditions { return v.Conditions }).(MachineInstanceStatusConditionsArrayOutput)
}

type MachineInstanceStatusPtrOutput struct{ *pulumi.OutputState }

func (MachineInstanceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineInstanceStatus)(nil)).Elem()
}

func (o MachineInstanceStatusPtrOutput) ToMachineInstanceStatusPtrOutput() MachineInstanceStatusPtrOutput {
	return o
}

func (o MachineInstanceStatusPtrOutput) ToMachineInstanceStatusPtrOutputWithContext(ctx context.Context) MachineInstanceStatusPtrOutput {
	return o
}

func (o MachineInstanceStatusPtrOutput) Elem() MachineInstanceStatusOutput {
	return o.ApplyT(func(v *MachineInstanceStatus) MachineInstanceStatus { return *v }).(MachineInstanceStatusOutput)
}

// Phase represents the binding phase of a managed resource or claim. Unbindable resources cannot be bound, typically because they are currently unavailable, or still being created. Unbound resource are available for binding, and Bound resources have successfully bound to another resource.
func (o MachineInstanceStatusPtrOutput) BindingPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineInstanceStatus) *string {
		if v == nil {
			return nil
		}
		return v.BindingPhase
	}).(pulumi.StringPtrOutput)
}

// Conditions of the resource.
func (o MachineInstanceStatusPtrOutput) Conditions() MachineInstanceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *MachineInstanceStatus) []MachineInstanceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(MachineInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type MachineInstanceStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// MachineInstanceStatusConditionsInput is an input type that accepts MachineInstanceStatusConditionsArgs and MachineInstanceStatusConditionsOutput values.
// You can construct a concrete instance of `MachineInstanceStatusConditionsInput` via:
//
//          MachineInstanceStatusConditionsArgs{...}
type MachineInstanceStatusConditionsInput interface {
	pulumi.Input

	ToMachineInstanceStatusConditionsOutput() MachineInstanceStatusConditionsOutput
	ToMachineInstanceStatusConditionsOutputWithContext(context.Context) MachineInstanceStatusConditionsOutput
}

// A Condition that may apply to a resource.
type MachineInstanceStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MachineInstanceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceStatusConditions)(nil)).Elem()
}

func (i MachineInstanceStatusConditionsArgs) ToMachineInstanceStatusConditionsOutput() MachineInstanceStatusConditionsOutput {
	return i.ToMachineInstanceStatusConditionsOutputWithContext(context.Background())
}

func (i MachineInstanceStatusConditionsArgs) ToMachineInstanceStatusConditionsOutputWithContext(ctx context.Context) MachineInstanceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceStatusConditionsOutput)
}

// MachineInstanceStatusConditionsArrayInput is an input type that accepts MachineInstanceStatusConditionsArray and MachineInstanceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `MachineInstanceStatusConditionsArrayInput` via:
//
//          MachineInstanceStatusConditionsArray{ MachineInstanceStatusConditionsArgs{...} }
type MachineInstanceStatusConditionsArrayInput interface {
	pulumi.Input

	ToMachineInstanceStatusConditionsArrayOutput() MachineInstanceStatusConditionsArrayOutput
	ToMachineInstanceStatusConditionsArrayOutputWithContext(context.Context) MachineInstanceStatusConditionsArrayOutput
}

type MachineInstanceStatusConditionsArray []MachineInstanceStatusConditionsInput

func (MachineInstanceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInstanceStatusConditions)(nil)).Elem()
}

func (i MachineInstanceStatusConditionsArray) ToMachineInstanceStatusConditionsArrayOutput() MachineInstanceStatusConditionsArrayOutput {
	return i.ToMachineInstanceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i MachineInstanceStatusConditionsArray) ToMachineInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) MachineInstanceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineInstanceStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type MachineInstanceStatusConditionsOutput struct{ *pulumi.OutputState }

func (MachineInstanceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineInstanceStatusConditions)(nil)).Elem()
}

func (o MachineInstanceStatusConditionsOutput) ToMachineInstanceStatusConditionsOutput() MachineInstanceStatusConditionsOutput {
	return o
}

func (o MachineInstanceStatusConditionsOutput) ToMachineInstanceStatusConditionsOutputWithContext(ctx context.Context) MachineInstanceStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o MachineInstanceStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o MachineInstanceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineInstanceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o MachineInstanceStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o MachineInstanceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o MachineInstanceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineInstanceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type MachineInstanceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (MachineInstanceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineInstanceStatusConditions)(nil)).Elem()
}

func (o MachineInstanceStatusConditionsArrayOutput) ToMachineInstanceStatusConditionsArrayOutput() MachineInstanceStatusConditionsArrayOutput {
	return o
}

func (o MachineInstanceStatusConditionsArrayOutput) ToMachineInstanceStatusConditionsArrayOutputWithContext(ctx context.Context) MachineInstanceStatusConditionsArrayOutput {
	return o
}

func (o MachineInstanceStatusConditionsArrayOutput) Index(i pulumi.IntInput) MachineInstanceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineInstanceStatusConditions {
		return vs[0].([]MachineInstanceStatusConditions)[vs[1].(int)]
	}).(MachineInstanceStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(KubernetesClusterTypeOutput{})
	pulumi.RegisterOutputType(KubernetesClusterMetadataOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassRefOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecResourceRefOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(KubernetesClusterSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterStatusOutput{})
	pulumi.RegisterOutputType(KubernetesClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(KubernetesClusterStatusConditionsOutput{})
	pulumi.RegisterOutputType(KubernetesClusterStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(MachineInstanceTypeOutput{})
	pulumi.RegisterOutputType(MachineInstanceMetadataOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassRefOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassRefPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassSelectorOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassSelectorPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecClassSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecResourceRefOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecResourceRefPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecWriteConnectionSecretToRefOutput{})
	pulumi.RegisterOutputType(MachineInstanceSpecWriteConnectionSecretToRefPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceStatusOutput{})
	pulumi.RegisterOutputType(MachineInstanceStatusPtrOutput{})
	pulumi.RegisterOutputType(MachineInstanceStatusConditionsOutput{})
	pulumi.RegisterOutputType(MachineInstanceStatusConditionsArrayOutput{})
}

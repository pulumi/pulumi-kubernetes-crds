// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A MachineInstance is a portable resource claim that may be satisfied by binding to a machine instance, which may include Virtual Machine managed resources such as an AWS EC2 instance or bare metal managed resources such as a Packet Device.
type MachineInstance struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec MachineInstanceSpecPtrOutput `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status MachineInstanceStatusPtrOutput `pulumi:"status"`
}

// NewMachineInstance registers a new resource with the given unique name, arguments, and options.
func NewMachineInstance(ctx *pulumi.Context,
	name string, args *MachineInstanceArgs, opts ...pulumi.ResourceOption) (*MachineInstance, error) {
	if args == nil {
		args = &MachineInstanceArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("compute.crossplane.io/v1alpha1")
	args.Kind = pulumi.StringPtr("MachineInstance")
	var resource MachineInstance
	err := ctx.RegisterResource("kubernetes:compute.crossplane.io/v1alpha1:MachineInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineInstance gets an existing MachineInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineInstanceState, opts ...pulumi.ResourceOption) (*MachineInstance, error) {
	var resource MachineInstance
	err := ctx.ReadResource("kubernetes:compute.crossplane.io/v1alpha1:MachineInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineInstance resources.
type machineInstanceState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec *MachineInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *MachineInstanceStatus `pulumi:"status"`
}

type MachineInstanceState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec MachineInstanceSpecPtrInput
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status MachineInstanceStatusPtrInput
}

func (MachineInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineInstanceState)(nil)).Elem()
}

type machineInstanceArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec *MachineInstanceSpec `pulumi:"spec"`
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status *MachineInstanceStatus `pulumi:"status"`
}

// The set of arguments for constructing a MachineInstance resource.
type MachineInstanceArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MachineInstanceSpec specifies the desired state of a MachineInstance.
	Spec MachineInstanceSpecPtrInput
	// A ResourceClaimStatus represents the observed status of a resource claim.
	Status MachineInstanceStatusPtrInput
}

func (MachineInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineInstanceArgs)(nil)).Elem()
}

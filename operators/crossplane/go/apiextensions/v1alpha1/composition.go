// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
type Composition struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CompositionSpec specifies the desired state of the definition.
	Spec CompositionSpecPtrOutput `pulumi:"spec"`
	// CompositionStatus shows the observed state of the composition.
	Status CompositionStatusPtrOutput `pulumi:"status"`
}

// NewComposition registers a new resource with the given unique name, arguments, and options.
func NewComposition(ctx *pulumi.Context,
	name string, args *CompositionArgs, opts ...pulumi.ResourceOption) (*Composition, error) {
	if args == nil {
		args = &CompositionArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("apiextensions.crossplane.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Composition")
	var resource Composition
	err := ctx.RegisterResource("kubernetes:apiextensions.crossplane.io/v1alpha1:Composition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComposition gets an existing Composition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComposition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompositionState, opts ...pulumi.ResourceOption) (*Composition, error) {
	var resource Composition
	err := ctx.ReadResource("kubernetes:apiextensions.crossplane.io/v1alpha1:Composition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Composition resources.
type compositionState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CompositionSpec specifies the desired state of the definition.
	Spec *CompositionSpec `pulumi:"spec"`
	// CompositionStatus shows the observed state of the composition.
	Status *CompositionStatus `pulumi:"status"`
}

type CompositionState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CompositionSpec specifies the desired state of the definition.
	Spec CompositionSpecPtrInput
	// CompositionStatus shows the observed state of the composition.
	Status CompositionStatusPtrInput
}

func (CompositionState) ElementType() reflect.Type {
	return reflect.TypeOf((*compositionState)(nil)).Elem()
}

type compositionArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CompositionSpec specifies the desired state of the definition.
	Spec *CompositionSpec `pulumi:"spec"`
	// CompositionStatus shows the observed state of the composition.
	Status *CompositionStatus `pulumi:"status"`
}

// The set of arguments for constructing a Composition resource.
type CompositionArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CompositionSpec specifies the desired state of the definition.
	Spec CompositionSpecPtrInput
	// CompositionStatus shows the observed state of the composition.
	Status CompositionStatusPtrInput
}

func (CompositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compositionArgs)(nil)).Elem()
}

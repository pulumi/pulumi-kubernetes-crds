// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
type CompositionType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CompositionSpec specifies the desired state of the definition.
	Spec *CompositionSpec `pulumi:"spec"`
	// CompositionStatus shows the observed state of the composition.
	Status *CompositionStatus `pulumi:"status"`
}

// CompositionTypeInput is an input type that accepts CompositionTypeArgs and CompositionTypeOutput values.
// You can construct a concrete instance of `CompositionTypeInput` via:
//
//          CompositionTypeArgs{...}
type CompositionTypeInput interface {
	pulumi.Input

	ToCompositionTypeOutput() CompositionTypeOutput
	ToCompositionTypeOutputWithContext(context.Context) CompositionTypeOutput
}

// Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
type CompositionTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CompositionSpec specifies the desired state of the definition.
	Spec CompositionSpecPtrInput `pulumi:"spec"`
	// CompositionStatus shows the observed state of the composition.
	Status CompositionStatusPtrInput `pulumi:"status"`
}

func (CompositionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionType)(nil)).Elem()
}

func (i CompositionTypeArgs) ToCompositionTypeOutput() CompositionTypeOutput {
	return i.ToCompositionTypeOutputWithContext(context.Background())
}

func (i CompositionTypeArgs) ToCompositionTypeOutputWithContext(ctx context.Context) CompositionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionTypeOutput)
}

// Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
type CompositionTypeOutput struct{ *pulumi.OutputState }

func (CompositionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionType)(nil)).Elem()
}

func (o CompositionTypeOutput) ToCompositionTypeOutput() CompositionTypeOutput {
	return o
}

func (o CompositionTypeOutput) ToCompositionTypeOutputWithContext(ctx context.Context) CompositionTypeOutput {
	return o
}

func (o CompositionTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CompositionTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CompositionTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CompositionType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CompositionSpec specifies the desired state of the definition.
func (o CompositionTypeOutput) Spec() CompositionSpecPtrOutput {
	return o.ApplyT(func(v CompositionType) *CompositionSpec { return v.Spec }).(CompositionSpecPtrOutput)
}

// CompositionStatus shows the observed state of the composition.
func (o CompositionTypeOutput) Status() CompositionStatusPtrOutput {
	return o.ApplyT(func(v CompositionType) *CompositionStatus { return v.Status }).(CompositionStatusPtrOutput)
}

type CompositionMetadata struct {
}

// CompositionMetadataInput is an input type that accepts CompositionMetadataArgs and CompositionMetadataOutput values.
// You can construct a concrete instance of `CompositionMetadataInput` via:
//
//          CompositionMetadataArgs{...}
type CompositionMetadataInput interface {
	pulumi.Input

	ToCompositionMetadataOutput() CompositionMetadataOutput
	ToCompositionMetadataOutputWithContext(context.Context) CompositionMetadataOutput
}

type CompositionMetadataArgs struct {
}

func (CompositionMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionMetadata)(nil)).Elem()
}

func (i CompositionMetadataArgs) ToCompositionMetadataOutput() CompositionMetadataOutput {
	return i.ToCompositionMetadataOutputWithContext(context.Background())
}

func (i CompositionMetadataArgs) ToCompositionMetadataOutputWithContext(ctx context.Context) CompositionMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionMetadataOutput)
}

type CompositionMetadataOutput struct{ *pulumi.OutputState }

func (CompositionMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionMetadata)(nil)).Elem()
}

func (o CompositionMetadataOutput) ToCompositionMetadataOutput() CompositionMetadataOutput {
	return o
}

func (o CompositionMetadataOutput) ToCompositionMetadataOutputWithContext(ctx context.Context) CompositionMetadataOutput {
	return o
}

// CompositionSpec specifies the desired state of the definition.
type CompositionSpec struct {
	// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
	From CompositionSpecFrom `pulumi:"from"`
	// ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// To is the list of target resources that make up the composition.
	To []CompositionSpecTo `pulumi:"to"`
	// WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
	WriteConnectionSecretsToNamespace string `pulumi:"writeConnectionSecretsToNamespace"`
}

// CompositionSpecInput is an input type that accepts CompositionSpecArgs and CompositionSpecOutput values.
// You can construct a concrete instance of `CompositionSpecInput` via:
//
//          CompositionSpecArgs{...}
type CompositionSpecInput interface {
	pulumi.Input

	ToCompositionSpecOutput() CompositionSpecOutput
	ToCompositionSpecOutputWithContext(context.Context) CompositionSpecOutput
}

// CompositionSpec specifies the desired state of the definition.
type CompositionSpecArgs struct {
	// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
	From CompositionSpecFromInput `pulumi:"from"`
	// ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// To is the list of target resources that make up the composition.
	To CompositionSpecToArrayInput `pulumi:"to"`
	// WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
	WriteConnectionSecretsToNamespace pulumi.StringInput `pulumi:"writeConnectionSecretsToNamespace"`
}

func (CompositionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpec)(nil)).Elem()
}

func (i CompositionSpecArgs) ToCompositionSpecOutput() CompositionSpecOutput {
	return i.ToCompositionSpecOutputWithContext(context.Background())
}

func (i CompositionSpecArgs) ToCompositionSpecOutputWithContext(ctx context.Context) CompositionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecOutput)
}

func (i CompositionSpecArgs) ToCompositionSpecPtrOutput() CompositionSpecPtrOutput {
	return i.ToCompositionSpecPtrOutputWithContext(context.Background())
}

func (i CompositionSpecArgs) ToCompositionSpecPtrOutputWithContext(ctx context.Context) CompositionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecOutput).ToCompositionSpecPtrOutputWithContext(ctx)
}

// CompositionSpecPtrInput is an input type that accepts CompositionSpecArgs, CompositionSpecPtr and CompositionSpecPtrOutput values.
// You can construct a concrete instance of `CompositionSpecPtrInput` via:
//
//          CompositionSpecArgs{...}
//
//  or:
//
//          nil
type CompositionSpecPtrInput interface {
	pulumi.Input

	ToCompositionSpecPtrOutput() CompositionSpecPtrOutput
	ToCompositionSpecPtrOutputWithContext(context.Context) CompositionSpecPtrOutput
}

type compositionSpecPtrType CompositionSpecArgs

func CompositionSpecPtr(v *CompositionSpecArgs) CompositionSpecPtrInput {
	return (*compositionSpecPtrType)(v)
}

func (*compositionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpec)(nil)).Elem()
}

func (i *compositionSpecPtrType) ToCompositionSpecPtrOutput() CompositionSpecPtrOutput {
	return i.ToCompositionSpecPtrOutputWithContext(context.Background())
}

func (i *compositionSpecPtrType) ToCompositionSpecPtrOutputWithContext(ctx context.Context) CompositionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecPtrOutput)
}

// CompositionSpec specifies the desired state of the definition.
type CompositionSpecOutput struct{ *pulumi.OutputState }

func (CompositionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpec)(nil)).Elem()
}

func (o CompositionSpecOutput) ToCompositionSpecOutput() CompositionSpecOutput {
	return o
}

func (o CompositionSpecOutput) ToCompositionSpecOutputWithContext(ctx context.Context) CompositionSpecOutput {
	return o
}

func (o CompositionSpecOutput) ToCompositionSpecPtrOutput() CompositionSpecPtrOutput {
	return o.ToCompositionSpecPtrOutputWithContext(context.Background())
}

func (o CompositionSpecOutput) ToCompositionSpecPtrOutputWithContext(ctx context.Context) CompositionSpecPtrOutput {
	return o.ApplyT(func(v CompositionSpec) *CompositionSpec {
		return &v
	}).(CompositionSpecPtrOutput)
}

// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
func (o CompositionSpecOutput) From() CompositionSpecFromOutput {
	return o.ApplyT(func(v CompositionSpec) CompositionSpecFrom { return v.From }).(CompositionSpecFromOutput)
}

// ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
func (o CompositionSpecOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionSpec) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// To is the list of target resources that make up the composition.
func (o CompositionSpecOutput) To() CompositionSpecToArrayOutput {
	return o.ApplyT(func(v CompositionSpec) []CompositionSpecTo { return v.To }).(CompositionSpecToArrayOutput)
}

// WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
func (o CompositionSpecOutput) WriteConnectionSecretsToNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpec) string { return v.WriteConnectionSecretsToNamespace }).(pulumi.StringOutput)
}

type CompositionSpecPtrOutput struct{ *pulumi.OutputState }

func (CompositionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpec)(nil)).Elem()
}

func (o CompositionSpecPtrOutput) ToCompositionSpecPtrOutput() CompositionSpecPtrOutput {
	return o
}

func (o CompositionSpecPtrOutput) ToCompositionSpecPtrOutputWithContext(ctx context.Context) CompositionSpecPtrOutput {
	return o
}

func (o CompositionSpecPtrOutput) Elem() CompositionSpecOutput {
	return o.ApplyT(func(v *CompositionSpec) CompositionSpec { return *v }).(CompositionSpecOutput)
}

// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
func (o CompositionSpecPtrOutput) From() CompositionSpecFromPtrOutput {
	return o.ApplyT(func(v *CompositionSpec) *CompositionSpecFrom {
		if v == nil {
			return nil
		}
		return &v.From
	}).(CompositionSpecFromPtrOutput)
}

// ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
func (o CompositionSpecPtrOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositionSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// To is the list of target resources that make up the composition.
func (o CompositionSpecPtrOutput) To() CompositionSpecToArrayOutput {
	return o.ApplyT(func(v *CompositionSpec) []CompositionSpecTo {
		if v == nil {
			return nil
		}
		return v.To
	}).(CompositionSpecToArrayOutput)
}

// WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
func (o CompositionSpecPtrOutput) WriteConnectionSecretsToNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositionSpec) *string {
		if v == nil {
			return nil
		}
		return &v.WriteConnectionSecretsToNamespace
	}).(pulumi.StringPtrOutput)
}

// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
type CompositionSpecFrom struct {
	// APIVersion of the type.
	ApiVersion string `pulumi:"apiVersion"`
	// Kind of the type.
	Kind string `pulumi:"kind"`
}

// CompositionSpecFromInput is an input type that accepts CompositionSpecFromArgs and CompositionSpecFromOutput values.
// You can construct a concrete instance of `CompositionSpecFromInput` via:
//
//          CompositionSpecFromArgs{...}
type CompositionSpecFromInput interface {
	pulumi.Input

	ToCompositionSpecFromOutput() CompositionSpecFromOutput
	ToCompositionSpecFromOutputWithContext(context.Context) CompositionSpecFromOutput
}

// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
type CompositionSpecFromArgs struct {
	// APIVersion of the type.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Kind of the type.
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (CompositionSpecFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecFrom)(nil)).Elem()
}

func (i CompositionSpecFromArgs) ToCompositionSpecFromOutput() CompositionSpecFromOutput {
	return i.ToCompositionSpecFromOutputWithContext(context.Background())
}

func (i CompositionSpecFromArgs) ToCompositionSpecFromOutputWithContext(ctx context.Context) CompositionSpecFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecFromOutput)
}

func (i CompositionSpecFromArgs) ToCompositionSpecFromPtrOutput() CompositionSpecFromPtrOutput {
	return i.ToCompositionSpecFromPtrOutputWithContext(context.Background())
}

func (i CompositionSpecFromArgs) ToCompositionSpecFromPtrOutputWithContext(ctx context.Context) CompositionSpecFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecFromOutput).ToCompositionSpecFromPtrOutputWithContext(ctx)
}

// CompositionSpecFromPtrInput is an input type that accepts CompositionSpecFromArgs, CompositionSpecFromPtr and CompositionSpecFromPtrOutput values.
// You can construct a concrete instance of `CompositionSpecFromPtrInput` via:
//
//          CompositionSpecFromArgs{...}
//
//  or:
//
//          nil
type CompositionSpecFromPtrInput interface {
	pulumi.Input

	ToCompositionSpecFromPtrOutput() CompositionSpecFromPtrOutput
	ToCompositionSpecFromPtrOutputWithContext(context.Context) CompositionSpecFromPtrOutput
}

type compositionSpecFromPtrType CompositionSpecFromArgs

func CompositionSpecFromPtr(v *CompositionSpecFromArgs) CompositionSpecFromPtrInput {
	return (*compositionSpecFromPtrType)(v)
}

func (*compositionSpecFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecFrom)(nil)).Elem()
}

func (i *compositionSpecFromPtrType) ToCompositionSpecFromPtrOutput() CompositionSpecFromPtrOutput {
	return i.ToCompositionSpecFromPtrOutputWithContext(context.Background())
}

func (i *compositionSpecFromPtrType) ToCompositionSpecFromPtrOutputWithContext(ctx context.Context) CompositionSpecFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecFromPtrOutput)
}

// From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.
type CompositionSpecFromOutput struct{ *pulumi.OutputState }

func (CompositionSpecFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecFrom)(nil)).Elem()
}

func (o CompositionSpecFromOutput) ToCompositionSpecFromOutput() CompositionSpecFromOutput {
	return o
}

func (o CompositionSpecFromOutput) ToCompositionSpecFromOutputWithContext(ctx context.Context) CompositionSpecFromOutput {
	return o
}

func (o CompositionSpecFromOutput) ToCompositionSpecFromPtrOutput() CompositionSpecFromPtrOutput {
	return o.ToCompositionSpecFromPtrOutputWithContext(context.Background())
}

func (o CompositionSpecFromOutput) ToCompositionSpecFromPtrOutputWithContext(ctx context.Context) CompositionSpecFromPtrOutput {
	return o.ApplyT(func(v CompositionSpecFrom) *CompositionSpecFrom {
		return &v
	}).(CompositionSpecFromPtrOutput)
}

// APIVersion of the type.
func (o CompositionSpecFromOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecFrom) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind of the type.
func (o CompositionSpecFromOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecFrom) string { return v.Kind }).(pulumi.StringOutput)
}

type CompositionSpecFromPtrOutput struct{ *pulumi.OutputState }

func (CompositionSpecFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecFrom)(nil)).Elem()
}

func (o CompositionSpecFromPtrOutput) ToCompositionSpecFromPtrOutput() CompositionSpecFromPtrOutput {
	return o
}

func (o CompositionSpecFromPtrOutput) ToCompositionSpecFromPtrOutputWithContext(ctx context.Context) CompositionSpecFromPtrOutput {
	return o
}

func (o CompositionSpecFromPtrOutput) Elem() CompositionSpecFromOutput {
	return o.ApplyT(func(v *CompositionSpecFrom) CompositionSpecFrom { return *v }).(CompositionSpecFromOutput)
}

// APIVersion of the type.
func (o CompositionSpecFromPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositionSpecFrom) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the type.
func (o CompositionSpecFromPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositionSpecFrom) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// ComposedTemplate is used to provide information about how the composed resource should be processed.
type CompositionSpecTo struct {
	// Base is the target resource that the patches will be applied on.
	Base map[string]interface{} `pulumi:"base"`
	// ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
	ConnectionDetails []CompositionSpecToConnectionDetails `pulumi:"connectionDetails"`
	// Patches will be applied as overlay to the base resource.
	Patches []CompositionSpecToPatches `pulumi:"patches"`
}

// CompositionSpecToInput is an input type that accepts CompositionSpecToArgs and CompositionSpecToOutput values.
// You can construct a concrete instance of `CompositionSpecToInput` via:
//
//          CompositionSpecToArgs{...}
type CompositionSpecToInput interface {
	pulumi.Input

	ToCompositionSpecToOutput() CompositionSpecToOutput
	ToCompositionSpecToOutputWithContext(context.Context) CompositionSpecToOutput
}

// ComposedTemplate is used to provide information about how the composed resource should be processed.
type CompositionSpecToArgs struct {
	// Base is the target resource that the patches will be applied on.
	Base pulumi.MapInput `pulumi:"base"`
	// ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
	ConnectionDetails CompositionSpecToConnectionDetailsArrayInput `pulumi:"connectionDetails"`
	// Patches will be applied as overlay to the base resource.
	Patches CompositionSpecToPatchesArrayInput `pulumi:"patches"`
}

func (CompositionSpecToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecTo)(nil)).Elem()
}

func (i CompositionSpecToArgs) ToCompositionSpecToOutput() CompositionSpecToOutput {
	return i.ToCompositionSpecToOutputWithContext(context.Background())
}

func (i CompositionSpecToArgs) ToCompositionSpecToOutputWithContext(ctx context.Context) CompositionSpecToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToOutput)
}

// CompositionSpecToArrayInput is an input type that accepts CompositionSpecToArray and CompositionSpecToArrayOutput values.
// You can construct a concrete instance of `CompositionSpecToArrayInput` via:
//
//          CompositionSpecToArray{ CompositionSpecToArgs{...} }
type CompositionSpecToArrayInput interface {
	pulumi.Input

	ToCompositionSpecToArrayOutput() CompositionSpecToArrayOutput
	ToCompositionSpecToArrayOutputWithContext(context.Context) CompositionSpecToArrayOutput
}

type CompositionSpecToArray []CompositionSpecToInput

func (CompositionSpecToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecTo)(nil)).Elem()
}

func (i CompositionSpecToArray) ToCompositionSpecToArrayOutput() CompositionSpecToArrayOutput {
	return i.ToCompositionSpecToArrayOutputWithContext(context.Background())
}

func (i CompositionSpecToArray) ToCompositionSpecToArrayOutputWithContext(ctx context.Context) CompositionSpecToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToArrayOutput)
}

// ComposedTemplate is used to provide information about how the composed resource should be processed.
type CompositionSpecToOutput struct{ *pulumi.OutputState }

func (CompositionSpecToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecTo)(nil)).Elem()
}

func (o CompositionSpecToOutput) ToCompositionSpecToOutput() CompositionSpecToOutput {
	return o
}

func (o CompositionSpecToOutput) ToCompositionSpecToOutputWithContext(ctx context.Context) CompositionSpecToOutput {
	return o
}

// Base is the target resource that the patches will be applied on.
func (o CompositionSpecToOutput) Base() pulumi.MapOutput {
	return o.ApplyT(func(v CompositionSpecTo) map[string]interface{} { return v.Base }).(pulumi.MapOutput)
}

// ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
func (o CompositionSpecToOutput) ConnectionDetails() CompositionSpecToConnectionDetailsArrayOutput {
	return o.ApplyT(func(v CompositionSpecTo) []CompositionSpecToConnectionDetails { return v.ConnectionDetails }).(CompositionSpecToConnectionDetailsArrayOutput)
}

// Patches will be applied as overlay to the base resource.
func (o CompositionSpecToOutput) Patches() CompositionSpecToPatchesArrayOutput {
	return o.ApplyT(func(v CompositionSpecTo) []CompositionSpecToPatches { return v.Patches }).(CompositionSpecToPatchesArrayOutput)
}

type CompositionSpecToArrayOutput struct{ *pulumi.OutputState }

func (CompositionSpecToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecTo)(nil)).Elem()
}

func (o CompositionSpecToArrayOutput) ToCompositionSpecToArrayOutput() CompositionSpecToArrayOutput {
	return o
}

func (o CompositionSpecToArrayOutput) ToCompositionSpecToArrayOutputWithContext(ctx context.Context) CompositionSpecToArrayOutput {
	return o
}

func (o CompositionSpecToArrayOutput) Index(i pulumi.IntInput) CompositionSpecToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositionSpecTo {
		return vs[0].([]CompositionSpecTo)[vs[1].(int)]
	}).(CompositionSpecToOutput)
}

// Base is the target resource that the patches will be applied on.
type CompositionSpecToBase struct {
}

// CompositionSpecToBaseInput is an input type that accepts CompositionSpecToBaseArgs and CompositionSpecToBaseOutput values.
// You can construct a concrete instance of `CompositionSpecToBaseInput` via:
//
//          CompositionSpecToBaseArgs{...}
type CompositionSpecToBaseInput interface {
	pulumi.Input

	ToCompositionSpecToBaseOutput() CompositionSpecToBaseOutput
	ToCompositionSpecToBaseOutputWithContext(context.Context) CompositionSpecToBaseOutput
}

// Base is the target resource that the patches will be applied on.
type CompositionSpecToBaseArgs struct {
}

func (CompositionSpecToBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToBase)(nil)).Elem()
}

func (i CompositionSpecToBaseArgs) ToCompositionSpecToBaseOutput() CompositionSpecToBaseOutput {
	return i.ToCompositionSpecToBaseOutputWithContext(context.Background())
}

func (i CompositionSpecToBaseArgs) ToCompositionSpecToBaseOutputWithContext(ctx context.Context) CompositionSpecToBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToBaseOutput)
}

// Base is the target resource that the patches will be applied on.
type CompositionSpecToBaseOutput struct{ *pulumi.OutputState }

func (CompositionSpecToBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToBase)(nil)).Elem()
}

func (o CompositionSpecToBaseOutput) ToCompositionSpecToBaseOutput() CompositionSpecToBaseOutput {
	return o
}

func (o CompositionSpecToBaseOutput) ToCompositionSpecToBaseOutputWithContext(ctx context.Context) CompositionSpecToBaseOutput {
	return o
}

// ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
type CompositionSpecToConnectionDetails struct {
	// FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
	FromConnectionSecretKey string `pulumi:"fromConnectionSecretKey"`
	// Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
	Name *string `pulumi:"name"`
}

// CompositionSpecToConnectionDetailsInput is an input type that accepts CompositionSpecToConnectionDetailsArgs and CompositionSpecToConnectionDetailsOutput values.
// You can construct a concrete instance of `CompositionSpecToConnectionDetailsInput` via:
//
//          CompositionSpecToConnectionDetailsArgs{...}
type CompositionSpecToConnectionDetailsInput interface {
	pulumi.Input

	ToCompositionSpecToConnectionDetailsOutput() CompositionSpecToConnectionDetailsOutput
	ToCompositionSpecToConnectionDetailsOutputWithContext(context.Context) CompositionSpecToConnectionDetailsOutput
}

// ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
type CompositionSpecToConnectionDetailsArgs struct {
	// FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
	FromConnectionSecretKey pulumi.StringInput `pulumi:"fromConnectionSecretKey"`
	// Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CompositionSpecToConnectionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToConnectionDetails)(nil)).Elem()
}

func (i CompositionSpecToConnectionDetailsArgs) ToCompositionSpecToConnectionDetailsOutput() CompositionSpecToConnectionDetailsOutput {
	return i.ToCompositionSpecToConnectionDetailsOutputWithContext(context.Background())
}

func (i CompositionSpecToConnectionDetailsArgs) ToCompositionSpecToConnectionDetailsOutputWithContext(ctx context.Context) CompositionSpecToConnectionDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToConnectionDetailsOutput)
}

// CompositionSpecToConnectionDetailsArrayInput is an input type that accepts CompositionSpecToConnectionDetailsArray and CompositionSpecToConnectionDetailsArrayOutput values.
// You can construct a concrete instance of `CompositionSpecToConnectionDetailsArrayInput` via:
//
//          CompositionSpecToConnectionDetailsArray{ CompositionSpecToConnectionDetailsArgs{...} }
type CompositionSpecToConnectionDetailsArrayInput interface {
	pulumi.Input

	ToCompositionSpecToConnectionDetailsArrayOutput() CompositionSpecToConnectionDetailsArrayOutput
	ToCompositionSpecToConnectionDetailsArrayOutputWithContext(context.Context) CompositionSpecToConnectionDetailsArrayOutput
}

type CompositionSpecToConnectionDetailsArray []CompositionSpecToConnectionDetailsInput

func (CompositionSpecToConnectionDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToConnectionDetails)(nil)).Elem()
}

func (i CompositionSpecToConnectionDetailsArray) ToCompositionSpecToConnectionDetailsArrayOutput() CompositionSpecToConnectionDetailsArrayOutput {
	return i.ToCompositionSpecToConnectionDetailsArrayOutputWithContext(context.Background())
}

func (i CompositionSpecToConnectionDetailsArray) ToCompositionSpecToConnectionDetailsArrayOutputWithContext(ctx context.Context) CompositionSpecToConnectionDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToConnectionDetailsArrayOutput)
}

// ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
type CompositionSpecToConnectionDetailsOutput struct{ *pulumi.OutputState }

func (CompositionSpecToConnectionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToConnectionDetails)(nil)).Elem()
}

func (o CompositionSpecToConnectionDetailsOutput) ToCompositionSpecToConnectionDetailsOutput() CompositionSpecToConnectionDetailsOutput {
	return o
}

func (o CompositionSpecToConnectionDetailsOutput) ToCompositionSpecToConnectionDetailsOutputWithContext(ctx context.Context) CompositionSpecToConnectionDetailsOutput {
	return o
}

// FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
func (o CompositionSpecToConnectionDetailsOutput) FromConnectionSecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecToConnectionDetails) string { return v.FromConnectionSecretKey }).(pulumi.StringOutput)
}

// Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
func (o CompositionSpecToConnectionDetailsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionSpecToConnectionDetails) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CompositionSpecToConnectionDetailsArrayOutput struct{ *pulumi.OutputState }

func (CompositionSpecToConnectionDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToConnectionDetails)(nil)).Elem()
}

func (o CompositionSpecToConnectionDetailsArrayOutput) ToCompositionSpecToConnectionDetailsArrayOutput() CompositionSpecToConnectionDetailsArrayOutput {
	return o
}

func (o CompositionSpecToConnectionDetailsArrayOutput) ToCompositionSpecToConnectionDetailsArrayOutputWithContext(ctx context.Context) CompositionSpecToConnectionDetailsArrayOutput {
	return o
}

func (o CompositionSpecToConnectionDetailsArrayOutput) Index(i pulumi.IntInput) CompositionSpecToConnectionDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositionSpecToConnectionDetails {
		return vs[0].([]CompositionSpecToConnectionDetails)[vs[1].(int)]
	}).(CompositionSpecToConnectionDetailsOutput)
}

// Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
type CompositionSpecToPatches struct {
	// FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
	FromFieldPath string `pulumi:"fromFieldPath"`
	// ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
	ToFieldPath *string `pulumi:"toFieldPath"`
	// Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
	Transforms []CompositionSpecToPatchesTransforms `pulumi:"transforms"`
}

// CompositionSpecToPatchesInput is an input type that accepts CompositionSpecToPatchesArgs and CompositionSpecToPatchesOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesInput` via:
//
//          CompositionSpecToPatchesArgs{...}
type CompositionSpecToPatchesInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesOutput() CompositionSpecToPatchesOutput
	ToCompositionSpecToPatchesOutputWithContext(context.Context) CompositionSpecToPatchesOutput
}

// Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
type CompositionSpecToPatchesArgs struct {
	// FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
	FromFieldPath pulumi.StringInput `pulumi:"fromFieldPath"`
	// ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
	ToFieldPath pulumi.StringPtrInput `pulumi:"toFieldPath"`
	// Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
	Transforms CompositionSpecToPatchesTransformsArrayInput `pulumi:"transforms"`
}

func (CompositionSpecToPatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatches)(nil)).Elem()
}

func (i CompositionSpecToPatchesArgs) ToCompositionSpecToPatchesOutput() CompositionSpecToPatchesOutput {
	return i.ToCompositionSpecToPatchesOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesArgs) ToCompositionSpecToPatchesOutputWithContext(ctx context.Context) CompositionSpecToPatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesOutput)
}

// CompositionSpecToPatchesArrayInput is an input type that accepts CompositionSpecToPatchesArray and CompositionSpecToPatchesArrayOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesArrayInput` via:
//
//          CompositionSpecToPatchesArray{ CompositionSpecToPatchesArgs{...} }
type CompositionSpecToPatchesArrayInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesArrayOutput() CompositionSpecToPatchesArrayOutput
	ToCompositionSpecToPatchesArrayOutputWithContext(context.Context) CompositionSpecToPatchesArrayOutput
}

type CompositionSpecToPatchesArray []CompositionSpecToPatchesInput

func (CompositionSpecToPatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToPatches)(nil)).Elem()
}

func (i CompositionSpecToPatchesArray) ToCompositionSpecToPatchesArrayOutput() CompositionSpecToPatchesArrayOutput {
	return i.ToCompositionSpecToPatchesArrayOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesArray) ToCompositionSpecToPatchesArrayOutputWithContext(ctx context.Context) CompositionSpecToPatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesArrayOutput)
}

// Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
type CompositionSpecToPatchesOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatches)(nil)).Elem()
}

func (o CompositionSpecToPatchesOutput) ToCompositionSpecToPatchesOutput() CompositionSpecToPatchesOutput {
	return o
}

func (o CompositionSpecToPatchesOutput) ToCompositionSpecToPatchesOutputWithContext(ctx context.Context) CompositionSpecToPatchesOutput {
	return o
}

// FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
func (o CompositionSpecToPatchesOutput) FromFieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecToPatches) string { return v.FromFieldPath }).(pulumi.StringOutput)
}

// ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
func (o CompositionSpecToPatchesOutput) ToFieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatches) *string { return v.ToFieldPath }).(pulumi.StringPtrOutput)
}

// Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
func (o CompositionSpecToPatchesOutput) Transforms() CompositionSpecToPatchesTransformsArrayOutput {
	return o.ApplyT(func(v CompositionSpecToPatches) []CompositionSpecToPatchesTransforms { return v.Transforms }).(CompositionSpecToPatchesTransformsArrayOutput)
}

type CompositionSpecToPatchesArrayOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToPatches)(nil)).Elem()
}

func (o CompositionSpecToPatchesArrayOutput) ToCompositionSpecToPatchesArrayOutput() CompositionSpecToPatchesArrayOutput {
	return o
}

func (o CompositionSpecToPatchesArrayOutput) ToCompositionSpecToPatchesArrayOutputWithContext(ctx context.Context) CompositionSpecToPatchesArrayOutput {
	return o
}

func (o CompositionSpecToPatchesArrayOutput) Index(i pulumi.IntInput) CompositionSpecToPatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositionSpecToPatches {
		return vs[0].([]CompositionSpecToPatches)[vs[1].(int)]
	}).(CompositionSpecToPatchesOutput)
}

// Transform is a unit of process whose input is transformed into an output with the supplied configuration.
type CompositionSpecToPatchesTransforms struct {
	// Map uses the input as a key in the given map and returns the value.
	Map map[string]string `pulumi:"map"`
	// Math is used to transform the input via mathematical operations such as multiplication.
	Math *CompositionSpecToPatchesTransformsMath `pulumi:"math"`
	// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
	String *CompositionSpecToPatchesTransformsString `pulumi:"string"`
	// Type of the transform to be run.
	Type string `pulumi:"type"`
}

// CompositionSpecToPatchesTransformsInput is an input type that accepts CompositionSpecToPatchesTransformsArgs and CompositionSpecToPatchesTransformsOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsInput` via:
//
//          CompositionSpecToPatchesTransformsArgs{...}
type CompositionSpecToPatchesTransformsInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsOutput() CompositionSpecToPatchesTransformsOutput
	ToCompositionSpecToPatchesTransformsOutputWithContext(context.Context) CompositionSpecToPatchesTransformsOutput
}

// Transform is a unit of process whose input is transformed into an output with the supplied configuration.
type CompositionSpecToPatchesTransformsArgs struct {
	// Map uses the input as a key in the given map and returns the value.
	Map pulumi.StringMapInput `pulumi:"map"`
	// Math is used to transform the input via mathematical operations such as multiplication.
	Math CompositionSpecToPatchesTransformsMathPtrInput `pulumi:"math"`
	// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
	String CompositionSpecToPatchesTransformsStringPtrInput `pulumi:"string"`
	// Type of the transform to be run.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CompositionSpecToPatchesTransformsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransforms)(nil)).Elem()
}

func (i CompositionSpecToPatchesTransformsArgs) ToCompositionSpecToPatchesTransformsOutput() CompositionSpecToPatchesTransformsOutput {
	return i.ToCompositionSpecToPatchesTransformsOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsArgs) ToCompositionSpecToPatchesTransformsOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsOutput)
}

// CompositionSpecToPatchesTransformsArrayInput is an input type that accepts CompositionSpecToPatchesTransformsArray and CompositionSpecToPatchesTransformsArrayOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsArrayInput` via:
//
//          CompositionSpecToPatchesTransformsArray{ CompositionSpecToPatchesTransformsArgs{...} }
type CompositionSpecToPatchesTransformsArrayInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsArrayOutput() CompositionSpecToPatchesTransformsArrayOutput
	ToCompositionSpecToPatchesTransformsArrayOutputWithContext(context.Context) CompositionSpecToPatchesTransformsArrayOutput
}

type CompositionSpecToPatchesTransformsArray []CompositionSpecToPatchesTransformsInput

func (CompositionSpecToPatchesTransformsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToPatchesTransforms)(nil)).Elem()
}

func (i CompositionSpecToPatchesTransformsArray) ToCompositionSpecToPatchesTransformsArrayOutput() CompositionSpecToPatchesTransformsArrayOutput {
	return i.ToCompositionSpecToPatchesTransformsArrayOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsArray) ToCompositionSpecToPatchesTransformsArrayOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsArrayOutput)
}

// Transform is a unit of process whose input is transformed into an output with the supplied configuration.
type CompositionSpecToPatchesTransformsOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransforms)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsOutput) ToCompositionSpecToPatchesTransformsOutput() CompositionSpecToPatchesTransformsOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsOutput) ToCompositionSpecToPatchesTransformsOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsOutput {
	return o
}

// Map uses the input as a key in the given map and returns the value.
func (o CompositionSpecToPatchesTransformsOutput) Map() pulumi.StringMapOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransforms) map[string]string { return v.Map }).(pulumi.StringMapOutput)
}

// Math is used to transform the input via mathematical operations such as multiplication.
func (o CompositionSpecToPatchesTransformsOutput) Math() CompositionSpecToPatchesTransformsMathPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransforms) *CompositionSpecToPatchesTransformsMath { return v.Math }).(CompositionSpecToPatchesTransformsMathPtrOutput)
}

// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
func (o CompositionSpecToPatchesTransformsOutput) String() CompositionSpecToPatchesTransformsStringPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransforms) *CompositionSpecToPatchesTransformsString { return v.String }).(CompositionSpecToPatchesTransformsStringPtrOutput)
}

// Type of the transform to be run.
func (o CompositionSpecToPatchesTransformsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransforms) string { return v.Type }).(pulumi.StringOutput)
}

type CompositionSpecToPatchesTransformsArrayOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionSpecToPatchesTransforms)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsArrayOutput) ToCompositionSpecToPatchesTransformsArrayOutput() CompositionSpecToPatchesTransformsArrayOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsArrayOutput) ToCompositionSpecToPatchesTransformsArrayOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsArrayOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsArrayOutput) Index(i pulumi.IntInput) CompositionSpecToPatchesTransformsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositionSpecToPatchesTransforms {
		return vs[0].([]CompositionSpecToPatchesTransforms)[vs[1].(int)]
	}).(CompositionSpecToPatchesTransformsOutput)
}

// Map uses the input as a key in the given map and returns the value.
type CompositionSpecToPatchesTransformsMap struct {
}

// CompositionSpecToPatchesTransformsMapInput is an input type that accepts CompositionSpecToPatchesTransformsMap and CompositionSpecToPatchesTransformsMapOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsMapInput` via:
//
//          CompositionSpecToPatchesTransformsMap{ "key": CompositionSpecToPatchesTransformsArgs{...} }
type CompositionSpecToPatchesTransformsMapInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsMapOutput() CompositionSpecToPatchesTransformsMapOutput
	ToCompositionSpecToPatchesTransformsMapOutputWithContext(context.Context) CompositionSpecToPatchesTransformsMapOutput
}

// Map uses the input as a key in the given map and returns the value.
type CompositionSpecToPatchesTransformsMapArgs struct {
}

func (CompositionSpecToPatchesTransformsMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsMap)(nil)).Elem()
}

func (i CompositionSpecToPatchesTransformsMapArgs) ToCompositionSpecToPatchesTransformsMapOutput() CompositionSpecToPatchesTransformsMapOutput {
	return i.ToCompositionSpecToPatchesTransformsMapOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsMapArgs) ToCompositionSpecToPatchesTransformsMapOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsMapOutput)
}

// Map uses the input as a key in the given map and returns the value.
type CompositionSpecToPatchesTransformsMapOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsMap)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsMapOutput) ToCompositionSpecToPatchesTransformsMapOutput() CompositionSpecToPatchesTransformsMapOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsMapOutput) ToCompositionSpecToPatchesTransformsMapOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMapOutput {
	return o
}

// Math is used to transform the input via mathematical operations such as multiplication.
type CompositionSpecToPatchesTransformsMath struct {
	// Multiply the value.
	Multiply *int `pulumi:"multiply"`
}

// CompositionSpecToPatchesTransformsMathInput is an input type that accepts CompositionSpecToPatchesTransformsMathArgs and CompositionSpecToPatchesTransformsMathOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsMathInput` via:
//
//          CompositionSpecToPatchesTransformsMathArgs{...}
type CompositionSpecToPatchesTransformsMathInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsMathOutput() CompositionSpecToPatchesTransformsMathOutput
	ToCompositionSpecToPatchesTransformsMathOutputWithContext(context.Context) CompositionSpecToPatchesTransformsMathOutput
}

// Math is used to transform the input via mathematical operations such as multiplication.
type CompositionSpecToPatchesTransformsMathArgs struct {
	// Multiply the value.
	Multiply pulumi.IntPtrInput `pulumi:"multiply"`
}

func (CompositionSpecToPatchesTransformsMathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsMath)(nil)).Elem()
}

func (i CompositionSpecToPatchesTransformsMathArgs) ToCompositionSpecToPatchesTransformsMathOutput() CompositionSpecToPatchesTransformsMathOutput {
	return i.ToCompositionSpecToPatchesTransformsMathOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsMathArgs) ToCompositionSpecToPatchesTransformsMathOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsMathOutput)
}

func (i CompositionSpecToPatchesTransformsMathArgs) ToCompositionSpecToPatchesTransformsMathPtrOutput() CompositionSpecToPatchesTransformsMathPtrOutput {
	return i.ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsMathArgs) ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsMathOutput).ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(ctx)
}

// CompositionSpecToPatchesTransformsMathPtrInput is an input type that accepts CompositionSpecToPatchesTransformsMathArgs, CompositionSpecToPatchesTransformsMathPtr and CompositionSpecToPatchesTransformsMathPtrOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsMathPtrInput` via:
//
//          CompositionSpecToPatchesTransformsMathArgs{...}
//
//  or:
//
//          nil
type CompositionSpecToPatchesTransformsMathPtrInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsMathPtrOutput() CompositionSpecToPatchesTransformsMathPtrOutput
	ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(context.Context) CompositionSpecToPatchesTransformsMathPtrOutput
}

type compositionSpecToPatchesTransformsMathPtrType CompositionSpecToPatchesTransformsMathArgs

func CompositionSpecToPatchesTransformsMathPtr(v *CompositionSpecToPatchesTransformsMathArgs) CompositionSpecToPatchesTransformsMathPtrInput {
	return (*compositionSpecToPatchesTransformsMathPtrType)(v)
}

func (*compositionSpecToPatchesTransformsMathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecToPatchesTransformsMath)(nil)).Elem()
}

func (i *compositionSpecToPatchesTransformsMathPtrType) ToCompositionSpecToPatchesTransformsMathPtrOutput() CompositionSpecToPatchesTransformsMathPtrOutput {
	return i.ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(context.Background())
}

func (i *compositionSpecToPatchesTransformsMathPtrType) ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsMathPtrOutput)
}

// Math is used to transform the input via mathematical operations such as multiplication.
type CompositionSpecToPatchesTransformsMathOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsMathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsMath)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsMathOutput) ToCompositionSpecToPatchesTransformsMathOutput() CompositionSpecToPatchesTransformsMathOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsMathOutput) ToCompositionSpecToPatchesTransformsMathOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsMathOutput) ToCompositionSpecToPatchesTransformsMathPtrOutput() CompositionSpecToPatchesTransformsMathPtrOutput {
	return o.ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(context.Background())
}

func (o CompositionSpecToPatchesTransformsMathOutput) ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransformsMath) *CompositionSpecToPatchesTransformsMath {
		return &v
	}).(CompositionSpecToPatchesTransformsMathPtrOutput)
}

// Multiply the value.
func (o CompositionSpecToPatchesTransformsMathOutput) Multiply() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransformsMath) *int { return v.Multiply }).(pulumi.IntPtrOutput)
}

type CompositionSpecToPatchesTransformsMathPtrOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsMathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecToPatchesTransformsMath)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsMathPtrOutput) ToCompositionSpecToPatchesTransformsMathPtrOutput() CompositionSpecToPatchesTransformsMathPtrOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsMathPtrOutput) ToCompositionSpecToPatchesTransformsMathPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsMathPtrOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsMathPtrOutput) Elem() CompositionSpecToPatchesTransformsMathOutput {
	return o.ApplyT(func(v *CompositionSpecToPatchesTransformsMath) CompositionSpecToPatchesTransformsMath { return *v }).(CompositionSpecToPatchesTransformsMathOutput)
}

// Multiply the value.
func (o CompositionSpecToPatchesTransformsMathPtrOutput) Multiply() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CompositionSpecToPatchesTransformsMath) *int {
		if v == nil {
			return nil
		}
		return v.Multiply
	}).(pulumi.IntPtrOutput)
}

// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
type CompositionSpecToPatchesTransformsString struct {
	// Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
	Fmt string `pulumi:"fmt"`
}

// CompositionSpecToPatchesTransformsStringInput is an input type that accepts CompositionSpecToPatchesTransformsStringArgs and CompositionSpecToPatchesTransformsStringOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsStringInput` via:
//
//          CompositionSpecToPatchesTransformsStringArgs{...}
type CompositionSpecToPatchesTransformsStringInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsStringOutput() CompositionSpecToPatchesTransformsStringOutput
	ToCompositionSpecToPatchesTransformsStringOutputWithContext(context.Context) CompositionSpecToPatchesTransformsStringOutput
}

// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
type CompositionSpecToPatchesTransformsStringArgs struct {
	// Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
	Fmt pulumi.StringInput `pulumi:"fmt"`
}

func (CompositionSpecToPatchesTransformsStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsString)(nil)).Elem()
}

func (i CompositionSpecToPatchesTransformsStringArgs) ToCompositionSpecToPatchesTransformsStringOutput() CompositionSpecToPatchesTransformsStringOutput {
	return i.ToCompositionSpecToPatchesTransformsStringOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsStringArgs) ToCompositionSpecToPatchesTransformsStringOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsStringOutput)
}

func (i CompositionSpecToPatchesTransformsStringArgs) ToCompositionSpecToPatchesTransformsStringPtrOutput() CompositionSpecToPatchesTransformsStringPtrOutput {
	return i.ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(context.Background())
}

func (i CompositionSpecToPatchesTransformsStringArgs) ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsStringOutput).ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(ctx)
}

// CompositionSpecToPatchesTransformsStringPtrInput is an input type that accepts CompositionSpecToPatchesTransformsStringArgs, CompositionSpecToPatchesTransformsStringPtr and CompositionSpecToPatchesTransformsStringPtrOutput values.
// You can construct a concrete instance of `CompositionSpecToPatchesTransformsStringPtrInput` via:
//
//          CompositionSpecToPatchesTransformsStringArgs{...}
//
//  or:
//
//          nil
type CompositionSpecToPatchesTransformsStringPtrInput interface {
	pulumi.Input

	ToCompositionSpecToPatchesTransformsStringPtrOutput() CompositionSpecToPatchesTransformsStringPtrOutput
	ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(context.Context) CompositionSpecToPatchesTransformsStringPtrOutput
}

type compositionSpecToPatchesTransformsStringPtrType CompositionSpecToPatchesTransformsStringArgs

func CompositionSpecToPatchesTransformsStringPtr(v *CompositionSpecToPatchesTransformsStringArgs) CompositionSpecToPatchesTransformsStringPtrInput {
	return (*compositionSpecToPatchesTransformsStringPtrType)(v)
}

func (*compositionSpecToPatchesTransformsStringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecToPatchesTransformsString)(nil)).Elem()
}

func (i *compositionSpecToPatchesTransformsStringPtrType) ToCompositionSpecToPatchesTransformsStringPtrOutput() CompositionSpecToPatchesTransformsStringPtrOutput {
	return i.ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(context.Background())
}

func (i *compositionSpecToPatchesTransformsStringPtrType) ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionSpecToPatchesTransformsStringPtrOutput)
}

// String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
type CompositionSpecToPatchesTransformsStringOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionSpecToPatchesTransformsString)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsStringOutput) ToCompositionSpecToPatchesTransformsStringOutput() CompositionSpecToPatchesTransformsStringOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsStringOutput) ToCompositionSpecToPatchesTransformsStringOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsStringOutput) ToCompositionSpecToPatchesTransformsStringPtrOutput() CompositionSpecToPatchesTransformsStringPtrOutput {
	return o.ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(context.Background())
}

func (o CompositionSpecToPatchesTransformsStringOutput) ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringPtrOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransformsString) *CompositionSpecToPatchesTransformsString {
		return &v
	}).(CompositionSpecToPatchesTransformsStringPtrOutput)
}

// Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
func (o CompositionSpecToPatchesTransformsStringOutput) Fmt() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionSpecToPatchesTransformsString) string { return v.Fmt }).(pulumi.StringOutput)
}

type CompositionSpecToPatchesTransformsStringPtrOutput struct{ *pulumi.OutputState }

func (CompositionSpecToPatchesTransformsStringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionSpecToPatchesTransformsString)(nil)).Elem()
}

func (o CompositionSpecToPatchesTransformsStringPtrOutput) ToCompositionSpecToPatchesTransformsStringPtrOutput() CompositionSpecToPatchesTransformsStringPtrOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsStringPtrOutput) ToCompositionSpecToPatchesTransformsStringPtrOutputWithContext(ctx context.Context) CompositionSpecToPatchesTransformsStringPtrOutput {
	return o
}

func (o CompositionSpecToPatchesTransformsStringPtrOutput) Elem() CompositionSpecToPatchesTransformsStringOutput {
	return o.ApplyT(func(v *CompositionSpecToPatchesTransformsString) CompositionSpecToPatchesTransformsString { return *v }).(CompositionSpecToPatchesTransformsStringOutput)
}

// Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
func (o CompositionSpecToPatchesTransformsStringPtrOutput) Fmt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositionSpecToPatchesTransformsString) *string {
		if v == nil {
			return nil
		}
		return &v.Fmt
	}).(pulumi.StringPtrOutput)
}

// CompositionStatus shows the observed state of the composition.
type CompositionStatus struct {
	// Conditions of the resource.
	Conditions []CompositionStatusConditions `pulumi:"conditions"`
}

// CompositionStatusInput is an input type that accepts CompositionStatusArgs and CompositionStatusOutput values.
// You can construct a concrete instance of `CompositionStatusInput` via:
//
//          CompositionStatusArgs{...}
type CompositionStatusInput interface {
	pulumi.Input

	ToCompositionStatusOutput() CompositionStatusOutput
	ToCompositionStatusOutputWithContext(context.Context) CompositionStatusOutput
}

// CompositionStatus shows the observed state of the composition.
type CompositionStatusArgs struct {
	// Conditions of the resource.
	Conditions CompositionStatusConditionsArrayInput `pulumi:"conditions"`
}

func (CompositionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionStatus)(nil)).Elem()
}

func (i CompositionStatusArgs) ToCompositionStatusOutput() CompositionStatusOutput {
	return i.ToCompositionStatusOutputWithContext(context.Background())
}

func (i CompositionStatusArgs) ToCompositionStatusOutputWithContext(ctx context.Context) CompositionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionStatusOutput)
}

func (i CompositionStatusArgs) ToCompositionStatusPtrOutput() CompositionStatusPtrOutput {
	return i.ToCompositionStatusPtrOutputWithContext(context.Background())
}

func (i CompositionStatusArgs) ToCompositionStatusPtrOutputWithContext(ctx context.Context) CompositionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionStatusOutput).ToCompositionStatusPtrOutputWithContext(ctx)
}

// CompositionStatusPtrInput is an input type that accepts CompositionStatusArgs, CompositionStatusPtr and CompositionStatusPtrOutput values.
// You can construct a concrete instance of `CompositionStatusPtrInput` via:
//
//          CompositionStatusArgs{...}
//
//  or:
//
//          nil
type CompositionStatusPtrInput interface {
	pulumi.Input

	ToCompositionStatusPtrOutput() CompositionStatusPtrOutput
	ToCompositionStatusPtrOutputWithContext(context.Context) CompositionStatusPtrOutput
}

type compositionStatusPtrType CompositionStatusArgs

func CompositionStatusPtr(v *CompositionStatusArgs) CompositionStatusPtrInput {
	return (*compositionStatusPtrType)(v)
}

func (*compositionStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionStatus)(nil)).Elem()
}

func (i *compositionStatusPtrType) ToCompositionStatusPtrOutput() CompositionStatusPtrOutput {
	return i.ToCompositionStatusPtrOutputWithContext(context.Background())
}

func (i *compositionStatusPtrType) ToCompositionStatusPtrOutputWithContext(ctx context.Context) CompositionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionStatusPtrOutput)
}

// CompositionStatus shows the observed state of the composition.
type CompositionStatusOutput struct{ *pulumi.OutputState }

func (CompositionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionStatus)(nil)).Elem()
}

func (o CompositionStatusOutput) ToCompositionStatusOutput() CompositionStatusOutput {
	return o
}

func (o CompositionStatusOutput) ToCompositionStatusOutputWithContext(ctx context.Context) CompositionStatusOutput {
	return o
}

func (o CompositionStatusOutput) ToCompositionStatusPtrOutput() CompositionStatusPtrOutput {
	return o.ToCompositionStatusPtrOutputWithContext(context.Background())
}

func (o CompositionStatusOutput) ToCompositionStatusPtrOutputWithContext(ctx context.Context) CompositionStatusPtrOutput {
	return o.ApplyT(func(v CompositionStatus) *CompositionStatus {
		return &v
	}).(CompositionStatusPtrOutput)
}

// Conditions of the resource.
func (o CompositionStatusOutput) Conditions() CompositionStatusConditionsArrayOutput {
	return o.ApplyT(func(v CompositionStatus) []CompositionStatusConditions { return v.Conditions }).(CompositionStatusConditionsArrayOutput)
}

type CompositionStatusPtrOutput struct{ *pulumi.OutputState }

func (CompositionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositionStatus)(nil)).Elem()
}

func (o CompositionStatusPtrOutput) ToCompositionStatusPtrOutput() CompositionStatusPtrOutput {
	return o
}

func (o CompositionStatusPtrOutput) ToCompositionStatusPtrOutputWithContext(ctx context.Context) CompositionStatusPtrOutput {
	return o
}

func (o CompositionStatusPtrOutput) Elem() CompositionStatusOutput {
	return o.ApplyT(func(v *CompositionStatus) CompositionStatus { return *v }).(CompositionStatusOutput)
}

// Conditions of the resource.
func (o CompositionStatusPtrOutput) Conditions() CompositionStatusConditionsArrayOutput {
	return o.ApplyT(func(v *CompositionStatus) []CompositionStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CompositionStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type CompositionStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// CompositionStatusConditionsInput is an input type that accepts CompositionStatusConditionsArgs and CompositionStatusConditionsOutput values.
// You can construct a concrete instance of `CompositionStatusConditionsInput` via:
//
//          CompositionStatusConditionsArgs{...}
type CompositionStatusConditionsInput interface {
	pulumi.Input

	ToCompositionStatusConditionsOutput() CompositionStatusConditionsOutput
	ToCompositionStatusConditionsOutputWithContext(context.Context) CompositionStatusConditionsOutput
}

// A Condition that may apply to a resource.
type CompositionStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CompositionStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionStatusConditions)(nil)).Elem()
}

func (i CompositionStatusConditionsArgs) ToCompositionStatusConditionsOutput() CompositionStatusConditionsOutput {
	return i.ToCompositionStatusConditionsOutputWithContext(context.Background())
}

func (i CompositionStatusConditionsArgs) ToCompositionStatusConditionsOutputWithContext(ctx context.Context) CompositionStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionStatusConditionsOutput)
}

// CompositionStatusConditionsArrayInput is an input type that accepts CompositionStatusConditionsArray and CompositionStatusConditionsArrayOutput values.
// You can construct a concrete instance of `CompositionStatusConditionsArrayInput` via:
//
//          CompositionStatusConditionsArray{ CompositionStatusConditionsArgs{...} }
type CompositionStatusConditionsArrayInput interface {
	pulumi.Input

	ToCompositionStatusConditionsArrayOutput() CompositionStatusConditionsArrayOutput
	ToCompositionStatusConditionsArrayOutputWithContext(context.Context) CompositionStatusConditionsArrayOutput
}

type CompositionStatusConditionsArray []CompositionStatusConditionsInput

func (CompositionStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionStatusConditions)(nil)).Elem()
}

func (i CompositionStatusConditionsArray) ToCompositionStatusConditionsArrayOutput() CompositionStatusConditionsArrayOutput {
	return i.ToCompositionStatusConditionsArrayOutputWithContext(context.Background())
}

func (i CompositionStatusConditionsArray) ToCompositionStatusConditionsArrayOutputWithContext(ctx context.Context) CompositionStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositionStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type CompositionStatusConditionsOutput struct{ *pulumi.OutputState }

func (CompositionStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositionStatusConditions)(nil)).Elem()
}

func (o CompositionStatusConditionsOutput) ToCompositionStatusConditionsOutput() CompositionStatusConditionsOutput {
	return o
}

func (o CompositionStatusConditionsOutput) ToCompositionStatusConditionsOutputWithContext(ctx context.Context) CompositionStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o CompositionStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o CompositionStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CompositionStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o CompositionStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o CompositionStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o CompositionStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CompositionStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type CompositionStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (CompositionStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositionStatusConditions)(nil)).Elem()
}

func (o CompositionStatusConditionsArrayOutput) ToCompositionStatusConditionsArrayOutput() CompositionStatusConditionsArrayOutput {
	return o
}

func (o CompositionStatusConditionsArrayOutput) ToCompositionStatusConditionsArrayOutputWithContext(ctx context.Context) CompositionStatusConditionsArrayOutput {
	return o
}

func (o CompositionStatusConditionsArrayOutput) Index(i pulumi.IntInput) CompositionStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositionStatusConditions {
		return vs[0].([]CompositionStatusConditions)[vs[1].(int)]
	}).(CompositionStatusConditionsOutput)
}

// An InfrastructureDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
type InfrastructureDefinitionType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// InfrastructureDefinitionSpec specifies the desired state of the definition.
	Spec *InfrastructureDefinitionSpec `pulumi:"spec"`
	// InfrastructureDefinitionStatus shows the observed state of the definition.
	Status *InfrastructureDefinitionStatus `pulumi:"status"`
}

// InfrastructureDefinitionTypeInput is an input type that accepts InfrastructureDefinitionTypeArgs and InfrastructureDefinitionTypeOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionTypeInput` via:
//
//          InfrastructureDefinitionTypeArgs{...}
type InfrastructureDefinitionTypeInput interface {
	pulumi.Input

	ToInfrastructureDefinitionTypeOutput() InfrastructureDefinitionTypeOutput
	ToInfrastructureDefinitionTypeOutputWithContext(context.Context) InfrastructureDefinitionTypeOutput
}

// An InfrastructureDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
type InfrastructureDefinitionTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// InfrastructureDefinitionSpec specifies the desired state of the definition.
	Spec InfrastructureDefinitionSpecPtrInput `pulumi:"spec"`
	// InfrastructureDefinitionStatus shows the observed state of the definition.
	Status InfrastructureDefinitionStatusPtrInput `pulumi:"status"`
}

func (InfrastructureDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionType)(nil)).Elem()
}

func (i InfrastructureDefinitionTypeArgs) ToInfrastructureDefinitionTypeOutput() InfrastructureDefinitionTypeOutput {
	return i.ToInfrastructureDefinitionTypeOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionTypeArgs) ToInfrastructureDefinitionTypeOutputWithContext(ctx context.Context) InfrastructureDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionTypeOutput)
}

// An InfrastructureDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
type InfrastructureDefinitionTypeOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionType)(nil)).Elem()
}

func (o InfrastructureDefinitionTypeOutput) ToInfrastructureDefinitionTypeOutput() InfrastructureDefinitionTypeOutput {
	return o
}

func (o InfrastructureDefinitionTypeOutput) ToInfrastructureDefinitionTypeOutputWithContext(ctx context.Context) InfrastructureDefinitionTypeOutput {
	return o
}

func (o InfrastructureDefinitionTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o InfrastructureDefinitionTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o InfrastructureDefinitionTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// InfrastructureDefinitionSpec specifies the desired state of the definition.
func (o InfrastructureDefinitionTypeOutput) Spec() InfrastructureDefinitionSpecPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionType) *InfrastructureDefinitionSpec { return v.Spec }).(InfrastructureDefinitionSpecPtrOutput)
}

// InfrastructureDefinitionStatus shows the observed state of the definition.
func (o InfrastructureDefinitionTypeOutput) Status() InfrastructureDefinitionStatusPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionType) *InfrastructureDefinitionStatus { return v.Status }).(InfrastructureDefinitionStatusPtrOutput)
}

type InfrastructureDefinitionMetadata struct {
}

// InfrastructureDefinitionMetadataInput is an input type that accepts InfrastructureDefinitionMetadataArgs and InfrastructureDefinitionMetadataOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionMetadataInput` via:
//
//          InfrastructureDefinitionMetadataArgs{...}
type InfrastructureDefinitionMetadataInput interface {
	pulumi.Input

	ToInfrastructureDefinitionMetadataOutput() InfrastructureDefinitionMetadataOutput
	ToInfrastructureDefinitionMetadataOutputWithContext(context.Context) InfrastructureDefinitionMetadataOutput
}

type InfrastructureDefinitionMetadataArgs struct {
}

func (InfrastructureDefinitionMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionMetadata)(nil)).Elem()
}

func (i InfrastructureDefinitionMetadataArgs) ToInfrastructureDefinitionMetadataOutput() InfrastructureDefinitionMetadataOutput {
	return i.ToInfrastructureDefinitionMetadataOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionMetadataArgs) ToInfrastructureDefinitionMetadataOutputWithContext(ctx context.Context) InfrastructureDefinitionMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionMetadataOutput)
}

type InfrastructureDefinitionMetadataOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionMetadata)(nil)).Elem()
}

func (o InfrastructureDefinitionMetadataOutput) ToInfrastructureDefinitionMetadataOutput() InfrastructureDefinitionMetadataOutput {
	return o
}

func (o InfrastructureDefinitionMetadataOutput) ToInfrastructureDefinitionMetadataOutputWithContext(ctx context.Context) InfrastructureDefinitionMetadataOutput {
	return o
}

// InfrastructureDefinitionSpec specifies the desired state of the definition.
type InfrastructureDefinitionSpec struct {
	// ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
	ConnectionSecretKeys []string `pulumi:"connectionSecretKeys"`
	// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
	CrdSpecTemplate *InfrastructureDefinitionSpecCrdSpecTemplate `pulumi:"crdSpecTemplate"`
}

// InfrastructureDefinitionSpecInput is an input type that accepts InfrastructureDefinitionSpecArgs and InfrastructureDefinitionSpecOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecInput` via:
//
//          InfrastructureDefinitionSpecArgs{...}
type InfrastructureDefinitionSpecInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecOutput() InfrastructureDefinitionSpecOutput
	ToInfrastructureDefinitionSpecOutputWithContext(context.Context) InfrastructureDefinitionSpecOutput
}

// InfrastructureDefinitionSpec specifies the desired state of the definition.
type InfrastructureDefinitionSpecArgs struct {
	// ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
	ConnectionSecretKeys pulumi.StringArrayInput `pulumi:"connectionSecretKeys"`
	// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
	CrdSpecTemplate InfrastructureDefinitionSpecCrdSpecTemplatePtrInput `pulumi:"crdSpecTemplate"`
}

func (InfrastructureDefinitionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpec)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecArgs) ToInfrastructureDefinitionSpecOutput() InfrastructureDefinitionSpecOutput {
	return i.ToInfrastructureDefinitionSpecOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecArgs) ToInfrastructureDefinitionSpecOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecOutput)
}

func (i InfrastructureDefinitionSpecArgs) ToInfrastructureDefinitionSpecPtrOutput() InfrastructureDefinitionSpecPtrOutput {
	return i.ToInfrastructureDefinitionSpecPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecArgs) ToInfrastructureDefinitionSpecPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecOutput).ToInfrastructureDefinitionSpecPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionSpecPtrInput is an input type that accepts InfrastructureDefinitionSpecArgs, InfrastructureDefinitionSpecPtr and InfrastructureDefinitionSpecPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecPtrInput` via:
//
//          InfrastructureDefinitionSpecArgs{...}
//
//  or:
//
//          nil
type InfrastructureDefinitionSpecPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecPtrOutput() InfrastructureDefinitionSpecPtrOutput
	ToInfrastructureDefinitionSpecPtrOutputWithContext(context.Context) InfrastructureDefinitionSpecPtrOutput
}

type infrastructureDefinitionSpecPtrType InfrastructureDefinitionSpecArgs

func InfrastructureDefinitionSpecPtr(v *InfrastructureDefinitionSpecArgs) InfrastructureDefinitionSpecPtrInput {
	return (*infrastructureDefinitionSpecPtrType)(v)
}

func (*infrastructureDefinitionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpec)(nil)).Elem()
}

func (i *infrastructureDefinitionSpecPtrType) ToInfrastructureDefinitionSpecPtrOutput() InfrastructureDefinitionSpecPtrOutput {
	return i.ToInfrastructureDefinitionSpecPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionSpecPtrType) ToInfrastructureDefinitionSpecPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecPtrOutput)
}

// InfrastructureDefinitionSpec specifies the desired state of the definition.
type InfrastructureDefinitionSpecOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpec)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecOutput) ToInfrastructureDefinitionSpecOutput() InfrastructureDefinitionSpecOutput {
	return o
}

func (o InfrastructureDefinitionSpecOutput) ToInfrastructureDefinitionSpecOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecOutput {
	return o
}

func (o InfrastructureDefinitionSpecOutput) ToInfrastructureDefinitionSpecPtrOutput() InfrastructureDefinitionSpecPtrOutput {
	return o.ToInfrastructureDefinitionSpecPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionSpecOutput) ToInfrastructureDefinitionSpecPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpec) *InfrastructureDefinitionSpec {
		return &v
	}).(InfrastructureDefinitionSpecPtrOutput)
}

// ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
func (o InfrastructureDefinitionSpecOutput) ConnectionSecretKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpec) []string { return v.ConnectionSecretKeys }).(pulumi.StringArrayOutput)
}

// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
func (o InfrastructureDefinitionSpecOutput) CrdSpecTemplate() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpec) *InfrastructureDefinitionSpecCrdSpecTemplate {
		return v.CrdSpecTemplate
	}).(InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput)
}

type InfrastructureDefinitionSpecPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpec)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecPtrOutput) ToInfrastructureDefinitionSpecPtrOutput() InfrastructureDefinitionSpecPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecPtrOutput) ToInfrastructureDefinitionSpecPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecPtrOutput) Elem() InfrastructureDefinitionSpecOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpec) InfrastructureDefinitionSpec { return *v }).(InfrastructureDefinitionSpecOutput)
}

// ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
func (o InfrastructureDefinitionSpecPtrOutput) ConnectionSecretKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpec) []string {
		if v == nil {
			return nil
		}
		return v.ConnectionSecretKeys
	}).(pulumi.StringArrayOutput)
}

// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
func (o InfrastructureDefinitionSpecPtrOutput) CrdSpecTemplate() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpec) *InfrastructureDefinitionSpecCrdSpecTemplate {
		if v == nil {
			return nil
		}
		return v.CrdSpecTemplate
	}).(InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput)
}

// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
type InfrastructureDefinitionSpecCrdSpecTemplate struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns []InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns `pulumi:"additionalPrinterColumns"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group string `pulumi:"group"`
	// names specify the resource and kind names for the custom resource.
	Names InfrastructureDefinitionSpecCrdSpecTemplateNames `pulumi:"names"`
	// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
	Validation *InfrastructureDefinitionSpecCrdSpecTemplateValidation `pulumi:"validation"`
	// version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
	Version *string `pulumi:"version"`
}

// InfrastructureDefinitionSpecCrdSpecTemplateInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateArgs and InfrastructureDefinitionSpecCrdSpecTemplateOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateArgs{...}
type InfrastructureDefinitionSpecCrdSpecTemplateInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateOutput() InfrastructureDefinitionSpecCrdSpecTemplateOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateOutput
}

// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
type InfrastructureDefinitionSpecCrdSpecTemplateArgs struct {
	// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
	AdditionalPrinterColumns InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayInput `pulumi:"additionalPrinterColumns"`
	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group pulumi.StringInput `pulumi:"group"`
	// names specify the resource and kind names for the custom resource.
	Names InfrastructureDefinitionSpecCrdSpecTemplateNamesInput `pulumi:"names"`
	// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
	Validation InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrInput `pulumi:"validation"`
	// version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (InfrastructureDefinitionSpecCrdSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplate)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateOutput() InfrastructureDefinitionSpecCrdSpecTemplateOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateOutput)
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateArgs) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutput() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateArgs) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateOutput).ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(ctx)
}

// InfrastructureDefinitionSpecCrdSpecTemplatePtrInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateArgs, InfrastructureDefinitionSpecCrdSpecTemplatePtr and InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplatePtrInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateArgs{...}
//
//  or:
//
//          nil
type InfrastructureDefinitionSpecCrdSpecTemplatePtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutput() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput
}

type infrastructureDefinitionSpecCrdSpecTemplatePtrType InfrastructureDefinitionSpecCrdSpecTemplateArgs

func InfrastructureDefinitionSpecCrdSpecTemplatePtr(v *InfrastructureDefinitionSpecCrdSpecTemplateArgs) InfrastructureDefinitionSpecCrdSpecTemplatePtrInput {
	return (*infrastructureDefinitionSpecCrdSpecTemplatePtrType)(v)
}

func (*infrastructureDefinitionSpecCrdSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplate)(nil)).Elem()
}

func (i *infrastructureDefinitionSpecCrdSpecTemplatePtrType) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutput() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionSpecCrdSpecTemplatePtrType) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput)
}

// CRDSpecTemplate is the base CRD template. The final CRD will have additional fields to the base template to accommodate Crossplane machinery.
type InfrastructureDefinitionSpecCrdSpecTemplateOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplate)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateOutput() InfrastructureDefinitionSpecCrdSpecTemplateOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutput() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o.ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) *InfrastructureDefinitionSpecCrdSpecTemplate {
		return &v
	}).(InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput)
}

// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) AdditionalPrinterColumns() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) []InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns {
		return v.AdditionalPrinterColumns
	}).(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput)
}

// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) string { return v.Group }).(pulumi.StringOutput)
}

// names specify the resource and kind names for the custom resource.
func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) Names() InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) InfrastructureDefinitionSpecCrdSpecTemplateNames {
		return v.Names
	}).(InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput)
}

// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) Validation() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) *InfrastructureDefinitionSpecCrdSpecTemplateValidation {
		return v.Validation
	}).(InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput)
}

// version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
func (o InfrastructureDefinitionSpecCrdSpecTemplateOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplate) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplate)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutput() InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplatePtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) Elem() InfrastructureDefinitionSpecCrdSpecTemplateOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) InfrastructureDefinitionSpecCrdSpecTemplate {
		return *v
	}).(InfrastructureDefinitionSpecCrdSpecTemplateOutput)
}

// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) AdditionalPrinterColumns() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) []InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns {
		if v == nil {
			return nil
		}
		return v.AdditionalPrinterColumns
	}).(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput)
}

// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Group
	}).(pulumi.StringPtrOutput)
}

// names specify the resource and kind names for the custom resource.
func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) Names() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) *InfrastructureDefinitionSpecCrdSpecTemplateNames {
		if v == nil {
			return nil
		}
		return &v.Names
	}).(InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput)
}

// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) Validation() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) *InfrastructureDefinitionSpecCrdSpecTemplateValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput)
}

// version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
func (o InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns struct {
	// JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JSONPath string `pulumi:"JSONPath"`
	// description is a human readable description of this column.
	Description *string `pulumi:"description"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format *string `pulumi:"format"`
	// name is a human readable name for the column.
	Name string `pulumi:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority *int `pulumi:"priority"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type string `pulumi:"type"`
}

// InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs and InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs{...}
type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs struct {
	// JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
	JSONPath pulumi.StringInput `pulumi:"JSONPath"`
	// description is a human readable description of this column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// name is a human readable name for the column.
	Name pulumi.StringInput `pulumi:"name"`
	// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput)
}

// InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray and InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray{ InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArgs{...} }
type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput
}

type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray []InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsInput

func (InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArray) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput)
}

// CustomResourceColumnDefinition specifies a column for server side printing.
type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput {
	return o
}

// JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) JSONPath() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) string { return v.JSONPath }).(pulumi.StringOutput)
}

// description is a human readable description of this column.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// name is a human readable name for the column.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) string { return v.Name }).(pulumi.StringOutput)
}

// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns) string { return v.Type }).(pulumi.StringOutput)
}

type InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput() InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput) Index(i pulumi.IntInput) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns {
		return vs[0].([]InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumns)[vs[1].(int)]
	}).(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput)
}

// names specify the resource and kind names for the custom resource.
type InfrastructureDefinitionSpecCrdSpecTemplateNames struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories []string `pulumi:"categories"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind string `pulumi:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind *string `pulumi:"listKind"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural string `pulumi:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames []string `pulumi:"shortNames"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular *string `pulumi:"singular"`
}

// InfrastructureDefinitionSpecCrdSpecTemplateNamesInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs and InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateNamesInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs{...}
type InfrastructureDefinitionSpecCrdSpecTemplateNamesInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput
}

// names specify the resource and kind names for the custom resource.
type InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs struct {
	// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
	Kind pulumi.StringInput `pulumi:"kind"`
	// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind pulumi.StringPtrInput `pulumi:"listKind"`
	// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
	Plural pulumi.StringInput `pulumi:"plural"`
	// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames pulumi.StringArrayInput `pulumi:"shortNames"`
	// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
	Singular pulumi.StringPtrInput `pulumi:"singular"`
}

func (InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateNames)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput)
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput).ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs, InfrastructureDefinitionSpecCrdSpecTemplateNamesPtr and InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs{...}
//
//  or:
//
//          nil
type InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput
}

type infrastructureDefinitionSpecCrdSpecTemplateNamesPtrType InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs

func InfrastructureDefinitionSpecCrdSpecTemplateNamesPtr(v *InfrastructureDefinitionSpecCrdSpecTemplateNamesArgs) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrInput {
	return (*infrastructureDefinitionSpecCrdSpecTemplateNamesPtrType)(v)
}

func (*infrastructureDefinitionSpecCrdSpecTemplateNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplateNames)(nil)).Elem()
}

func (i *infrastructureDefinitionSpecCrdSpecTemplateNamesPtrType) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionSpecCrdSpecTemplateNamesPtrType) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput)
}

// names specify the resource and kind names for the custom resource.
type InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateNames)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return o.ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) *InfrastructureDefinitionSpecCrdSpecTemplateNames {
		return &v
	}).(InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput)
}

// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) string { return v.Kind }).(pulumi.StringOutput)
}

// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ListKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) *string { return v.ListKind }).(pulumi.StringPtrOutput)
}

// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) Plural() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) string { return v.Plural }).(pulumi.StringOutput)
}

// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) ShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) []string { return v.ShortNames }).(pulumi.StringArrayOutput)
}

// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput) Singular() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateNames) *string { return v.Singular }).(pulumi.StringPtrOutput)
}

type InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplateNames)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) Elem() InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) InfrastructureDefinitionSpecCrdSpecTemplateNames {
		return *v
	}).(InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput)
}

// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) ListKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) *string {
		if v == nil {
			return nil
		}
		return v.ListKind
	}).(pulumi.StringPtrOutput)
}

// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) Plural() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) *string {
		if v == nil {
			return nil
		}
		return &v.Plural
	}).(pulumi.StringPtrOutput)
}

// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) ShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) []string {
		if v == nil {
			return nil
		}
		return v.ShortNames
	}).(pulumi.StringArrayOutput)
}

// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
func (o InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput) Singular() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateNames) *string {
		if v == nil {
			return nil
		}
		return v.Singular
	}).(pulumi.StringPtrOutput)
}

// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
type InfrastructureDefinitionSpecCrdSpecTemplateValidation struct {
	// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema map[string]interface{} `pulumi:"openAPIV3Schema"`
}

// InfrastructureDefinitionSpecCrdSpecTemplateValidationInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs and InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateValidationInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs{...}
type InfrastructureDefinitionSpecCrdSpecTemplateValidationInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput
}

// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
type InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs struct {
	// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema pulumi.MapInput `pulumi:"openAPIV3Schema"`
}

func (InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateValidation)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput)
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput).ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs, InfrastructureDefinitionSpecCrdSpecTemplateValidationPtr and InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs{...}
//
//  or:
//
//          nil
type InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput
}

type infrastructureDefinitionSpecCrdSpecTemplateValidationPtrType InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs

func InfrastructureDefinitionSpecCrdSpecTemplateValidationPtr(v *InfrastructureDefinitionSpecCrdSpecTemplateValidationArgs) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrInput {
	return (*infrastructureDefinitionSpecCrdSpecTemplateValidationPtrType)(v)
}

func (*infrastructureDefinitionSpecCrdSpecTemplateValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplateValidation)(nil)).Elem()
}

func (i *infrastructureDefinitionSpecCrdSpecTemplateValidationPtrType) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionSpecCrdSpecTemplateValidationPtrType) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput)
}

// validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
type InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateValidation)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o.ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateValidation) *InfrastructureDefinitionSpecCrdSpecTemplateValidation {
		return &v
	}).(InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput)
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput) OpenAPIV3Schema() pulumi.MapOutput {
	return o.ApplyT(func(v InfrastructureDefinitionSpecCrdSpecTemplateValidation) map[string]interface{} {
		return v.OpenAPIV3Schema
	}).(pulumi.MapOutput)
}

type InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionSpecCrdSpecTemplateValidation)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput) Elem() InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateValidation) InfrastructureDefinitionSpecCrdSpecTemplateValidation {
		return *v
	}).(InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput)
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput) OpenAPIV3Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionSpecCrdSpecTemplateValidation) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.OpenAPIV3Schema
	}).(pulumi.MapOutput)
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
type InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3Schema struct {
}

// InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaInput is an input type that accepts InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs and InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaInput` via:
//
//          InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs{...}
type InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaInput interface {
	pulumi.Input

	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput
	ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutputWithContext(context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
type InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs struct {
}

func (InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3Schema)(nil)).Elem()
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput {
	return i.ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaArgs) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput)
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
type InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3Schema)(nil)).Elem()
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput() InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput {
	return o
}

func (o InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput) ToInfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutputWithContext(ctx context.Context) InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput {
	return o
}

// InfrastructureDefinitionStatus shows the observed state of the definition.
type InfrastructureDefinitionStatus struct {
	// Conditions of the resource.
	Conditions []InfrastructureDefinitionStatusConditions `pulumi:"conditions"`
}

// InfrastructureDefinitionStatusInput is an input type that accepts InfrastructureDefinitionStatusArgs and InfrastructureDefinitionStatusOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionStatusInput` via:
//
//          InfrastructureDefinitionStatusArgs{...}
type InfrastructureDefinitionStatusInput interface {
	pulumi.Input

	ToInfrastructureDefinitionStatusOutput() InfrastructureDefinitionStatusOutput
	ToInfrastructureDefinitionStatusOutputWithContext(context.Context) InfrastructureDefinitionStatusOutput
}

// InfrastructureDefinitionStatus shows the observed state of the definition.
type InfrastructureDefinitionStatusArgs struct {
	// Conditions of the resource.
	Conditions InfrastructureDefinitionStatusConditionsArrayInput `pulumi:"conditions"`
}

func (InfrastructureDefinitionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionStatus)(nil)).Elem()
}

func (i InfrastructureDefinitionStatusArgs) ToInfrastructureDefinitionStatusOutput() InfrastructureDefinitionStatusOutput {
	return i.ToInfrastructureDefinitionStatusOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionStatusArgs) ToInfrastructureDefinitionStatusOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionStatusOutput)
}

func (i InfrastructureDefinitionStatusArgs) ToInfrastructureDefinitionStatusPtrOutput() InfrastructureDefinitionStatusPtrOutput {
	return i.ToInfrastructureDefinitionStatusPtrOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionStatusArgs) ToInfrastructureDefinitionStatusPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionStatusOutput).ToInfrastructureDefinitionStatusPtrOutputWithContext(ctx)
}

// InfrastructureDefinitionStatusPtrInput is an input type that accepts InfrastructureDefinitionStatusArgs, InfrastructureDefinitionStatusPtr and InfrastructureDefinitionStatusPtrOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionStatusPtrInput` via:
//
//          InfrastructureDefinitionStatusArgs{...}
//
//  or:
//
//          nil
type InfrastructureDefinitionStatusPtrInput interface {
	pulumi.Input

	ToInfrastructureDefinitionStatusPtrOutput() InfrastructureDefinitionStatusPtrOutput
	ToInfrastructureDefinitionStatusPtrOutputWithContext(context.Context) InfrastructureDefinitionStatusPtrOutput
}

type infrastructureDefinitionStatusPtrType InfrastructureDefinitionStatusArgs

func InfrastructureDefinitionStatusPtr(v *InfrastructureDefinitionStatusArgs) InfrastructureDefinitionStatusPtrInput {
	return (*infrastructureDefinitionStatusPtrType)(v)
}

func (*infrastructureDefinitionStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionStatus)(nil)).Elem()
}

func (i *infrastructureDefinitionStatusPtrType) ToInfrastructureDefinitionStatusPtrOutput() InfrastructureDefinitionStatusPtrOutput {
	return i.ToInfrastructureDefinitionStatusPtrOutputWithContext(context.Background())
}

func (i *infrastructureDefinitionStatusPtrType) ToInfrastructureDefinitionStatusPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionStatusPtrOutput)
}

// InfrastructureDefinitionStatus shows the observed state of the definition.
type InfrastructureDefinitionStatusOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionStatus)(nil)).Elem()
}

func (o InfrastructureDefinitionStatusOutput) ToInfrastructureDefinitionStatusOutput() InfrastructureDefinitionStatusOutput {
	return o
}

func (o InfrastructureDefinitionStatusOutput) ToInfrastructureDefinitionStatusOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusOutput {
	return o
}

func (o InfrastructureDefinitionStatusOutput) ToInfrastructureDefinitionStatusPtrOutput() InfrastructureDefinitionStatusPtrOutput {
	return o.ToInfrastructureDefinitionStatusPtrOutputWithContext(context.Background())
}

func (o InfrastructureDefinitionStatusOutput) ToInfrastructureDefinitionStatusPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatus) *InfrastructureDefinitionStatus {
		return &v
	}).(InfrastructureDefinitionStatusPtrOutput)
}

// Conditions of the resource.
func (o InfrastructureDefinitionStatusOutput) Conditions() InfrastructureDefinitionStatusConditionsArrayOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatus) []InfrastructureDefinitionStatusConditions { return v.Conditions }).(InfrastructureDefinitionStatusConditionsArrayOutput)
}

type InfrastructureDefinitionStatusPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureDefinitionStatus)(nil)).Elem()
}

func (o InfrastructureDefinitionStatusPtrOutput) ToInfrastructureDefinitionStatusPtrOutput() InfrastructureDefinitionStatusPtrOutput {
	return o
}

func (o InfrastructureDefinitionStatusPtrOutput) ToInfrastructureDefinitionStatusPtrOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusPtrOutput {
	return o
}

func (o InfrastructureDefinitionStatusPtrOutput) Elem() InfrastructureDefinitionStatusOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionStatus) InfrastructureDefinitionStatus { return *v }).(InfrastructureDefinitionStatusOutput)
}

// Conditions of the resource.
func (o InfrastructureDefinitionStatusPtrOutput) Conditions() InfrastructureDefinitionStatusConditionsArrayOutput {
	return o.ApplyT(func(v *InfrastructureDefinitionStatus) []InfrastructureDefinitionStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(InfrastructureDefinitionStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type InfrastructureDefinitionStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// InfrastructureDefinitionStatusConditionsInput is an input type that accepts InfrastructureDefinitionStatusConditionsArgs and InfrastructureDefinitionStatusConditionsOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionStatusConditionsInput` via:
//
//          InfrastructureDefinitionStatusConditionsArgs{...}
type InfrastructureDefinitionStatusConditionsInput interface {
	pulumi.Input

	ToInfrastructureDefinitionStatusConditionsOutput() InfrastructureDefinitionStatusConditionsOutput
	ToInfrastructureDefinitionStatusConditionsOutputWithContext(context.Context) InfrastructureDefinitionStatusConditionsOutput
}

// A Condition that may apply to a resource.
type InfrastructureDefinitionStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InfrastructureDefinitionStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionStatusConditions)(nil)).Elem()
}

func (i InfrastructureDefinitionStatusConditionsArgs) ToInfrastructureDefinitionStatusConditionsOutput() InfrastructureDefinitionStatusConditionsOutput {
	return i.ToInfrastructureDefinitionStatusConditionsOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionStatusConditionsArgs) ToInfrastructureDefinitionStatusConditionsOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionStatusConditionsOutput)
}

// InfrastructureDefinitionStatusConditionsArrayInput is an input type that accepts InfrastructureDefinitionStatusConditionsArray and InfrastructureDefinitionStatusConditionsArrayOutput values.
// You can construct a concrete instance of `InfrastructureDefinitionStatusConditionsArrayInput` via:
//
//          InfrastructureDefinitionStatusConditionsArray{ InfrastructureDefinitionStatusConditionsArgs{...} }
type InfrastructureDefinitionStatusConditionsArrayInput interface {
	pulumi.Input

	ToInfrastructureDefinitionStatusConditionsArrayOutput() InfrastructureDefinitionStatusConditionsArrayOutput
	ToInfrastructureDefinitionStatusConditionsArrayOutputWithContext(context.Context) InfrastructureDefinitionStatusConditionsArrayOutput
}

type InfrastructureDefinitionStatusConditionsArray []InfrastructureDefinitionStatusConditionsInput

func (InfrastructureDefinitionStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionStatusConditions)(nil)).Elem()
}

func (i InfrastructureDefinitionStatusConditionsArray) ToInfrastructureDefinitionStatusConditionsArrayOutput() InfrastructureDefinitionStatusConditionsArrayOutput {
	return i.ToInfrastructureDefinitionStatusConditionsArrayOutputWithContext(context.Background())
}

func (i InfrastructureDefinitionStatusConditionsArray) ToInfrastructureDefinitionStatusConditionsArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureDefinitionStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type InfrastructureDefinitionStatusConditionsOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureDefinitionStatusConditions)(nil)).Elem()
}

func (o InfrastructureDefinitionStatusConditionsOutput) ToInfrastructureDefinitionStatusConditionsOutput() InfrastructureDefinitionStatusConditionsOutput {
	return o
}

func (o InfrastructureDefinitionStatusConditionsOutput) ToInfrastructureDefinitionStatusConditionsOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o InfrastructureDefinitionStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o InfrastructureDefinitionStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o InfrastructureDefinitionStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o InfrastructureDefinitionStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o InfrastructureDefinitionStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructureDefinitionStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type InfrastructureDefinitionStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureDefinitionStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructureDefinitionStatusConditions)(nil)).Elem()
}

func (o InfrastructureDefinitionStatusConditionsArrayOutput) ToInfrastructureDefinitionStatusConditionsArrayOutput() InfrastructureDefinitionStatusConditionsArrayOutput {
	return o
}

func (o InfrastructureDefinitionStatusConditionsArrayOutput) ToInfrastructureDefinitionStatusConditionsArrayOutputWithContext(ctx context.Context) InfrastructureDefinitionStatusConditionsArrayOutput {
	return o
}

func (o InfrastructureDefinitionStatusConditionsArrayOutput) Index(i pulumi.IntInput) InfrastructureDefinitionStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfrastructureDefinitionStatusConditions {
		return vs[0].([]InfrastructureDefinitionStatusConditions)[vs[1].(int)]
	}).(InfrastructureDefinitionStatusConditionsOutput)
}

// An InfrastructurePublication publishes a defined kind of composite infrastructure resource. Published infrastructure resources may be bound to an application via an infrastructure requirement.
type InfrastructurePublicationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// InfrastructurePublicationSpec specifies the desired state of the definition.
	Spec *InfrastructurePublicationSpec `pulumi:"spec"`
	// InfrastructurePublicationStatus shows the observed state of the definition.
	Status *InfrastructurePublicationStatus `pulumi:"status"`
}

// InfrastructurePublicationTypeInput is an input type that accepts InfrastructurePublicationTypeArgs and InfrastructurePublicationTypeOutput values.
// You can construct a concrete instance of `InfrastructurePublicationTypeInput` via:
//
//          InfrastructurePublicationTypeArgs{...}
type InfrastructurePublicationTypeInput interface {
	pulumi.Input

	ToInfrastructurePublicationTypeOutput() InfrastructurePublicationTypeOutput
	ToInfrastructurePublicationTypeOutputWithContext(context.Context) InfrastructurePublicationTypeOutput
}

// An InfrastructurePublication publishes a defined kind of composite infrastructure resource. Published infrastructure resources may be bound to an application via an infrastructure requirement.
type InfrastructurePublicationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// InfrastructurePublicationSpec specifies the desired state of the definition.
	Spec InfrastructurePublicationSpecPtrInput `pulumi:"spec"`
	// InfrastructurePublicationStatus shows the observed state of the definition.
	Status InfrastructurePublicationStatusPtrInput `pulumi:"status"`
}

func (InfrastructurePublicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationType)(nil)).Elem()
}

func (i InfrastructurePublicationTypeArgs) ToInfrastructurePublicationTypeOutput() InfrastructurePublicationTypeOutput {
	return i.ToInfrastructurePublicationTypeOutputWithContext(context.Background())
}

func (i InfrastructurePublicationTypeArgs) ToInfrastructurePublicationTypeOutputWithContext(ctx context.Context) InfrastructurePublicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationTypeOutput)
}

// An InfrastructurePublication publishes a defined kind of composite infrastructure resource. Published infrastructure resources may be bound to an application via an infrastructure requirement.
type InfrastructurePublicationTypeOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationType)(nil)).Elem()
}

func (o InfrastructurePublicationTypeOutput) ToInfrastructurePublicationTypeOutput() InfrastructurePublicationTypeOutput {
	return o
}

func (o InfrastructurePublicationTypeOutput) ToInfrastructurePublicationTypeOutputWithContext(ctx context.Context) InfrastructurePublicationTypeOutput {
	return o
}

func (o InfrastructurePublicationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o InfrastructurePublicationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o InfrastructurePublicationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// InfrastructurePublicationSpec specifies the desired state of the definition.
func (o InfrastructurePublicationTypeOutput) Spec() InfrastructurePublicationSpecPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationType) *InfrastructurePublicationSpec { return v.Spec }).(InfrastructurePublicationSpecPtrOutput)
}

// InfrastructurePublicationStatus shows the observed state of the definition.
func (o InfrastructurePublicationTypeOutput) Status() InfrastructurePublicationStatusPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationType) *InfrastructurePublicationStatus { return v.Status }).(InfrastructurePublicationStatusPtrOutput)
}

type InfrastructurePublicationMetadata struct {
}

// InfrastructurePublicationMetadataInput is an input type that accepts InfrastructurePublicationMetadataArgs and InfrastructurePublicationMetadataOutput values.
// You can construct a concrete instance of `InfrastructurePublicationMetadataInput` via:
//
//          InfrastructurePublicationMetadataArgs{...}
type InfrastructurePublicationMetadataInput interface {
	pulumi.Input

	ToInfrastructurePublicationMetadataOutput() InfrastructurePublicationMetadataOutput
	ToInfrastructurePublicationMetadataOutputWithContext(context.Context) InfrastructurePublicationMetadataOutput
}

type InfrastructurePublicationMetadataArgs struct {
}

func (InfrastructurePublicationMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationMetadata)(nil)).Elem()
}

func (i InfrastructurePublicationMetadataArgs) ToInfrastructurePublicationMetadataOutput() InfrastructurePublicationMetadataOutput {
	return i.ToInfrastructurePublicationMetadataOutputWithContext(context.Background())
}

func (i InfrastructurePublicationMetadataArgs) ToInfrastructurePublicationMetadataOutputWithContext(ctx context.Context) InfrastructurePublicationMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationMetadataOutput)
}

type InfrastructurePublicationMetadataOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationMetadata)(nil)).Elem()
}

func (o InfrastructurePublicationMetadataOutput) ToInfrastructurePublicationMetadataOutput() InfrastructurePublicationMetadataOutput {
	return o
}

func (o InfrastructurePublicationMetadataOutput) ToInfrastructurePublicationMetadataOutputWithContext(ctx context.Context) InfrastructurePublicationMetadataOutput {
	return o
}

// InfrastructurePublicationSpec specifies the desired state of the definition.
type InfrastructurePublicationSpec struct {
	// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
	InfrastructureDefinitionRef InfrastructurePublicationSpecInfrastructureDefinitionRef `pulumi:"infrastructureDefinitionRef"`
}

// InfrastructurePublicationSpecInput is an input type that accepts InfrastructurePublicationSpecArgs and InfrastructurePublicationSpecOutput values.
// You can construct a concrete instance of `InfrastructurePublicationSpecInput` via:
//
//          InfrastructurePublicationSpecArgs{...}
type InfrastructurePublicationSpecInput interface {
	pulumi.Input

	ToInfrastructurePublicationSpecOutput() InfrastructurePublicationSpecOutput
	ToInfrastructurePublicationSpecOutputWithContext(context.Context) InfrastructurePublicationSpecOutput
}

// InfrastructurePublicationSpec specifies the desired state of the definition.
type InfrastructurePublicationSpecArgs struct {
	// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
	InfrastructureDefinitionRef InfrastructurePublicationSpecInfrastructureDefinitionRefInput `pulumi:"infrastructureDefinitionRef"`
}

func (InfrastructurePublicationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationSpec)(nil)).Elem()
}

func (i InfrastructurePublicationSpecArgs) ToInfrastructurePublicationSpecOutput() InfrastructurePublicationSpecOutput {
	return i.ToInfrastructurePublicationSpecOutputWithContext(context.Background())
}

func (i InfrastructurePublicationSpecArgs) ToInfrastructurePublicationSpecOutputWithContext(ctx context.Context) InfrastructurePublicationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecOutput)
}

func (i InfrastructurePublicationSpecArgs) ToInfrastructurePublicationSpecPtrOutput() InfrastructurePublicationSpecPtrOutput {
	return i.ToInfrastructurePublicationSpecPtrOutputWithContext(context.Background())
}

func (i InfrastructurePublicationSpecArgs) ToInfrastructurePublicationSpecPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecOutput).ToInfrastructurePublicationSpecPtrOutputWithContext(ctx)
}

// InfrastructurePublicationSpecPtrInput is an input type that accepts InfrastructurePublicationSpecArgs, InfrastructurePublicationSpecPtr and InfrastructurePublicationSpecPtrOutput values.
// You can construct a concrete instance of `InfrastructurePublicationSpecPtrInput` via:
//
//          InfrastructurePublicationSpecArgs{...}
//
//  or:
//
//          nil
type InfrastructurePublicationSpecPtrInput interface {
	pulumi.Input

	ToInfrastructurePublicationSpecPtrOutput() InfrastructurePublicationSpecPtrOutput
	ToInfrastructurePublicationSpecPtrOutputWithContext(context.Context) InfrastructurePublicationSpecPtrOutput
}

type infrastructurePublicationSpecPtrType InfrastructurePublicationSpecArgs

func InfrastructurePublicationSpecPtr(v *InfrastructurePublicationSpecArgs) InfrastructurePublicationSpecPtrInput {
	return (*infrastructurePublicationSpecPtrType)(v)
}

func (*infrastructurePublicationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationSpec)(nil)).Elem()
}

func (i *infrastructurePublicationSpecPtrType) ToInfrastructurePublicationSpecPtrOutput() InfrastructurePublicationSpecPtrOutput {
	return i.ToInfrastructurePublicationSpecPtrOutputWithContext(context.Background())
}

func (i *infrastructurePublicationSpecPtrType) ToInfrastructurePublicationSpecPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecPtrOutput)
}

// InfrastructurePublicationSpec specifies the desired state of the definition.
type InfrastructurePublicationSpecOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationSpec)(nil)).Elem()
}

func (o InfrastructurePublicationSpecOutput) ToInfrastructurePublicationSpecOutput() InfrastructurePublicationSpecOutput {
	return o
}

func (o InfrastructurePublicationSpecOutput) ToInfrastructurePublicationSpecOutputWithContext(ctx context.Context) InfrastructurePublicationSpecOutput {
	return o
}

func (o InfrastructurePublicationSpecOutput) ToInfrastructurePublicationSpecPtrOutput() InfrastructurePublicationSpecPtrOutput {
	return o.ToInfrastructurePublicationSpecPtrOutputWithContext(context.Background())
}

func (o InfrastructurePublicationSpecOutput) ToInfrastructurePublicationSpecPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationSpec) *InfrastructurePublicationSpec {
		return &v
	}).(InfrastructurePublicationSpecPtrOutput)
}

// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
func (o InfrastructurePublicationSpecOutput) InfrastructureDefinitionRef() InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return o.ApplyT(func(v InfrastructurePublicationSpec) InfrastructurePublicationSpecInfrastructureDefinitionRef {
		return v.InfrastructureDefinitionRef
	}).(InfrastructurePublicationSpecInfrastructureDefinitionRefOutput)
}

type InfrastructurePublicationSpecPtrOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationSpec)(nil)).Elem()
}

func (o InfrastructurePublicationSpecPtrOutput) ToInfrastructurePublicationSpecPtrOutput() InfrastructurePublicationSpecPtrOutput {
	return o
}

func (o InfrastructurePublicationSpecPtrOutput) ToInfrastructurePublicationSpecPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecPtrOutput {
	return o
}

func (o InfrastructurePublicationSpecPtrOutput) Elem() InfrastructurePublicationSpecOutput {
	return o.ApplyT(func(v *InfrastructurePublicationSpec) InfrastructurePublicationSpec { return *v }).(InfrastructurePublicationSpecOutput)
}

// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
func (o InfrastructurePublicationSpecPtrOutput) InfrastructureDefinitionRef() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return o.ApplyT(func(v *InfrastructurePublicationSpec) *InfrastructurePublicationSpecInfrastructureDefinitionRef {
		if v == nil {
			return nil
		}
		return &v.InfrastructureDefinitionRef
	}).(InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput)
}

// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
type InfrastructurePublicationSpecInfrastructureDefinitionRef struct {
	// Name of the referenced object.
	Name string `pulumi:"name"`
}

// InfrastructurePublicationSpecInfrastructureDefinitionRefInput is an input type that accepts InfrastructurePublicationSpecInfrastructureDefinitionRefArgs and InfrastructurePublicationSpecInfrastructureDefinitionRefOutput values.
// You can construct a concrete instance of `InfrastructurePublicationSpecInfrastructureDefinitionRefInput` via:
//
//          InfrastructurePublicationSpecInfrastructureDefinitionRefArgs{...}
type InfrastructurePublicationSpecInfrastructureDefinitionRefInput interface {
	pulumi.Input

	ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefOutput
	ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutputWithContext(context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefOutput
}

// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
type InfrastructurePublicationSpecInfrastructureDefinitionRefArgs struct {
	// Name of the referenced object.
	Name pulumi.StringInput `pulumi:"name"`
}

func (InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationSpecInfrastructureDefinitionRef)(nil)).Elem()
}

func (i InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return i.ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutputWithContext(context.Background())
}

func (i InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecInfrastructureDefinitionRefOutput)
}

func (i InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return i.ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(context.Background())
}

func (i InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecInfrastructureDefinitionRefOutput).ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(ctx)
}

// InfrastructurePublicationSpecInfrastructureDefinitionRefPtrInput is an input type that accepts InfrastructurePublicationSpecInfrastructureDefinitionRefArgs, InfrastructurePublicationSpecInfrastructureDefinitionRefPtr and InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput values.
// You can construct a concrete instance of `InfrastructurePublicationSpecInfrastructureDefinitionRefPtrInput` via:
//
//          InfrastructurePublicationSpecInfrastructureDefinitionRefArgs{...}
//
//  or:
//
//          nil
type InfrastructurePublicationSpecInfrastructureDefinitionRefPtrInput interface {
	pulumi.Input

	ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput
	ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput
}

type infrastructurePublicationSpecInfrastructureDefinitionRefPtrType InfrastructurePublicationSpecInfrastructureDefinitionRefArgs

func InfrastructurePublicationSpecInfrastructureDefinitionRefPtr(v *InfrastructurePublicationSpecInfrastructureDefinitionRefArgs) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrInput {
	return (*infrastructurePublicationSpecInfrastructureDefinitionRefPtrType)(v)
}

func (*infrastructurePublicationSpecInfrastructureDefinitionRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationSpecInfrastructureDefinitionRef)(nil)).Elem()
}

func (i *infrastructurePublicationSpecInfrastructureDefinitionRefPtrType) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return i.ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(context.Background())
}

func (i *infrastructurePublicationSpecInfrastructureDefinitionRefPtrType) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput)
}

// InfrastructureDefinitionReference references the InfrastructureDefinition that should be published.
type InfrastructurePublicationSpecInfrastructureDefinitionRefOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationSpecInfrastructureDefinitionRef)(nil)).Elem()
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return o
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return o
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return o.ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(context.Background())
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationSpecInfrastructureDefinitionRef) *InfrastructurePublicationSpecInfrastructureDefinitionRef {
		return &v
	}).(InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput)
}

// Name of the referenced object.
func (o InfrastructurePublicationSpecInfrastructureDefinitionRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructurePublicationSpecInfrastructureDefinitionRef) string { return v.Name }).(pulumi.StringOutput)
}

type InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationSpecInfrastructureDefinitionRef)(nil)).Elem()
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput() InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return o
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput) ToInfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutputWithContext(ctx context.Context) InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput {
	return o
}

func (o InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput) Elem() InfrastructurePublicationSpecInfrastructureDefinitionRefOutput {
	return o.ApplyT(func(v *InfrastructurePublicationSpecInfrastructureDefinitionRef) InfrastructurePublicationSpecInfrastructureDefinitionRef {
		return *v
	}).(InfrastructurePublicationSpecInfrastructureDefinitionRefOutput)
}

// Name of the referenced object.
func (o InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructurePublicationSpecInfrastructureDefinitionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// InfrastructurePublicationStatus shows the observed state of the definition.
type InfrastructurePublicationStatus struct {
	// Conditions of the resource.
	Conditions []InfrastructurePublicationStatusConditions `pulumi:"conditions"`
}

// InfrastructurePublicationStatusInput is an input type that accepts InfrastructurePublicationStatusArgs and InfrastructurePublicationStatusOutput values.
// You can construct a concrete instance of `InfrastructurePublicationStatusInput` via:
//
//          InfrastructurePublicationStatusArgs{...}
type InfrastructurePublicationStatusInput interface {
	pulumi.Input

	ToInfrastructurePublicationStatusOutput() InfrastructurePublicationStatusOutput
	ToInfrastructurePublicationStatusOutputWithContext(context.Context) InfrastructurePublicationStatusOutput
}

// InfrastructurePublicationStatus shows the observed state of the definition.
type InfrastructurePublicationStatusArgs struct {
	// Conditions of the resource.
	Conditions InfrastructurePublicationStatusConditionsArrayInput `pulumi:"conditions"`
}

func (InfrastructurePublicationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationStatus)(nil)).Elem()
}

func (i InfrastructurePublicationStatusArgs) ToInfrastructurePublicationStatusOutput() InfrastructurePublicationStatusOutput {
	return i.ToInfrastructurePublicationStatusOutputWithContext(context.Background())
}

func (i InfrastructurePublicationStatusArgs) ToInfrastructurePublicationStatusOutputWithContext(ctx context.Context) InfrastructurePublicationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationStatusOutput)
}

func (i InfrastructurePublicationStatusArgs) ToInfrastructurePublicationStatusPtrOutput() InfrastructurePublicationStatusPtrOutput {
	return i.ToInfrastructurePublicationStatusPtrOutputWithContext(context.Background())
}

func (i InfrastructurePublicationStatusArgs) ToInfrastructurePublicationStatusPtrOutputWithContext(ctx context.Context) InfrastructurePublicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationStatusOutput).ToInfrastructurePublicationStatusPtrOutputWithContext(ctx)
}

// InfrastructurePublicationStatusPtrInput is an input type that accepts InfrastructurePublicationStatusArgs, InfrastructurePublicationStatusPtr and InfrastructurePublicationStatusPtrOutput values.
// You can construct a concrete instance of `InfrastructurePublicationStatusPtrInput` via:
//
//          InfrastructurePublicationStatusArgs{...}
//
//  or:
//
//          nil
type InfrastructurePublicationStatusPtrInput interface {
	pulumi.Input

	ToInfrastructurePublicationStatusPtrOutput() InfrastructurePublicationStatusPtrOutput
	ToInfrastructurePublicationStatusPtrOutputWithContext(context.Context) InfrastructurePublicationStatusPtrOutput
}

type infrastructurePublicationStatusPtrType InfrastructurePublicationStatusArgs

func InfrastructurePublicationStatusPtr(v *InfrastructurePublicationStatusArgs) InfrastructurePublicationStatusPtrInput {
	return (*infrastructurePublicationStatusPtrType)(v)
}

func (*infrastructurePublicationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationStatus)(nil)).Elem()
}

func (i *infrastructurePublicationStatusPtrType) ToInfrastructurePublicationStatusPtrOutput() InfrastructurePublicationStatusPtrOutput {
	return i.ToInfrastructurePublicationStatusPtrOutputWithContext(context.Background())
}

func (i *infrastructurePublicationStatusPtrType) ToInfrastructurePublicationStatusPtrOutputWithContext(ctx context.Context) InfrastructurePublicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationStatusPtrOutput)
}

// InfrastructurePublicationStatus shows the observed state of the definition.
type InfrastructurePublicationStatusOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationStatus)(nil)).Elem()
}

func (o InfrastructurePublicationStatusOutput) ToInfrastructurePublicationStatusOutput() InfrastructurePublicationStatusOutput {
	return o
}

func (o InfrastructurePublicationStatusOutput) ToInfrastructurePublicationStatusOutputWithContext(ctx context.Context) InfrastructurePublicationStatusOutput {
	return o
}

func (o InfrastructurePublicationStatusOutput) ToInfrastructurePublicationStatusPtrOutput() InfrastructurePublicationStatusPtrOutput {
	return o.ToInfrastructurePublicationStatusPtrOutputWithContext(context.Background())
}

func (o InfrastructurePublicationStatusOutput) ToInfrastructurePublicationStatusPtrOutputWithContext(ctx context.Context) InfrastructurePublicationStatusPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatus) *InfrastructurePublicationStatus {
		return &v
	}).(InfrastructurePublicationStatusPtrOutput)
}

// Conditions of the resource.
func (o InfrastructurePublicationStatusOutput) Conditions() InfrastructurePublicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatus) []InfrastructurePublicationStatusConditions {
		return v.Conditions
	}).(InfrastructurePublicationStatusConditionsArrayOutput)
}

type InfrastructurePublicationStatusPtrOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructurePublicationStatus)(nil)).Elem()
}

func (o InfrastructurePublicationStatusPtrOutput) ToInfrastructurePublicationStatusPtrOutput() InfrastructurePublicationStatusPtrOutput {
	return o
}

func (o InfrastructurePublicationStatusPtrOutput) ToInfrastructurePublicationStatusPtrOutputWithContext(ctx context.Context) InfrastructurePublicationStatusPtrOutput {
	return o
}

func (o InfrastructurePublicationStatusPtrOutput) Elem() InfrastructurePublicationStatusOutput {
	return o.ApplyT(func(v *InfrastructurePublicationStatus) InfrastructurePublicationStatus { return *v }).(InfrastructurePublicationStatusOutput)
}

// Conditions of the resource.
func (o InfrastructurePublicationStatusPtrOutput) Conditions() InfrastructurePublicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v *InfrastructurePublicationStatus) []InfrastructurePublicationStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(InfrastructurePublicationStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type InfrastructurePublicationStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// InfrastructurePublicationStatusConditionsInput is an input type that accepts InfrastructurePublicationStatusConditionsArgs and InfrastructurePublicationStatusConditionsOutput values.
// You can construct a concrete instance of `InfrastructurePublicationStatusConditionsInput` via:
//
//          InfrastructurePublicationStatusConditionsArgs{...}
type InfrastructurePublicationStatusConditionsInput interface {
	pulumi.Input

	ToInfrastructurePublicationStatusConditionsOutput() InfrastructurePublicationStatusConditionsOutput
	ToInfrastructurePublicationStatusConditionsOutputWithContext(context.Context) InfrastructurePublicationStatusConditionsOutput
}

// A Condition that may apply to a resource.
type InfrastructurePublicationStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InfrastructurePublicationStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationStatusConditions)(nil)).Elem()
}

func (i InfrastructurePublicationStatusConditionsArgs) ToInfrastructurePublicationStatusConditionsOutput() InfrastructurePublicationStatusConditionsOutput {
	return i.ToInfrastructurePublicationStatusConditionsOutputWithContext(context.Background())
}

func (i InfrastructurePublicationStatusConditionsArgs) ToInfrastructurePublicationStatusConditionsOutputWithContext(ctx context.Context) InfrastructurePublicationStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationStatusConditionsOutput)
}

// InfrastructurePublicationStatusConditionsArrayInput is an input type that accepts InfrastructurePublicationStatusConditionsArray and InfrastructurePublicationStatusConditionsArrayOutput values.
// You can construct a concrete instance of `InfrastructurePublicationStatusConditionsArrayInput` via:
//
//          InfrastructurePublicationStatusConditionsArray{ InfrastructurePublicationStatusConditionsArgs{...} }
type InfrastructurePublicationStatusConditionsArrayInput interface {
	pulumi.Input

	ToInfrastructurePublicationStatusConditionsArrayOutput() InfrastructurePublicationStatusConditionsArrayOutput
	ToInfrastructurePublicationStatusConditionsArrayOutputWithContext(context.Context) InfrastructurePublicationStatusConditionsArrayOutput
}

type InfrastructurePublicationStatusConditionsArray []InfrastructurePublicationStatusConditionsInput

func (InfrastructurePublicationStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructurePublicationStatusConditions)(nil)).Elem()
}

func (i InfrastructurePublicationStatusConditionsArray) ToInfrastructurePublicationStatusConditionsArrayOutput() InfrastructurePublicationStatusConditionsArrayOutput {
	return i.ToInfrastructurePublicationStatusConditionsArrayOutputWithContext(context.Background())
}

func (i InfrastructurePublicationStatusConditionsArray) ToInfrastructurePublicationStatusConditionsArrayOutputWithContext(ctx context.Context) InfrastructurePublicationStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructurePublicationStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type InfrastructurePublicationStatusConditionsOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructurePublicationStatusConditions)(nil)).Elem()
}

func (o InfrastructurePublicationStatusConditionsOutput) ToInfrastructurePublicationStatusConditionsOutput() InfrastructurePublicationStatusConditionsOutput {
	return o
}

func (o InfrastructurePublicationStatusConditionsOutput) ToInfrastructurePublicationStatusConditionsOutputWithContext(ctx context.Context) InfrastructurePublicationStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o InfrastructurePublicationStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o InfrastructurePublicationStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o InfrastructurePublicationStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o InfrastructurePublicationStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o InfrastructurePublicationStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InfrastructurePublicationStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type InfrastructurePublicationStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (InfrastructurePublicationStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfrastructurePublicationStatusConditions)(nil)).Elem()
}

func (o InfrastructurePublicationStatusConditionsArrayOutput) ToInfrastructurePublicationStatusConditionsArrayOutput() InfrastructurePublicationStatusConditionsArrayOutput {
	return o
}

func (o InfrastructurePublicationStatusConditionsArrayOutput) ToInfrastructurePublicationStatusConditionsArrayOutputWithContext(ctx context.Context) InfrastructurePublicationStatusConditionsArrayOutput {
	return o
}

func (o InfrastructurePublicationStatusConditionsArrayOutput) Index(i pulumi.IntInput) InfrastructurePublicationStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfrastructurePublicationStatusConditions {
		return vs[0].([]InfrastructurePublicationStatusConditions)[vs[1].(int)]
	}).(InfrastructurePublicationStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(CompositionTypeOutput{})
	pulumi.RegisterOutputType(CompositionMetadataOutput{})
	pulumi.RegisterOutputType(CompositionSpecOutput{})
	pulumi.RegisterOutputType(CompositionSpecPtrOutput{})
	pulumi.RegisterOutputType(CompositionSpecFromOutput{})
	pulumi.RegisterOutputType(CompositionSpecFromPtrOutput{})
	pulumi.RegisterOutputType(CompositionSpecToOutput{})
	pulumi.RegisterOutputType(CompositionSpecToArrayOutput{})
	pulumi.RegisterOutputType(CompositionSpecToBaseOutput{})
	pulumi.RegisterOutputType(CompositionSpecToConnectionDetailsOutput{})
	pulumi.RegisterOutputType(CompositionSpecToConnectionDetailsArrayOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesArrayOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsArrayOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsMapOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsMathOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsMathPtrOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsStringOutput{})
	pulumi.RegisterOutputType(CompositionSpecToPatchesTransformsStringPtrOutput{})
	pulumi.RegisterOutputType(CompositionStatusOutput{})
	pulumi.RegisterOutputType(CompositionStatusPtrOutput{})
	pulumi.RegisterOutputType(CompositionStatusConditionsOutput{})
	pulumi.RegisterOutputType(CompositionStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionTypeOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionMetadataOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateAdditionalPrinterColumnsArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateNamesOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateNamesPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateValidationOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateValidationPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionSpecCrdSpecTemplateValidationOpenAPIV3SchemaOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionStatusOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionStatusPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionStatusConditionsOutput{})
	pulumi.RegisterOutputType(InfrastructureDefinitionStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationTypeOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationMetadataOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationSpecOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationSpecPtrOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationSpecInfrastructureDefinitionRefOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationSpecInfrastructureDefinitionRefPtrOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationStatusOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationStatusPtrOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationStatusConditionsOutput{})
	pulumi.RegisterOutputType(InfrastructurePublicationStatusConditionsArrayOutput{})
}

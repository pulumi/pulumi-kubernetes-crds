// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GitOpsConfig struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput      `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput      `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput  `pulumi:"metadata"`
	Spec       GitOpsConfigSpecPtrOutput   `pulumi:"spec"`
	Status     GitOpsConfigStatusPtrOutput `pulumi:"status"`
}

// NewGitOpsConfig registers a new resource with the given unique name, arguments, and options.
func NewGitOpsConfig(ctx *pulumi.Context,
	name string, args *GitOpsConfigArgs, opts ...pulumi.ResourceOption) (*GitOpsConfig, error) {
	if args == nil {
		args = &GitOpsConfigArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("eunomia.kohls.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GitOpsConfig")
	var resource GitOpsConfig
	err := ctx.RegisterResource("kubernetes:eunomia.kohls.io/v1alpha1:GitOpsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsConfig gets an existing GitOpsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsConfigState, opts ...pulumi.ResourceOption) (*GitOpsConfig, error) {
	var resource GitOpsConfig
	err := ctx.ReadResource("kubernetes:eunomia.kohls.io/v1alpha1:GitOpsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsConfig resources.
type gitOpsConfigState struct {
	ApiVersion *string             `pulumi:"apiVersion"`
	Kind       *string             `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec       *GitOpsConfigSpec   `pulumi:"spec"`
	Status     *GitOpsConfigStatus `pulumi:"status"`
}

type GitOpsConfigState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       GitOpsConfigSpecPtrInput
	Status     GitOpsConfigStatusPtrInput
}

func (GitOpsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsConfigState)(nil)).Elem()
}

type gitOpsConfigArgs struct {
	ApiVersion *string             `pulumi:"apiVersion"`
	Kind       *string             `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec       *GitOpsConfigSpec   `pulumi:"spec"`
	Status     *GitOpsConfigStatus `pulumi:"status"`
}

// The set of arguments for constructing a GitOpsConfig resource.
type GitOpsConfigArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       GitOpsConfigSpecPtrInput
	Status     GitOpsConfigStatusPtrInput
}

func (GitOpsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsConfigArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GitOpsConfigType struct {
	ApiVersion *string             `pulumi:"apiVersion"`
	Kind       *string             `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec       *GitOpsConfigSpec   `pulumi:"spec"`
	Status     *GitOpsConfigStatus `pulumi:"status"`
}

// GitOpsConfigTypeInput is an input type that accepts GitOpsConfigTypeArgs and GitOpsConfigTypeOutput values.
// You can construct a concrete instance of `GitOpsConfigTypeInput` via:
//
//          GitOpsConfigTypeArgs{...}
type GitOpsConfigTypeInput interface {
	pulumi.Input

	ToGitOpsConfigTypeOutput() GitOpsConfigTypeOutput
	ToGitOpsConfigTypeOutputWithContext(context.Context) GitOpsConfigTypeOutput
}

type GitOpsConfigTypeArgs struct {
	ApiVersion pulumi.StringPtrInput      `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput      `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput  `pulumi:"metadata"`
	Spec       GitOpsConfigSpecPtrInput   `pulumi:"spec"`
	Status     GitOpsConfigStatusPtrInput `pulumi:"status"`
}

func (GitOpsConfigTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigType)(nil)).Elem()
}

func (i GitOpsConfigTypeArgs) ToGitOpsConfigTypeOutput() GitOpsConfigTypeOutput {
	return i.ToGitOpsConfigTypeOutputWithContext(context.Background())
}

func (i GitOpsConfigTypeArgs) ToGitOpsConfigTypeOutputWithContext(ctx context.Context) GitOpsConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigTypeOutput)
}

type GitOpsConfigTypeOutput struct{ *pulumi.OutputState }

func (GitOpsConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigType)(nil)).Elem()
}

func (o GitOpsConfigTypeOutput) ToGitOpsConfigTypeOutput() GitOpsConfigTypeOutput {
	return o
}

func (o GitOpsConfigTypeOutput) ToGitOpsConfigTypeOutputWithContext(ctx context.Context) GitOpsConfigTypeOutput {
	return o
}

func (o GitOpsConfigTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GitOpsConfigType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GitOpsConfigTypeOutput) Spec() GitOpsConfigSpecPtrOutput {
	return o.ApplyT(func(v GitOpsConfigType) *GitOpsConfigSpec { return v.Spec }).(GitOpsConfigSpecPtrOutput)
}

func (o GitOpsConfigTypeOutput) Status() GitOpsConfigStatusPtrOutput {
	return o.ApplyT(func(v GitOpsConfigType) *GitOpsConfigStatus { return v.Status }).(GitOpsConfigStatusPtrOutput)
}

type GitOpsConfigMetadata struct {
}

// GitOpsConfigMetadataInput is an input type that accepts GitOpsConfigMetadataArgs and GitOpsConfigMetadataOutput values.
// You can construct a concrete instance of `GitOpsConfigMetadataInput` via:
//
//          GitOpsConfigMetadataArgs{...}
type GitOpsConfigMetadataInput interface {
	pulumi.Input

	ToGitOpsConfigMetadataOutput() GitOpsConfigMetadataOutput
	ToGitOpsConfigMetadataOutputWithContext(context.Context) GitOpsConfigMetadataOutput
}

type GitOpsConfigMetadataArgs struct {
}

func (GitOpsConfigMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigMetadata)(nil)).Elem()
}

func (i GitOpsConfigMetadataArgs) ToGitOpsConfigMetadataOutput() GitOpsConfigMetadataOutput {
	return i.ToGitOpsConfigMetadataOutputWithContext(context.Background())
}

func (i GitOpsConfigMetadataArgs) ToGitOpsConfigMetadataOutputWithContext(ctx context.Context) GitOpsConfigMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigMetadataOutput)
}

type GitOpsConfigMetadataOutput struct{ *pulumi.OutputState }

func (GitOpsConfigMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigMetadata)(nil)).Elem()
}

func (o GitOpsConfigMetadataOutput) ToGitOpsConfigMetadataOutput() GitOpsConfigMetadataOutput {
	return o
}

func (o GitOpsConfigMetadataOutput) ToGitOpsConfigMetadataOutputWithContext(ctx context.Context) GitOpsConfigMetadataOutput {
	return o
}

type GitOpsConfigSpec struct {
	// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
	ParameterSource *GitOpsConfigSpecParameterSource `pulumi:"parameterSource"`
	// ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
	ResourceDeletionMode *string `pulumi:"resourceDeletionMode"`
	// ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
	ResourceHandlingMode *string `pulumi:"resourceHandlingMode"`
	// ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
	ServiceAccountRef *string `pulumi:"serviceAccountRef"`
	// TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
	TemplateProcessorArgs *string `pulumi:"templateProcessorArgs"`
	// TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
	TemplateProcessorImage *string `pulumi:"templateProcessorImage"`
	// TemplateSource is the location of the templated resources
	TemplateSource *GitOpsConfigSpecTemplateSource `pulumi:"templateSource"`
	// Triggers is an array of triggers that will lanuch this configuration
	Triggers []GitOpsConfigSpecTriggers `pulumi:"triggers"`
}

// GitOpsConfigSpecInput is an input type that accepts GitOpsConfigSpecArgs and GitOpsConfigSpecOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecInput` via:
//
//          GitOpsConfigSpecArgs{...}
type GitOpsConfigSpecInput interface {
	pulumi.Input

	ToGitOpsConfigSpecOutput() GitOpsConfigSpecOutput
	ToGitOpsConfigSpecOutputWithContext(context.Context) GitOpsConfigSpecOutput
}

type GitOpsConfigSpecArgs struct {
	// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
	ParameterSource GitOpsConfigSpecParameterSourcePtrInput `pulumi:"parameterSource"`
	// ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
	ResourceDeletionMode pulumi.StringPtrInput `pulumi:"resourceDeletionMode"`
	// ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
	ResourceHandlingMode pulumi.StringPtrInput `pulumi:"resourceHandlingMode"`
	// ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
	ServiceAccountRef pulumi.StringPtrInput `pulumi:"serviceAccountRef"`
	// TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
	TemplateProcessorArgs pulumi.StringPtrInput `pulumi:"templateProcessorArgs"`
	// TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
	TemplateProcessorImage pulumi.StringPtrInput `pulumi:"templateProcessorImage"`
	// TemplateSource is the location of the templated resources
	TemplateSource GitOpsConfigSpecTemplateSourcePtrInput `pulumi:"templateSource"`
	// Triggers is an array of triggers that will lanuch this configuration
	Triggers GitOpsConfigSpecTriggersArrayInput `pulumi:"triggers"`
}

func (GitOpsConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpec)(nil)).Elem()
}

func (i GitOpsConfigSpecArgs) ToGitOpsConfigSpecOutput() GitOpsConfigSpecOutput {
	return i.ToGitOpsConfigSpecOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecArgs) ToGitOpsConfigSpecOutputWithContext(ctx context.Context) GitOpsConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecOutput)
}

func (i GitOpsConfigSpecArgs) ToGitOpsConfigSpecPtrOutput() GitOpsConfigSpecPtrOutput {
	return i.ToGitOpsConfigSpecPtrOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecArgs) ToGitOpsConfigSpecPtrOutputWithContext(ctx context.Context) GitOpsConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecOutput).ToGitOpsConfigSpecPtrOutputWithContext(ctx)
}

// GitOpsConfigSpecPtrInput is an input type that accepts GitOpsConfigSpecArgs, GitOpsConfigSpecPtr and GitOpsConfigSpecPtrOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecPtrInput` via:
//
//          GitOpsConfigSpecArgs{...}
//
//  or:
//
//          nil
type GitOpsConfigSpecPtrInput interface {
	pulumi.Input

	ToGitOpsConfigSpecPtrOutput() GitOpsConfigSpecPtrOutput
	ToGitOpsConfigSpecPtrOutputWithContext(context.Context) GitOpsConfigSpecPtrOutput
}

type gitOpsConfigSpecPtrType GitOpsConfigSpecArgs

func GitOpsConfigSpecPtr(v *GitOpsConfigSpecArgs) GitOpsConfigSpecPtrInput {
	return (*gitOpsConfigSpecPtrType)(v)
}

func (*gitOpsConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpec)(nil)).Elem()
}

func (i *gitOpsConfigSpecPtrType) ToGitOpsConfigSpecPtrOutput() GitOpsConfigSpecPtrOutput {
	return i.ToGitOpsConfigSpecPtrOutputWithContext(context.Background())
}

func (i *gitOpsConfigSpecPtrType) ToGitOpsConfigSpecPtrOutputWithContext(ctx context.Context) GitOpsConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecPtrOutput)
}

type GitOpsConfigSpecOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpec)(nil)).Elem()
}

func (o GitOpsConfigSpecOutput) ToGitOpsConfigSpecOutput() GitOpsConfigSpecOutput {
	return o
}

func (o GitOpsConfigSpecOutput) ToGitOpsConfigSpecOutputWithContext(ctx context.Context) GitOpsConfigSpecOutput {
	return o
}

func (o GitOpsConfigSpecOutput) ToGitOpsConfigSpecPtrOutput() GitOpsConfigSpecPtrOutput {
	return o.ToGitOpsConfigSpecPtrOutputWithContext(context.Background())
}

func (o GitOpsConfigSpecOutput) ToGitOpsConfigSpecPtrOutputWithContext(ctx context.Context) GitOpsConfigSpecPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *GitOpsConfigSpec {
		return &v
	}).(GitOpsConfigSpecPtrOutput)
}

// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
func (o GitOpsConfigSpecOutput) ParameterSource() GitOpsConfigSpecParameterSourcePtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *GitOpsConfigSpecParameterSource { return v.ParameterSource }).(GitOpsConfigSpecParameterSourcePtrOutput)
}

// ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
func (o GitOpsConfigSpecOutput) ResourceDeletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *string { return v.ResourceDeletionMode }).(pulumi.StringPtrOutput)
}

// ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
func (o GitOpsConfigSpecOutput) ResourceHandlingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *string { return v.ResourceHandlingMode }).(pulumi.StringPtrOutput)
}

// ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
func (o GitOpsConfigSpecOutput) ServiceAccountRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *string { return v.ServiceAccountRef }).(pulumi.StringPtrOutput)
}

// TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
func (o GitOpsConfigSpecOutput) TemplateProcessorArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *string { return v.TemplateProcessorArgs }).(pulumi.StringPtrOutput)
}

// TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
func (o GitOpsConfigSpecOutput) TemplateProcessorImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *string { return v.TemplateProcessorImage }).(pulumi.StringPtrOutput)
}

// TemplateSource is the location of the templated resources
func (o GitOpsConfigSpecOutput) TemplateSource() GitOpsConfigSpecTemplateSourcePtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) *GitOpsConfigSpecTemplateSource { return v.TemplateSource }).(GitOpsConfigSpecTemplateSourcePtrOutput)
}

// Triggers is an array of triggers that will lanuch this configuration
func (o GitOpsConfigSpecOutput) Triggers() GitOpsConfigSpecTriggersArrayOutput {
	return o.ApplyT(func(v GitOpsConfigSpec) []GitOpsConfigSpecTriggers { return v.Triggers }).(GitOpsConfigSpecTriggersArrayOutput)
}

type GitOpsConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpec)(nil)).Elem()
}

func (o GitOpsConfigSpecPtrOutput) ToGitOpsConfigSpecPtrOutput() GitOpsConfigSpecPtrOutput {
	return o
}

func (o GitOpsConfigSpecPtrOutput) ToGitOpsConfigSpecPtrOutputWithContext(ctx context.Context) GitOpsConfigSpecPtrOutput {
	return o
}

func (o GitOpsConfigSpecPtrOutput) Elem() GitOpsConfigSpecOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) GitOpsConfigSpec { return *v }).(GitOpsConfigSpecOutput)
}

// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
func (o GitOpsConfigSpecPtrOutput) ParameterSource() GitOpsConfigSpecParameterSourcePtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *GitOpsConfigSpecParameterSource {
		if v == nil {
			return nil
		}
		return v.ParameterSource
	}).(GitOpsConfigSpecParameterSourcePtrOutput)
}

// ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
func (o GitOpsConfigSpecPtrOutput) ResourceDeletionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceDeletionMode
	}).(pulumi.StringPtrOutput)
}

// ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
func (o GitOpsConfigSpecPtrOutput) ResourceHandlingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceHandlingMode
	}).(pulumi.StringPtrOutput)
}

// ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
func (o GitOpsConfigSpecPtrOutput) ServiceAccountRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(pulumi.StringPtrOutput)
}

// TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
func (o GitOpsConfigSpecPtrOutput) TemplateProcessorArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.TemplateProcessorArgs
	}).(pulumi.StringPtrOutput)
}

// TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
func (o GitOpsConfigSpecPtrOutput) TemplateProcessorImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *string {
		if v == nil {
			return nil
		}
		return v.TemplateProcessorImage
	}).(pulumi.StringPtrOutput)
}

// TemplateSource is the location of the templated resources
func (o GitOpsConfigSpecPtrOutput) TemplateSource() GitOpsConfigSpecTemplateSourcePtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) *GitOpsConfigSpecTemplateSource {
		if v == nil {
			return nil
		}
		return v.TemplateSource
	}).(GitOpsConfigSpecTemplateSourcePtrOutput)
}

// Triggers is an array of triggers that will lanuch this configuration
func (o GitOpsConfigSpecPtrOutput) Triggers() GitOpsConfigSpecTriggersArrayOutput {
	return o.ApplyT(func(v *GitOpsConfigSpec) []GitOpsConfigSpecTriggers {
		if v == nil {
			return nil
		}
		return v.Triggers
	}).(GitOpsConfigSpecTriggersArrayOutput)
}

// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
type GitOpsConfigSpecParameterSource struct {
	ContextDir *string `pulumi:"contextDir"`
	HttpProxy  *string `pulumi:"httpProxy"`
	HttpsProxy *string `pulumi:"httpsProxy"`
	NoProxy    *string `pulumi:"noProxy"`
	Ref        *string `pulumi:"ref"`
	SecretRef  *string `pulumi:"secretRef"`
	Uri        *string `pulumi:"uri"`
}

// GitOpsConfigSpecParameterSourceInput is an input type that accepts GitOpsConfigSpecParameterSourceArgs and GitOpsConfigSpecParameterSourceOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecParameterSourceInput` via:
//
//          GitOpsConfigSpecParameterSourceArgs{...}
type GitOpsConfigSpecParameterSourceInput interface {
	pulumi.Input

	ToGitOpsConfigSpecParameterSourceOutput() GitOpsConfigSpecParameterSourceOutput
	ToGitOpsConfigSpecParameterSourceOutputWithContext(context.Context) GitOpsConfigSpecParameterSourceOutput
}

// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
type GitOpsConfigSpecParameterSourceArgs struct {
	ContextDir pulumi.StringPtrInput `pulumi:"contextDir"`
	HttpProxy  pulumi.StringPtrInput `pulumi:"httpProxy"`
	HttpsProxy pulumi.StringPtrInput `pulumi:"httpsProxy"`
	NoProxy    pulumi.StringPtrInput `pulumi:"noProxy"`
	Ref        pulumi.StringPtrInput `pulumi:"ref"`
	SecretRef  pulumi.StringPtrInput `pulumi:"secretRef"`
	Uri        pulumi.StringPtrInput `pulumi:"uri"`
}

func (GitOpsConfigSpecParameterSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecParameterSource)(nil)).Elem()
}

func (i GitOpsConfigSpecParameterSourceArgs) ToGitOpsConfigSpecParameterSourceOutput() GitOpsConfigSpecParameterSourceOutput {
	return i.ToGitOpsConfigSpecParameterSourceOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecParameterSourceArgs) ToGitOpsConfigSpecParameterSourceOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecParameterSourceOutput)
}

func (i GitOpsConfigSpecParameterSourceArgs) ToGitOpsConfigSpecParameterSourcePtrOutput() GitOpsConfigSpecParameterSourcePtrOutput {
	return i.ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecParameterSourceArgs) ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecParameterSourceOutput).ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(ctx)
}

// GitOpsConfigSpecParameterSourcePtrInput is an input type that accepts GitOpsConfigSpecParameterSourceArgs, GitOpsConfigSpecParameterSourcePtr and GitOpsConfigSpecParameterSourcePtrOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecParameterSourcePtrInput` via:
//
//          GitOpsConfigSpecParameterSourceArgs{...}
//
//  or:
//
//          nil
type GitOpsConfigSpecParameterSourcePtrInput interface {
	pulumi.Input

	ToGitOpsConfigSpecParameterSourcePtrOutput() GitOpsConfigSpecParameterSourcePtrOutput
	ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(context.Context) GitOpsConfigSpecParameterSourcePtrOutput
}

type gitOpsConfigSpecParameterSourcePtrType GitOpsConfigSpecParameterSourceArgs

func GitOpsConfigSpecParameterSourcePtr(v *GitOpsConfigSpecParameterSourceArgs) GitOpsConfigSpecParameterSourcePtrInput {
	return (*gitOpsConfigSpecParameterSourcePtrType)(v)
}

func (*gitOpsConfigSpecParameterSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpecParameterSource)(nil)).Elem()
}

func (i *gitOpsConfigSpecParameterSourcePtrType) ToGitOpsConfigSpecParameterSourcePtrOutput() GitOpsConfigSpecParameterSourcePtrOutput {
	return i.ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(context.Background())
}

func (i *gitOpsConfigSpecParameterSourcePtrType) ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecParameterSourcePtrOutput)
}

// ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
type GitOpsConfigSpecParameterSourceOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecParameterSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecParameterSource)(nil)).Elem()
}

func (o GitOpsConfigSpecParameterSourceOutput) ToGitOpsConfigSpecParameterSourceOutput() GitOpsConfigSpecParameterSourceOutput {
	return o
}

func (o GitOpsConfigSpecParameterSourceOutput) ToGitOpsConfigSpecParameterSourceOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourceOutput {
	return o
}

func (o GitOpsConfigSpecParameterSourceOutput) ToGitOpsConfigSpecParameterSourcePtrOutput() GitOpsConfigSpecParameterSourcePtrOutput {
	return o.ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(context.Background())
}

func (o GitOpsConfigSpecParameterSourceOutput) ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourcePtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *GitOpsConfigSpecParameterSource {
		return &v
	}).(GitOpsConfigSpecParameterSourcePtrOutput)
}
func (o GitOpsConfigSpecParameterSourceOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.ContextDir }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.NoProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecParameterSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GitOpsConfigSpecParameterSourcePtrOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecParameterSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpecParameterSource)(nil)).Elem()
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) ToGitOpsConfigSpecParameterSourcePtrOutput() GitOpsConfigSpecParameterSourcePtrOutput {
	return o
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) ToGitOpsConfigSpecParameterSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecParameterSourcePtrOutput {
	return o
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) Elem() GitOpsConfigSpecParameterSourceOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) GitOpsConfigSpecParameterSource { return *v }).(GitOpsConfigSpecParameterSourceOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.ContextDir
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecParameterSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecParameterSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// TemplateSource is the location of the templated resources
type GitOpsConfigSpecTemplateSource struct {
	ContextDir *string `pulumi:"contextDir"`
	HttpProxy  *string `pulumi:"httpProxy"`
	HttpsProxy *string `pulumi:"httpsProxy"`
	NoProxy    *string `pulumi:"noProxy"`
	Ref        *string `pulumi:"ref"`
	SecretRef  *string `pulumi:"secretRef"`
	Uri        *string `pulumi:"uri"`
}

// GitOpsConfigSpecTemplateSourceInput is an input type that accepts GitOpsConfigSpecTemplateSourceArgs and GitOpsConfigSpecTemplateSourceOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecTemplateSourceInput` via:
//
//          GitOpsConfigSpecTemplateSourceArgs{...}
type GitOpsConfigSpecTemplateSourceInput interface {
	pulumi.Input

	ToGitOpsConfigSpecTemplateSourceOutput() GitOpsConfigSpecTemplateSourceOutput
	ToGitOpsConfigSpecTemplateSourceOutputWithContext(context.Context) GitOpsConfigSpecTemplateSourceOutput
}

// TemplateSource is the location of the templated resources
type GitOpsConfigSpecTemplateSourceArgs struct {
	ContextDir pulumi.StringPtrInput `pulumi:"contextDir"`
	HttpProxy  pulumi.StringPtrInput `pulumi:"httpProxy"`
	HttpsProxy pulumi.StringPtrInput `pulumi:"httpsProxy"`
	NoProxy    pulumi.StringPtrInput `pulumi:"noProxy"`
	Ref        pulumi.StringPtrInput `pulumi:"ref"`
	SecretRef  pulumi.StringPtrInput `pulumi:"secretRef"`
	Uri        pulumi.StringPtrInput `pulumi:"uri"`
}

func (GitOpsConfigSpecTemplateSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecTemplateSource)(nil)).Elem()
}

func (i GitOpsConfigSpecTemplateSourceArgs) ToGitOpsConfigSpecTemplateSourceOutput() GitOpsConfigSpecTemplateSourceOutput {
	return i.ToGitOpsConfigSpecTemplateSourceOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecTemplateSourceArgs) ToGitOpsConfigSpecTemplateSourceOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecTemplateSourceOutput)
}

func (i GitOpsConfigSpecTemplateSourceArgs) ToGitOpsConfigSpecTemplateSourcePtrOutput() GitOpsConfigSpecTemplateSourcePtrOutput {
	return i.ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecTemplateSourceArgs) ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecTemplateSourceOutput).ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(ctx)
}

// GitOpsConfigSpecTemplateSourcePtrInput is an input type that accepts GitOpsConfigSpecTemplateSourceArgs, GitOpsConfigSpecTemplateSourcePtr and GitOpsConfigSpecTemplateSourcePtrOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecTemplateSourcePtrInput` via:
//
//          GitOpsConfigSpecTemplateSourceArgs{...}
//
//  or:
//
//          nil
type GitOpsConfigSpecTemplateSourcePtrInput interface {
	pulumi.Input

	ToGitOpsConfigSpecTemplateSourcePtrOutput() GitOpsConfigSpecTemplateSourcePtrOutput
	ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(context.Context) GitOpsConfigSpecTemplateSourcePtrOutput
}

type gitOpsConfigSpecTemplateSourcePtrType GitOpsConfigSpecTemplateSourceArgs

func GitOpsConfigSpecTemplateSourcePtr(v *GitOpsConfigSpecTemplateSourceArgs) GitOpsConfigSpecTemplateSourcePtrInput {
	return (*gitOpsConfigSpecTemplateSourcePtrType)(v)
}

func (*gitOpsConfigSpecTemplateSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpecTemplateSource)(nil)).Elem()
}

func (i *gitOpsConfigSpecTemplateSourcePtrType) ToGitOpsConfigSpecTemplateSourcePtrOutput() GitOpsConfigSpecTemplateSourcePtrOutput {
	return i.ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(context.Background())
}

func (i *gitOpsConfigSpecTemplateSourcePtrType) ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecTemplateSourcePtrOutput)
}

// TemplateSource is the location of the templated resources
type GitOpsConfigSpecTemplateSourceOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecTemplateSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecTemplateSource)(nil)).Elem()
}

func (o GitOpsConfigSpecTemplateSourceOutput) ToGitOpsConfigSpecTemplateSourceOutput() GitOpsConfigSpecTemplateSourceOutput {
	return o
}

func (o GitOpsConfigSpecTemplateSourceOutput) ToGitOpsConfigSpecTemplateSourceOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourceOutput {
	return o
}

func (o GitOpsConfigSpecTemplateSourceOutput) ToGitOpsConfigSpecTemplateSourcePtrOutput() GitOpsConfigSpecTemplateSourcePtrOutput {
	return o.ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(context.Background())
}

func (o GitOpsConfigSpecTemplateSourceOutput) ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourcePtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *GitOpsConfigSpecTemplateSource {
		return &v
	}).(GitOpsConfigSpecTemplateSourcePtrOutput)
}
func (o GitOpsConfigSpecTemplateSourceOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.ContextDir }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.NoProxy }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTemplateSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GitOpsConfigSpecTemplateSourcePtrOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecTemplateSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigSpecTemplateSource)(nil)).Elem()
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) ToGitOpsConfigSpecTemplateSourcePtrOutput() GitOpsConfigSpecTemplateSourcePtrOutput {
	return o
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) ToGitOpsConfigSpecTemplateSourcePtrOutputWithContext(ctx context.Context) GitOpsConfigSpecTemplateSourcePtrOutput {
	return o
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) Elem() GitOpsConfigSpecTemplateSourceOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) GitOpsConfigSpecTemplateSource { return *v }).(GitOpsConfigSpecTemplateSourceOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.ContextDir
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigSpecTemplateSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigSpecTemplateSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type GitOpsConfigSpecTriggers struct {
	// cron expression only valid with the Periodic type
	Cron *string `pulumi:"cron"`
	// webhook secret only valid with webhook type
	Secret *string `pulumi:"secret"`
	// Type supported types are Change, Periodic, Webhook
	Type *string `pulumi:"type"`
}

// GitOpsConfigSpecTriggersInput is an input type that accepts GitOpsConfigSpecTriggersArgs and GitOpsConfigSpecTriggersOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecTriggersInput` via:
//
//          GitOpsConfigSpecTriggersArgs{...}
type GitOpsConfigSpecTriggersInput interface {
	pulumi.Input

	ToGitOpsConfigSpecTriggersOutput() GitOpsConfigSpecTriggersOutput
	ToGitOpsConfigSpecTriggersOutputWithContext(context.Context) GitOpsConfigSpecTriggersOutput
}

type GitOpsConfigSpecTriggersArgs struct {
	// cron expression only valid with the Periodic type
	Cron pulumi.StringPtrInput `pulumi:"cron"`
	// webhook secret only valid with webhook type
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Type supported types are Change, Periodic, Webhook
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GitOpsConfigSpecTriggersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecTriggers)(nil)).Elem()
}

func (i GitOpsConfigSpecTriggersArgs) ToGitOpsConfigSpecTriggersOutput() GitOpsConfigSpecTriggersOutput {
	return i.ToGitOpsConfigSpecTriggersOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecTriggersArgs) ToGitOpsConfigSpecTriggersOutputWithContext(ctx context.Context) GitOpsConfigSpecTriggersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecTriggersOutput)
}

// GitOpsConfigSpecTriggersArrayInput is an input type that accepts GitOpsConfigSpecTriggersArray and GitOpsConfigSpecTriggersArrayOutput values.
// You can construct a concrete instance of `GitOpsConfigSpecTriggersArrayInput` via:
//
//          GitOpsConfigSpecTriggersArray{ GitOpsConfigSpecTriggersArgs{...} }
type GitOpsConfigSpecTriggersArrayInput interface {
	pulumi.Input

	ToGitOpsConfigSpecTriggersArrayOutput() GitOpsConfigSpecTriggersArrayOutput
	ToGitOpsConfigSpecTriggersArrayOutputWithContext(context.Context) GitOpsConfigSpecTriggersArrayOutput
}

type GitOpsConfigSpecTriggersArray []GitOpsConfigSpecTriggersInput

func (GitOpsConfigSpecTriggersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitOpsConfigSpecTriggers)(nil)).Elem()
}

func (i GitOpsConfigSpecTriggersArray) ToGitOpsConfigSpecTriggersArrayOutput() GitOpsConfigSpecTriggersArrayOutput {
	return i.ToGitOpsConfigSpecTriggersArrayOutputWithContext(context.Background())
}

func (i GitOpsConfigSpecTriggersArray) ToGitOpsConfigSpecTriggersArrayOutputWithContext(ctx context.Context) GitOpsConfigSpecTriggersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigSpecTriggersArrayOutput)
}

type GitOpsConfigSpecTriggersOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecTriggersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigSpecTriggers)(nil)).Elem()
}

func (o GitOpsConfigSpecTriggersOutput) ToGitOpsConfigSpecTriggersOutput() GitOpsConfigSpecTriggersOutput {
	return o
}

func (o GitOpsConfigSpecTriggersOutput) ToGitOpsConfigSpecTriggersOutputWithContext(ctx context.Context) GitOpsConfigSpecTriggersOutput {
	return o
}

// cron expression only valid with the Periodic type
func (o GitOpsConfigSpecTriggersOutput) Cron() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTriggers) *string { return v.Cron }).(pulumi.StringPtrOutput)
}

// webhook secret only valid with webhook type
func (o GitOpsConfigSpecTriggersOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTriggers) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Type supported types are Change, Periodic, Webhook
func (o GitOpsConfigSpecTriggersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigSpecTriggers) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GitOpsConfigSpecTriggersArrayOutput struct{ *pulumi.OutputState }

func (GitOpsConfigSpecTriggersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitOpsConfigSpecTriggers)(nil)).Elem()
}

func (o GitOpsConfigSpecTriggersArrayOutput) ToGitOpsConfigSpecTriggersArrayOutput() GitOpsConfigSpecTriggersArrayOutput {
	return o
}

func (o GitOpsConfigSpecTriggersArrayOutput) ToGitOpsConfigSpecTriggersArrayOutputWithContext(ctx context.Context) GitOpsConfigSpecTriggersArrayOutput {
	return o
}

func (o GitOpsConfigSpecTriggersArrayOutput) Index(i pulumi.IntInput) GitOpsConfigSpecTriggersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitOpsConfigSpecTriggers {
		return vs[0].([]GitOpsConfigSpecTriggers)[vs[1].(int)]
	}).(GitOpsConfigSpecTriggersOutput)
}

type GitOpsConfigStatus struct {
	CompletionTime   *string `pulumi:"completionTime"`
	LastScheduleTime *string `pulumi:"lastScheduleTime"`
	Message          *string `pulumi:"message"`
	StartTime        *string `pulumi:"startTime"`
	State            *string `pulumi:"state"`
}

// GitOpsConfigStatusInput is an input type that accepts GitOpsConfigStatusArgs and GitOpsConfigStatusOutput values.
// You can construct a concrete instance of `GitOpsConfigStatusInput` via:
//
//          GitOpsConfigStatusArgs{...}
type GitOpsConfigStatusInput interface {
	pulumi.Input

	ToGitOpsConfigStatusOutput() GitOpsConfigStatusOutput
	ToGitOpsConfigStatusOutputWithContext(context.Context) GitOpsConfigStatusOutput
}

type GitOpsConfigStatusArgs struct {
	CompletionTime   pulumi.StringPtrInput `pulumi:"completionTime"`
	LastScheduleTime pulumi.StringPtrInput `pulumi:"lastScheduleTime"`
	Message          pulumi.StringPtrInput `pulumi:"message"`
	StartTime        pulumi.StringPtrInput `pulumi:"startTime"`
	State            pulumi.StringPtrInput `pulumi:"state"`
}

func (GitOpsConfigStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigStatus)(nil)).Elem()
}

func (i GitOpsConfigStatusArgs) ToGitOpsConfigStatusOutput() GitOpsConfigStatusOutput {
	return i.ToGitOpsConfigStatusOutputWithContext(context.Background())
}

func (i GitOpsConfigStatusArgs) ToGitOpsConfigStatusOutputWithContext(ctx context.Context) GitOpsConfigStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigStatusOutput)
}

func (i GitOpsConfigStatusArgs) ToGitOpsConfigStatusPtrOutput() GitOpsConfigStatusPtrOutput {
	return i.ToGitOpsConfigStatusPtrOutputWithContext(context.Background())
}

func (i GitOpsConfigStatusArgs) ToGitOpsConfigStatusPtrOutputWithContext(ctx context.Context) GitOpsConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigStatusOutput).ToGitOpsConfigStatusPtrOutputWithContext(ctx)
}

// GitOpsConfigStatusPtrInput is an input type that accepts GitOpsConfigStatusArgs, GitOpsConfigStatusPtr and GitOpsConfigStatusPtrOutput values.
// You can construct a concrete instance of `GitOpsConfigStatusPtrInput` via:
//
//          GitOpsConfigStatusArgs{...}
//
//  or:
//
//          nil
type GitOpsConfigStatusPtrInput interface {
	pulumi.Input

	ToGitOpsConfigStatusPtrOutput() GitOpsConfigStatusPtrOutput
	ToGitOpsConfigStatusPtrOutputWithContext(context.Context) GitOpsConfigStatusPtrOutput
}

type gitOpsConfigStatusPtrType GitOpsConfigStatusArgs

func GitOpsConfigStatusPtr(v *GitOpsConfigStatusArgs) GitOpsConfigStatusPtrInput {
	return (*gitOpsConfigStatusPtrType)(v)
}

func (*gitOpsConfigStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigStatus)(nil)).Elem()
}

func (i *gitOpsConfigStatusPtrType) ToGitOpsConfigStatusPtrOutput() GitOpsConfigStatusPtrOutput {
	return i.ToGitOpsConfigStatusPtrOutputWithContext(context.Background())
}

func (i *gitOpsConfigStatusPtrType) ToGitOpsConfigStatusPtrOutputWithContext(ctx context.Context) GitOpsConfigStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsConfigStatusPtrOutput)
}

type GitOpsConfigStatusOutput struct{ *pulumi.OutputState }

func (GitOpsConfigStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitOpsConfigStatus)(nil)).Elem()
}

func (o GitOpsConfigStatusOutput) ToGitOpsConfigStatusOutput() GitOpsConfigStatusOutput {
	return o
}

func (o GitOpsConfigStatusOutput) ToGitOpsConfigStatusOutputWithContext(ctx context.Context) GitOpsConfigStatusOutput {
	return o
}

func (o GitOpsConfigStatusOutput) ToGitOpsConfigStatusPtrOutput() GitOpsConfigStatusPtrOutput {
	return o.ToGitOpsConfigStatusPtrOutputWithContext(context.Background())
}

func (o GitOpsConfigStatusOutput) ToGitOpsConfigStatusPtrOutputWithContext(ctx context.Context) GitOpsConfigStatusPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *GitOpsConfigStatus {
		return &v
	}).(GitOpsConfigStatusPtrOutput)
}
func (o GitOpsConfigStatusOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *string { return v.LastScheduleTime }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitOpsConfigStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type GitOpsConfigStatusPtrOutput struct{ *pulumi.OutputState }

func (GitOpsConfigStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsConfigStatus)(nil)).Elem()
}

func (o GitOpsConfigStatusPtrOutput) ToGitOpsConfigStatusPtrOutput() GitOpsConfigStatusPtrOutput {
	return o
}

func (o GitOpsConfigStatusPtrOutput) ToGitOpsConfigStatusPtrOutputWithContext(ctx context.Context) GitOpsConfigStatusPtrOutput {
	return o
}

func (o GitOpsConfigStatusPtrOutput) Elem() GitOpsConfigStatusOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) GitOpsConfigStatus { return *v }).(GitOpsConfigStatusOutput)
}

func (o GitOpsConfigStatusPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusPtrOutput) LastScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastScheduleTime
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func (o GitOpsConfigStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsConfigStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GitOpsConfigTypeOutput{})
	pulumi.RegisterOutputType(GitOpsConfigMetadataOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecParameterSourceOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecParameterSourcePtrOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecTemplateSourceOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecTemplateSourcePtrOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecTriggersOutput{})
	pulumi.RegisterOutputType(GitOpsConfigSpecTriggersArrayOutput{})
	pulumi.RegisterOutputType(GitOpsConfigStatusOutput{})
	pulumi.RegisterOutputType(GitOpsConfigStatusPtrOutput{})
}

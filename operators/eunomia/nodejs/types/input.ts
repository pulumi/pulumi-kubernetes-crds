// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace eunomia {
    export namespace v1alpha1 {
        export interface GitOpsConfigSpec {
            /**
             * ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
             */
            parameterSource?: pulumi.Input<inputs.eunomia.v1alpha1.GitOpsConfigSpecParameterSource>;
            /**
             * ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
             */
            resourceDeletionMode?: pulumi.Input<string>;
            /**
             * ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
             */
            resourceHandlingMode?: pulumi.Input<string>;
            /**
             * ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
             */
            serviceAccountRef?: pulumi.Input<string>;
            /**
             * TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
             */
            templateProcessorArgs?: pulumi.Input<string>;
            /**
             * TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
             */
            templateProcessorImage?: pulumi.Input<string>;
            /**
             * TemplateSource is the location of the templated resources
             */
            templateSource?: pulumi.Input<inputs.eunomia.v1alpha1.GitOpsConfigSpecTemplateSource>;
            /**
             * Triggers is an array of triggers that will lanuch this configuration
             */
            triggers?: pulumi.Input<pulumi.Input<inputs.eunomia.v1alpha1.GitOpsConfigSpecTriggers>[]>;
        }

        /**
         * ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
         */
        export interface GitOpsConfigSpecParameterSource {
            contextDir?: pulumi.Input<string>;
            httpProxy?: pulumi.Input<string>;
            httpsProxy?: pulumi.Input<string>;
            noProxy?: pulumi.Input<string>;
            ref?: pulumi.Input<string>;
            secretRef?: pulumi.Input<string>;
            uri?: pulumi.Input<string>;
        }

        /**
         * TemplateSource is the location of the templated resources
         */
        export interface GitOpsConfigSpecTemplateSource {
            contextDir?: pulumi.Input<string>;
            httpProxy?: pulumi.Input<string>;
            httpsProxy?: pulumi.Input<string>;
            noProxy?: pulumi.Input<string>;
            ref?: pulumi.Input<string>;
            secretRef?: pulumi.Input<string>;
            uri?: pulumi.Input<string>;
        }

        export interface GitOpsConfigSpecTriggers {
            /**
             * cron expression only valid with the Periodic type
             */
            cron?: pulumi.Input<string>;
            /**
             * webhook secret only valid with webhook type
             */
            secret?: pulumi.Input<string>;
            /**
             * Type supported types are Change, Periodic, Webhook
             */
            type?: pulumi.Input<string>;
        }

        export interface GitOpsConfigStatus {
            completionTime?: pulumi.Input<string>;
            lastScheduleTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            startTime?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }
    }
}

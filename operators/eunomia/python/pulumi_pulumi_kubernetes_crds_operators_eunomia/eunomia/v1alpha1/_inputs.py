# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GitOpsConfigSpecArgs',
    'GitOpsConfigSpecParameterSourceArgs',
    'GitOpsConfigSpecTemplateSourceArgs',
    'GitOpsConfigSpecTriggersArgs',
    'GitOpsConfigStatusArgs',
]

@pulumi.input_type
class GitOpsConfigSpecArgs:
    def __init__(__self__, *,
                 parameter_source: Optional[pulumi.Input['GitOpsConfigSpecParameterSourceArgs']] = None,
                 resource_deletion_mode: Optional[pulumi.Input[str]] = None,
                 resource_handling_mode: Optional[pulumi.Input[str]] = None,
                 service_account_ref: Optional[pulumi.Input[str]] = None,
                 template_processor_args: Optional[pulumi.Input[str]] = None,
                 template_processor_image: Optional[pulumi.Input[str]] = None,
                 template_source: Optional[pulumi.Input['GitOpsConfigSpecTemplateSourceArgs']] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsConfigSpecTriggersArgs']]]] = None):
        """
        :param pulumi.Input['GitOpsConfigSpecParameterSourceArgs'] parameter_source: ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
        :param pulumi.Input[str] resource_deletion_mode: ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
        :param pulumi.Input[str] resource_handling_mode: ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
        :param pulumi.Input[str] service_account_ref: ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
        :param pulumi.Input[str] template_processor_args: TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
        :param pulumi.Input[str] template_processor_image: TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
        :param pulumi.Input['GitOpsConfigSpecTemplateSourceArgs'] template_source: TemplateSource is the location of the templated resources
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsConfigSpecTriggersArgs']]] triggers: Triggers is an array of triggers that will lanuch this configuration
        """
        if parameter_source is not None:
            pulumi.set(__self__, "parameter_source", parameter_source)
        if resource_deletion_mode is not None:
            pulumi.set(__self__, "resource_deletion_mode", resource_deletion_mode)
        if resource_handling_mode is not None:
            pulumi.set(__self__, "resource_handling_mode", resource_handling_mode)
        if service_account_ref is not None:
            pulumi.set(__self__, "service_account_ref", service_account_ref)
        if template_processor_args is not None:
            pulumi.set(__self__, "template_processor_args", template_processor_args)
        if template_processor_image is not None:
            pulumi.set(__self__, "template_processor_image", template_processor_image)
        if template_source is not None:
            pulumi.set(__self__, "template_source", template_source)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="parameterSource")
    def parameter_source(self) -> Optional[pulumi.Input['GitOpsConfigSpecParameterSourceArgs']]:
        """
        ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
        """
        return pulumi.get(self, "parameter_source")

    @parameter_source.setter
    def parameter_source(self, value: Optional[pulumi.Input['GitOpsConfigSpecParameterSourceArgs']]):
        pulumi.set(self, "parameter_source", value)

    @property
    @pulumi.getter(name="resourceDeletionMode")
    def resource_deletion_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceDeletionMode represents how resource deletion should be handled. Supported values are Retain,Delete,None. Default is Delete
        """
        return pulumi.get(self, "resource_deletion_mode")

    @resource_deletion_mode.setter
    def resource_deletion_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_deletion_mode", value)

    @property
    @pulumi.getter(name="resourceHandlingMode")
    def resource_handling_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceHandlingMode represents how resource creation/update should be handled. Supported values are Apply,Create,Delete,Patch,Replace,None. Default is Apply.
        """
        return pulumi.get(self, "resource_handling_mode")

    @resource_handling_mode.setter
    def resource_handling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_handling_mode", value)

    @property
    @pulumi.getter(name="serviceAccountRef")
    def service_account_ref(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccountRef references to the service account under which the template engine job will run, it must exists in the namespace in which this CR is created
        """
        return pulumi.get(self, "service_account_ref")

    @service_account_ref.setter
    def service_account_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_ref", value)

    @property
    @pulumi.getter(name="templateProcessorArgs")
    def template_processor_args(self) -> Optional[pulumi.Input[str]]:
        """
        TemplateProcessorArgs references to the run time parameters, we can pass additional arguments/flags to the template processor.
        """
        return pulumi.get(self, "template_processor_args")

    @template_processor_args.setter
    def template_processor_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_processor_args", value)

    @property
    @pulumi.getter(name="templateProcessorImage")
    def template_processor_image(self) -> Optional[pulumi.Input[str]]:
        """
        TemplateEngine, the gitops operator config map contains the list of available template engines, the value used here must exist in that list. Identity (i.e. no resource processing) is the default
        """
        return pulumi.get(self, "template_processor_image")

    @template_processor_image.setter
    def template_processor_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_processor_image", value)

    @property
    @pulumi.getter(name="templateSource")
    def template_source(self) -> Optional[pulumi.Input['GitOpsConfigSpecTemplateSourceArgs']]:
        """
        TemplateSource is the location of the templated resources
        """
        return pulumi.get(self, "template_source")

    @template_source.setter
    def template_source(self, value: Optional[pulumi.Input['GitOpsConfigSpecTemplateSourceArgs']]):
        pulumi.set(self, "template_source", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsConfigSpecTriggersArgs']]]]:
        """
        Triggers is an array of triggers that will lanuch this configuration
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsConfigSpecTriggersArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class GitOpsConfigSpecParameterSourceArgs:
    def __init__(__self__, *,
                 context_dir: Optional[pulumi.Input[str]] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 no_proxy: Optional[pulumi.Input[str]] = None,
                 ref: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        ParameterSource is the location of the parameters, only contextDir is mandatory, if other filed are left blank they are assumed to be the same as ParameterSource
        """
        if context_dir is not None:
            pulumi.set(__self__, "context_dir", context_dir)
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="contextDir")
    def context_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_dir")

    @context_dir.setter
    def context_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_dir", value)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter(name="noProxy")
    def no_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_proxy")

    @no_proxy.setter
    def no_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_proxy", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GitOpsConfigSpecTemplateSourceArgs:
    def __init__(__self__, *,
                 context_dir: Optional[pulumi.Input[str]] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 no_proxy: Optional[pulumi.Input[str]] = None,
                 ref: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        TemplateSource is the location of the templated resources
        """
        if context_dir is not None:
            pulumi.set(__self__, "context_dir", context_dir)
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="contextDir")
    def context_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_dir")

    @context_dir.setter
    def context_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_dir", value)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter(name="noProxy")
    def no_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_proxy")

    @no_proxy.setter
    def no_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_proxy", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GitOpsConfigSpecTriggersArgs:
    def __init__(__self__, *,
                 cron: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cron: cron expression only valid with the Periodic type
        :param pulumi.Input[str] secret: webhook secret only valid with webhook type
        :param pulumi.Input[str] type: Type supported types are Change, Periodic, Webhook
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[str]]:
        """
        cron expression only valid with the Periodic type
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        webhook secret only valid with webhook type
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type supported types are Change, Periodic, Webhook
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GitOpsConfigStatusArgs:
    def __init__(__self__, *,
                 completion_time: Optional[pulumi.Input[str]] = None,
                 last_schedule_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if completion_time is not None:
            pulumi.set(__self__, "completion_time", completion_time)
        if last_schedule_time is not None:
            pulumi.set(__self__, "last_schedule_time", last_schedule_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="completionTime")
    def completion_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completion_time")

    @completion_time.setter
    def completion_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completion_time", value)

    @property
    @pulumi.getter(name="lastScheduleTime")
    def last_schedule_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_schedule_time")

    @last_schedule_time.setter
    def last_schedule_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_schedule_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


